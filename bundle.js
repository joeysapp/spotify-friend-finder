(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var $ = require('jquery');
// var cookie = require('cookie');
const uuidv4 = require('uuid/v4');
var emoji = require('node-emoji');
var rn = require('random-name');

// var so = require('stringify-object');
// var moment = require('moment-timezone');
var firebase = require('firebase');
var config = {
  apiKey: "AIzaSyCEqXgSFuRFp0Gb9cGfozy6qBIJz563G4k",
  authDomain: "joeysappgithub.firebaseapp.com",
  databaseURL: "https://joeysappgithub.firebaseio.com",
};

firebase.initializeApp(config);
var db = firebase.database();

class Animal {
	constructor(uuid, name, cookies){
		this.uuid = uuid;
		this.type = intToAvailableAnimals(hashCode(uuid));
		this.bgcolor = intToRGB(hashCode(uuid));
		this.name = name;
		this.cookies = cookies;
	}

	getDiv() {

		var tmp = '<div id=\''+this.uuid+'\' class=\'animal\' style=\'margin:0.5vmin; border: 4px solid black;\'>';
		var stats = '<div class=\'animal stats\'>';
		var name = '<div class=\'animal stats name\'>'+this.name+'</div>';
		var type = '<div class=\'animal stats type\'>the '+this.type+'</div>';
		var weight = (this.cookies + 4)+' lbs'
		var food = '<div class=\'animal stats food\'>'+weight+'</div>';
		var portrait = '<div class=\'animal portrait\'style=\'background-image: url(\"static/icons/'+this.type+'.png\"); background-color:'+this.bgcolor+'\'></div>';
		console.log('getDiv');
		return tmp+stats+name+type+food+'</div>'+portrait+'</div>';
	}
}

var uuid;
var animal;
var animal_dict = {};
var dled = false;

function placeFeed() {
	$('.feed').show();
}

setInterval(placeFeed, 1500);


$(document).ready(() => {

	// First, populate all animals!
	// getAllAnimals((res) => {
	// 	console.log('got all da animals');
	// 	console.log(res);

	// });
	// confirmAndDisplayAnimals();

	$('.feed').click(e => {
		console.log('you fed ur pet a 🍪');
		$('.feed').hide();
		animal_dict[uuid].cookies += 1;
		var new_poundage = animal_dict[uuid].cookies+4+' lbs';
		$('#self.animal .stats .food').text(new_poundage);
		$('#'+uuid+'.animal .stats .food').text(new_poundage);
		writeAnAnimal(animal_dict[uuid], uuid);
	});
	// var fingerprint = require('browser-fingerprint')();
	if (!document.cookie.includes('uuidv4')){
		console.log('Creating new animal');
		uuid = uuidv4();
		document.cookie = 'uuidv4='+uuid;
		// new user. create uuid
		// create animal!!
		var name = rn.first();
		while (name.length > 7){
			name = rn.first();
		}
		var prounoun = 'the';
		animal = new Animal(uuid, name, 0);
		animal_dict[uuid] = animal;
		writeAnAnimal(animal, uuid);
	} else {
		// bring up their animal and highlight it on the grid
		uuid = getCookie('uuidv4');
	}
	getAllAnimals();
	confirmAndDisplayAnimals();
});

function confirmAndDisplayAnimals(){
	if (typeof animal_dict['blob'] !== 'undefined'){
		// woo finally got dem
		for (var key in animal_dict){
			if (key == 'blob'){ continue; }
			var tmp_animal = new Animal(key, animal_dict[key].name, animal_dict[key].cookies);
			if (key == uuid){
				console.log('this is u');
				$('#self.animal .stats .name').html(tmp_animal.name);
				$('#self.animal .stats .type').html('the '+tmp_animal.type);
				$('#self.animal .stats .food').html(tmp_animal.cookies+4+' lbs');
				$('#self.animal .portrait').css('background-color', tmp_animal.bgcolor);
				$('#self.animal .portrait').css('background-image', 'url("static/icons/'+tmp_animal.type+'.png"');
			}
			$('#animals').append(tmp_animal.getDiv());
		}
	} else {
		setTimeout(confirmAndDisplayAnimals, 250);
	}
}


function hashCode(str) { // java String#hashCode
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
       hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
} 

function intToAvailableAnimals(i, callback){
	var animal_list = ['Alligator', 'Anteater', 'Armadillo', 'Auroch', 'Axolotl', 'Badger', 'Bat', 'Beaver', 'Buffalo', 'Camel', 'Capybara', 'Chameleon', 'Cheetah', 'Chinchilla', 'Chipmunk', 'Chupacabra', 'Cormorant', 'Coyote', 'Crow', 'Dingo', 'Dinosaur', 'Dolphin', 'Duck', 'Elephant', 'Ferret', 'Fox', 'Frog', 'Giraffe', 'Gopher', 'Grizzly', 'Hedgehog', 'Hippo', 'Hyena', 'Ibex', 'Ifrit', 'Iguana', 'Jackal', 'Kangaroo', 'Koala', 'Kraken', 'Lemur', 'Leopard', 'Liger', 'Llama', 'Manatee', 'Mink', 'Monkey', 'Moose', 'Narwhal', 'Orangutan', 'Otter', 'Panda', 'Penguin', 'Platypus', 'Pumpkin', 'Python', 'Quagga', 'Rabbit', 'Raccoon', 'Rhino', 'Sheep', 'Shrew', 'Squirrel', 'Tiger', 'Turtle', 'Walrus', 'Wolf', 'Wolverine', 'Wombat'];
	var idx = Math.abs(i % animal_list.length);
	return animal_list[idx];
}

function intToRGB(i){
    var c = (i & 0x00FFFFFF)
        .toString(16)
        .toUpperCase();
    return "00000".substring(0, 6 - c.length) + c;
}

function getAllAnimals(){
	var all_keys = firebase.database().ref('animals/').once('value').then(function(snapshot){
		snapshot.forEach(child => {
			var snapshot_result = child.val();
			var tmp_uuid = snapshot_result.uuid;
			animal_dict[tmp_uuid] = snapshot_result;
			animal_dict['blob'] = '1';
			// console.log(snapshot_result);
			// ^ this is now the animal!
			// console.log('getAllAnimals()-> this.animal_dict:');
		});
	});
}

function writeAnAnimal(obj, key) {
	var new_key = firebase.database().ref('animals/').push().key;
	var updates = {};
	updates[key] = obj;
	return firebase.database().ref('animals/').update(updates);

}

function getCookie(name) {
  var value = "; " + document.cookie;
  var parts = value.split("; " + name + "=");
  if (parts.length == 2) return parts.pop().split(";").shift();
}

},{"firebase":162,"jquery":165,"node-emoji":167,"random-name":172,"uuid/v4":179}],2:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var firebaseApp_1 = require("./src/firebaseApp");
exports.firebase = firebaseApp_1.createFirebaseNamespace();
exports.default = exports.firebase;




},{"./src/firebaseApp":3}],3:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
// An array to capture listeners before the true auth functions
// exist
var tokenListeners = [];
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, name, firebase_) {
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.services_ = {};
        this.name_ = name;
        this.options_ = util_1.deepCopy(options);
        this.INTERNAL = {
            getUid: function () { return null; },
            getToken: function () { return Promise.resolve(null); },
            addAuthTokenListener: function (callback) {
                tokenListeners.push(callback);
                // Make sure callback is called, asynchronously, in the absence of the auth module
                setTimeout(function () { return callback(null); }, 0);
            },
            removeAuthTokenListener: function (callback) {
                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });
            }
        };
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            var services = [];
            Object.keys(_this.services_).forEach(function (serviceKey) {
                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
                    services.push(_this.services_[serviceKey][instanceKey]);
                });
            });
            return Promise.all(services.map(function (service) {
                return service.INTERNAL.delete();
            }));
        })
            .then(function () {
            _this.isDeleted_ = true;
            _this.services_ = {};
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage is the only one that is leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        this.checkDestroyed_();
        if (!this.services_[name]) {
            this.services_[name] = {};
        }
        if (!this.services_[name][instanceIdentifier]) {
            /**
             * If a custom instance has been defined (i.e. not '[DEFAULT]')
             * then we will pass that instance on, otherwise we pass `null`
             */
            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
                ? instanceIdentifier
                : undefined;
            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
            this.services_[name][instanceIdentifier] = service;
        }
        return this.services_[name][instanceIdentifier];
    };
    /**
     * Callback function used to extend an App instance at the time
     * of service instance creation.
     */
    FirebaseAppImpl.prototype.extendApp = function (props) {
        var _this = this;
        // Copy the object onto the FirebaseAppImpl prototype
        util_1.deepExtend(this, props);
        /**
         * If the app has overwritten the addAuthTokenListener stub, forward
         * the active token listeners on to the true fxn.
         *
         * TODO: This function is required due to our current module
         * structure. Once we are able to rely strictly upon a single module
         * implementation, this code should be refactored and Auth should
         * provide these stubs and the upgrade logic
         */
        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
            tokenListeners.forEach(function (listener) {
                _this.INTERNAL.addAuthTokenListener(listener);
            });
            tokenListeners = [];
        }
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            error('app-deleted', { name: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var apps_ = {};
    var factories = {};
    var appHooks = {};
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        __esModule: true,
        initializeApp: initializeApp,
        app: app,
        apps: null,
        Promise: Promise,
        SDK_VERSION: '4.10.1',
        INTERNAL: {
            registerService: registerService,
            createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: util_1.createSubscribe,
            ErrorFactory: util_1.ErrorFactory,
            removeApp: removeApp,
            factories: factories,
            useAsService: useAsService,
            Promise: Promise,
            deepExtend: util_1.deepExtend
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    util_1.patchProperty(namespace, 'default', namespace);
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        var app = apps_[name];
        callAppHooks(app, 'delete');
        delete apps_[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!contains(apps_, name)) {
            error('no-app', { name: name });
        }
        return apps_[name];
    }
    util_1.patchProperty(app, 'App', FirebaseAppImpl);
    /**
     * Create a new App instance (name must be unique).
     */
    function initializeApp(options, name) {
        if (name === undefined) {
            name = DEFAULT_ENTRY_NAME;
        }
        else {
            if (typeof name !== 'string' || name === '') {
                error('bad-app-name', { name: name + '' });
            }
        }
        if (contains(apps_, name)) {
            error('duplicate-app', { name: name });
        }
        var app = new FirebaseAppImpl(options, name, namespace);
        apps_[name] = app;
        callAppHooks(app, 'create');
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps_).map(function (name) { return apps_[name]; });
    }
    /*
     * Register a Firebase Service.
     *
     * firebase.INTERNAL.registerService()
     *
     * TODO: Implement serviceProperties.
     */
    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
        // Cannot re-register a service that already exists
        if (factories[name]) {
            error('duplicate-service', { name: name });
        }
        // Capture the service factory for later service instantiation
        factories[name] = createService;
        // Capture the appHook, if passed
        if (appHook) {
            appHooks[name] = appHook;
            // Run the **new** app hook on all existing apps
            getApps().forEach(function (app) {
                appHook('create', app);
            });
        }
        // The Service namespace is an accessor function ...
        var serviceNamespace = function (appArg) {
            if (appArg === void 0) { appArg = app(); }
            if (typeof appArg[name] !== 'function') {
                // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                error('invalid-app-argument', { name: name });
            }
            // Forward service instance lookup to the FirebaseApp.
            return appArg[name]();
        };
        // ... and a container for service-level properties.
        if (serviceProperties !== undefined) {
            util_1.deepExtend(serviceNamespace, serviceProperties);
        }
        // Monkey-patch the serviceNamespace onto the firebase namespace
        namespace[name] = serviceNamespace;
        // Patch the FirebaseAppImpl prototype
        FirebaseAppImpl.prototype[name] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var serviceFxn = this._getService.bind(this, name);
            return serviceFxn.apply(this, allowMultipleInstances ? args : []);
        };
        return serviceNamespace;
    }
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        util_1.deepExtend(namespace, props);
    }
    function callAppHooks(app, eventName) {
        Object.keys(factories).forEach(function (serviceName) {
            // Ignore virtual services
            var factoryName = useAsService(app, serviceName);
            if (factoryName === null) {
                return;
            }
            if (appHooks[factoryName]) {
                appHooks[factoryName](eventName, app);
            }
        });
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        var options = app.options;
        return useService;
    }
    return namespace;
}
exports.createFirebaseNamespace = createFirebaseNamespace;
function error(code, args) {
    throw appErrors.create(code, args);
}
// TypeScript does not support non-string indexes!
// let errors: {[code: AppError: string} = {
var errors = {
    'no-app': "No Firebase App '{$name}' has been created - " +
        'call Firebase App.initializeApp()',
    'bad-app-name': "Illegal App name: '{$name}",
    'duplicate-app': "Firebase App named '{$name}' already exists",
    'app-deleted': "Firebase App named '{$name}' already deleted",
    'duplicate-service': "Firebase service named '{$name}' already registered",
    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +
        'account is only allowed in a Node.js environment. On client ' +
        'devices, you should instead initialize the SDK with an api key and ' +
        'auth domain',
    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +
        'Firebase App instance.'
};
var appErrors = new util_1.ErrorFactory('app', 'Firebase', errors);




},{"@firebase/util":142}],4:[function(require,module,exports){
(function (global){
(function() {
  var firebase = require('@firebase/app').default;
  var g,aa=aa||{},k=this;function m(a){return"string"==typeof a}function ba(a){return"boolean"==typeof a}function ca(){}
function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return null===a}function fa(a){return"array"==da(a)}function ha(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function n(a){return"function"==da(a)}function q(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var ia="closure_uid_"+(1E9*Math.random()>>>0),ja=0;function ka(a,b,c){return a.call.apply(a.bind,arguments)}
function la(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function r(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?r=ka:r=la;return r.apply(null,arguments)}
function ma(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}var na=Date.now||function(){return+new Date};function t(a,b){function c(){}c.prototype=b.prototype;a.lb=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.$c=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};function oa(a){a.prototype.then=a.prototype.then;a.prototype.$goog_Thenable=!0}function pa(a){if(!a)return!1;try{return!!a.$goog_Thenable}catch(b){return!1}};function u(a){if(Error.captureStackTrace)Error.captureStackTrace(this,u);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a))}t(u,Error);u.prototype.name="CustomError";function qa(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");u.call(this,c+a[d])}t(qa,u);qa.prototype.name="AssertionError";function ra(a,b){throw new qa("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1));};function sa(a,b){this.c=a;this.f=b;this.b=0;this.a=null}sa.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function ta(a,b){a.f(b);100>a.b&&(a.b++,b.next=a.a,a.a=b)};function ua(){this.b=this.a=null}var wa=new sa(function(){return new va},function(a){a.reset()});ua.prototype.add=function(a,b){var c=wa.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function xa(){var a=ya,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function va(){this.next=this.b=this.a=null}va.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};va.prototype.reset=function(){this.next=this.b=this.a=null};var za=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(m(a))return m(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},v=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};
function Aa(a,b){var c=a.length,d=m(a)?a.split(""):a;for(--c;0<=c;--c)c in d&&b.call(void 0,d[c],c,a)}
var Ba=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e=m(a)?a.split(""):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},Ca=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return!0;return!1};
function Da(a){a:{var b=Ea;for(var c=a.length,d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:m(a)?a.charAt(b):a[b]}function Fa(a,b){return 0<=za(a,b)}function Ga(a,b){b=za(a,b);var c;(c=0<=b)&&Array.prototype.splice.call(a,b,1);return c}function Ha(a,b){var c=0;Aa(a,function(d,e){b.call(void 0,d,e,a)&&1==Array.prototype.splice.call(a,e,1).length&&c++})}function Ia(a){return Array.prototype.concat.apply([],arguments)}
function Ja(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};function Ka(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")}var La=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};
function Ma(a){if(!Na.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(Oa,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(Pa,"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(Qa,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(Ra,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(Sa,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(Ta,"&#0;"));return a}var Oa=/&/g,Pa=/</g,Qa=/>/g,Ra=/"/g,Sa=/'/g,Ta=/\x00/g,Na=/[\x00&<>"']/;function w(a,b){return-1!=a.indexOf(b)}function Ua(a,b){return a<b?-1:a>b?1:0};var Va;a:{var Wa=k.navigator;if(Wa){var Xa=Wa.userAgent;if(Xa){Va=Xa;break a}}Va=""}function x(a){return w(Va,a)};function Ya(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function Za(a){for(var b in a)return!1;return!0}function $a(a){var b={},c;for(c in a)b[c]=a[c];return b}var ab="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function bb(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ab.length;f++)c=ab[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function cb(a){k.setTimeout(function(){throw a;},0)}var db;
function eb(){var a=k.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!x("Presto")&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow;a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+"//"+b.location.host;a=r(function(a){if(("*"==d||a.origin==d)&&a.data==
c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!x("Trident")&&!x("MSIE")){var b=new a,c={},d=c;b.port1.onmessage=function(){if(void 0!==c.next){c=c.next;var a=c.rb;c.rb=null;a()}};return function(a){d.next={rb:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");
b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){k.setTimeout(a,0)}};function fb(a,b){gb||hb();ib||(gb(),ib=!0);ya.add(a,b)}var gb;function hb(){if(-1!=String(k.Promise).indexOf("[native code]")){var a=k.Promise.resolve(void 0);gb=function(){a.then(jb)}}else gb=function(){var a=jb;!n(k.setImmediate)||k.Window&&k.Window.prototype&&!x("Edge")&&k.Window.prototype.setImmediate==k.setImmediate?(db||(db=eb()),db(a)):k.setImmediate(a)}}var ib=!1,ya=new ua;function jb(){for(var a;a=xa();){try{a.a.call(a.b)}catch(b){cb(b)}ta(wa,a)}ib=!1};function y(a,b){this.a=kb;this.i=void 0;this.f=this.b=this.c=null;this.g=this.h=!1;if(a!=ca)try{var c=this;a.call(b,function(a){lb(c,mb,a)},function(a){if(!(a instanceof nb))try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}lb(c,ob,a)})}catch(d){lb(this,ob,d)}}var kb=0,mb=2,ob=3;function pb(){this.next=this.f=this.b=this.g=this.a=null;this.c=!1}pb.prototype.reset=function(){this.f=this.b=this.g=this.a=null;this.c=!1};var qb=new sa(function(){return new pb},function(a){a.reset()});
function rb(a,b,c){var d=qb.get();d.g=a;d.b=b;d.f=c;return d}function z(a){if(a instanceof y)return a;var b=new y(ca);lb(b,mb,a);return b}function A(a){return new y(function(b,c){c(a)})}function sb(a,b,c){tb(a,b,c,null)||fb(ma(b,a))}function ub(a){return new y(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c){d--;e[a]=c;0==d&&b(e)},h=function(a){c(a)},l=0,p;l<a.length;l++)p=a[l],sb(p,ma(f,l),h);else b(e)})}
function vb(a){return new y(function(b){var c=a.length,d=[];if(c)for(var e=function(a,e,f){c--;d[a]=e?{Zb:!0,value:f}:{Zb:!1,reason:f};0==c&&b(d)},f=0,h;f<a.length;f++)h=a[f],sb(h,ma(e,f,!0),ma(e,f,!1));else b(d)})}y.prototype.then=function(a,b,c){return wb(this,n(a)?a:null,n(b)?b:null,c)};oa(y);g=y.prototype;g.ga=function(a,b){a=rb(a,a,b);a.c=!0;xb(this,a);return this};g.o=function(a,b){return wb(this,null,a,b)};g.cancel=function(a){this.a==kb&&fb(function(){var b=new nb(a);yb(this,b)},this)};
function yb(a,b){if(a.a==kb)if(a.c){var c=a.c;if(c.b){for(var d=0,e=null,f=null,h=c.b;h&&(h.c||(d++,h.a==a&&(e=h),!(e&&1<d)));h=h.next)e||(f=h);e&&(c.a==kb&&1==d?yb(c,b):(f?(d=f,d.next==c.f&&(c.f=d),d.next=d.next.next):zb(c),Ab(c,e,ob,b)))}a.c=null}else lb(a,ob,b)}function xb(a,b){a.b||a.a!=mb&&a.a!=ob||Bb(a);a.f?a.f.next=b:a.b=b;a.f=b}
function wb(a,b,c,d){var e=rb(null,null,null);e.a=new y(function(a,h){e.g=b?function(c){try{var e=b.call(d,c);a(e)}catch(E){h(E)}}:a;e.b=c?function(b){try{var e=c.call(d,b);void 0===e&&b instanceof nb?h(b):a(e)}catch(E){h(E)}}:h});e.a.c=a;xb(a,e);return e.a}g.Jc=function(a){this.a=kb;lb(this,mb,a)};g.Kc=function(a){this.a=kb;lb(this,ob,a)};
function lb(a,b,c){a.a==kb&&(a===c&&(b=ob,c=new TypeError("Promise cannot resolve to itself")),a.a=1,tb(c,a.Jc,a.Kc,a)||(a.i=c,a.a=b,a.c=null,Bb(a),b!=ob||c instanceof nb||Cb(a,c)))}function tb(a,b,c,d){if(a instanceof y)return xb(a,rb(b||ca,c||null,d)),!0;if(pa(a))return a.then(b,c,d),!0;if(q(a))try{var e=a.then;if(n(e))return Db(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return!1}
function Db(a,b,c,d,e){function f(a){l||(l=!0,d.call(e,a))}function h(a){l||(l=!0,c.call(e,a))}var l=!1;try{b.call(a,h,f)}catch(p){f(p)}}function Bb(a){a.h||(a.h=!0,fb(a.Ub,a))}function zb(a){var b=null;a.b&&(b=a.b,a.b=b.next,b.next=null);a.b||(a.f=null);return b}g.Ub=function(){for(var a;a=zb(this);)Ab(this,a,this.a,this.i);this.h=!1};
function Ab(a,b,c,d){if(c==ob&&b.b&&!b.c)for(;a&&a.g;a=a.c)a.g=!1;if(b.a)b.a.c=null,Eb(b,c,d);else try{b.c?b.g.call(b.f):Eb(b,c,d)}catch(e){Fb.call(null,e)}ta(qb,b)}function Eb(a,b,c){b==mb?a.g.call(a.f,c):a.b&&a.b.call(a.f,c)}function Cb(a,b){a.g=!0;fb(function(){a.g&&Fb.call(null,b)})}var Fb=cb;function nb(a){u.call(this,a)}t(nb,u);nb.prototype.name="cancel";function Gb(){0!=Hb&&(Ib[this[ia]||(this[ia]=++ja)]=this);this.pa=this.pa;this.oa=this.oa}var Hb=0,Ib={};Gb.prototype.pa=!1;function Jb(a){if(!a.pa&&(a.pa=!0,a.ua(),0!=Hb)){var b=a[ia]||(a[ia]=++ja);if(0!=Hb&&a.oa&&0<a.oa.length)throw Error(a+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete Ib[b]}}Gb.prototype.ua=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};function Kb(a){Kb[" "](a);return a}Kb[" "]=ca;function Lb(a,b){var c=Mb;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var Nb=x("Opera"),B=x("Trident")||x("MSIE"),Ob=x("Edge"),Pb=Ob||B,Qb=x("Gecko")&&!(w(Va.toLowerCase(),"webkit")&&!x("Edge"))&&!(x("Trident")||x("MSIE"))&&!x("Edge"),Rb=w(Va.toLowerCase(),"webkit")&&!x("Edge");function Sb(){var a=k.document;return a?a.documentMode:void 0}var Tb;
a:{var Ub="",Vb=function(){var a=Va;if(Qb)return/rv:([^\);]+)(\)|;)/.exec(a);if(Ob)return/Edge\/([\d\.]+)/.exec(a);if(B)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Rb)return/WebKit\/(\S+)/.exec(a);if(Nb)return/(?:Version)[ \/]?(\S+)/.exec(a)}();Vb&&(Ub=Vb?Vb[1]:"");if(B){var Wb=Sb();if(null!=Wb&&Wb>parseFloat(Ub)){Tb=String(Wb);break a}}Tb=Ub}var Mb={};
function Xb(a){return Lb(a,function(){for(var b=0,c=La(String(Tb)).split("."),d=La(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||"",l=d[f]||"";do{h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];l=/(\d*)(\D*)(.*)/.exec(l)||["","","",""];if(0==h[0].length&&0==l[0].length)break;b=Ua(0==h[1].length?0:parseInt(h[1],10),0==l[1].length?0:parseInt(l[1],10))||Ua(0==h[2].length,0==l[2].length)||Ua(h[2],l[2]);h=h[3];l=l[3]}while(0==b)}return 0<=b})}var Yb;var Zb=k.document;
Yb=Zb&&B?Sb()||("CSS1Compat"==Zb.compatMode?parseInt(Tb,10):5):void 0;var $b=Object.freeze||function(a){return a};var ac=!B||9<=Number(Yb),bc=B&&!Xb("9"),cc=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});k.addEventListener("test",ca,b);k.removeEventListener("test",ca,b);return a}();function C(a,b){this.type=a;this.b=this.target=b;this.Eb=!0}C.prototype.c=function(){this.Eb=!1};function dc(a,b){C.call(this,a?a.type:"");this.relatedTarget=this.b=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.a=null;if(a){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.b=b;if(b=a.relatedTarget){if(Qb){a:{try{Kb(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=
a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;null===d?(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=m(a.pointerType)?a.pointerType:ec[a.pointerType]||"";this.a=a;a.defaultPrevented&&this.c()}}t(dc,C);var ec=$b({2:"touch",3:"pen",4:"mouse"});dc.prototype.c=function(){dc.lb.c.call(this);var a=this.a;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,bc)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};dc.prototype.g=function(){return this.a};var fc="closure_listenable_"+(1E6*Math.random()|0),hc=0;function ic(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.La=e;this.key=++hc;this.ma=this.Ha=!1}function jc(a){a.ma=!0;a.listener=null;a.proxy=null;a.src=null;a.La=null};function kc(a){this.src=a;this.a={};this.b=0}kc.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=lc(a,b,d,e);-1<h?(b=a[h],c||(b.Ha=!1)):(b=new ic(b,this.src,f,!!d,e),b.Ha=c,a.push(b));return b};function mc(a,b){var c=b.type;c in a.a&&Ga(a.a[c],b)&&(jc(b),0==a.a[c].length&&(delete a.a[c],a.b--))}function lc(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ma&&f.listener==b&&f.capture==!!c&&f.La==d)return e}return-1};var nc="closure_lm_"+(1E6*Math.random()|0),oc={},pc=0;function qc(a,b,c,d,e){if(d&&d.once)rc(a,b,c,d,e);else if(fa(b))for(var f=0;f<b.length;f++)qc(a,b[f],c,d,e);else c=sc(c),a&&a[fc]?tc(a,b,c,q(d)?!!d.capture:!!d,e):uc(a,b,c,!1,d,e)}
function uc(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=q(e)?!!e.capture:!!e,l=vc(a);l||(a[nc]=l=new kc(a));c=l.add(b,c,d,h,f);if(!c.proxy){d=wc();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)cc||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(xc(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");pc++}}
function wc(){var a=yc,b=ac?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function rc(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)rc(a,b[f],c,d,e);else c=sc(c),a&&a[fc]?zc(a,b,c,q(d)?!!d.capture:!!d,e):uc(a,b,c,!0,d,e)}
function D(a,b,c,d,e){if(fa(b))for(var f=0;f<b.length;f++)D(a,b[f],c,d,e);else(d=q(d)?!!d.capture:!!d,c=sc(c),a&&a[fc])?(a=a.u,b=String(b).toString(),b in a.a&&(f=a.a[b],c=lc(f,c,d,e),-1<c&&(jc(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=vc(a))&&(b=a.a[b.toString()],a=-1,b&&(a=lc(b,c,d,e)),(c=-1<a?b[a]:null)&&Ac(c))}
function Ac(a){if("number"!=typeof a&&a&&!a.ma){var b=a.src;if(b&&b[fc])mc(b.u,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(xc(c),d):b.addListener&&b.removeListener&&b.removeListener(d);pc--;(c=vc(b))?(mc(c,a),0==c.b&&(c.src=null,b[nc]=null)):jc(a)}}}function xc(a){return a in oc?oc[a]:oc[a]="on"+a}
function Bc(a,b,c,d){var e=!0;if(a=vc(a))if(b=a.a[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.ma&&(f=Cc(f,d),e=e&&!1!==f)}return e}function Cc(a,b){var c=a.listener,d=a.La||a.src;a.Ha&&Ac(a);return c.call(d,b)}
function yc(a,b){if(a.ma)return!0;if(!ac){if(!b)a:{b=["window","event"];for(var c=k,d=0;d<b.length;d++)if(c=c[b[d]],null==c){b=null;break a}b=c}d=b;b=new dc(d,this);c=!0;if(!(0>d.keyCode||void 0!=d.returnValue)){a:{var e=!1;if(0==d.keyCode)try{d.keyCode=-1;break a}catch(h){e=!0}if(e||void 0==d.returnValue)d.returnValue=!0}d=[];for(e=b.b;e;e=e.parentNode)d.push(e);a=a.type;for(e=d.length-1;0<=e;e--){b.b=d[e];var f=Bc(d[e],a,!0,b);c=c&&f}for(e=0;e<d.length;e++)b.b=d[e],f=Bc(d[e],a,!1,b),c=c&&f}return c}return Cc(a,
new dc(b,this))}function vc(a){a=a[nc];return a instanceof kc?a:null}var Dc="__closure_events_fn_"+(1E9*Math.random()>>>0);function sc(a){if(n(a))return a;a[Dc]||(a[Dc]=function(b){return a.handleEvent(b)});return a[Dc]};function F(){Gb.call(this);this.u=new kc(this);this.Mb=this;this.Ta=null}t(F,Gb);F.prototype[fc]=!0;F.prototype.addEventListener=function(a,b,c,d){qc(this,a,b,c,d)};F.prototype.removeEventListener=function(a,b,c,d){D(this,a,b,c,d)};
F.prototype.dispatchEvent=function(a){var b,c=this.Ta;if(c)for(b=[];c;c=c.Ta)b.push(c);c=this.Mb;var d=a.type||a;if(m(a))a=new C(a,c);else if(a instanceof C)a.target=a.target||c;else{var e=a;a=new C(d,c);bb(a,e)}e=!0;if(b)for(var f=b.length-1;0<=f;f--){var h=a.b=b[f];e=Ec(h,d,!0,a)&&e}h=a.b=c;e=Ec(h,d,!0,a)&&e;e=Ec(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.b=b[f],e=Ec(h,d,!1,a)&&e;return e};
F.prototype.ua=function(){F.lb.ua.call(this);if(this.u){var a=this.u,b=0,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)++b,jc(d[e]);delete a.a[c];a.b--}}this.Ta=null};function tc(a,b,c,d,e){a.u.add(String(b),c,!1,d,e)}function zc(a,b,c,d,e){a.u.add(String(b),c,!0,d,e)}
function Ec(a,b,c,d){b=a.u.a[String(b)];if(!b)return!0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.ma&&h.capture==c){var l=h.listener,p=h.La||h.src;h.Ha&&mc(a.u,h);e=!1!==l.call(p,d)&&e}}return e&&0!=d.Eb};function Fc(a,b,c){if(n(a))c&&(a=r(a,c));else if(a&&"function"==typeof a.handleEvent)a=r(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)}function Gc(a){var b=null;return(new y(function(c,d){b=Fc(function(){c(void 0)},a);-1==b&&d(Error("Failed to schedule timer."))})).o(function(a){k.clearTimeout(b);throw a;})};function Ic(a){if(a.R&&"function"==typeof a.R)return a.R();if(m(a))return a.split("");if(ha(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function Jc(a){if(a.T&&"function"==typeof a.T)return a.T();if(!a.R||"function"!=typeof a.R){if(ha(a)||m(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(var d in a)b[c++]=d;return b}}
function Kc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ha(a)||m(a))v(a,b,void 0);else for(var c=Jc(a),d=Ic(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)};function Lc(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a)if(a instanceof Lc)for(c=a.T(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d])}g=Lc.prototype;g.R=function(){Mc(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.T=function(){Mc(this);return this.a.concat()};
g.clear=function(){this.b={};this.c=this.a.length=0};function Mc(a){if(a.c!=a.a.length){for(var b=0,c=0;b<a.a.length;){var d=a.a[b];Nc(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],Nc(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return Nc(this.b,a)?this.b[a]:b};g.set=function(a,b){Nc(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};
g.forEach=function(a,b){for(var c=this.T(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function Nc(a,b){return Object.prototype.hasOwnProperty.call(a,b)};var Oc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Pc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"")}}};function Qc(a,b){this.b=this.l=this.c="";this.i=null;this.h=this.g="";this.f=!1;if(a instanceof Qc){this.f=void 0!==b?b:a.f;Rc(this,a.c);this.l=a.l;this.b=a.b;Sc(this,a.i);this.g=a.g;b=a.a;var c=new Tc;c.c=b.c;b.a&&(c.a=new Lc(b.a),c.b=b.b);Uc(this,c);this.h=a.h}else a&&(c=String(a).match(Oc))?(this.f=!!b,Rc(this,c[1]||"",!0),this.l=Vc(c[2]||""),this.b=Vc(c[3]||"",!0),Sc(this,c[4]),this.g=Vc(c[5]||"",!0),Uc(this,c[6]||"",!0),this.h=Vc(c[7]||"")):(this.f=!!b,this.a=new Tc(null,this.f))}
Qc.prototype.toString=function(){var a=[],b=this.c;b&&a.push(Wc(b,Xc,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.l)&&a.push(Wc(b,Xc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.i,null!=c&&a.push(":",String(c));if(c=this.g)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Wc(c,"/"==c.charAt(0)?Yc:Zc,!0));(c=this.a.toString())&&a.push("?",c);(c=this.h)&&a.push("#",Wc(c,$c));return a.join("")};
function Rc(a,b,c){a.c=c?Vc(b,!0):b;a.c&&(a.c=a.c.replace(/:$/,""))}function Sc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.i=b}else a.i=null}function Uc(a,b,c){b instanceof Tc?(a.a=b,ad(a.a,a.f)):(c||(b=Wc(b,bd)),a.a=new Tc(b,a.f))}function G(a,b,c){a.a.set(b,c)}function cd(a,b){return a.a.get(b)}function dd(a){return a instanceof Qc?new Qc(a):new Qc(a,void 0)}function ed(a,b){var c=new Qc(null,void 0);Rc(c,"https");a&&(c.b=a);b&&(c.g=b);return c}
function Vc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Wc(a,b,c){return m(a)?(a=encodeURI(a).replace(b,fd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function fd(a){a=a.charCodeAt(0);return"%"+(a>>4&15).toString(16)+(a&15).toString(16)}var Xc=/[#\/\?@]/g,Zc=/[#\?:]/g,Yc=/[#\?]/g,bd=/[#\?@]/g,$c=/#/g;function Tc(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}
function gd(a){a.a||(a.a=new Lc,a.b=0,a.c&&Pc(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c)}))}function hd(a){var b=Jc(a);if("undefined"==typeof b)throw Error("Keys are undefined");var c=new Tc(null,void 0);a=Ic(a);for(var d=0;d<b.length;d++){var e=b[d],f=a[d];fa(f)?id(c,e,f):c.add(e,f)}return c}g=Tc.prototype;g.add=function(a,b){gd(this);this.c=null;a=jd(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};
function kd(a,b){gd(a);b=jd(a,b);Nc(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,a=a.a,Nc(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&Mc(a)))}g.clear=function(){this.a=this.c=null;this.b=0};function ld(a,b){gd(a);b=jd(a,b);return Nc(a.a.b,b)}g.forEach=function(a,b){gd(this);this.a.forEach(function(c,d){v(c,function(c){a.call(b,c,d,this)},this)},this)};g.T=function(){gd(this);for(var a=this.a.R(),b=this.a.T(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
g.R=function(a){gd(this);var b=[];if(m(a))ld(this,a)&&(b=Ia(b,this.a.get(jd(this,a))));else{a=this.a.R();for(var c=0;c<a.length;c++)b=Ia(b,a[c])}return b};g.set=function(a,b){gd(this);this.c=null;a=jd(this,a);ld(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){a=a?this.R(a):[];return 0<a.length?String(a[0]):b};function id(a,b,c){kd(a,b);0<c.length&&(a.c=null,a.a.set(jd(a,b),Ja(c)),a.b+=c.length)}
g.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var a=[],b=this.a.T(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.R(d);for(var f=0;f<d.length;f++){var h=e;""!==d[f]&&(h+="="+encodeURIComponent(String(d[f])));a.push(h)}}return this.c=a.join("&")};function jd(a,b){b=String(b);a.f&&(b=b.toLowerCase());return b}function ad(a,b){b&&!a.f&&(gd(a),a.c=null,a.a.forEach(function(a,b){var c=b.toLowerCase();b!=c&&(kd(this,b),id(this,c,a))},a));a.f=b};var md=!B||9<=Number(Yb);function nd(){this.a="";this.b=od}nd.prototype.la=!0;nd.prototype.ja=function(){return this.a};nd.prototype.toString=function(){return"Const{"+this.a+"}"};function pd(a){if(a instanceof nd&&a.constructor===nd&&a.b===od)return a.a;ra("expected object of type Const, got '"+a+"'");return"type_error:Const"}var od={};function qd(a){var b=new nd;b.a=a;return b}qd("");function rd(){this.a="";this.b=sd}rd.prototype.la=!0;rd.prototype.ja=function(){return this.a};rd.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};function td(a){if(a instanceof rd&&a.constructor===rd&&a.b===sd)return a.a;ra("expected object of type TrustedResourceUrl, got '"+a+"' of type "+da(a));return"type_error:TrustedResourceUrl"}
function ud(a,b){var c=pd(a);if(!vd.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);a=c.replace(wd,function(a,e){if(!Object.prototype.hasOwnProperty.call(b,e))throw Error('Found marker, "'+e+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));a=b[e];return a instanceof nd?pd(a):encodeURIComponent(String(a))});return xd(a)}var wd=/%{(\w+)}/g,vd=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,sd={};
function xd(a){var b=new rd;b.a=a;return b};function yd(){this.a="";this.b=zd}yd.prototype.la=!0;yd.prototype.ja=function(){return this.a};yd.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};function Ad(a){if(a instanceof yd&&a.constructor===yd&&a.b===zd)return a.a;ra("expected object of type SafeUrl, got '"+a+"' of type "+da(a));return"type_error:SafeUrl"}var Bd=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
function Cd(a){if(a instanceof yd)return a;a=a.la?a.ja():String(a);Bd.test(a)||(a="about:invalid#zClosurez");return Dd(a)}var zd={};function Dd(a){var b=new yd;b.a=a;return b}Dd("about:blank");function Ed(){this.a="";this.b=Fd}Ed.prototype.la=!0;Ed.prototype.ja=function(){return this.a};Ed.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};function Gd(a){if(a instanceof Ed&&a.constructor===Ed&&a.b===Fd)return a.a;ra("expected object of type SafeHtml, got '"+a+"' of type "+da(a));return"type_error:SafeHtml"}var Fd={};function Hd(a){var b=new Ed;b.a=a;return b}Hd("<!DOCTYPE html>");Hd("");Hd("<br>");function Id(a){var b=document;return m(a)?b.getElementById(a):a}function Jd(a,b){Ya(b,function(b,d){b&&b.la&&(b=b.ja());"style"==d?a.style.cssText=b:"class"==d?a.className=b:"for"==d?a.htmlFor=b:Kd.hasOwnProperty(d)?a.setAttribute(Kd[d],b):0==d.lastIndexOf("aria-",0)||0==d.lastIndexOf("data-",0)?a.setAttribute(d,b):a[d]=b})}
var Kd={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};
function Ld(a,b,c){var d=arguments,e=document,f=String(d[0]),h=d[1];if(!md&&h&&(h.name||h.type)){f=["<",f];h.name&&f.push(' name="',Ma(h.name),'"');if(h.type){f.push(' type="',Ma(h.type),'"');var l={};bb(l,h);delete l.type;h=l}f.push(">");f=f.join("")}f=e.createElement(f);h&&(m(h)?f.className=h:fa(h)?f.className=h.join(" "):Jd(f,h));2<d.length&&Md(e,f,d);return f}
function Md(a,b,c){function d(c){c&&b.appendChild(m(c)?a.createTextNode(c):c)}for(var e=2;e<c.length;e++){var f=c[e];!ha(f)||q(f)&&0<f.nodeType?d(f):v(Nd(f)?Ja(f):f,d)}}function Nd(a){if(a&&"number"==typeof a.length){if(q(a))return"function"==typeof a.item||"string"==typeof a.item;if(n(a))return"function"==typeof a.item}return!1};function Od(a){var b=[];Pd(new Qd,a,b);return b.join("")}function Qd(){}
function Pd(a,b,c){if(null==b)c.push("null");else{if("object"==typeof b){if(fa(b)){var d=b;b=d.length;c.push("[");for(var e="",f=0;f<b;f++)c.push(e),Pd(a,d[f],c),e=",";c.push("]");return}if(b instanceof String||b instanceof Number||b instanceof Boolean)b=b.valueOf();else{c.push("{");e="";for(d in b)Object.prototype.hasOwnProperty.call(b,d)&&(f=b[d],"function"!=typeof f&&(c.push(e),Rd(d,c),c.push(":"),Pd(a,f,c),e=","));c.push("}");return}}switch(typeof b){case "string":Rd(b,c);break;case "number":c.push(isFinite(b)&&
!isNaN(b)?String(b):"null");break;case "boolean":c.push(String(b));break;case "function":c.push("null");break;default:throw Error("Unknown type: "+typeof b);}}}var Sd={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Td=/\uffff/.test("\uffff")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;
function Rd(a,b){b.push('"',a.replace(Td,function(a){var b=Sd[a];b||(b="\\u"+(a.charCodeAt(0)|65536).toString(16).substr(1),Sd[a]=b);return b}),'"')};function Ud(){var a=H();return B&&!!Yb&&11==Yb||/Edge\/\d+/.test(a)}function Vd(){return k.window&&k.window.location.href||self&&self.location&&self.location.href||""}function Wd(a,b){b=b||k.window;var c="about:blank";a&&(c=Ad(Cd(a)));b.location.href=c}
function Xd(a,b){var c=[],d;for(d in a)if(d in b)if(typeof a[d]!=typeof b[d])c.push(d);else if(fa(a[d])){a:{var e=void 0;var f=a[d],h=b[d];for(e in f)if(!(e in h)||f[e]!==h[e]){e=!1;break a}for(e in h)if(!(e in f)){e=!1;break a}e=!0}e||c.push(d)}else"object"==typeof a[d]&&null!=a[d]&&null!=b[d]?0<Xd(a[d],b[d]).length&&c.push(d):a[d]!==b[d]&&c.push(d);else c.push(d);for(d in b)d in a||c.push(d);return c}
function Yd(){var a=H();a=Zd(a)!=$d?null:(a=a.match(/\sChrome\/(\d+)/i))&&2==a.length?parseInt(a[1],10):null;return a&&30>a?!1:!B||!Yb||9<Yb}function ae(a){a=(a||H()).toLowerCase();return a.match(/android/)||a.match(/webos/)||a.match(/iphone|ipad|ipod/)||a.match(/blackberry/)||a.match(/windows phone/)||a.match(/iemobile/)?!0:!1}function be(a){a=a||k.window;try{a.close()}catch(b){}}
function ce(a,b,c){var d=Math.floor(1E9*Math.random()).toString();b=b||500;c=c||600;var e=(window.screen.availHeight-c)/2,f=(window.screen.availWidth-b)/2;b={width:b,height:c,top:0<e?e:0,left:0<f?f:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1};c=H().toLowerCase();d&&(b.target=d,w(c,"crios/")&&(b.target="_blank"));Zd(H())==de&&(a=a||"http://localhost",b.scrollbars=!0);c=a||"";(a=b)||(a={});d=window;b=c instanceof yd?c:Cd("undefined"!=typeof c.href?c.href:String(c));c=a.target||c.target;e=[];
for(h in a)switch(h){case "width":case "height":case "top":case "left":e.push(h+"="+a[h]);break;case "target":case "noopener":case "noreferrer":break;default:e.push(h+"="+(a[h]?1:0))}var h=e.join(",");(x("iPhone")&&!x("iPod")&&!x("iPad")||x("iPad")||x("iPod"))&&d.navigator&&d.navigator.standalone&&c&&"_self"!=c?(h=d.document.createElement("A"),b instanceof yd||b instanceof yd||(b=b.la?b.ja():String(b),Bd.test(b)||(b="about:invalid#zClosurez"),b=Dd(b)),h.href=Ad(b),h.setAttribute("target",c),a.noreferrer&&
h.setAttribute("rel","noreferrer"),a=document.createEvent("MouseEvent"),a.initMouseEvent("click",!0,!0,d,1),h.dispatchEvent(a),h={}):a.noreferrer?(h=d.open("",c,h),a=Ad(b),h&&(Pb&&w(a,";")&&(a="'"+a.replace(/'/g,"%27")+"'"),h.opener=null,qd("b/12014412, meta tag with sanitized URL"),a='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ma(a)+'">',a=Hd(a),h.document.write(Gd(a)),h.document.close())):(h=d.open(Ad(b),c,h))&&a.noopener&&(h.opener=null);if(h)try{h.focus()}catch(l){}return h}
function ee(a){return new y(function(b){function c(){Gc(2E3).then(function(){if(!a||a.closed)b();else return c()})}return c()})}var fe=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function ge(){var a=null;return(new y(function(b){"complete"==k.document.readyState?b():(a=function(){b()},rc(window,"load",a))})).o(function(b){D(window,"load",a);throw b;})}
function he(){return ie(void 0)?ge().then(function(){return new y(function(a,b){var c=k.document,d=setTimeout(function(){b(Error("Cordova framework is not ready."))},1E3);c.addEventListener("deviceready",function(){clearTimeout(d);a()},!1)})}):A(Error("Cordova must run in an Android or iOS file scheme."))}function ie(a){a=a||H();return!("file:"!==je()||!a.toLowerCase().match(/iphone|ipad|ipod|android/))}function ke(){var a=k.window;try{return!(!a||a==a.top)}catch(b){return!1}}
function le(){return"object"!==typeof k.window&&"function"===typeof k.importScripts}function me(){return firebase.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":firebase.INTERNAL.hasOwnProperty("node")?"Node":le()?"Worker":"Browser"}function ne(){var a=me();return"ReactNative"===a||"Node"===a}var de="Firefox",$d="Chrome";
function Zd(a){var b=a.toLowerCase();if(w(b,"opera/")||w(b,"opr/")||w(b,"opios/"))return"Opera";if(w(b,"iemobile"))return"IEMobile";if(w(b,"msie")||w(b,"trident/"))return"IE";if(w(b,"edge/"))return"Edge";if(w(b,"firefox/"))return de;if(w(b,"silk/"))return"Silk";if(w(b,"blackberry"))return"Blackberry";if(w(b,"webos"))return"Webos";if(!w(b,"safari/")||w(b,"chrome/")||w(b,"crios/")||w(b,"android"))if(!w(b,"chrome/")&&!w(b,"crios/")||w(b,"edge/")){if(w(b,"android"))return"Android";if((a=a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&
2==a.length)return a[1]}else return $d;else return"Safari";return"Other"}var oe={Pc:"FirebaseCore-web",Rc:"FirebaseUI-web"};function pe(a,b){b=b||[];var c=[],d={},e;for(e in oe)d[oe[e]]=!0;for(e=0;e<b.length;e++)"undefined"!==typeof d[b[e]]&&(delete d[b[e]],c.push(b[e]));c.sort();b=c;b.length||(b=["FirebaseCore-web"]);c=me();"Browser"===c?(d=H(),c=Zd(d)):"Worker"===c&&(d=H(),c=Zd(d)+"-"+c);return c+"/JsCore/"+a+"/"+b.join(",")}function H(){return k.navigator&&k.navigator.userAgent||""}
function I(a,b){a=a.split(".");b=b||k;for(var c=0;c<a.length&&"object"==typeof b&&null!=b;c++)b=b[a[c]];c!=a.length&&(b=void 0);return b}function qe(){try{var a=k.localStorage,b=re();if(a)return a.setItem(b,"1"),a.removeItem(b),Ud()?!!k.indexedDB:!0}catch(c){return le()&&!!k.indexedDB}return!1}function se(){return(te()||"chrome-extension:"===je()||ie())&&!ne()&&qe()&&!le()}function te(){return"http:"===je()||"https:"===je()}function je(){return k.location&&k.location.protocol||null}
function ue(a){a=a||H();return ae(a)||Zd(a)==de?!1:!0}function ve(a){return"undefined"===typeof a?null:Od(a)}function we(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&null!==a[c]&&void 0!==a[c]&&(b[c]=a[c]);return b}function xe(a){if(null!==a)return JSON.parse(a)}function re(a){return a?a:Math.floor(1E9*Math.random()).toString()}function ye(a){a=a||H();return"Safari"==Zd(a)||a.toLowerCase().match(/iphone|ipad|ipod/)?!1:!0}
function ze(){var a=k.___jsl;if(a&&a.H)for(var b in a.H)if(a.H[b].r=a.H[b].r||[],a.H[b].L=a.H[b].L||[],a.H[b].r=a.H[b].L.concat(),a.CP)for(var c=0;c<a.CP.length;c++)a.CP[c]=null}function Ae(){var a=k.navigator;return a&&"boolean"===typeof a.onLine&&(te()||"chrome-extension:"===je()||"undefined"!==typeof a.connection)?a.onLine:!0}function Be(a,b){if(a>b)throw Error("Short delay should be less than long delay!");this.c=a;this.b=b;a=H();b=me();this.a=ae(a)||"ReactNative"===b}
Be.prototype.get=function(){return this.a?this.b:this.c};function Ce(){var a=k.document;return a&&"undefined"!==typeof a.visibilityState?"visible"==a.visibilityState:!0}function Ee(){var a=k.document,b=null;return Ce()||!a?z():(new y(function(c){b=function(){Ce()&&(a.removeEventListener("visibilitychange",b,!1),c())};a.addEventListener("visibilitychange",b,!1)})).o(function(c){a.removeEventListener("visibilitychange",b,!1);throw c;})}
function Fe(a){try{var b=new Date(parseInt(a,10));if(!isNaN(b.getTime())&&!/[^0-9]/.test(a))return b.toUTCString()}catch(c){}return null}function Ge(){return!(!I("fireauth.oauthhelper",k)&&!I("fireauth.iframe",k))};var He={};var Ie;try{var Je={};Object.defineProperty(Je,"abcd",{configurable:!0,enumerable:!0,value:1});Object.defineProperty(Je,"abcd",{configurable:!0,enumerable:!0,value:2});Ie=2==Je.abcd}catch(a){Ie=!1}function J(a,b,c){Ie?Object.defineProperty(a,b,{configurable:!0,enumerable:!0,value:c}):a[b]=c}function K(a,b){if(b)for(var c in b)b.hasOwnProperty(c)&&J(a,c,b[c])}function Ke(a){var b={};K(b,a);return b}function Le(a){var b={},c;for(c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}
function Me(a,b){if(!b||!b.length)return!0;if(!a)return!1;for(var c=0;c<b.length;c++){var d=a[b[c]];if(void 0===d||null===d||""===d)return!1}return!0}function Ne(a){var b=a;if("object"==typeof a&&null!=a){b="length"in a?[]:{};for(var c in a)J(b,c,Ne(a[c]))}return b};function Oe(a){var b={},c=a[Pe],d=a[Qe];a=a[Re];if(!a||a!=Se&&!c)throw Error("Invalid provider user info!");b[Te]=d||null;b[Ue]=c||null;J(this,Ve,a);J(this,We,Ne(b))}var Se="EMAIL_SIGNIN",Pe="email",Qe="newEmail",Re="requestType",Ue="email",Te="fromEmail",We="data",Ve="operation";function L(a,b){this.code=Xe+a;this.message=b||Ye[a]||""}t(L,Error);L.prototype.C=function(){return{code:this.code,message:this.message}};L.prototype.toJSON=function(){return this.C()};function Ze(a){var b=a&&a.code;return b?new L(b.substring(Xe.length),a.message):null}
var Xe="auth/",Ye={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
"code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
"dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
"invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
"invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.",
"invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
"invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
"invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.",
"auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.",
"missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
"network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",
timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.",
"user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function $e(a){var b=a[af];if("undefined"===typeof b)throw new L("missing-continue-uri");if("string"!==typeof b||"string"===typeof b&&!b.length)throw new L("invalid-continue-uri");this.h=b;this.b=this.a=null;this.g=!1;var c=a[bf];if(c&&"object"===typeof c){b=c[cf];var d=c[df];c=c[ef];if("string"===typeof b&&b.length){this.a=b;if("undefined"!==typeof d&&"boolean"!==typeof d)throw new L("argument-error",df+" property must be a boolean when specified.");this.g=!!d;if("undefined"!==typeof c&&("string"!==
typeof c||"string"===typeof c&&!c.length))throw new L("argument-error",ef+" property must be a non empty string when specified.");this.b=c||null}else{if("undefined"!==typeof b)throw new L("argument-error",cf+" property must be a non empty string when specified.");if("undefined"!==typeof d||"undefined"!==typeof c)throw new L("missing-android-pkg-name");}}else if("undefined"!==typeof c)throw new L("argument-error",bf+" property must be a non null object when specified.");this.f=null;if((b=a[ff])&&"object"===
typeof b)if(b=b[gf],"string"===typeof b&&b.length)this.f=b;else{if("undefined"!==typeof b)throw new L("argument-error",gf+" property must be a non empty string when specified.");}else if("undefined"!==typeof b)throw new L("argument-error",ff+" property must be a non null object when specified.");a=a[hf];if("undefined"!==typeof a&&"boolean"!==typeof a)throw new L("argument-error",hf+" property must be a boolean when specified.");this.c=!!a}
var bf="android",hf="handleCodeInApp",ff="iOS",af="url",df="installApp",ef="minimumVersion",cf="packageName",gf="bundleId";function jf(a){var b={};b.continueUrl=a.h;b.canHandleCodeInApp=a.c;if(b.androidPackageName=a.a)b.androidMinimumVersion=a.b,b.androidInstallApp=a.g;b.iOSBundleId=a.f;for(var c in b)null===b[c]&&delete b[c];return b};function kf(a){return Ba(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join("")};var lf=null,mf=null;function nf(a){var b="";of(a,function(a){b+=String.fromCharCode(a)});return b}function of(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=mf[c];if(null!=e)return e;if(!/^[\s\xa0]*$/.test(c))throw Error("Unknown base64 encoding at char: "+c);}return b}pf();for(var d=0;;){var e=c(-1),f=c(0),h=c(64),l=c(64);if(64===l&&-1===e)break;b(e<<2|f>>4);64!=h&&(b(f<<4&240|h>>2),64!=l&&b(h<<6&192|l))}}
function pf(){if(!lf){lf={};mf={};for(var a=0;65>a;a++)lf[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),mf[lf[a]]=a,62<=a&&(mf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)]=a)}};function qf(a){this.c=a.sub;na();this.a=a.provider_id||a.firebase&&a.firebase.sign_in_provider||null;this.b=!!a.is_anonymous||"anonymous"==this.a}qf.prototype.f=function(){return this.b};function rf(a){a=a.split(".");if(3!=a.length)return null;a=a[1];for(var b=(4-a.length%4)%4,c=0;c<b;c++)a+=".";try{var d=JSON.parse(nf(a));if(d.sub&&d.iss&&d.aud&&d.exp)return new qf(d)}catch(e){}return null};var sf="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),tf=["client_id","response_type","scope","redirect_uri","state"],uf={Qc:{Ma:"locale",Aa:500,za:600,Na:"facebook.com",cb:tf},Sc:{Ma:null,Aa:500,za:620,Na:"github.com",cb:tf},Tc:{Ma:"hl",Aa:515,za:680,Na:"google.com",cb:tf},Zc:{Ma:"lang",Aa:485,za:705,Na:"twitter.com",cb:sf}};function vf(a){for(var b in uf)if(uf[b].Na==a)return uf[b];return null};function wf(a){var b={};b["facebook.com"]=xf;b["google.com"]=yf;b["github.com"]=zf;b["twitter.com"]=Af;var c=a&&a[Bf];try{if(c)return b[c]?new b[c](a):new Cf(a);if("undefined"!==typeof a[Df])return new Ef(a)}catch(d){}return null}var Df="idToken",Bf="providerId";
function Ef(a){var b=a[Bf];if(!b&&a[Df]){var c=rf(a[Df]);c&&c.a&&(b=c.a)}if(!b)throw Error("Invalid additional user info!");if("anonymous"==b||"custom"==b)b=null;c=!1;"undefined"!==typeof a.isNewUser?c=!!a.isNewUser:"identitytoolkit#SignupNewUserResponse"===a.kind&&(c=!0);J(this,"providerId",b);J(this,"isNewUser",c)}function Cf(a){Ef.call(this,a);a=xe(a.rawUserInfo||"{}");J(this,"profile",Ne(a||{}))}t(Cf,Ef);
function xf(a){Cf.call(this,a);if("facebook.com"!=this.providerId)throw Error("Invalid provider ID!");}t(xf,Cf);function zf(a){Cf.call(this,a);if("github.com"!=this.providerId)throw Error("Invalid provider ID!");J(this,"username",this.profile&&this.profile.login||null)}t(zf,Cf);function yf(a){Cf.call(this,a);if("google.com"!=this.providerId)throw Error("Invalid provider ID!");}t(yf,Cf);
function Af(a){Cf.call(this,a);if("twitter.com"!=this.providerId)throw Error("Invalid provider ID!");J(this,"username",a.screenName||null)}t(Af,Cf);function Ff(a){this.a=dd(a)};function Gf(a,b){return a.then(function(a){if(a[M]){var c=rf(a[M]);if(!c||b!=c.c)throw new L("user-mismatch");return a}throw new L("user-mismatch");}).o(function(a){throw a&&a.code&&a.code==Xe+"user-not-found"?new L("user-mismatch"):a;})}
function Hf(a,b,c){if(b.idToken||b.accessToken)b.idToken&&J(this,"idToken",b.idToken),b.accessToken&&J(this,"accessToken",b.accessToken);else if(b.oauthToken&&b.oauthTokenSecret)J(this,"accessToken",b.oauthToken),J(this,"secret",b.oauthTokenSecret);else throw new L("internal-error","failed to construct a credential");J(this,"providerId",a);J(this,"signInMethod",c)}Hf.prototype.xa=function(a){return If(a,Jf(this))};Hf.prototype.c=function(a,b){var c=Jf(this);c.idToken=b;return Kf(a,c)};
Hf.prototype.f=function(a,b){var c=Jf(this);return Gf(Lf(a,c),b)};function Jf(a){var b={};a.idToken&&(b.id_token=a.idToken);a.accessToken&&(b.access_token=a.accessToken);a.secret&&(b.oauth_token_secret=a.secret);b.providerId=a.providerId;return{postBody:hd(b).toString(),requestUri:"http://localhost"}}
Hf.prototype.C=function(){var a={providerId:this.providerId,signInMethod:this.signInMethod};this.idToken&&(a.oauthIdToken=this.idToken);this.accessToken&&(a.oauthAccessToken=this.accessToken);this.secret&&(a.oauthTokenSecret=this.secret);return a};function Mf(a,b){this.zc=b||[];K(this,{providerId:a,isOAuthProvider:!0});this.tb={};this.Za=(vf(a)||{}).Ma||null;this.Xa=null}Mf.prototype.Ca=function(a){this.tb=$a(a);return this};function N(a){Mf.call(this,a,tf);this.a=[]}t(N,Mf);
N.prototype.ta=function(a){Fa(this.a,a)||this.a.push(a);return this};N.prototype.yb=function(){return Ja(this.a)};N.prototype.credential=function(a,b){if(!a&&!b)throw new L("argument-error","credential failed: must provide the ID token and/or the access token.");return new Hf(this.providerId,{idToken:a||null,accessToken:b||null},this.providerId)};function Nf(){N.call(this,"facebook.com")}t(Nf,N);J(Nf,"PROVIDER_ID","facebook.com");J(Nf,"FACEBOOK_SIGN_IN_METHOD","facebook.com");
function Of(a){if(!a)throw new L("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new Nf).credential(null,b)}function Pf(){N.call(this,"github.com")}t(Pf,N);J(Pf,"PROVIDER_ID","github.com");J(Pf,"GITHUB_SIGN_IN_METHOD","github.com");function Qf(a){if(!a)throw new L("argument-error","credential failed: expected 1 argument (the OAuth access token).");var b=a;q(a)&&(b=a.accessToken);return(new Pf).credential(null,b)}
function Rf(){N.call(this,"google.com");this.ta("profile")}t(Rf,N);J(Rf,"PROVIDER_ID","google.com");J(Rf,"GOOGLE_SIGN_IN_METHOD","google.com");function Sf(a,b){var c=a;q(a)&&(c=a.idToken,b=a.accessToken);return(new Rf).credential(c,b)}function Tf(){Mf.call(this,"twitter.com",sf)}t(Tf,Mf);J(Tf,"PROVIDER_ID","twitter.com");J(Tf,"TWITTER_SIGN_IN_METHOD","twitter.com");
function Uf(a,b){var c=a;q(c)||(c={oauthToken:a,oauthTokenSecret:b});if(!c.oauthToken||!c.oauthTokenSecret)throw new L("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Hf("twitter.com",c,"twitter.com")}function Vf(a,b,c){this.a=a;this.b=b;J(this,"providerId","password");J(this,"signInMethod",c===O.EMAIL_LINK_SIGN_IN_METHOD?O.EMAIL_LINK_SIGN_IN_METHOD:O.EMAIL_PASSWORD_SIGN_IN_METHOD)}
Vf.prototype.xa=function(a){return this.signInMethod==O.EMAIL_LINK_SIGN_IN_METHOD?P(a,Wf,{email:this.a,oobCode:this.b}):P(a,Xf,{email:this.a,password:this.b})};Vf.prototype.c=function(a,b){return this.signInMethod==O.EMAIL_LINK_SIGN_IN_METHOD?P(a,Yf,{idToken:b,email:this.a,oobCode:this.b}):P(a,Zf,{idToken:b,email:this.a,password:this.b})};Vf.prototype.f=function(a,b){return Gf(this.xa(a),b)};Vf.prototype.C=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}};
function O(){K(this,{providerId:"password",isOAuthProvider:!1})}function $f(a,b){b=ag(b);if(!b)throw new L("argument-error","Invalid email link!");return new Vf(a,b,O.EMAIL_LINK_SIGN_IN_METHOD)}function ag(a){a=new Ff(a);var b=cd(a.a,"oobCode")||null;return"signIn"===(cd(a.a,"mode")||null)&&b?b:null}K(O,{PROVIDER_ID:"password"});K(O,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"});K(O,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"});
function bg(a){if(!(a.Ra&&a.Qa||a.Ea&&a.Y))throw new L("internal-error");this.a=a;J(this,"providerId","phone");J(this,"signInMethod","phone")}bg.prototype.xa=function(a){return a.Sa(cg(this))};bg.prototype.c=function(a,b){var c=cg(this);c.idToken=b;return P(a,dg,c)};bg.prototype.f=function(a,b){var c=cg(this);c.operation="REAUTH";a=P(a,eg,c);return Gf(a,b)};
bg.prototype.C=function(){var a={providerId:"phone"};this.a.Ra&&(a.verificationId=this.a.Ra);this.a.Qa&&(a.verificationCode=this.a.Qa);this.a.Ea&&(a.temporaryProof=this.a.Ea);this.a.Y&&(a.phoneNumber=this.a.Y);return a};function cg(a){return a.a.Ea&&a.a.Y?{temporaryProof:a.a.Ea,phoneNumber:a.a.Y}:{sessionInfo:a.a.Ra,code:a.a.Qa}}
function fg(a){try{this.a=a||firebase.auth()}catch(b){throw new L("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");}K(this,{providerId:"phone",isOAuthProvider:!1})}
fg.prototype.Sa=function(a,b){var c=this.a.b;return z(b.verify()).then(function(d){if(!m(d))throw new L("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(b.type){case "recaptcha":return gg(c,{phoneNumber:a,recaptchaToken:d}).then(function(a){"function"===typeof b.reset&&b.reset();return a},function(a){"function"===typeof b.reset&&b.reset();throw a;});default:throw new L("argument-error",
'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');}})};function hg(a,b){if(!a)throw new L("missing-verification-id");if(!b)throw new L("missing-verification-code");return new bg({Ra:a,Qa:b})}K(fg,{PROVIDER_ID:"phone"});K(fg,{PHONE_SIGN_IN_METHOD:"phone"});
function ig(a){if(a.temporaryProof&&a.phoneNumber)return new bg({Ea:a.temporaryProof,Y:a.phoneNumber});var b=a&&a.providerId;if(!b||"password"===b)return null;var c=a&&a.oauthAccessToken,d=a&&a.oauthTokenSecret;a=a&&a.oauthIdToken;try{switch(b){case "google.com":return Sf(a,c);case "facebook.com":return Of(c);case "github.com":return Qf(c);case "twitter.com":return Uf(c,d);default:return(new N(b)).credential(a,c)}}catch(e){return null}}
function jg(a){if(!a.isOAuthProvider)throw new L("invalid-oauth-provider");};function kg(a,b,c,d,e){this.b=a;this.c=b||null;this.f=c||null;this.g=d||null;this.a=e||null;if(this.f||this.a){if(this.f&&this.a)throw new L("invalid-auth-event");if(this.f&&!this.g)throw new L("invalid-auth-event");}else throw new L("invalid-auth-event");}kg.prototype.C=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.C()}};function lg(a){a=a||{};return a.type?new kg(a.type,a.eventId,a.urlResponse,a.sessionId,a.error&&Ze(a.error)):null};function mg(){this.b=null;this.a=[]}var ng=null;mg.prototype.subscribe=function(a){var b=this;this.a.push(a);this.b||(this.b=function(a){for(var c=0;c<b.a.length;c++)b.a[c](a)},a=I("universalLinks.subscribe",k),"function"===typeof a&&a(null,this.b))};mg.prototype.unsubscribe=function(a){Ha(this.a,function(b){return b==a})};function og(a){var b="unauthorized-domain",c=void 0,d=dd(a);a=d.b;d=d.c;"chrome-extension"==d?c=Ka("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):"http"==d||"https"==d?c=Ka("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",a):b="operation-not-supported-in-this-environment";
L.call(this,b,c)}t(og,L);function pg(a,b,c){L.call(this,a,c);a=b||{};a.ub&&J(this,"email",a.ub);a.Y&&J(this,"phoneNumber",a.Y);a.credential&&J(this,"credential",a.credential)}t(pg,L);pg.prototype.C=function(){var a={code:this.code,message:this.message};this.email&&(a.email=this.email);this.phoneNumber&&(a.phoneNumber=this.phoneNumber);var b=this.credential&&this.credential.C();b&&bb(a,b);return a};pg.prototype.toJSON=function(){return this.C()};
function qg(a){if(a.code){var b=a.code||"";0==b.indexOf(Xe)&&(b=b.substring(Xe.length));var c={credential:ig(a)};if(a.email)c.ub=a.email;else if(a.phoneNumber)c.Y=a.phoneNumber;else return new L(b,a.message||void 0);return new pg(b,c,a.message)}return null};var rg=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function sg(){}sg.prototype.c=null;function tg(a){return a.c||(a.c=a.b())};var ug;function vg(){}t(vg,sg);vg.prototype.a=function(){var a=wg(this);return a?new ActiveXObject(a):new XMLHttpRequest};vg.prototype.b=function(){var a={};wg(this)&&(a[0]=!0,a[1]=!0);return a};
function wg(a){if(!a.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var b=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],c=0;c<b.length;c++){var d=b[c];try{return new ActiveXObject(d),a.f=d}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");}return a.f}ug=new vg;function xg(){}t(xg,sg);xg.prototype.a=function(){var a=new XMLHttpRequest;if("withCredentials"in a)return a;if("undefined"!=typeof XDomainRequest)return new yg;throw Error("Unsupported browser");};xg.prototype.b=function(){return{}};
function yg(){this.a=new XDomainRequest;this.readyState=0;this.onreadystatechange=null;this.responseText="";this.status=-1;this.statusText="";this.a.onload=r(this.ac,this);this.a.onerror=r(this.zb,this);this.a.onprogress=r(this.bc,this);this.a.ontimeout=r(this.ec,this)}g=yg.prototype;g.open=function(a,b,c){if(null!=c&&!c)throw Error("Only async requests are supported.");this.a.open(a,b)};
g.send=function(a){if(a)if("string"==typeof a)this.a.send(a);else throw Error("Only string data is supported");else this.a.send()};g.abort=function(){this.a.abort()};g.setRequestHeader=function(){};g.getResponseHeader=function(a){return"content-type"==a.toLowerCase()?this.a.contentType:""};g.ac=function(){this.status=200;this.responseText=this.a.responseText;zg(this,4)};g.zb=function(){this.status=500;this.responseText="";zg(this,4)};g.ec=function(){this.zb()};
g.bc=function(){this.status=200;zg(this,1)};function zg(a,b){a.readyState=b;if(a.onreadystatechange)a.onreadystatechange()}g.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType};function Ag(a,b,c){this.reset(a,b,c,void 0,void 0)}Ag.prototype.a=null;var Bg=0;Ag.prototype.reset=function(a,b,c,d,e){"number"==typeof e||Bg++;d||na();delete this.a};function Cg(a){this.f=a;this.b=this.c=this.a=null}function Dg(a,b){this.name=a;this.value=b}Dg.prototype.toString=function(){return this.name};var Eg=new Dg("SEVERE",1E3),Fg=new Dg("WARNING",900),Gg=new Dg("CONFIG",700),Hg=new Dg("FINE",500);function Ig(a){if(a.c)return a.c;if(a.a)return Ig(a.a);ra("Root logger has no level set.");return null}Cg.prototype.log=function(a,b,c){if(a.value>=Ig(this).value)for(n(b)&&(b=b()),a=new Ag(a,String(b),this.f),c&&(a.a=c),c=this;c;)c=c.a};var Jg={},Kg=null;
function Lg(a){Kg||(Kg=new Cg(""),Jg[""]=Kg,Kg.c=Gg);var b;if(!(b=Jg[a])){b=new Cg(a);var c=a.lastIndexOf("."),d=a.substr(c+1);c=Lg(a.substr(0,c));c.b||(c.b={});c.b[d]=b;b.a=c;Jg[a]=b}return b};function Q(a,b){a&&a.log(Hg,b,void 0)};function Mg(a){this.f=a}t(Mg,sg);Mg.prototype.a=function(){return new Ng(this.f)};Mg.prototype.b=function(a){return function(){return a}}({});function Ng(a){F.call(this);this.i=a;this.readyState=Og;this.status=0;this.responseText=this.statusText="";this.onreadystatechange=null;this.g=new Headers;this.b=null;this.h="GET";this.c="";this.a=!1;this.f=Lg("goog.net.FetchXmlHttp")}t(Ng,F);var Og=0;g=Ng.prototype;
g.open=function(a,b){if(this.readyState!=Og)throw this.abort(),Error("Error reopening a connection");this.h=a;this.c=b;this.readyState=1;Pg(this)};g.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var b={headers:this.g,method:this.h,credentials:void 0,cache:void 0};a&&(b.body=a);this.i.fetch(new Request(this.c,b)).then(this.dc.bind(this),this.Ab.bind(this))};
g.abort=function(){this.responseText="";this.g=new Headers;this.status=0;1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,Pg(this));this.readyState=Og};g.dc=function(a){this.a&&(this.b||(this.b=a.headers,this.readyState=2,Pg(this)),this.a&&(this.readyState=3,Pg(this),this.a&&a.text().then(this.cc.bind(this,a),this.Ab.bind(this))))};g.cc=function(a,b){this.a&&(this.status=a.status,this.statusText=a.statusText,this.responseText=b,this.readyState=4,Pg(this))};
g.Ab=function(a){var b=this.f;b&&b.log(Fg,"Failed to fetch url "+this.c,a instanceof Error?a:Error(a));this.a&&(this.readyState=4,Pg(this))};g.setRequestHeader=function(a,b){this.g.append(a,b)};g.getResponseHeader=function(a){return this.b?this.b.get(a.toLowerCase())||"":((a=this.f)&&a.log(Fg,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")};
g.getAllResponseHeaders=function(){if(!this.b){var a=this.f;a&&a.log(Fg,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0);return""}a=[];for(var b=this.b.entries(),c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Pg(a){a.onreadystatechange&&a.onreadystatechange.call(a)};function Qg(a){F.call(this);this.headers=new Lc;this.D=a||null;this.c=!1;this.A=this.a=null;this.h=this.N=this.l="";this.f=this.I=this.i=this.G=!1;this.g=0;this.s=null;this.m=Rg;this.v=this.O=!1}t(Qg,F);var Rg="";Qg.prototype.b=Lg("goog.net.XhrIo");var Sg=/^https?$/i,Tg=["POST","PUT"];
function Ug(a,b,c,d,e){if(a.a)throw Error("[goog.net.XhrIo] Object is active with another request="+a.l+"; newUri="+b);c=c?c.toUpperCase():"GET";a.l=b;a.h="";a.N=c;a.G=!1;a.c=!0;a.a=a.D?a.D.a():ug.a();a.A=a.D?tg(a.D):tg(ug);a.a.onreadystatechange=r(a.Db,a);try{Q(a.b,Vg(a,"Opening Xhr")),a.I=!0,a.a.open(c,String(b),!0),a.I=!1}catch(h){Q(a.b,Vg(a,"Error opening Xhr: "+h.message));Wg(a,h);return}b=d||"";var f=new Lc(a.headers);e&&Kc(e,function(a,b){f.set(b,a)});e=Da(f.T());d=k.FormData&&b instanceof
k.FormData;!Fa(Tg,c)||e||d||f.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");f.forEach(function(a,b){this.a.setRequestHeader(b,a)},a);a.m&&(a.a.responseType=a.m);"withCredentials"in a.a&&a.a.withCredentials!==a.O&&(a.a.withCredentials=a.O);try{Xg(a),0<a.g&&(a.v=Yg(a.a),Q(a.b,Vg(a,"Will abort after "+a.g+"ms if incomplete, xhr2 "+a.v)),a.v?(a.a.timeout=a.g,a.a.ontimeout=r(a.Fa,a)):a.s=Fc(a.Fa,a.g,a)),Q(a.b,Vg(a,"Sending request")),a.i=!0,a.a.send(b),a.i=!1}catch(h){Q(a.b,Vg(a,
"Send error: "+h.message)),Wg(a,h)}}function Yg(a){return B&&Xb(9)&&"number"==typeof a.timeout&&void 0!==a.ontimeout}function Ea(a){return"content-type"==a.toLowerCase()}g=Qg.prototype;g.Fa=function(){"undefined"!=typeof aa&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",Q(this.b,Vg(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))};function Wg(a,b){a.c=!1;a.a&&(a.f=!0,a.a.abort(),a.f=!1);a.h=b;Zg(a);$g(a)}
function Zg(a){a.G||(a.G=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"))}g.abort=function(){this.a&&this.c&&(Q(this.b,Vg(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),$g(this))};g.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),$g(this,!0));Qg.lb.ua.call(this)};g.Db=function(){this.pa||(this.I||this.i||this.f?ah(this):this.sc())};g.sc=function(){ah(this)};
function ah(a){if(a.c&&"undefined"!=typeof aa)if(a.A[1]&&4==bh(a)&&2==ch(a))Q(a.b,Vg(a,"Local request error detected and ignored"));else if(a.i&&4==bh(a))Fc(a.Db,0,a);else if(a.dispatchEvent("readystatechange"),4==bh(a)){Q(a.b,Vg(a,"Request complete"));a.c=!1;try{var b=ch(a);a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1}var d;if(!(d=c)){var e;if(e=0===b){var f=String(a.l).match(Oc)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;
f=h.substr(0,h.length-1)}e=!Sg.test(f?f.toLowerCase():"")}d=e}if(d)a.dispatchEvent("complete"),a.dispatchEvent("success");else{try{var l=2<bh(a)?a.a.statusText:""}catch(p){Q(a.b,"Can not get status: "+p.message),l=""}a.h=l+" ["+ch(a)+"]";Zg(a)}}finally{$g(a)}}}function $g(a,b){if(a.a){Xg(a);var c=a.a,d=a.A[0]?ca:null;a.a=null;a.A=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d}catch(e){(a=a.b)&&a.log(Eg,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}
function Xg(a){a.a&&a.v&&(a.a.ontimeout=null);a.s&&(k.clearTimeout(a.s),a.s=null)}function bh(a){return a.a?a.a.readyState:0}function ch(a){try{return 2<bh(a)?a.a.status:-1}catch(b){return-1}}function dh(a){try{return a.a?a.a.responseText:""}catch(b){return Q(a.b,"Can not get responseText: "+b.message),""}}
g.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Rg:case "text":return this.a.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var a=this.b;a&&a.log(Eg,"Response type "+this.m+" is not supported on this browser",void 0);return null}catch(b){return Q(this.b,"Can not get response: "+b.message),null}};function Vg(a,b){return b+" ["+a.N+" "+a.l+" "+ch(a)+"]"};/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
function eh(a,b){this.g=[];this.v=a;this.s=b||null;this.f=this.a=!1;this.c=void 0;this.u=this.A=this.i=!1;this.h=0;this.b=null;this.l=0}eh.prototype.cancel=function(a){if(this.a)this.c instanceof eh&&this.c.cancel();else{if(this.b){var b=this.b;delete this.b;a?b.cancel(a):(b.l--,0>=b.l&&b.cancel())}this.v?this.v.call(this.s,this):this.u=!0;this.a||(a=new fh(this),gh(this),hh(this,!1,a))}};eh.prototype.m=function(a,b){this.i=!1;hh(this,a,b)};function hh(a,b,c){a.a=!0;a.c=c;a.f=!b;ih(a)}
function gh(a){if(a.a){if(!a.u)throw new jh(a);a.u=!1}}eh.prototype.D=function(){gh(this);hh(this,!0,null)};function kh(a,b){lh(a,null,b,void 0)}function lh(a,b,c,d){a.g.push([b,c,d]);a.a&&ih(a)}eh.prototype.then=function(a,b,c){var d,e,f=new y(function(a,b){d=a;e=b});lh(this,d,function(a){a instanceof fh?f.cancel():e(a)});return f.then(a,b,c)};oa(eh);function mh(a){return Ca(a.g,function(a){return n(a[1])})}
function ih(a){if(a.h&&a.a&&mh(a)){var b=a.h,c=nh[b];c&&(k.clearTimeout(c.a),delete nh[b]);a.h=0}a.b&&(a.b.l--,delete a.b);b=a.c;for(var d=c=!1;a.g.length&&!a.i;){var e=a.g.shift(),f=e[0],h=e[1];e=e[2];if(f=a.f?h:f)try{var l=f.call(e||a.s,b);void 0!==l&&(a.f=a.f&&(l==b||l instanceof Error),a.c=b=l);if(pa(b)||"function"===typeof k.Promise&&b instanceof k.Promise)d=!0,a.i=!0}catch(p){b=p,a.f=!0,mh(a)||(c=!0)}}a.c=b;d&&(l=r(a.m,a,!0),d=r(a.m,a,!1),b instanceof eh?(lh(b,l,d),b.A=!0):b.then(l,d));c&&(b=
new oh(b),nh[b.a]=b,a.h=b.a)}function jh(){u.call(this)}t(jh,u);jh.prototype.message="Deferred has already fired";jh.prototype.name="AlreadyCalledError";function fh(){u.call(this)}t(fh,u);fh.prototype.message="Deferred was canceled";fh.prototype.name="CanceledError";function oh(a){this.a=k.setTimeout(r(this.c,this),0);this.b=a}oh.prototype.c=function(){delete nh[this.a];throw this.b;};var nh={};function ph(a){var b={},c=b.document||document,d=td(a),e=document.createElement("SCRIPT"),f={Fb:e,Fa:void 0},h=new eh(qh,f),l=null,p=null!=b.timeout?b.timeout:5E3;0<p&&(l=window.setTimeout(function(){rh(e,!0);var a=new sh(th,"Timeout reached for loading script "+d);gh(h);hh(h,!1,a)},p),f.Fa=l);e.onload=e.onreadystatechange=function(){e.readyState&&"loaded"!=e.readyState&&"complete"!=e.readyState||(rh(e,b.ad||!1,l),h.D())};e.onerror=function(){rh(e,!0,l);var a=new sh(uh,"Error while loading script "+
d);gh(h);hh(h,!1,a)};f=b.attributes||{};bb(f,{type:"text/javascript",charset:"UTF-8"});Jd(e,f);e.src=td(a);vh(c).appendChild(e);return h}function vh(a){var b;return(b=(a||document).getElementsByTagName("HEAD"))&&0!=b.length?b[0]:a.documentElement}function qh(){if(this&&this.Fb){var a=this.Fb;a&&"SCRIPT"==a.tagName&&rh(a,!0,this.Fa)}}
function rh(a,b,c){null!=c&&k.clearTimeout(c);a.onload=ca;a.onerror=ca;a.onreadystatechange=ca;b&&window.setTimeout(function(){a&&a.parentNode&&a.parentNode.removeChild(a)},0)}var uh=0,th=1;function sh(a,b){var c="Jsloader error (code #"+a+")";b&&(c+=": "+b);u.call(this,c);this.code=a}t(sh,u);function wh(a){this.f=a}t(wh,sg);wh.prototype.a=function(){return new this.f};wh.prototype.b=function(){return{}};
function xh(a,b,c){this.b=a;a=b||{};this.i=a.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token";this.l=a.secureTokenTimeout||yh;this.f=$a(a.secureTokenHeaders||zh);this.g=a.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.h=a.firebaseTimeout||Ah;this.a=$a(a.firebaseHeaders||Bh);c&&(this.a["X-Client-Version"]=c,this.f["X-Client-Version"]=c);c="Node"==me();c=k.XMLHttpRequest||c&&firebase.INTERNAL.node&&firebase.INTERNAL.node.XMLHttpRequest;if(!c&&
!le())throw new L("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0;le()?this.c=new Mg(self):ne()?this.c=new wh(c):this.c=new xg}var Ch,M="idToken",yh=new Be(3E4,6E4),zh={"Content-Type":"application/x-www-form-urlencoded"},Ah=new Be(3E4,6E4),Bh={"Content-Type":"application/json"};function Dh(a,b){b?a.a["X-Firebase-Locale"]=b:delete a.a["X-Firebase-Locale"]}
function Eh(a,b){b?(a.a["X-Client-Version"]=b,a.f["X-Client-Version"]=b):(delete a.a["X-Client-Version"],delete a.f["X-Client-Version"])}function Fh(a,b,c,d,e,f,h){Ae()?(Yd()||le()?a=r(a.m,a):(Ch||(Ch=new y(function(a,b){Gh(a,b)})),a=r(a.u,a)),a(b,c,d,e,f,h)):c&&c(null)}
xh.prototype.m=function(a,b,c,d,e,f){var h=new Qg(this.c);if(f){h.g=Math.max(0,f);var l=setTimeout(function(){h.dispatchEvent("timeout")},f)}tc(h,"complete",function(){l&&clearTimeout(l);var a=null;try{a=JSON.parse(dh(this))||null}catch(E){a=null}b&&b(a)});zc(h,"ready",function(){l&&clearTimeout(l);Jb(this)});zc(h,"timeout",function(){l&&clearTimeout(l);Jb(this);b&&b(null)});Ug(h,a,c,d,e)};var Hh=qd("https://apis.google.com/js/client.js?onload=%{onload}"),Ih="__fcb"+Math.floor(1E6*Math.random()).toString();
function Gh(a,b){if(((window.gapi||{}).client||{}).request)a();else{k[Ih]=function(){((window.gapi||{}).client||{}).request?a():b(Error("CORS_UNSUPPORTED"))};var c=ud(Hh,{onload:Ih});kh(ph(c),function(){b(Error("CORS_UNSUPPORTED"))})}}
xh.prototype.u=function(a,b,c,d,e){var f=this;Ch.then(function(){window.gapi.client.setApiKey(f.b);var h=window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({path:a,method:c,body:d,headers:e,authType:"none",callback:function(a){window.gapi.auth.setToken(h);b&&b(a)}})}).o(function(a){b&&b({error:{message:a&&a.message||"CORS_UNSUPPORTED"}})})};
function Jh(a,b){return new y(function(c,d){"refresh_token"==b.grant_type&&b.refresh_token||"authorization_code"==b.grant_type&&b.code?Fh(a,a.i+"?key="+encodeURIComponent(a.b),function(a){a?a.error?d(Kh(a)):a.access_token&&a.refresh_token?c(a):d(new L("internal-error")):d(new L("network-request-failed"))},"POST",hd(b).toString(),a.f,a.l.get()):d(new L("internal-error"))})}
function Lh(a,b,c,d,e,f){var h=dd(a.g+b);G(h,"key",a.b);f&&G(h,"cb",na().toString());var l="GET"==c;if(l)for(var p in d)d.hasOwnProperty(p)&&G(h,p,d[p]);return new y(function(b,f){Fh(a,h.toString(),function(a){a?a.error?f(Kh(a,e||{})):b(a):f(new L("network-request-failed"))},c,l?void 0:Od(we(d)),a.a,a.h.get())})}function Mh(a){if(!rg.test(a.email))throw new L("invalid-email");}function Nh(a){"email"in a&&Mh(a)}
function Oh(a,b){return P(a,Ph,{identifier:b,continueUri:te()?Vd():"http://localhost"}).then(function(a){return a.allProviders||[]})}function Qh(a,b){return P(a,Ph,{identifier:b,continueUri:te()?Vd():"http://localhost"}).then(function(a){return a.signinMethods||[]})}function Rh(a){return P(a,Sh,{}).then(function(a){return a.authorizedDomains||[]})}function Th(a){if(!a[M])throw new L("internal-error");}
function Uh(a){if(a.phoneNumber||a.temporaryProof){if(!a.phoneNumber||!a.temporaryProof)throw new L("internal-error");}else{if(!a.sessionInfo)throw new L("missing-verification-id");if(!a.code)throw new L("missing-verification-code");}}xh.prototype.jb=function(){return P(this,Vh,{})};xh.prototype.mb=function(a,b){return P(this,Wh,{idToken:a,email:b})};xh.prototype.nb=function(a,b){return P(this,Zf,{idToken:a,password:b})};var Xh={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};g=xh.prototype;
g.ob=function(a,b){var c={idToken:a},d=[];Ya(Xh,function(a,f){var e=b[f];null===e?d.push(a):f in b&&(c[f]=e)});d.length&&(c.deleteAttribute=d);return P(this,Wh,c)};g.gb=function(a,b){a={requestType:"PASSWORD_RESET",email:a};bb(a,b);return P(this,Yh,a)};g.hb=function(a,b){a={requestType:"EMAIL_SIGNIN",email:a};bb(a,b);return P(this,Zh,a)};g.fb=function(a,b){a={requestType:"VERIFY_EMAIL",idToken:a};bb(a,b);return P(this,$h,a)};function gg(a,b){return P(a,ai,b)}g.Sa=function(a){return P(this,bi,a)};
function ci(a,b,c){return P(a,di,{idToken:b,deleteProvider:c})}function ei(a){if(!a.requestUri||!a.sessionId&&!a.postBody)throw new L("internal-error");}
function fi(a){var b=null;a.needConfirmation?(a.code="account-exists-with-different-credential",b=qg(a)):"FEDERATED_USER_ID_ALREADY_LINKED"==a.errorMessage?(a.code="credential-already-in-use",b=qg(a)):"EMAIL_EXISTS"==a.errorMessage?(a.code="email-already-in-use",b=qg(a)):a.errorMessage&&(b=gi(a.errorMessage));if(b)throw b;if(!a[M])throw new L("internal-error");}function If(a,b){b.returnIdpCredential=!0;return P(a,hi,b)}function Kf(a,b){b.returnIdpCredential=!0;return P(a,ii,b)}
function Lf(a,b){b.returnIdpCredential=!0;b.autoCreate=!1;return P(a,ji,b)}function ki(a){if(!a.oobCode)throw new L("invalid-action-code");}g.Wa=function(a,b){return P(this,li,{oobCode:a,newPassword:b})};g.Ia=function(a){return P(this,mi,{oobCode:a})};g.Ua=function(a){return P(this,ni,{oobCode:a})};
var ni={endpoint:"setAccountInfo",w:ki,$:"email"},mi={endpoint:"resetPassword",w:ki,J:function(a){if(!a.email||!a.requestType)throw new L("internal-error");}},oi={endpoint:"signupNewUser",w:function(a){Mh(a);if(!a.password)throw new L("weak-password");},J:Th,P:!0},Ph={endpoint:"createAuthUri"},pi={endpoint:"deleteAccount",S:["idToken"]},di={endpoint:"setAccountInfo",S:["idToken","deleteProvider"],w:function(a){if(!fa(a.deleteProvider))throw new L("internal-error");}},Wf={endpoint:"emailLinkSignin",
S:["email","oobCode"],w:Mh,J:Th,P:!0},Yf={endpoint:"emailLinkSignin",S:["idToken","email","oobCode"],w:Mh,J:Th,P:!0},qi={endpoint:"getAccountInfo"},Zh={endpoint:"getOobConfirmationCode",S:["requestType"],w:function(a){if("EMAIL_SIGNIN"!=a.requestType)throw new L("internal-error");Mh(a)},$:"email"},$h={endpoint:"getOobConfirmationCode",S:["idToken","requestType"],w:function(a){if("VERIFY_EMAIL"!=a.requestType)throw new L("internal-error");},$:"email"},Yh={endpoint:"getOobConfirmationCode",S:["requestType"],
w:function(a){if("PASSWORD_RESET"!=a.requestType)throw new L("internal-error");Mh(a)},$:"email"},Sh={pb:!0,endpoint:"getProjectConfig",Cb:"GET"},ri={pb:!0,endpoint:"getRecaptchaParam",Cb:"GET",J:function(a){if(!a.recaptchaSiteKey)throw new L("internal-error");}},li={endpoint:"resetPassword",w:ki,$:"email"},ai={endpoint:"sendVerificationCode",S:["phoneNumber","recaptchaToken"],$:"sessionInfo"},Wh={endpoint:"setAccountInfo",S:["idToken"],w:Nh,P:!0},Zf={endpoint:"setAccountInfo",S:["idToken"],w:function(a){Nh(a);
if(!a.password)throw new L("weak-password");},J:Th,P:!0},Vh={endpoint:"signupNewUser",J:Th,P:!0},hi={endpoint:"verifyAssertion",w:ei,J:fi,P:!0},ji={endpoint:"verifyAssertion",w:ei,J:function(a){if(a.errorMessage&&"USER_NOT_FOUND"==a.errorMessage)throw new L("user-not-found");if(a.errorMessage)throw gi(a.errorMessage);if(!a[M])throw new L("internal-error");},P:!0},ii={endpoint:"verifyAssertion",w:function(a){ei(a);if(!a.idToken)throw new L("internal-error");},J:fi,P:!0},si={endpoint:"verifyCustomToken",
w:function(a){if(!a.token)throw new L("invalid-custom-token");},J:Th,P:!0},Xf={endpoint:"verifyPassword",w:function(a){Mh(a);if(!a.password)throw new L("wrong-password");},J:Th,P:!0},bi={endpoint:"verifyPhoneNumber",w:Uh,J:Th},dg={endpoint:"verifyPhoneNumber",w:function(a){if(!a.idToken)throw new L("internal-error");Uh(a)},J:function(a){if(a.temporaryProof)throw a.code="credential-already-in-use",qg(a);Th(a)}},eg={Tb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",w:Uh,J:Th};
function P(a,b,c){if(!Me(c,b.S))return A(new L("internal-error"));var d=b.Cb||"POST",e;return z(c).then(b.w).then(function(){b.P&&(c.returnSecureToken=!0);return Lh(a,b.endpoint,d,c,b.Tb,b.pb||!1)}).then(function(a){return e=a}).then(b.J).then(function(){if(!b.$)return e;if(!(b.$ in e))throw new L("internal-error");return e[b.$]})}function gi(a){return Kh({error:{errors:[{message:a}],code:400,message:a}})}
function Kh(a,b){var c=(a.error&&a.error.errors&&a.error.errors[0]||{}).reason||"";var d={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(c=d[c]?new L(d[c]):null)return c;c=a.error&&a.error.message||"";d={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",
MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",
INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",
INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",
UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"};bb(d,b||{});b=(b=c.match(/^[^\s]+\s*:\s*(.*)$/))&&1<b.length?b[1]:void 0;for(var e in d)if(0===c.indexOf(e))return new L(d[e],b);!b&&a&&(b=ve(a));return new L("internal-error",b)};var ti={Vc:{Ya:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://securetoken.googleapis.com/v1/token",id:"p"},Xc:{Ya:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},Yc:{Ya:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",eb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};
function ui(a){for(var b in ti)if(ti[b].id===a)return a=ti[b],{firebaseEndpoint:a.Ya,secureTokenEndpoint:a.eb};return null}var vi;vi=ui("__EID__")?"__EID__":void 0;function wi(a){this.b=a;this.a=null;this.ab=xi(this)}
function xi(a){return yi().then(function(){return new y(function(b,c){I("gapi.iframes.getContext")().open({where:document.body,url:a.b,messageHandlersFilter:I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(d){function e(){clearTimeout(f);b()}a.a=d;a.a.restyle({setHideOnLeave:!1});var f=setTimeout(function(){c(Error("Network Error"))},zi.get());d.ping(e).then(e,function(){c(Error("Network Error"))})})})})}
function Ai(a,b){return a.ab.then(function(){return new y(function(c){a.a.send(b.type,b,c,I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}function Bi(a,b){a.ab.then(function(){a.a.register("authEvent",b,I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}var Ci=qd("https://apis.google.com/js/api.js?onload=%{onload}"),Di=new Be(3E4,6E4),zi=new Be(5E3,15E3),Ei=null;
function yi(){return Ei?Ei:Ei=(new y(function(a,b){if(Ae()){var c=function(){ze();I("gapi.load")("gapi.iframes",{callback:a,ontimeout:function(){ze();b(Error("Network Error"))},timeout:Di.get()})};if(I("gapi.iframes.Iframe"))a();else if(I("gapi.load"))c();else{var d="__iframefcb"+Math.floor(1E6*Math.random()).toString();k[d]=function(){I("gapi.load")?c():b(Error("Network Error"))};d=ud(Ci,{onload:d});z(ph(d)).o(function(){b(Error("Network Error"))})}}else b(Error("Network Error"))})).o(function(a){Ei=
null;throw a;})};function Fi(a,b,c){this.i=a;this.g=b;this.h=c;this.f=null;this.a=ed(this.i,"/__/auth/iframe");G(this.a,"apiKey",this.g);G(this.a,"appName",this.h);this.b=null;this.c=[]}Fi.prototype.toString=function(){this.f?G(this.a,"v",this.f):kd(this.a.a,"v");this.b?G(this.a,"eid",this.b):kd(this.a.a,"eid");this.c.length?G(this.a,"fw",this.c.join(",")):kd(this.a.a,"fw");return this.a.toString()};function Gi(a,b,c,d,e){this.m=a;this.u=b;this.c=c;this.l=d;this.h=this.g=this.i=null;this.a=e;this.f=null}
Gi.prototype.toString=function(){var a=ed(this.m,"/__/auth/handler");G(a,"apiKey",this.u);G(a,"appName",this.c);G(a,"authType",this.l);if(this.a.isOAuthProvider){var b=this.a;try{var c=firebase.app(this.c).auth().aa()}catch(l){c=null}b.Xa=c;G(a,"providerId",this.a.providerId);b=this.a;c=we(b.tb);for(var d in c)c[d]=c[d].toString();d=b.zc;c=$a(c);for(var e=0;e<d.length;e++){var f=d[e];f in c&&delete c[f]}b.Za&&b.Xa&&!c[b.Za]&&(c[b.Za]=b.Xa);Za(c)||G(a,"customParameters",ve(c))}"function"===typeof this.a.yb&&
(b=this.a.yb(),b.length&&G(a,"scopes",b.join(",")));this.i?G(a,"redirectUrl",this.i):kd(a.a,"redirectUrl");this.g?G(a,"eventId",this.g):kd(a.a,"eventId");this.h?G(a,"v",this.h):kd(a.a,"v");if(this.b)for(var h in this.b)this.b.hasOwnProperty(h)&&!cd(a,h)&&G(a,h,this.b[h]);this.f?G(a,"eid",this.f):kd(a.a,"eid");h=Hi(this.c);h.length&&G(a,"fw",h.join(","));return a.toString()};function Hi(a){try{return firebase.app(a).auth().Ka()}catch(b){return[]}}
function Ii(a,b,c,d,e){this.u=a;this.f=b;this.b=c;this.c=d||null;this.h=e||null;this.m=this.s=this.v=null;this.g=[];this.l=this.a=null}
function Ji(a){var b=Vd();return Rh(a).then(function(a){a:{var c=dd(b),e=c.c;c=c.b;for(var f=0;f<a.length;f++){var h=a[f];var l=c;var p=e;0==h.indexOf("chrome-extension://")?l=dd(h).b==l&&"chrome-extension"==p:"http"!=p&&"https"!=p?l=!1:fe.test(h)?l=l==h:(h=h.split(".").join("\\."),l=(new RegExp("^(.+\\."+h+"|"+h+")$","i")).test(l));if(l){a=!0;break a}}a=!1}if(!a)throw new og(Vd());})}
function Ki(a){if(a.l)return a.l;a.l=ge().then(function(){if(!a.s){var b=a.c,c=a.h,d=Hi(a.b),e=new Fi(a.u,a.f,a.b);e.f=b;e.b=c;e.c=Ja(d||[]);a.s=e.toString()}a.i=new wi(a.s);Li(a)});return a.l}g=Ii.prototype;g.Da=function(a,b,c){var d=new L("popup-closed-by-user"),e=new L("web-storage-unsupported"),f=this,h=!1;return this.ca().then(function(){Mi(f).then(function(c){c||(a&&be(a),b(e),h=!0)})}).o(function(){}).then(function(){if(!h)return ee(a)}).then(function(){if(!h)return Gc(c).then(function(){b(d)})})};
g.Gb=function(){var a=H();return!ue(a)&&!ye(a)};g.Bb=function(){return!1};
g.xb=function(a,b,c,d,e,f,h){if(!a)return A(new L("popup-blocked"));if(h&&!ue())return this.ca().o(function(b){be(a);e(b)}),d(),z();this.a||(this.a=Ji(Ni(this)));var l=this;return this.a.then(function(){var b=l.ca().o(function(b){be(a);e(b);throw b;});d();return b}).then(function(){jg(c);if(!h){var d=Oi(l.u,l.f,l.b,b,c,null,f,l.c,void 0,l.h);Wd(d,a)}}).o(function(a){"auth/network-request-failed"==a.code&&(l.a=null);throw a;})};
function Ni(a){a.m||(a.v=a.c?pe(a.c,Hi(a.b)):null,a.m=new xh(a.f,ui(a.h),a.v));return a.m}g.Ba=function(a,b,c){this.a||(this.a=Ji(Ni(this)));var d=this;return this.a.then(function(){jg(b);var e=Oi(d.u,d.f,d.b,a,b,Vd(),c,d.c,void 0,d.h);Wd(e)}).o(function(a){"auth/network-request-failed"==a.code&&(d.a=null);throw a;})};g.ca=function(){var a=this;return Ki(this).then(function(){return a.i.ab}).o(function(){a.a=null;throw new L("network-request-failed");})};g.Lb=function(){return!0};
function Oi(a,b,c,d,e,f,h,l,p,E){a=new Gi(a,b,c,d,e);a.i=f;a.g=h;a.h=l;a.b=$a(p||null);a.f=E;return a.toString()}function Li(a){if(!a.i)throw Error("IfcHandler must be initialized!");Bi(a.i,function(b){var c={};if(b&&b.authEvent){var d=!1;b=lg(b.authEvent);for(c=0;c<a.g.length;c++)d=a.g[c](b)||d;c={};c.status=d?"ACK":"ERROR";return z(c)}c.status="ERROR";return z(c)})}
function Mi(a){var b={type:"webStorageSupport"};return Ki(a).then(function(){return Ai(a.i,b)}).then(function(a){if(a&&a.length&&"undefined"!==typeof a[0].webStorageSupport)return a[0].webStorageSupport;throw Error();})}g.va=function(a){this.g.push(a)};g.Ja=function(a){Ha(this.g,function(b){return b==a})};function Pi(a){this.a=a||firebase.INTERNAL.reactNative&&firebase.INTERNAL.reactNative.AsyncStorage;if(!this.a)throw new L("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}g=Pi.prototype;g.get=function(a){return z(this.a.getItem(a)).then(function(a){return a&&xe(a)})};g.set=function(a,b){return z(this.a.setItem(a,ve(b)))};g.X=function(a){return z(this.a.removeItem(a))};g.ia=function(){};g.ea=function(){};function Qi(){this.a={};this.type="inMemory"}g=Qi.prototype;g.get=function(a){return z(this.a[a])};g.set=function(a,b){this.a[a]=b;return z()};g.X=function(a){delete this.a[a];return z()};g.ia=function(){};g.ea=function(){};function Ri(){try{var a=!!k.indexedDB}catch(b){a=!1}if(!a)throw new L("web-storage-unsupported");this.f={};this.c=[];this.a=0;this.h=k.indexedDB;this.type="indexedDB"}var Si;function Ti(a){return new y(function(b,c){var d=a.h.open("firebaseLocalStorageDb",1);d.onerror=function(a){c(Error(a.target.errorCode))};d.onupgradeneeded=function(a){a=a.target.result;try{a.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(f){c(f)}};d.onsuccess=function(a){b(a.target.result)}})}
function Ui(a){a.g||(a.g=Ti(a));return a.g}function Vi(a){return a.objectStore("firebaseLocalStorage")}function Wi(a,b){return a.transaction(["firebaseLocalStorage"],b?"readwrite":"readonly")}function Xi(a){return new y(function(b,c){a.onsuccess=function(a){a&&a.target?b(a.target.result):b()};a.onerror=function(a){c(Error(a.target.errorCode))}})}g=Ri.prototype;
g.set=function(a,b){var c=!1,d,e=this;return Ui(this).then(function(b){d=b;b=Vi(Wi(d,!0));return Xi(b.get(a))}).then(function(f){var h=Vi(Wi(d,!0));if(f)return f.value=b,Xi(h.put(f));e.a++;c=!0;f={};f.fbase_key=a;f.value=b;return Xi(h.add(f))}).then(function(){e.f[a]=b}).ga(function(){c&&e.a--})};g.get=function(a){return Ui(this).then(function(b){return Xi(Vi(Wi(b,!1)).get(a))}).then(function(a){return a&&a.value})};
g.X=function(a){var b=!1,c=this;return Ui(this).then(function(d){b=!0;c.a++;return Xi(Vi(Wi(d,!0))["delete"](a))}).then(function(){delete c.f[a]}).ga(function(){b&&c.a--})};
g.Ic=function(){var a=this;return Ui(this).then(function(a){var b=Vi(Wi(a,!1));return b.getAll?Xi(b.getAll()):new y(function(a,c){var d=[],e=b.openCursor();e.onsuccess=function(b){(b=b.target.result)?(d.push(b.value),b["continue"]()):a(d)};e.onerror=function(a){c(Error(a.target.errorCode))}})}).then(function(b){var c={},d=[];if(0==a.a){for(d=0;d<b.length;d++)c[b[d].fbase_key]=b[d].value;d=Xd(a.f,c);a.f=c}return d})};g.ia=function(a){0==this.c.length&&Yi(this);this.c.push(a)};
g.ea=function(a){Ha(this.c,function(b){return b==a});0==this.c.length&&this.b&&this.b.cancel("STOP_EVENT")};function Yi(a){function b(){a.b=Gc(800).then(r(a.Ic,a)).then(function(b){0<b.length&&v(a.c,function(a){a(b)})}).then(b).o(function(a){"STOP_EVENT"!=a.message&&b()});return a.b}a.b&&a.b.cancel("STOP_EVENT");b()};function Zi(){if(!$i()){if("Node"==me())throw new L("internal-error","The LocalStorage compatibility library was not found.");throw new L("web-storage-unsupported");}this.a=aj()||firebase.INTERNAL.node.localStorage;this.type="localStorage"}function aj(){try{var a=k.localStorage,b=re();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function $i(){var a="Node"==me();a=aj()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.localStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}g=Zi.prototype;g.get=function(a){var b=this;return z().then(function(){var c=b.a.getItem(a);return xe(c)})};g.set=function(a,b){var c=this;return z().then(function(){var d=ve(b);null===d?c.X(a):c.a.setItem(a,d)})};g.X=function(a){var b=this;return z().then(function(){b.a.removeItem(a)})};
g.ia=function(a){k.window&&qc(k.window,"storage",a)};g.ea=function(a){k.window&&D(k.window,"storage",a)};function bj(){this.type="nullStorage"}g=bj.prototype;g.get=function(){return z(null)};g.set=function(){return z()};g.X=function(){return z()};g.ia=function(){};g.ea=function(){};function cj(){if(!dj()){if("Node"==me())throw new L("internal-error","The SessionStorage compatibility library was not found.");throw new L("web-storage-unsupported");}this.a=ej()||firebase.INTERNAL.node.sessionStorage;this.type="sessionStorage"}function ej(){try{var a=k.sessionStorage,b=re();a&&(a.setItem(b,"1"),a.removeItem(b));return a}catch(c){return null}}
function dj(){var a="Node"==me();a=ej()||a&&firebase.INTERNAL.node&&firebase.INTERNAL.node.sessionStorage;if(!a)return!1;try{return a.setItem("__sak","1"),a.removeItem("__sak"),!0}catch(b){return!1}}g=cj.prototype;g.get=function(a){var b=this;return z().then(function(){var c=b.a.getItem(a);return xe(c)})};g.set=function(a,b){var c=this;return z().then(function(){var d=ve(b);null===d?c.X(a):c.a.setItem(a,d)})};g.X=function(a){var b=this;return z().then(function(){b.a.removeItem(a)})};g.ia=function(){};
g.ea=function(){};function fj(){var a={};a.Browser=gj;a.Node=hj;a.ReactNative=ij;a.Worker=jj;this.a=a[me()]}var kj,gj={B:Zi,Pa:cj},hj={B:Zi,Pa:cj},ij={B:Pi,Pa:bj},jj={B:Zi,Pa:bj};var lj={Uc:"local",NONE:"none",Wc:"session"};function mj(a){var b=new L("invalid-persistence-type"),c=new L("unsupported-persistence-type");a:{for(d in lj)if(lj[d]==a){var d=!0;break a}d=!1}if(!d||"string"!==typeof a)throw b;switch(me()){case "ReactNative":if("session"===a)throw c;break;case "Node":if("none"!==a)throw c;break;default:if(!qe()&&"none"!==a)throw c;}}
function nj(){var a=!ye(H())&&ke()?!0:!1,b=ue(),c=qe();this.m=a;this.h=b;this.l=c;this.a={};kj||(kj=new fj);a=kj;try{if(!Ud()&&Ge()||!k.indexedDB)var d=new a.a.B;else Si||(Si=new Ri),d=Si;this.g=d}catch(e){this.g=new Qi,this.h=!0}try{this.i=new a.a.Pa}catch(e){this.i=new Qi}this.u=new Qi;this.f=r(this.Kb,this);this.b={}}var oj;function pj(){oj||(oj=new nj);return oj}function qj(a,b){switch(b){case "session":return a.i;case "none":return a.u;default:return a.g}}
function rj(a,b){return"firebase:"+a.name+(b?":"+b:"")}function sj(a,b,c){var d=rj(b,c),e=qj(a,b.B);return a.get(b,c).then(function(f){var h=null;try{h=xe(k.localStorage.getItem(d))}catch(l){}if(h&&!f)return k.localStorage.removeItem(d),a.set(b,h,c);h&&f&&"localStorage"!=e.type&&k.localStorage.removeItem(d)})}g=nj.prototype;g.get=function(a,b){return qj(this,a.B).get(rj(a,b))};function tj(a,b,c){c=rj(b,c);"local"==b.B&&(a.b[c]=null);return qj(a,b.B).X(c)}
g.set=function(a,b,c){var d=rj(a,c),e=this,f=qj(this,a.B);return f.set(d,b).then(function(){return f.get(d)}).then(function(b){"local"==a.B&&(e.b[d]=b)})};g.addListener=function(a,b,c){a=rj(a,b);this.l&&(this.b[a]=k.localStorage.getItem(a));Za(this.a)&&(qj(this,"local").ia(this.f),this.h||(Ud()||!Ge())&&k.indexedDB||!this.l||uj(this));this.a[a]||(this.a[a]=[]);this.a[a].push(c)};
g.removeListener=function(a,b,c){a=rj(a,b);this.a[a]&&(Ha(this.a[a],function(a){return a==c}),0==this.a[a].length&&delete this.a[a]);Za(this.a)&&(qj(this,"local").ea(this.f),vj(this))};function uj(a){vj(a);a.c=setInterval(function(){for(var b in a.a){var c=k.localStorage.getItem(b),d=a.b[b];c!=d&&(a.b[b]=c,c=new dc({type:"storage",key:b,target:window,oldValue:d,newValue:c,a:!0}),a.Kb(c))}},1E3)}function vj(a){a.c&&(clearInterval(a.c),a.c=null)}
g.Kb=function(a){if(a&&a.g){var b=a.a.key;if(null==b)for(var c in this.a){var d=this.b[c];"undefined"===typeof d&&(d=null);var e=k.localStorage.getItem(c);e!==d&&(this.b[c]=e,this.Va(c))}else if(0==b.indexOf("firebase:")&&this.a[b]){"undefined"!==typeof a.a.a?qj(this,"local").ea(this.f):vj(this);if(this.m)if(c=k.localStorage.getItem(b),d=a.a.newValue,d!==c)null!==d?k.localStorage.setItem(b,d):k.localStorage.removeItem(b);else if(this.b[b]===d&&"undefined"===typeof a.a.a)return;var f=this;c=function(){if("undefined"!==
typeof a.a.a||f.b[b]!==k.localStorage.getItem(b))f.b[b]=k.localStorage.getItem(b),f.Va(b)};B&&Yb&&10==Yb&&k.localStorage.getItem(b)!==a.a.newValue&&a.a.newValue!==a.a.oldValue?setTimeout(c,10):c()}}else v(a,r(this.Va,this))};g.Va=function(a){this.a[a]&&v(this.a[a],function(a){a()})};function wj(a){this.a=a;this.b=pj()}var xj={name:"authEvent",B:"local"};function yj(a){return a.b.get(xj,a.a).then(function(a){return lg(a)})};function zj(){this.a=pj()};function Aj(){this.b=-1};function Bj(a,b){this.b=-1;this.b=Cj;this.f=k.Uint8Array?new Uint8Array(this.b):Array(this.b);this.g=this.c=0;this.a=[];this.i=a;this.h=b;this.l=k.Int32Array?new Int32Array(64):Array(64);void 0!==Dj||(k.Int32Array?Dj=new Int32Array(Ej):Dj=Ej);this.reset()}var Dj;t(Bj,Aj);for(var Cj=64,Fj=Cj-1,Gj=[],Hj=0;Hj<Fj;Hj++)Gj[Hj]=0;var Ij=Ia(128,Gj);Bj.prototype.reset=function(){this.g=this.c=0;this.a=k.Int32Array?new Int32Array(this.h):Ja(this.h)};
function Jj(a){for(var b=a.f,c=a.l,d=0,e=0;e<b.length;)c[d++]=b[e]<<24|b[e+1]<<16|b[e+2]<<8|b[e+3],e=4*d;for(b=16;64>b;b++){e=c[b-15]|0;d=c[b-2]|0;var f=(c[b-16]|0)+((e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3)|0,h=(c[b-7]|0)+((d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10)|0;c[b]=f+h|0}d=a.a[0]|0;e=a.a[1]|0;var l=a.a[2]|0,p=a.a[3]|0,E=a.a[4]|0,gc=a.a[5]|0,Hc=a.a[6]|0;f=a.a[7]|0;for(b=0;64>b;b++){var De=((d>>>2|d<<30)^(d>>>13|d<<19)^(d>>>22|d<<10))+(d&e^d&l^e&l)|0;h=E&gc^~E&Hc;f=f+((E>>>6|E<<26)^(E>>>11|E<<21)^(E>>>
25|E<<7))|0;h=h+(Dj[b]|0)|0;h=f+(h+(c[b]|0)|0)|0;f=Hc;Hc=gc;gc=E;E=p+h|0;p=l;l=e;e=d;d=h+De|0}a.a[0]=a.a[0]+d|0;a.a[1]=a.a[1]+e|0;a.a[2]=a.a[2]+l|0;a.a[3]=a.a[3]+p|0;a.a[4]=a.a[4]+E|0;a.a[5]=a.a[5]+gc|0;a.a[6]=a.a[6]+Hc|0;a.a[7]=a.a[7]+f|0}
function Kj(a,b,c){void 0===c&&(c=b.length);var d=0,e=a.c;if(m(b))for(;d<c;)a.f[e++]=b.charCodeAt(d++),e==a.b&&(Jj(a),e=0);else if(ha(b))for(;d<c;){var f=b[d++];if(!("number"==typeof f&&0<=f&&255>=f&&f==(f|0)))throw Error("message must be a byte array");a.f[e++]=f;e==a.b&&(Jj(a),e=0)}else throw Error("message must be string or array");a.c=e;a.g+=c}
var Ej=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,
4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Lj(){Bj.call(this,8,Mj)}t(Lj,Bj);var Mj=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Nj(a,b,c,d,e){this.u=a;this.i=b;this.l=c;this.m=d||null;this.s=e||null;this.h=b+":"+c;this.v=new zj;this.g=new wj(this.h);this.f=null;this.b=[];this.a=this.c=null}function Oj(a){return new L("invalid-cordova-configuration",a)}g=Nj.prototype;
g.ca=function(){return this.ya?this.ya:this.ya=he().then(function(){if("function"!==typeof I("universalLinks.subscribe",k))throw Oj("cordova-universal-links-plugin is not installed");if("undefined"===typeof I("BuildInfo.packageName",k))throw Oj("cordova-plugin-buildinfo is not installed");if("function"!==typeof I("cordova.plugins.browsertab.openUrl",k))throw Oj("cordova-plugin-browsertab is not installed");if("function"!==typeof I("cordova.InAppBrowser.open",k))throw Oj("cordova-plugin-inappbrowser is not installed");
},function(){throw new L("cordova-not-ready");})};function Pj(){for(var a=20,b=[];0<a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),a--;return b.join("")}function Qj(a){var b=new Lj;Kj(b,a);a=[];var c=8*b.g;56>b.c?Kj(b,Ij,56-b.c):Kj(b,Ij,b.b-(b.c-56));for(var d=63;56<=d;d--)b.f[d]=c&255,c/=256;Jj(b);for(d=c=0;d<b.i;d++)for(var e=24;0<=e;e-=8)a[c++]=b.a[d]>>e&255;return kf(a)}
g.Da=function(a,b){b(new L("operation-not-supported-in-this-environment"));return z()};g.xb=function(){return A(new L("operation-not-supported-in-this-environment"))};g.Lb=function(){return!1};g.Gb=function(){return!0};g.Bb=function(){return!0};
g.Ba=function(a,b,c){if(this.c)return A(new L("redirect-operation-pending"));var d=this,e=k.document,f=null,h=null,l=null,p=null;return this.c=z().then(function(){jg(b);return Rj(d)}).then(function(){return Sj(d,a,b,c)}).then(function(){return(new y(function(a,b){h=function(){var b=I("cordova.plugins.browsertab.close",k);a();"function"===typeof b&&b();d.a&&"function"===typeof d.a.close&&(d.a.close(),d.a=null);return!1};d.va(h);l=function(){f||(f=Gc(2E3).then(function(){b(new L("redirect-cancelled-by-user"))}))};
p=function(){Ce()&&l()};e.addEventListener("resume",l,!1);H().toLowerCase().match(/android/)||e.addEventListener("visibilitychange",p,!1)})).o(function(a){return Tj(d).then(function(){throw a;})})}).ga(function(){l&&e.removeEventListener("resume",l,!1);p&&e.removeEventListener("visibilitychange",p,!1);f&&f.cancel();h&&d.Ja(h);d.c=null})};
function Sj(a,b,c,d){var e=Pj(),f=new kg(b,d,null,e,new L("no-auth-event")),h=I("BuildInfo.packageName",k);if("string"!==typeof h)throw new L("invalid-cordova-configuration");var l=I("BuildInfo.displayName",k),p={};if(H().toLowerCase().match(/iphone|ipad|ipod/))p.ibi=h;else if(H().toLowerCase().match(/android/))p.apn=h;else return A(new L("operation-not-supported-in-this-environment"));l&&(p.appDisplayName=l);e=Qj(e);p.sessionId=e;var E=Oi(a.u,a.i,a.l,b,c,null,d,a.m,p,a.s);return a.ca().then(function(){var b=
a.h;return a.v.a.set(xj,f.C(),b)}).then(function(){var b=I("cordova.plugins.browsertab.isAvailable",k);if("function"!==typeof b)throw new L("invalid-cordova-configuration");var c=null;b(function(b){if(b){c=I("cordova.plugins.browsertab.openUrl",k);if("function"!==typeof c)throw new L("invalid-cordova-configuration");c(E)}else{c=I("cordova.InAppBrowser.open",k);if("function"!==typeof c)throw new L("invalid-cordova-configuration");b=H();b=!(!b.match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!b.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
a.a=c(E,b?"_blank":"_system","location=yes")}})})}function Uj(a,b){for(var c=0;c<a.b.length;c++)try{a.b[c](b)}catch(d){}}function Rj(a){a.f||(a.f=a.ca().then(function(){return new y(function(b){function c(d){b(d);a.Ja(c);return!1}a.va(c);Vj(a)})}));return a.f}function Tj(a){var b=null;return yj(a.g).then(function(c){b=c;c=a.g;return tj(c.b,xj,c.a)}).then(function(){return b})}
function Vj(a){function b(b){d=!0;e&&e.cancel();Tj(a).then(function(d){var e=c;if(d&&b&&b.url){e=null;var f=b.url;var h=dd(f),l=cd(h,"link"),De=cd(dd(l),"link");h=cd(h,"deep_link_id");f=cd(dd(h),"link")||h||De||l||f;-1!=f.indexOf("/__/auth/callback")&&(e=dd(f),e=xe(cd(e,"firebaseError")||null),e=(e="object"===typeof e?Ze(e):null)?new kg(d.b,d.c,null,null,e):new kg(d.b,d.c,f,d.g));e=e||c}Uj(a,e)})}var c=new kg("unknown",null,null,null,new L("no-auth-event")),d=!1,e=Gc(500).then(function(){return Tj(a).then(function(){d||
Uj(a,c)})}),f=k.handleOpenURL;k.handleOpenURL=function(a){0==a.toLowerCase().indexOf(I("BuildInfo.packageName",k).toLowerCase()+"://")&&b({url:a});if("function"===typeof f)try{f(a)}catch(l){console.error(l)}};ng||(ng=new mg);ng.subscribe(b)}g.va=function(a){this.b.push(a);Rj(this).o(function(b){"auth/invalid-cordova-configuration"===b.code&&(b=new kg("unknown",null,null,null,new L("no-auth-event")),a(b))})};g.Ja=function(a){Ha(this.b,function(b){return b==a})};function Wj(a){this.a=a;this.b=pj()}var Xj={name:"pendingRedirect",B:"session"};function Yj(a){return a.b.set(Xj,"pending",a.a)}function Zj(a){return tj(a.b,Xj,a.a)}function ak(a){return a.b.get(Xj,a.a).then(function(a){return"pending"==a})};function bk(a,b,c){this.v=a;this.l=b;this.u=c;this.h=[];this.f=!1;this.i=r(this.m,this);this.c=new ck;this.s=new dk;this.g=new Wj(this.l+":"+this.u);this.b={};this.b.unknown=this.c;this.b.signInViaRedirect=this.c;this.b.linkViaRedirect=this.c;this.b.reauthViaRedirect=this.c;this.b.signInViaPopup=this.s;this.b.linkViaPopup=this.s;this.b.reauthViaPopup=this.s;this.a=ek(this.v,this.l,this.u,vi)}function ek(a,b,c,d){var e=firebase.SDK_VERSION||null;return ie()?new Nj(a,b,c,e,d):new Ii(a,b,c,e,d)}
bk.prototype.reset=function(){this.f=!1;this.a.Ja(this.i);this.a=ek(this.v,this.l,this.u)};function fk(a){a.f||(a.f=!0,a.a.va(a.i));var b=a.a;return a.a.ca().o(function(c){a.a==b&&a.reset();throw c;})}function gk(a){a.a.Gb()&&fk(a).o(function(b){var c=new kg("unknown",null,null,null,new L("operation-not-supported-in-this-environment"));hk(b)&&a.m(c)});a.a.Bb()||ik(a.c)}
bk.prototype.subscribe=function(a){Fa(this.h,a)||this.h.push(a);if(!this.f){var b=this;ak(this.g).then(function(a){a?Zj(b.g).then(function(){fk(b).o(function(a){var c=new kg("unknown",null,null,null,new L("operation-not-supported-in-this-environment"));hk(a)&&b.m(c)})}):gk(b)}).o(function(){gk(b)})}};bk.prototype.unsubscribe=function(a){Ha(this.h,function(b){return b==a})};
bk.prototype.m=function(a){if(!a)throw new L("invalid-auth-event");for(var b=!1,c=0;c<this.h.length;c++){var d=this.h[c];if(d.qb(a.b,a.c)){(b=this.b[a.b])&&b.h(a,d);b=!0;break}}ik(this.c);return b};var jk=new Be(2E3,1E4),kk=new Be(3E4,6E4);bk.prototype.ba=function(){return this.c.ba()};function lk(a,b,c,d,e,f){return a.a.xb(b,c,d,function(){a.f||(a.f=!0,a.a.va(a.i))},function(){a.reset()},e,f)}function hk(a){return a&&"auth/cordova-not-ready"==a.code?!0:!1}
bk.prototype.Ba=function(a,b,c){var d=this,e;return Yj(this.g).then(function(){return d.a.Ba(a,b,c).o(function(a){if(hk(a))throw new L("operation-not-supported-in-this-environment");e=a;return Zj(d.g).then(function(){throw e;})}).then(function(){return d.a.Lb()?new y(function(){}):Zj(d.g).then(function(){return d.ba()}).then(function(){}).o(function(){})})})};bk.prototype.Da=function(a,b,c,d){return this.a.Da(c,function(c){a.fa(b,null,c,d)},jk.get())};var mk={};
function nk(a,b,c){var d=b+":"+c;mk[d]||(mk[d]=new bk(a,b,c));return mk[d]}function ck(){this.b=null;this.f=[];this.c=[];this.a=null;this.g=!1}ck.prototype.reset=function(){this.b=null;this.a&&(this.a.cancel(),this.a=null)};
ck.prototype.h=function(a,b){if(a){this.reset();this.g=!0;var c=a.b,d=a.c,e=a.a&&"auth/web-storage-unsupported"==a.a.code,f=a.a&&"auth/operation-not-supported-in-this-environment"==a.a.code;"unknown"!=c||e||f?a.a?(ok(this,!0,null,a.a),z()):b.wa(c,d)?pk(this,a,b):A(new L("invalid-auth-event")):(ok(this,!1,null,null),z())}else A(new L("invalid-auth-event"))};function ik(a){a.g||(a.g=!0,ok(a,!1,null,null))}
function pk(a,b,c){c=c.wa(b.b,b.c);var d=b.f,e=b.g,f=!!b.b.match(/Redirect$/);c(d,e).then(function(b){ok(a,f,b,null)}).o(function(b){ok(a,f,null,b)})}function qk(a,b){a.b=function(){return A(b)};if(a.c.length)for(var c=0;c<a.c.length;c++)a.c[c](b)}function rk(a,b){a.b=function(){return z(b)};if(a.f.length)for(var c=0;c<a.f.length;c++)a.f[c](b)}function ok(a,b,c,d){b?d?qk(a,d):rk(a,c):rk(a,{user:null});a.f=[];a.c=[]}
ck.prototype.ba=function(){var a=this;return new y(function(b,c){a.b?a.b().then(b,c):(a.f.push(b),a.c.push(c),sk(a))})};function sk(a){var b=new L("timeout");a.a&&a.a.cancel();a.a=Gc(kk.get()).then(function(){a.b||ok(a,!0,null,b)})}function dk(){}dk.prototype.h=function(a,b){if(a){var c=a.b,d=a.c;a.a?(b.fa(a.b,null,a.a,a.c),z()):b.wa(c,d)?tk(a,b):A(new L("invalid-auth-event"))}else A(new L("invalid-auth-event"))};
function tk(a,b){var c=a.c,d=a.b;b.wa(d,c)(a.f,a.g).then(function(a){b.fa(d,a,null,c)}).o(function(a){b.fa(d,null,a,c)})};function uk(a,b){this.a=b;J(this,"verificationId",a)}uk.prototype.confirm=function(a){a=hg(this.verificationId,a);return this.a(a)};function vk(a,b,c,d){return(new fg(a)).Sa(b,c).then(function(a){return new uk(a,d)})};function wk(a,b,c){this.h=a;this.i=b;this.g=c;this.c=3E4;this.f=96E4;this.b=null;this.a=this.c;if(this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!");}wk.prototype.start=function(){this.a=this.c;xk(this,!0)};function yk(a,b){if(b)return a.a=a.c,a.g();b=a.a;a.a*=2;a.a>a.f&&(a.a=a.f);return b}function xk(a,b){a.stop();a.b=Gc(yk(a,b)).then(function(){return Ee()}).then(function(){return a.h()}).then(function(){xk(a,!0)}).o(function(b){a.i(b)&&xk(a,!1)})}
wk.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)};function zk(a){this.f=a;this.b=this.a=null;this.c=0}zk.prototype.C=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}};function Ak(a,b){var c=b[M],d=b.refreshToken;b=Bk(b.expiresIn);a.b=c;a.c=b;a.a=d}function Bk(a){return na()+1E3*parseInt(a,10)}
function Ck(a,b){return Jh(a.f,b).then(function(b){a.b=b.access_token;a.c=Bk(b.expires_in);a.a=b.refresh_token;return{accessToken:a.b,expirationTime:a.c,refreshToken:a.a}}).o(function(b){"auth/user-token-expired"==b.code&&(a.a=null);throw b;})}zk.prototype.getToken=function(a){a=!!a;return this.b&&!this.a?A(new L("user-token-expired")):a||!this.b||na()>this.c-3E4?this.a?Ck(this,{grant_type:"refresh_token",refresh_token:this.a}):z(null):z({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})};function Dk(a,b){this.a=a||null;this.b=b||null;K(this,{lastSignInTime:Fe(b||null),creationTime:Fe(a||null)})}function Ek(a){return new Dk(a.a,a.b)}Dk.prototype.C=function(){return{lastLoginAt:this.b,createdAt:this.a}};function Fk(a,b,c,d,e,f){K(this,{uid:a,displayName:d||null,photoURL:e||null,email:c||null,phoneNumber:f||null,providerId:b})}function Gk(a,b){C.call(this,a);for(var c in b)this[c]=b[c]}t(Gk,C);
function Hk(a,b,c){this.D=[];this.G=a.apiKey;this.s=a.appName;this.A=a.authDomain||null;a=firebase.SDK_VERSION?pe(firebase.SDK_VERSION):null;this.b=new xh(this.G,ui(vi),a);this.h=new zk(this.b);Ik(this,b[M]);Ak(this.h,b);J(this,"refreshToken",this.h.a);Jk(this,c||{});F.call(this);this.I=!1;this.A&&se()&&(this.a=nk(this.A,this.G,this.s));this.N=[];this.i=null;this.l=Kk(this);this.U=r(this.Ga,this);var d=this;this.ha=null;this.sa=function(a){d.na(a.h)};this.W=null;this.O=[];this.ra=function(a){Lk(d,
a.f)};this.V=null}t(Hk,F);Hk.prototype.na=function(a){this.ha=a;Dh(this.b,a)};Hk.prototype.aa=function(){return this.ha};function Mk(a,b){a.W&&D(a.W,"languageCodeChanged",a.sa);(a.W=b)&&qc(b,"languageCodeChanged",a.sa)}function Lk(a,b){a.O=b;Eh(a.b,firebase.SDK_VERSION?pe(firebase.SDK_VERSION,a.O):null)}Hk.prototype.Ka=function(){return Ja(this.O)};function Nk(a,b){a.V&&D(a.V,"frameworkChanged",a.ra);(a.V=b)&&qc(b,"frameworkChanged",a.ra)}Hk.prototype.Ga=function(){this.l.b&&(this.l.stop(),this.l.start())};
function Ok(a){try{return firebase.app(a.s).auth()}catch(b){throw new L("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+a.s+"'!");}}function Kk(a){return new wk(function(){return a.F(!0)},function(a){return a&&"auth/network-request-failed"==a.code?!0:!1},function(){var b=a.h.c-na()-3E5;return 0<b?b:0})}function Pk(a){a.m||a.l.b||(a.l.start(),D(a,"tokenChanged",a.U),qc(a,"tokenChanged",a.U))}function Qk(a){D(a,"tokenChanged",a.U);a.l.stop()}
function Ik(a,b){a.qa=b;J(a,"_lat",b)}function Rk(a,b){Ha(a.N,function(a){return a==b})}function Sk(a){for(var b=[],c=0;c<a.N.length;c++)b.push(a.N[c](a));return vb(b).then(function(){return a})}function Tk(a){a.a&&!a.I&&(a.I=!0,a.a.subscribe(a))}
function Jk(a,b){K(a,{uid:b.uid,displayName:b.displayName||null,photoURL:b.photoURL||null,email:b.email||null,emailVerified:b.emailVerified||!1,phoneNumber:b.phoneNumber||null,isAnonymous:b.isAnonymous||!1,metadata:new Dk(b.createdAt,b.lastLoginAt),providerData:[]})}J(Hk.prototype,"providerId","firebase");function Uk(){}function Vk(a){return z().then(function(){if(a.m)throw new L("app-deleted");})}function Wk(a){return Ba(a.providerData,function(a){return a.providerId})}
function Xk(a,b){b&&(Yk(a,b.providerId),a.providerData.push(b))}function Yk(a,b){Ha(a.providerData,function(a){return a.providerId==b})}function Zk(a,b,c){("uid"!=b||c)&&a.hasOwnProperty(b)&&J(a,b,c)}
function $k(a,b){a!=b&&(K(a,{uid:b.uid,displayName:b.displayName,photoURL:b.photoURL,email:b.email,emailVerified:b.emailVerified,phoneNumber:b.phoneNumber,isAnonymous:b.isAnonymous,providerData:[]}),b.metadata?J(a,"metadata",Ek(b.metadata)):J(a,"metadata",new Dk),v(b.providerData,function(b){Xk(a,b)}),a.h=b.h,J(a,"refreshToken",a.h.a))}g=Hk.prototype;g.reload=function(){var a=this;return R(this,Vk(this).then(function(){return al(a).then(function(){return Sk(a)}).then(Uk)}))};
function al(a){return a.F().then(function(b){var c=a.isAnonymous;return bl(a,b).then(function(){c||Zk(a,"isAnonymous",!1);return b})})}g.F=function(a){var b=this;return R(this,Vk(this).then(function(){return b.h.getToken(a)}).then(function(a){if(!a)throw new L("internal-error");a.accessToken!=b.qa&&(Ik(b,a.accessToken),b.dispatchEvent(new Gk("tokenChanged")));Zk(b,"refreshToken",a.refreshToken);return a.accessToken}))};
g.getToken=function(a){He["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]||(He["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]=!0,"undefined"!==typeof console&&"function"===typeof console.warn&&console.warn("firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."));return this.F(a)};
function cl(a,b){b[M]&&a.qa!=b[M]&&(Ak(a.h,b),a.dispatchEvent(new Gk("tokenChanged")),Ik(a,b[M]),Zk(a,"refreshToken",a.h.a))}function bl(a,b){return P(a.b,qi,{idToken:b}).then(r(a.tc,a))}
g.tc=function(a){a=a.users;if(!a||!a.length)throw new L("internal-error");a=a[0];Jk(this,{uid:a.localId,displayName:a.displayName,photoURL:a.photoUrl,email:a.email,emailVerified:!!a.emailVerified,phoneNumber:a.phoneNumber,lastLoginAt:a.lastLoginAt,createdAt:a.createdAt});for(var b=dl(a),c=0;c<b.length;c++)Xk(this,b[c]);Zk(this,"isAnonymous",!(this.email&&a.passwordHash)&&!(this.providerData&&this.providerData.length))};
function dl(a){return(a=a.providerUserInfo)&&a.length?Ba(a,function(a){return new Fk(a.rawId,a.providerId,a.email,a.displayName,a.photoUrl,a.phoneNumber)}):[]}g.bb=function(a){var b=this,c=null;return R(this,a.f(this.b,this.uid).then(function(a){cl(b,a);c=el(b,a,"reauthenticate");b.i=null;return b.reload()}).then(function(){return c}),!0)};g.uc=function(a){return this.bb(a).then(function(){})};
function fl(a,b){return al(a).then(function(){if(Fa(Wk(a),b))return Sk(a).then(function(){throw new L("provider-already-linked");})})}g.$a=function(a){var b=this,c=null;return R(this,fl(this,a.providerId).then(function(){return b.F()}).then(function(c){return a.c(b.b,c)}).then(function(a){c=el(b,a,"link");return gl(b,a)}).then(function(){return c}))};g.kc=function(a){return this.$a(a).then(function(a){return a.user})};
g.mc=function(a,b){var c=this;return R(this,fl(this,"phone").then(function(){return vk(Ok(c),a,b,r(c.$a,c))}))};g.vc=function(a,b){var c=this;return R(this,z().then(function(){return vk(Ok(c),a,b,r(c.bb,c))}),!0)};function el(a,b,c){var d=ig(b);b=wf(b);return Ke({user:a,credential:d,additionalUserInfo:b,operationType:c})}function gl(a,b){cl(a,b);return a.reload().then(function(){return a})}
g.mb=function(a){var b=this;return R(this,this.F().then(function(c){return b.b.mb(c,a)}).then(function(a){cl(b,a);return b.reload()}))};g.Mc=function(a){var b=this;return R(this,this.F().then(function(c){return a.c(b.b,c)}).then(function(a){cl(b,a);return b.reload()}))};g.nb=function(a){var b=this;return R(this,this.F().then(function(c){return b.b.nb(c,a)}).then(function(a){cl(b,a);return b.reload()}))};
g.ob=function(a){if(void 0===a.displayName&&void 0===a.photoURL)return Vk(this);var b=this;return R(this,this.F().then(function(c){return b.b.ob(c,{displayName:a.displayName,photoUrl:a.photoURL})}).then(function(a){cl(b,a);Zk(b,"displayName",a.displayName||null);Zk(b,"photoURL",a.photoUrl||null);v(b.providerData,function(a){"password"===a.providerId&&(J(a,"displayName",b.displayName),J(a,"photoURL",b.photoURL))});return Sk(b)}).then(Uk))};
g.Lc=function(a){var b=this;return R(this,al(this).then(function(c){return Fa(Wk(b),a)?ci(b.b,c,[a]).then(function(a){var c={};v(a.providerUserInfo||[],function(a){c[a.providerId]=!0});v(Wk(b),function(a){c[a]||Yk(b,a)});c[fg.PROVIDER_ID]||J(b,"phoneNumber",null);return Sk(b)}):Sk(b).then(function(){throw new L("no-such-provider");})}))};
g.delete=function(){var a=this;return R(this,this.F().then(function(b){return P(a.b,pi,{idToken:b})}).then(function(){a.dispatchEvent(new Gk("userDeleted"))})).then(function(){for(var b=0;b<a.D.length;b++)a.D[b].cancel("app-deleted");Mk(a,null);Nk(a,null);a.D=[];a.m=!0;Qk(a);J(a,"refreshToken",null);a.a&&a.a.unsubscribe(a)})};
g.qb=function(a,b){return"linkViaPopup"==a&&(this.g||null)==b&&this.f||"reauthViaPopup"==a&&(this.g||null)==b&&this.f||"linkViaRedirect"==a&&(this.Z||null)==b||"reauthViaRedirect"==a&&(this.Z||null)==b?!0:!1};g.fa=function(a,b,c,d){"linkViaPopup"!=a&&"reauthViaPopup"!=a||d!=(this.g||null)||(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)};
g.wa=function(a,b){return"linkViaPopup"==a&&b==(this.g||null)?r(this.vb,this):"reauthViaPopup"==a&&b==(this.g||null)?r(this.wb,this):"linkViaRedirect"==a&&(this.Z||null)==b?r(this.vb,this):"reauthViaRedirect"==a&&(this.Z||null)==b?r(this.wb,this):null};g.nc=function(a){var b=this;return hl(this,"linkViaPopup",a,function(){return fl(b,a.providerId).then(function(){return Sk(b)})},!1)};g.wc=function(a){return hl(this,"reauthViaPopup",a,function(){return z()},!0)};
function hl(a,b,c,d,e){if(!se())return A(new L("operation-not-supported-in-this-environment"));if(a.i&&!e)return A(a.i);var f=vf(c.providerId),h=re(a.uid+":::"),l=null;(!ue()||ke())&&a.A&&c.isOAuthProvider&&(l=Oi(a.A,a.G,a.s,b,c,null,h,firebase.SDK_VERSION||null));var p=ce(l,f&&f.Aa,f&&f.za);d=d().then(function(){il(a);if(!e)return a.F().then(function(){})}).then(function(){return lk(a.a,p,b,c,h,!!l)}).then(function(){return new y(function(c,d){a.fa(b,null,new L("cancelled-popup-request"),a.g||null);
a.f=c;a.v=d;a.g=h;a.c=a.a.Da(a,b,p,h)})}).then(function(a){p&&be(p);return a?Ke(a):null}).o(function(a){p&&be(p);throw a;});return R(a,d,e)}g.oc=function(a){var b=this;return jl(this,"linkViaRedirect",a,function(){return fl(b,a.providerId)},!1)};g.xc=function(a){return jl(this,"reauthViaRedirect",a,function(){return z()},!0)};
function jl(a,b,c,d,e){if(!se())return A(new L("operation-not-supported-in-this-environment"));if(a.i&&!e)return A(a.i);var f=null,h=re(a.uid+":::");d=d().then(function(){il(a);if(!e)return a.F().then(function(){})}).then(function(){a.Z=h;return Sk(a)}).then(function(b){a.da&&(b=a.da,b=b.b.set(kl,a.C(),b.a));return b}).then(function(){return a.a.Ba(b,c,h)}).o(function(b){f=b;if(a.da)return ll(a.da);throw f;}).then(function(){if(f)throw f;});return R(a,d,e)}
function il(a){if(!a.a||!a.I){if(a.a&&!a.I)throw new L("internal-error");throw new L("auth-domain-config-required");}}g.vb=function(a,b){var c=this;this.c&&(this.c.cancel(),this.c=null);var d=null,e=this.F().then(function(d){return Kf(c.b,{requestUri:a,sessionId:b,idToken:d})}).then(function(a){d=el(c,a,"link");return gl(c,a)}).then(function(){return d});return R(this,e)};
g.wb=function(a,b){var c=this;this.c&&(this.c.cancel(),this.c=null);var d=null,e=z().then(function(){return Gf(Lf(c.b,{requestUri:a,sessionId:b}),c.uid)}).then(function(a){d=el(c,a,"reauthenticate");cl(c,a);c.i=null;return c.reload()}).then(function(){return d});return R(this,e,!0)};g.fb=function(a){var b=this,c=null;return R(this,this.F().then(function(b){c=b;return"undefined"===typeof a||Za(a)?{}:jf(new $e(a))}).then(function(a){return b.b.fb(c,a)}).then(function(a){if(b.email!=a)return b.reload()}).then(function(){}))};
function R(a,b,c){var d=ml(a,b,c);a.D.push(d);d.ga(function(){Ga(a.D,d)});return d}function ml(a,b,c){return a.i&&!c?(b.cancel(),A(a.i)):b.o(function(b){!b||"auth/user-disabled"!=b.code&&"auth/user-token-expired"!=b.code||(a.i||a.dispatchEvent(new Gk("userInvalidated")),a.i=b);throw b;})}g.toJSON=function(){return this.C()};
g.C=function(){var a={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.G,appName:this.s,authDomain:this.A,stsTokenManager:this.h.C(),redirectEventId:this.Z||null};this.metadata&&bb(a,this.metadata.C());v(this.providerData,function(b){a.providerData.push(Le(b))});return a};
function nl(a){if(!a.apiKey)return null;var b={apiKey:a.apiKey,authDomain:a.authDomain,appName:a.appName},c={};if(a.stsTokenManager&&a.stsTokenManager.accessToken&&a.stsTokenManager.expirationTime)c[M]=a.stsTokenManager.accessToken,c.refreshToken=a.stsTokenManager.refreshToken||null,c.expiresIn=(a.stsTokenManager.expirationTime-na())/1E3;else return null;var d=new Hk(b,c,a);a.providerData&&v(a.providerData,function(a){a&&Xk(d,Ke(a))});a.redirectEventId&&(d.Z=a.redirectEventId);return d}
function ol(a,b,c,d){var e=new Hk(a,b);c&&(e.da=c);d&&Lk(e,d);return e.reload().then(function(){return e})};function pl(a){this.a=a;this.b=pj()}var kl={name:"redirectUser",B:"session"};function ll(a){return tj(a.b,kl,a.a)}function ql(a,b){return a.b.get(kl,a.a).then(function(a){a&&b&&(a.authDomain=b);return nl(a||{})})};function rl(a){this.a=a;this.b=pj();this.c=null;this.f=sl(this);this.b.addListener(tl("local"),this.a,r(this.g,this))}rl.prototype.g=function(){var a=this,b=tl("local");ul(this,function(){return z().then(function(){return a.c&&"local"!=a.c.B?a.b.get(b,a.a):null}).then(function(c){if(c)return vl(a,"local").then(function(){a.c=b})})})};function vl(a,b){var c=[],d;for(d in lj)lj[d]!==b&&c.push(tj(a.b,tl(lj[d]),a.a));c.push(tj(a.b,wl,a.a));return ub(c)}
function sl(a){var b=tl("local"),c=tl("session"),d=tl("none");return sj(a.b,b,a.a).then(function(){return a.b.get(c,a.a)}).then(function(e){return e?c:a.b.get(d,a.a).then(function(c){return c?d:a.b.get(b,a.a).then(function(c){return c?b:a.b.get(wl,a.a).then(function(a){return a?tl(a):b})})})}).then(function(b){a.c=b;return vl(a,b.B)}).o(function(){a.c||(a.c=b)})}var wl={name:"persistence",B:"session"};function tl(a){return{name:"authUser",B:a}}
rl.prototype.ib=function(a){var b=null,c=this;mj(a);return ul(this,function(){return a!=c.c.B?c.b.get(c.c,c.a).then(function(d){b=d;return vl(c,a)}).then(function(){c.c=tl(a);if(b)return c.b.set(c.c,b,c.a)}):z()})};function xl(a){return ul(a,function(){return a.b.set(wl,a.c.B,a.a)})}function yl(a,b){return ul(a,function(){return a.b.set(a.c,b.C(),a.a)})}function zl(a){return ul(a,function(){return tj(a.b,a.c,a.a)})}
function Al(a,b){return ul(a,function(){return a.b.get(a.c,a.a).then(function(a){a&&b&&(a.authDomain=b);return nl(a||{})})})}function ul(a,b){a.f=a.f.then(b,b);return a.f};function Bl(a){this.l=!1;J(this,"app",a);if(S(this).options&&S(this).options.apiKey)a=firebase.SDK_VERSION?pe(firebase.SDK_VERSION):null,this.b=new xh(S(this).options&&S(this).options.apiKey,ui(vi),a);else throw new L("invalid-api-key");this.N=[];this.m=[];this.I=[];this.Ob=firebase.INTERNAL.createSubscribe(r(this.hc,this));this.O=void 0;this.Pb=firebase.INTERNAL.createSubscribe(r(this.ic,this));Cl(this,null);this.h=new rl(S(this).options.apiKey+":"+S(this).name);this.G=new pl(S(this).options.apiKey+
":"+S(this).name);this.U=T(this,Dl(this));this.i=T(this,El(this));this.W=!1;this.ha=r(this.Hc,this);this.Ga=r(this.ka,this);this.qa=r(this.Yb,this);this.ra=r(this.fc,this);this.sa=r(this.gc,this);Fl(this);this.INTERNAL={};this.INTERNAL["delete"]=r(this.delete,this);this.INTERNAL.logFramework=r(this.pc,this);this.s=0;F.call(this);Gl(this);this.D=[]}t(Bl,F);function Hl(a){C.call(this,"languageCodeChanged");this.h=a}t(Hl,C);function Il(a){C.call(this,"frameworkChanged");this.f=a}t(Il,C);g=Bl.prototype;
g.ib=function(a){a=this.h.ib(a);return T(this,a)};g.na=function(a){this.V===a||this.l||(this.V=a,Dh(this.b,this.V),this.dispatchEvent(new Hl(this.aa())))};g.aa=function(){return this.V};g.Nc=function(){var a=k.navigator;this.na(a?a.languages&&a.languages[0]||a.language||a.userLanguage||null:null)};g.pc=function(a){this.D.push(a);Eh(this.b,firebase.SDK_VERSION?pe(firebase.SDK_VERSION,this.D):null);this.dispatchEvent(new Il(this.D))};g.Ka=function(){return Ja(this.D)};
function Gl(a){Object.defineProperty(a,"lc",{get:function(){return this.aa()},set:function(a){this.na(a)},enumerable:!1});a.V=null}g.toJSON=function(){return{apiKey:S(this).options.apiKey,authDomain:S(this).options.authDomain,appName:S(this).name,currentUser:U(this)&&U(this).C()}};function Jl(a){return a.Nb||A(new L("auth-domain-config-required"))}
function Fl(a){var b=S(a).options.authDomain,c=S(a).options.apiKey;b&&se()&&(a.Nb=a.U.then(function(){if(!a.l){a.a=nk(b,c,S(a).name);a.a.subscribe(a);U(a)&&Tk(U(a));if(a.A){Tk(a.A);var d=a.A;d.na(a.aa());Mk(d,a);d=a.A;Lk(d,a.D);Nk(d,a);a.A=null}return a.a}}))}g.qb=function(a,b){switch(a){case "unknown":case "signInViaRedirect":return!0;case "signInViaPopup":return this.g==b&&!!this.f;default:return!1}};
g.fa=function(a,b,c,d){"signInViaPopup"==a&&this.g==d&&(c&&this.v?this.v(c):b&&!c&&this.f&&this.f(b),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)};g.wa=function(a,b){return"signInViaRedirect"==a||"signInViaPopup"==a&&this.g==b&&this.f?r(this.Xb,this):null};
g.Xb=function(a,b){var c=this;a={requestUri:a,sessionId:b};this.c&&(this.c.cancel(),this.c=null);var d=null,e=null,f=If(c.b,a).then(function(a){d=ig(a);e=wf(a);return a});a=c.U.then(function(){return f}).then(function(a){return Kl(c,a)}).then(function(){return Ke({user:U(c),credential:d,additionalUserInfo:e,operationType:"signIn"})});return T(this,a)};
g.Fc=function(a){if(!se())return A(new L("operation-not-supported-in-this-environment"));var b=this,c=vf(a.providerId),d=re(),e=null;(!ue()||ke())&&S(this).options.authDomain&&a.isOAuthProvider&&(e=Oi(S(this).options.authDomain,S(this).options.apiKey,S(this).name,"signInViaPopup",a,null,d,firebase.SDK_VERSION||null));var f=ce(e,c&&c.Aa,c&&c.za);c=Jl(this).then(function(b){return lk(b,f,"signInViaPopup",a,d,!!e)}).then(function(){return new y(function(a,c){b.fa("signInViaPopup",null,new L("cancelled-popup-request"),
b.g);b.f=a;b.v=c;b.g=d;b.c=b.a.Da(b,"signInViaPopup",f,d)})}).then(function(a){f&&be(f);return a?Ke(a):null}).o(function(a){f&&be(f);throw a;});return T(this,c)};g.Gc=function(a){if(!se())return A(new L("operation-not-supported-in-this-environment"));var b=this,c=Jl(this).then(function(){return xl(b.h)}).then(function(){return b.a.Ba("signInViaRedirect",a)});return T(this,c)};
g.ba=function(){if(!se())return A(new L("operation-not-supported-in-this-environment"));var a=this,b=Jl(this).then(function(){return a.a.ba()}).then(function(a){return a?Ke(a):null});return T(this,b)};function Kl(a,b){var c={};c.apiKey=S(a).options.apiKey;c.authDomain=S(a).options.authDomain;c.appName=S(a).name;return a.U.then(function(){return ol(c,b,a.G,a.Ka())}).then(function(b){if(U(a)&&b.uid==U(a).uid)return $k(U(a),b),a.ka(b);Cl(a,b);Tk(b);return a.ka(b)}).then(function(){Ll(a)})}
function Cl(a,b){U(a)&&(Rk(U(a),a.Ga),D(U(a),"tokenChanged",a.qa),D(U(a),"userDeleted",a.ra),D(U(a),"userInvalidated",a.sa),Qk(U(a)));b&&(b.N.push(a.Ga),qc(b,"tokenChanged",a.qa),qc(b,"userDeleted",a.ra),qc(b,"userInvalidated",a.sa),0<a.s&&Pk(b));J(a,"currentUser",b);b&&(b.na(a.aa()),Mk(b,a),Lk(b,a.D),Nk(b,a))}g.kb=function(){var a=this,b=this.i.then(function(){if(!U(a))return z();Cl(a,null);return zl(a.h).then(function(){Ll(a)})});return T(this,b)};
function Ml(a){var b=ql(a.G,S(a).options.authDomain).then(function(b){if(a.A=b)b.da=a.G;return ll(a.G)});return T(a,b)}function Dl(a){var b=S(a).options.authDomain,c=Ml(a).then(function(){return Al(a.h,b)}).then(function(b){return b?(b.da=a.G,a.A&&(a.A.Z||null)==(b.Z||null)?b:b.reload().then(function(){return yl(a.h,b).then(function(){return b})}).o(function(c){return"auth/network-request-failed"==c.code?b:zl(a.h)})):null}).then(function(b){Cl(a,b||null)});return T(a,c)}
function El(a){return a.U.then(function(){return a.ba()}).o(function(){}).then(function(){if(!a.l)return a.ha()}).o(function(){}).then(function(){if(!a.l){a.W=!0;var b=a.h;b.b.addListener(tl("local"),b.a,a.ha)}})}
g.Hc=function(){var a=this;return Al(this.h,S(this).options.authDomain).then(function(b){if(!a.l){var c;if(c=U(a)&&b){c=U(a).uid;var d=b.uid;c=void 0===c||null===c||""===c||void 0===d||null===d||""===d?!1:c==d}if(c)return $k(U(a),b),U(a).F();if(U(a)||b)Cl(a,b),b&&(Tk(b),b.da=a.G),a.a&&a.a.subscribe(a),Ll(a)}})};g.ka=function(a){return yl(this.h,a)};g.Yb=function(){Ll(this);this.ka(U(this))};g.fc=function(){this.kb()};g.gc=function(){this.kb()};
function Nl(a,b){var c=null,d=null;return T(a,b.then(function(b){c=ig(b);d=wf(b);return Kl(a,b)}).then(function(){return Ke({user:U(a),credential:c,additionalUserInfo:d,operationType:"signIn"})}))}g.hc=function(a){var b=this;this.addAuthTokenListener(function(){a.next(U(b))})};g.ic=function(a){var b=this;Ol(this,function(){a.next(U(b))})};g.rc=function(a,b,c){var d=this;this.W&&firebase.Promise.resolve().then(function(){n(a)?a(U(d)):n(a.next)&&a.next(U(d))});return this.Ob(a,b,c)};
g.qc=function(a,b,c){var d=this;this.W&&firebase.Promise.resolve().then(function(){d.O=d.getUid();n(a)?a(U(d)):n(a.next)&&a.next(U(d))});return this.Pb(a,b,c)};g.$b=function(a){var b=this,c=this.i.then(function(){return U(b)?U(b).F(a).then(function(a){return{accessToken:a}}):null});return T(this,c)};g.Bc=function(a){return this.Hb(a).then(function(a){return a.user})};
g.Hb=function(a){var b=this;return this.i.then(function(){return Nl(b,P(b.b,si,{token:a}))}).then(function(a){var c=a.user;Zk(c,"isAnonymous",!1);b.ka(c);return a})};g.Ib=function(a,b){var c=this;return this.i.then(function(){return Nl(c,P(c.b,Xf,{email:a,password:b}))})};g.Cc=function(a,b){return this.Ib(a,b).then(function(a){return a.user})};g.Sb=function(a,b){return this.sb(a,b).then(function(a){return a.user})};
g.sb=function(a,b){var c=this;return this.i.then(function(){return Nl(c,P(c.b,oi,{email:a,password:b}))})};g.Ac=function(a){return this.Oa(a).then(function(a){return a.user})};g.Oa=function(a){var b=this;return this.i.then(function(){return Nl(b,a.xa(b.b))})};g.jb=function(){return this.Jb().then(function(a){return a.user})};
g.Jb=function(){var a=this;return this.i.then(function(){var b=U(a);if(b&&b.isAnonymous){var c=Ke({providerId:null,isNewUser:!1});return Ke({user:b,credential:null,additionalUserInfo:c,operationType:"signIn"})}return Nl(a,a.b.jb()).then(function(b){var c=b.user;Zk(c,"isAnonymous",!0);a.ka(c);return b})})};function S(a){return a.app}function U(a){return a.currentUser}g.getUid=function(){return U(this)&&U(this).uid||null};function Pl(a){return U(a)&&U(a)._lat||null}
function Ll(a){if(a.W){for(var b=0;b<a.m.length;b++)if(a.m[b])a.m[b](Pl(a));if(a.O!==a.getUid()&&a.I.length)for(a.O=a.getUid(),b=0;b<a.I.length;b++)if(a.I[b])a.I[b](Pl(a))}}g.Qb=function(a){this.addAuthTokenListener(a);this.s++;0<this.s&&U(this)&&Pk(U(this))};g.yc=function(a){var b=this;v(this.m,function(c){c==a&&b.s--});0>this.s&&(this.s=0);0==this.s&&U(this)&&Qk(U(this));this.removeAuthTokenListener(a)};
g.addAuthTokenListener=function(a){var b=this;this.m.push(a);T(this,this.i.then(function(){b.l||Fa(b.m,a)&&a(Pl(b))}))};g.removeAuthTokenListener=function(a){Ha(this.m,function(b){return b==a})};function Ol(a,b){a.I.push(b);T(a,a.i.then(function(){!a.l&&Fa(a.I,b)&&a.O!==a.getUid()&&(a.O=a.getUid(),b(Pl(a)))}))}
g.delete=function(){this.l=!0;for(var a=0;a<this.N.length;a++)this.N[a].cancel("app-deleted");this.N=[];this.h&&(a=this.h,a.b.removeListener(tl("local"),a.a,this.ha));this.a&&this.a.unsubscribe(this);return firebase.Promise.resolve()};function T(a,b){a.N.push(b);b.ga(function(){Ga(a.N,b)});return b}g.Vb=function(a){return T(this,Oh(this.b,a))};g.Wb=function(a){return T(this,Qh(this.b,a))};g.jc=function(a){return!!ag(a)};
g.hb=function(a,b){var c=this;return T(this,z().then(function(){var a=new $e(b);if(!a.c)throw new L("argument-error",hf+" must be true when sending sign in link to email");return jf(a)}).then(function(b){return c.b.hb(a,b)}).then(function(){}))};g.Oc=function(a){return this.Ia(a).then(function(a){return a.data.email})};g.Wa=function(a,b){return T(this,this.b.Wa(a,b).then(function(){}))};g.Ia=function(a){return T(this,this.b.Ia(a).then(function(a){return new Oe(a)}))};
g.Ua=function(a){return T(this,this.b.Ua(a).then(function(){}))};g.gb=function(a,b){var c=this;return T(this,z().then(function(){return"undefined"===typeof b||Za(b)?{}:jf(new $e(b))}).then(function(b){return c.b.gb(a,b)}).then(function(){}))};g.Ec=function(a,b){return T(this,vk(this,a,b,r(this.Oa,this)))};g.Dc=function(a,b){var c=this;return T(this,z().then(function(){var d=$f(a,b||Vd());return c.Oa(d)}))};function Ql(a,b,c,d,e,f){J(this,"type","recaptcha");this.b=this.c=null;this.m=!1;this.l=b;this.a=c||{theme:"light",type:"image"};this.g=[];if(this.a[Rl])throw new L("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");this.h="invisible"===this.a[Sl];if(!k.document)throw new L("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!Id(b)||!this.h&&
Id(b).hasChildNodes())throw new L("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new xh(a,f||null,e||null);this.s=d||function(){return null};var h=this;this.i=[];var l=this.a[Tl];this.a[Tl]=function(a){Ul(h,a);if("function"===typeof l)l(a);else if("string"===typeof l){var b=I(l,k);"function"===typeof b&&b(a)}};var p=this.a[Vl];this.a[Vl]=function(){Ul(h,null);if("function"===typeof p)p();else if("string"===typeof p){var a=I(p,k);"function"===
typeof a&&a()}}}var Tl="callback",Vl="expired-callback",Rl="sitekey",Sl="size";function Ul(a,b){for(var c=0;c<a.i.length;c++)try{a.i[c](b)}catch(d){}}function Wl(a,b){Ha(a.i,function(a){return a==b})}function Xl(a,b){a.g.push(b);b.ga(function(){Ga(a.g,b)});return b}g=Ql.prototype;
g.ya=function(){var a=this;return this.c?this.c:this.c=Xl(this,z().then(function(){if(te()&&!le())return ge();throw new L("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");}).then(function(){return Yl(Zl(),a.s())}).then(function(){return P(a.u,ri,{})}).then(function(b){a.a[Rl]=b.recaptchaSiteKey}).o(function(b){a.c=null;throw b;}))};
g.render=function(){$l(this);var a=this;return Xl(this,this.ya().then(function(){if(null===a.b){var b=a.l;if(!a.h){var c=Id(b);b=Ld("DIV");c.appendChild(b)}a.b=grecaptcha.render(b,a.a)}return a.b}))};g.verify=function(){$l(this);var a=this;return Xl(this,this.render().then(function(b){return new y(function(c){var d=grecaptcha.getResponse(b);if(d)c(d);else{var e=function(b){b&&(Wl(a,e),c(b))};a.i.push(e);a.h&&grecaptcha.execute(a.b)}})}))};g.reset=function(){$l(this);null!==this.b&&grecaptcha.reset(this.b)};
function $l(a){if(a.m)throw new L("internal-error","RecaptchaVerifier instance has been destroyed.");}g.clear=function(){$l(this);this.m=!0;Zl().b--;for(var a=0;a<this.g.length;a++)this.g[a].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.h){a=Id(this.l);for(var b;b=a.firstChild;)a.removeChild(b)}};var am=qd("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}");
function bm(){this.b=k.grecaptcha?Infinity:0;this.c=null;this.a="__rcb"+Math.floor(1E6*Math.random()).toString()}
function Yl(a,b){return new y(function(c,d){if(Ae())if(!k.grecaptcha||b!==a.c&&!a.b){k[a.a]=function(){if(k.grecaptcha){a.c=b;var e=k.grecaptcha.render;k.grecaptcha.render=function(b,c){b=e(b,c);a.b++;return b};c()}else d(new L("internal-error"));delete k[a.a]};var e=ud(am,{onload:a.a,hl:b||""});z(ph(e)).o(function(){d(new L("internal-error","Unable to load external reCAPTCHA dependencies!"))})}else c();else d(new L("network-request-failed"))})}var cm=null;
function Zl(){cm||(cm=new bm);return cm}function dm(a,b,c){try{this.f=c||firebase.app()}catch(f){throw new L("argument-error","No firebase.app.App instance is currently initialized.");}if(this.f.options&&this.f.options.apiKey)c=this.f.options.apiKey;else throw new L("invalid-api-key");var d=this,e=null;try{e=this.f.auth().Ka()}catch(f){}e=firebase.SDK_VERSION?pe(firebase.SDK_VERSION,e):null;Ql.call(this,c,a,b,function(){try{var a=d.f.auth().aa()}catch(h){a=null}return a},e,ui(vi))}t(dm,Ql);function em(a,b,c,d){a:{c=Array.prototype.slice.call(c);var e=0;for(var f=!1,h=0;h<b.length;h++)if(b[h].optional)f=!0;else{if(f)throw new L("internal-error","Argument validator encountered a required argument after an optional argument.");e++}f=b.length;if(c.length<e||f<c.length)d="Expected "+(e==f?1==e?"1 argument":e+" arguments":e+"-"+f+" arguments")+" but got "+c.length+".";else{for(e=0;e<c.length;e++)if(f=b[e].optional&&void 0===c[e],!b[e].M(c[e])&&!f){b=b[e];if(0>e||e>=fm.length)throw new L("internal-error",
"Argument validator received an unsupported number of arguments.");c=fm[e];d=(d?"":c+" argument ")+(b.name?'"'+b.name+'" ':"")+"must be "+b.K+".";break a}d=null}}if(d)throw new L("argument-error",a+" failed: "+d);}var fm="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function V(a,b){return{name:a||"",K:"a valid string",optional:!!b,M:m}}function gm(){return{name:"opt_forceRefresh",K:"a boolean",optional:!0,M:ba}}
function W(a,b){return{name:a||"",K:"a valid object",optional:!!b,M:q}}function hm(a,b){return{name:a||"",K:"a function",optional:!!b,M:n}}function im(a,b){return{name:a||"",K:"null",optional:!!b,M:ea}}function jm(){return{name:"",K:"an HTML element",optional:!1,M:function(a){return!!(a&&a instanceof Element)}}}function km(){return{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(a){return!!(a&&a instanceof Bl)}}}
function lm(){return{name:"app",K:"an instance of Firebase App",optional:!0,M:function(a){return!!(a&&a instanceof firebase.app.App)}}}function mm(a){return{name:a?a+"Credential":"credential",K:a?"a valid "+a+" credential":"a valid credential",optional:!1,M:function(b){if(!b)return!1;var c=!a||b.providerId===a;return!(!b.xa||!c)}}}
function nm(){return{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(a){return!!(a&&a.providerId&&a.hasOwnProperty&&a.hasOwnProperty("isOAuthProvider"))}}}function om(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(a){return!!(a&&m(a.type)&&n(a.verify))}}}function X(a,b,c,d){return{name:c||"",K:a.K+" or "+b.K,optional:!!d,M:function(c){return a.M(c)||b.M(c)}}};function Y(a,b){for(var c in b){var d=b[c].name;a[d]=pm(d,a[c],b[c].j)}}function Z(a,b,c,d){a[b]=pm(b,c,d)}function pm(a,b,c){function d(){var a=Array.prototype.slice.call(arguments);em(e,c,a);return b.apply(this,a)}if(!c)return b;var e=qm(a),f;for(f in b)d[f]=b[f];for(f in b.prototype)d.prototype[f]=b.prototype[f];return d}function qm(a){a=a.split(".");return a[a.length-1]};Y(Bl.prototype,{Ua:{name:"applyActionCode",j:[V("code")]},Ia:{name:"checkActionCode",j:[V("code")]},Wa:{name:"confirmPasswordReset",j:[V("code"),V("newPassword")]},Sb:{name:"createUserWithEmailAndPassword",j:[V("email"),V("password")]},sb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},Vb:{name:"fetchProvidersForEmail",j:[V("email")]},Wb:{name:"fetchSignInMethodsForEmail",j:[V("email")]},ba:{name:"getRedirectResult",j:[]},jc:{name:"isSignInWithEmailLink",j:[V("emailLink")]},
qc:{name:"onAuthStateChanged",j:[X(W(),hm(),"nextOrObserver"),hm("opt_error",!0),hm("opt_completed",!0)]},rc:{name:"onIdTokenChanged",j:[X(W(),hm(),"nextOrObserver"),hm("opt_error",!0),hm("opt_completed",!0)]},gb:{name:"sendPasswordResetEmail",j:[V("email"),X(W("opt_actionCodeSettings",!0),im(null,!0),"opt_actionCodeSettings",!0)]},hb:{name:"sendSignInLinkToEmail",j:[V("email"),W("actionCodeSettings")]},ib:{name:"setPersistence",j:[V("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",
j:[mm()]},jb:{name:"signInAnonymously",j:[]},Jb:{name:"signInAnonymouslyAndRetrieveData",j:[]},Ac:{name:"signInWithCredential",j:[mm()]},Bc:{name:"signInWithCustomToken",j:[V("token")]},Hb:{name:"signInAndRetrieveDataWithCustomToken",j:[V("token")]},Cc:{name:"signInWithEmailAndPassword",j:[V("email"),V("password")]},Dc:{name:"signInWithEmailLink",j:[V("email"),V("emailLink",!0)]},Ib:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[V("email"),V("password")]},Ec:{name:"signInWithPhoneNumber",j:[V("phoneNumber"),
om()]},Fc:{name:"signInWithPopup",j:[nm()]},Gc:{name:"signInWithRedirect",j:[nm()]},kb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[V(null,!0)]},Nc:{name:"useDeviceLanguage",j:[]},Oc:{name:"verifyPasswordResetCode",j:[V("code")]}});(function(a,b){for(var c in b){var d=b[c].name;if(d!==c){var e=b[c].Rb;Object.defineProperty(a,d,{get:function(){return this[c]},set:function(a){em(d,[e],[a],!0);this[c]=a},enumerable:!0})}}})(Bl.prototype,{lc:{name:"languageCode",Rb:X(V(),im(),"languageCode")}});
Bl.Persistence=lj;Bl.Persistence.LOCAL="local";Bl.Persistence.SESSION="session";Bl.Persistence.NONE="none";
Y(Hk.prototype,{"delete":{name:"delete",j:[]},F:{name:"getIdToken",j:[gm()]},getToken:{name:"getToken",j:[gm()]},$a:{name:"linkAndRetrieveDataWithCredential",j:[mm()]},kc:{name:"linkWithCredential",j:[mm()]},mc:{name:"linkWithPhoneNumber",j:[V("phoneNumber"),om()]},nc:{name:"linkWithPopup",j:[nm()]},oc:{name:"linkWithRedirect",j:[nm()]},bb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[mm()]},uc:{name:"reauthenticateWithCredential",j:[mm()]},vc:{name:"reauthenticateWithPhoneNumber",j:[V("phoneNumber"),
om()]},wc:{name:"reauthenticateWithPopup",j:[nm()]},xc:{name:"reauthenticateWithRedirect",j:[nm()]},reload:{name:"reload",j:[]},fb:{name:"sendEmailVerification",j:[X(W("opt_actionCodeSettings",!0),im(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[V(null,!0)]},Lc:{name:"unlink",j:[V("provider")]},mb:{name:"updateEmail",j:[V("email")]},nb:{name:"updatePassword",j:[V("password")]},Mc:{name:"updatePhoneNumber",j:[mm("phone")]},ob:{name:"updateProfile",j:[W("profile")]}});
Y(y.prototype,{ga:{name:"finally"},o:{name:"catch"},then:{name:"then"}});Y(uk.prototype,{confirm:{name:"confirm",j:[V("verificationCode")]}});Z(O,"credential",function(a,b){return new Vf(a,b)},[V("email"),V("password")]);Y(Nf.prototype,{ta:{name:"addScope",j:[V("scope")]},Ca:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Nf,"credential",Of,[X(V(),W(),"token")]);Z(O,"credentialWithLink",$f,[V("email"),V("emailLink")]);
Y(Pf.prototype,{ta:{name:"addScope",j:[V("scope")]},Ca:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Pf,"credential",Qf,[X(V(),W(),"token")]);Y(Rf.prototype,{ta:{name:"addScope",j:[V("scope")]},Ca:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Rf,"credential",Sf,[X(V(),X(W(),im()),"idToken"),X(V(),im(),"accessToken",!0)]);Y(Tf.prototype,{Ca:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(Tf,"credential",Uf,[X(V(),W(),"token"),V("secret",!0)]);
Y(N.prototype,{ta:{name:"addScope",j:[V("scope")]},credential:{name:"credential",j:[X(V(),im(),"idToken",!0),X(V(),im(),"accessToken",!0)]},Ca:{name:"setCustomParameters",j:[W("customOAuthParameters")]}});Z(fg,"credential",hg,[V("verificationId"),V("verificationCode")]);Y(fg.prototype,{Sa:{name:"verifyPhoneNumber",j:[V("phoneNumber"),om()]}});Y(L.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(pg.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});
Y(og.prototype,{toJSON:{name:"toJSON",j:[V(null,!0)]}});Y(dm.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}});
(function(){if("undefined"!==typeof firebase&&firebase.INTERNAL&&firebase.INTERNAL.registerService){var a={Auth:Bl,Error:L};Z(a,"EmailAuthProvider",O,[]);Z(a,"FacebookAuthProvider",Nf,[]);Z(a,"GithubAuthProvider",Pf,[]);Z(a,"GoogleAuthProvider",Rf,[]);Z(a,"TwitterAuthProvider",Tf,[]);Z(a,"OAuthProvider",N,[V("providerId")]);Z(a,"PhoneAuthProvider",fg,[km()]);Z(a,"RecaptchaVerifier",dm,[X(V(),jm(),"recaptchaContainer"),W("recaptchaParameters",!0),lm()]);firebase.INTERNAL.registerService("auth",function(a,
c){a=new Bl(a);c({INTERNAL:{getUid:r(a.getUid,a),getToken:r(a.$b,a),addAuthTokenListener:r(a.Qb,a),removeAuthTokenListener:r(a.yc,a)}});return a},a,function(a,c){if("create"===a)try{c.auth()}catch(d){}});firebase.INTERNAL.extendNamespace({User:Hk})}else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");})();
}).call(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"@firebase/app":2}],5:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = require("@firebase/app");
var Database_1 = require("./src/api/Database");
exports.Database = Database_1.Database;
var Query_1 = require("./src/api/Query");
exports.Query = Query_1.Query;
var Reference_1 = require("./src/api/Reference");
exports.Reference = Reference_1.Reference;
var util_1 = require("./src/core/util/util");
exports.enableLogging = util_1.enableLogging;
var RepoManager_1 = require("./src/core/RepoManager");
var INTERNAL = require("./src/api/internal");
var TEST_ACCESS = require("./src/api/test_access");
var util_2 = require("@firebase/util");
var ServerValue = Database_1.Database.ServerValue;
exports.ServerValue = ServerValue;
function registerDatabase(instance) {
    // Register the Database Service with the 'firebase' namespace.
    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url); }, 
    // firebase.database namespace properties
    {
        Reference: Reference_1.Reference,
        Query: Query_1.Query,
        Database: Database_1.Database,
        enableLogging: util_1.enableLogging,
        INTERNAL: INTERNAL,
        ServerValue: ServerValue,
        TEST_ACCESS: TEST_ACCESS
    }, null, true);
    if (util_2.isNodeSdk()) {
        module.exports = namespace;
    }
}
exports.registerDatabase = registerDatabase;
registerDatabase(app_1.default);
var DataSnapshot_1 = require("./src/api/DataSnapshot");
exports.DataSnapshot = DataSnapshot_1.DataSnapshot;
var onDisconnect_1 = require("./src/api/onDisconnect");
exports.OnDisconnect = onDisconnect_1.OnDisconnect;



},{"./src/api/DataSnapshot":6,"./src/api/Database":7,"./src/api/Query":8,"./src/api/Reference":9,"./src/api/internal":11,"./src/api/onDisconnect":12,"./src/api/test_access":13,"./src/core/RepoManager":20,"./src/core/util/util":64,"@firebase/app":2,"@firebase/util":142}],6:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var validation_1 = require("../core/util/validation");
var Path_1 = require("../core/util/Path");
var PriorityIndex_1 = require("../core/snap/indexes/PriorityIndex");
/**
 * Class representing a firebase data snapshot.  It wraps a SnapshotNode and
 * surfaces the public methods (val, forEach, etc.) we want to expose.
 */
var DataSnapshot = /** @class */ (function () {
    /**
     * @param {!Node} node_ A SnapshotNode to wrap.
     * @param {!Reference} ref_ The ref of the location this snapshot came from.
     * @param {!Index} index_ The iteration order for this snapshot
     */
    function DataSnapshot(node_, ref_, index_) {
        this.node_ = node_;
        this.ref_ = ref_;
        this.index_ = index_;
    }
    /**
     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is
     * empty.
     *
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */
    DataSnapshot.prototype.val = function () {
        util_1.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);
        return this.node_.val();
    };
    /**
     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting
     * the entire node contents.
     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.
     */
    DataSnapshot.prototype.exportVal = function () {
        util_1.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);
        return this.node_.val(true);
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    DataSnapshot.prototype.toJSON = function () {
        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content
        util_1.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);
        return this.exportVal();
    };
    /**
     * Returns whether the snapshot contains a non-null value.
     *
     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.
     */
    DataSnapshot.prototype.exists = function () {
        util_1.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);
        return !this.node_.isEmpty();
    };
    /**
     * Returns a DataSnapshot of the specified child node's contents.
     *
     * @param {!string} childPathString Path to a child.
     * @return {!DataSnapshot} DataSnapshot for child node.
     */
    DataSnapshot.prototype.child = function (childPathString) {
        util_1.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);
        // Ensure the childPath is a string (can be a number)
        childPathString = String(childPathString);
        validation_1.validatePathString('DataSnapshot.child', 1, childPathString, false);
        var childPath = new Path_1.Path(childPathString);
        var childRef = this.ref_.child(childPath);
        return new DataSnapshot(this.node_.getChild(childPath), childRef, PriorityIndex_1.PRIORITY_INDEX);
    };
    /**
     * Returns whether the snapshot contains a child at the specified path.
     *
     * @param {!string} childPathString Path to a child.
     * @return {boolean} Whether the child exists.
     */
    DataSnapshot.prototype.hasChild = function (childPathString) {
        util_1.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);
        validation_1.validatePathString('DataSnapshot.hasChild', 1, childPathString, false);
        var childPath = new Path_1.Path(childPathString);
        return !this.node_.getChild(childPath).isEmpty();
    };
    /**
     * Returns the priority of the object, or null if no priority was set.
     *
     * @return {string|number|null} The priority.
     */
    DataSnapshot.prototype.getPriority = function () {
        util_1.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);
        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
        return this.node_.getPriority().val();
    };
    /**
     * Iterates through child nodes and calls the specified action for each one.
     *
     * @param {function(!DataSnapshot)} action Callback function to be called
     * for each child.
     * @return {boolean} True if forEach was canceled by action returning true for
     * one of the child nodes.
     */
    DataSnapshot.prototype.forEach = function (action) {
        var _this = this;
        util_1.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);
        util_1.validateCallback('DataSnapshot.forEach', 1, action, false);
        if (this.node_.isLeafNode())
            return false;
        var childrenNode = this.node_;
        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
        return !!childrenNode.forEachChild(this.index_, function (key, node) {
            return action(new DataSnapshot(node, _this.ref_.child(key), PriorityIndex_1.PRIORITY_INDEX));
        });
    };
    /**
     * Returns whether this DataSnapshot has children.
     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.
     */
    DataSnapshot.prototype.hasChildren = function () {
        util_1.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);
        if (this.node_.isLeafNode())
            return false;
        else
            return !this.node_.isEmpty();
    };
    Object.defineProperty(DataSnapshot.prototype, "key", {
        get: function () {
            return this.ref_.getKey();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the number of children for this DataSnapshot.
     * @return {number} The number of children that this DataSnapshot contains.
     */
    DataSnapshot.prototype.numChildren = function () {
        util_1.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);
        return this.node_.numChildren();
    };
    /**
     * @return {Reference} The Firebase reference for the location this snapshot's data came from.
     */
    DataSnapshot.prototype.getRef = function () {
        util_1.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);
        return this.ref_;
    };
    Object.defineProperty(DataSnapshot.prototype, "ref", {
        get: function () {
            return this.getRef();
        },
        enumerable: true,
        configurable: true
    });
    return DataSnapshot;
}());
exports.DataSnapshot = DataSnapshot;



},{"../core/snap/indexes/PriorityIndex":42,"../core/util/Path":58,"../core/util/validation":65,"@firebase/util":142}],7:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("../core/util/util");
var parser_1 = require("../core/util/libs/parser");
var Path_1 = require("../core/util/Path");
var Reference_1 = require("./Reference");
var Repo_1 = require("../core/Repo");
var RepoManager_1 = require("../core/RepoManager");
var util_2 = require("@firebase/util");
var validation_1 = require("../core/util/validation");
/**
 * Class representing a firebase database.
 * @implements {FirebaseService}
 */
var Database = /** @class */ (function () {
    /**
     * The constructor should not be called by users of our public API.
     * @param {!Repo} repo_
     */
    function Database(repo_) {
        this.repo_ = repo_;
        if (!(repo_ instanceof Repo_1.Repo)) {
            util_1.fatal("Don't call new Database() directly - please use firebase.database().");
        }
        /** @type {Reference} */
        this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);
        this.INTERNAL = new DatabaseInternals(this);
    }
    Object.defineProperty(Database.prototype, "app", {
        get: function () {
            return this.repo_.app;
        },
        enumerable: true,
        configurable: true
    });
    Database.prototype.ref = function (path) {
        this.checkDeleted_('ref');
        util_2.validateArgCount('database.ref', 0, 1, arguments.length);
        if (path instanceof Reference_1.Reference) {
            return this.refFromURL(path.toString());
        }
        return path !== undefined ? this.root_.child(path) : this.root_;
    };
    /**
     * Returns a reference to the root or the path specified in url.
     * We throw a exception if the url is not in the same domain as the
     * current repo.
     * @param {string} url
     * @return {!Reference} Firebase reference.
     */
    Database.prototype.refFromURL = function (url) {
        /** @const {string} */
        var apiName = 'database.refFromURL';
        this.checkDeleted_(apiName);
        util_2.validateArgCount(apiName, 1, 1, arguments.length);
        var parsedURL = parser_1.parseRepoInfo(url);
        validation_1.validateUrl(apiName, 1, parsedURL);
        var repoInfo = parsedURL.repoInfo;
        if (repoInfo.host !== this.repo_.repoInfo_.host) {
            util_1.fatal(apiName +
                ': Host name does not match the current database: ' +
                '(found ' +
                repoInfo.host +
                ' but expected ' +
                this.repo_.repoInfo_.host +
                ')');
        }
        return this.ref(parsedURL.path.toString());
    };
    /**
     * @param {string} apiName
     */
    Database.prototype.checkDeleted_ = function (apiName) {
        if (this.repo_ === null) {
            util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');
        }
    };
    // Make individual repo go offline.
    Database.prototype.goOffline = function () {
        util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);
        this.checkDeleted_('goOffline');
        this.repo_.interrupt();
    };
    Database.prototype.goOnline = function () {
        util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);
        this.checkDeleted_('goOnline');
        this.repo_.resume();
    };
    Database.ServerValue = {
        TIMESTAMP: {
            '.sv': 'timestamp'
        }
    };
    return Database;
}());
exports.Database = Database;
var DatabaseInternals = /** @class */ (function () {
    /** @param {!Database} database */
    function DatabaseInternals(database) {
        this.database = database;
    }
    /** @return {Promise<void>} */
    DatabaseInternals.prototype.delete = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.database.checkDeleted_('delete');
                RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);
                this.database.repo_ = null;
                this.database.root_ = null;
                this.database.INTERNAL = null;
                this.database = null;
                return [2 /*return*/];
            });
        });
    };
    return DatabaseInternals;
}());
exports.DatabaseInternals = DatabaseInternals;



},{"../core/Repo":18,"../core/RepoManager":20,"../core/util/Path":58,"../core/util/libs/parser":63,"../core/util/util":64,"../core/util/validation":65,"./Reference":9,"@firebase/util":142,"tslib":176}],8:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var KeyIndex_1 = require("../core/snap/indexes/KeyIndex");
var PriorityIndex_1 = require("../core/snap/indexes/PriorityIndex");
var ValueIndex_1 = require("../core/snap/indexes/ValueIndex");
var PathIndex_1 = require("../core/snap/indexes/PathIndex");
var util_2 = require("../core/util/util");
var Path_1 = require("../core/util/Path");
var validation_1 = require("../core/util/validation");
var util_3 = require("@firebase/util");
var EventRegistration_1 = require("../core/view/EventRegistration");
var util_4 = require("@firebase/util");
var __referenceConstructor;
/**
 * A Query represents a filter to be applied to a firebase location.  This object purely represents the
 * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.
 *
 * Since every Firebase reference is a query, Firebase inherits from this object.
 */
var Query = /** @class */ (function () {
    function Query(repo, path, queryParams_, orderByCalled_) {
        this.repo = repo;
        this.path = path;
        this.queryParams_ = queryParams_;
        this.orderByCalled_ = orderByCalled_;
    }
    Object.defineProperty(Query, "__referenceConstructor", {
        get: function () {
            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
            return __referenceConstructor;
        },
        set: function (val) {
            __referenceConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Validates start/end values for queries.
     * @param {!QueryParams} params
     * @private
     */
    Query.validateQueryEndpoints_ = function (params) {
        var startNode = null;
        var endNode = null;
        if (params.hasStart()) {
            startNode = params.getIndexStartValue();
        }
        if (params.hasEnd()) {
            endNode = params.getIndexEndValue();
        }
        if (params.getIndex() === KeyIndex_1.KEY_INDEX) {
            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +
                'startAt(), endAt(), or equalTo().';
            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +
                'or equalTo() must be a string.';
            if (params.hasStart()) {
                var startName = params.getIndexStartName();
                if (startName != util_2.MIN_NAME) {
                    throw new Error(tooManyArgsError);
                }
                else if (typeof startNode !== 'string') {
                    throw new Error(wrongArgTypeError);
                }
            }
            if (params.hasEnd()) {
                var endName = params.getIndexEndName();
                if (endName != util_2.MAX_NAME) {
                    throw new Error(tooManyArgsError);
                }
                else if (typeof endNode !== 'string') {
                    throw new Error(wrongArgTypeError);
                }
            }
        }
        else if (params.getIndex() === PriorityIndex_1.PRIORITY_INDEX) {
            if ((startNode != null && !validation_1.isValidPriority(startNode)) ||
                (endNode != null && !validation_1.isValidPriority(endNode))) {
                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +
                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');
            }
        }
        else {
            util_1.assert(params.getIndex() instanceof PathIndex_1.PathIndex ||
                params.getIndex() === ValueIndex_1.VALUE_INDEX, 'unknown index type.');
            if ((startNode != null && typeof startNode === 'object') ||
                (endNode != null && typeof endNode === 'object')) {
                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +
                    'an object.');
            }
        }
    };
    /**
     * Validates that limit* has been called with the correct combination of parameters
     * @param {!QueryParams} params
     * @private
     */
    Query.validateLimit_ = function (params) {
        if (params.hasStart() &&
            params.hasEnd() &&
            params.hasLimit() &&
            !params.hasAnchoredLimit()) {
            throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
        }
    };
    /**
     * Validates that no other order by call has been made
     * @param {!string} fnName
     * @private
     */
    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {
        if (this.orderByCalled_ === true) {
            throw new Error(fnName + ": You can't combine multiple orderBy calls.");
        }
    };
    /**
     * @return {!QueryParams}
     */
    Query.prototype.getQueryParams = function () {
        return this.queryParams_;
    };
    /**
     * @return {!Reference}
     */
    Query.prototype.getRef = function () {
        util_3.validateArgCount('Query.ref', 0, 0, arguments.length);
        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.
        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this
        // method gets called.
        return new Query.__referenceConstructor(this.repo, this.path);
    };
    /**
     * @param {!string} eventType
     * @param {!function(DataSnapshot, string=)} callback
     * @param {(function(Error)|Object)=} cancelCallbackOrContext
     * @param {Object=} context
     * @return {!function(DataSnapshot, string=)}
     */
    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {
        util_3.validateArgCount('Query.on', 2, 4, arguments.length);
        validation_1.validateEventType('Query.on', 1, eventType, false);
        util_3.validateCallback('Query.on', 2, callback, false);
        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);
        if (eventType === 'value') {
            this.onValueEvent(callback, ret.cancel, ret.context);
        }
        else {
            var callbacks = {};
            callbacks[eventType] = callback;
            this.onChildEvent(callbacks, ret.cancel, ret.context);
        }
        return callback;
    };
    /**
     * @param {!function(!DataSnapshot)} callback
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */
    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {
        var container = new EventRegistration_1.ValueEventRegistration(callback, cancelCallback || null, context || null);
        this.repo.addEventCallbackForQuery(this, container);
    };
    /**
     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks
     * @param {?function(Error)} cancelCallback
     * @param {?Object} context
     * @protected
     */
    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {
        var container = new EventRegistration_1.ChildEventRegistration(callbacks, cancelCallback, context);
        this.repo.addEventCallbackForQuery(this, container);
    };
    /**
     * @param {string=} eventType
     * @param {(function(!DataSnapshot, ?string=))=} callback
     * @param {Object=} context
     */
    Query.prototype.off = function (eventType, callback, context) {
        util_3.validateArgCount('Query.off', 0, 3, arguments.length);
        validation_1.validateEventType('Query.off', 1, eventType, true);
        util_3.validateCallback('Query.off', 2, callback, true);
        util_3.validateContextObject('Query.off', 3, context, true);
        var container = null;
        var callbacks = null;
        if (eventType === 'value') {
            var valueCallback = callback || null;
            container = new EventRegistration_1.ValueEventRegistration(valueCallback, null, context || null);
        }
        else if (eventType) {
            if (callback) {
                callbacks = {};
                callbacks[eventType] = callback;
            }
            container = new EventRegistration_1.ChildEventRegistration(callbacks, null, context || null);
        }
        this.repo.removeEventCallbackForQuery(this, container);
    };
    /**
     * Attaches a listener, waits for the first event, and then removes the listener
     * @param {!string} eventType
     * @param {!function(!DataSnapshot, string=)} userCallback
     * @param cancelOrContext
     * @param context
     * @return {!firebase.Promise}
     */
    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {
        var _this = this;
        util_3.validateArgCount('Query.once', 1, 4, arguments.length);
        validation_1.validateEventType('Query.once', 1, eventType, false);
        util_3.validateCallback('Query.once', 2, userCallback, true);
        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);
        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)
        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change
        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is
        // against the Promise specification.
        var firstCall = true;
        var deferred = new util_4.Deferred();
        // A dummy error handler in case a user wasn't expecting promises
        deferred.promise.catch(function () { });
        var onceCallback = function (snapshot) {
            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)
            // triggers multiple events (e.g. child_added or child_changed).
            if (firstCall) {
                firstCall = false;
                _this.off(eventType, onceCallback);
                if (userCallback) {
                    userCallback.bind(ret.context)(snapshot);
                }
                deferred.resolve(snapshot);
            }
        };
        this.on(eventType, onceCallback, 
        /*cancel=*/ function (err) {
            _this.off(eventType, onceCallback);
            if (ret.cancel)
                ret.cancel.bind(ret.context)(err);
            deferred.reject(err);
        });
        return deferred.promise;
    };
    /**
     * Set a limit and anchor it to the start of the window.
     * @param {!number} limit
     * @return {!Query}
     */
    Query.prototype.limitToFirst = function (limit) {
        util_3.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);
        if (typeof limit !== 'number' ||
            Math.floor(limit) !== limit ||
            limit <= 0) {
            throw new Error('Query.limitToFirst: First argument must be a positive integer.');
        }
        if (this.queryParams_.hasLimit()) {
            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +
                'limitToFirst, or limitToLast).');
        }
        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);
    };
    /**
     * Set a limit and anchor it to the end of the window.
     * @param {!number} limit
     * @return {!Query}
     */
    Query.prototype.limitToLast = function (limit) {
        util_3.validateArgCount('Query.limitToLast', 1, 1, arguments.length);
        if (typeof limit !== 'number' ||
            Math.floor(limit) !== limit ||
            limit <= 0) {
            throw new Error('Query.limitToLast: First argument must be a positive integer.');
        }
        if (this.queryParams_.hasLimit()) {
            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +
                'limitToFirst, or limitToLast).');
        }
        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);
    };
    /**
     * Given a child path, return a new query ordered by the specified grandchild path.
     * @param {!string} path
     * @return {!Query}
     */
    Query.prototype.orderByChild = function (path) {
        util_3.validateArgCount('Query.orderByChild', 1, 1, arguments.length);
        if (path === '$key') {
            throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');
        }
        else if (path === '$priority') {
            throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');
        }
        else if (path === '$value') {
            throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');
        }
        validation_1.validatePathString('Query.orderByChild', 1, path, false);
        this.validateNoPreviousOrderByCall_('Query.orderByChild');
        var parsedPath = new Path_1.Path(path);
        if (parsedPath.isEmpty()) {
            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');
        }
        var index = new PathIndex_1.PathIndex(parsedPath);
        var newParams = this.queryParams_.orderBy(index);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the KeyIndex
     * @return {!Query}
     */
    Query.prototype.orderByKey = function () {
        util_3.validateArgCount('Query.orderByKey', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByKey');
        var newParams = this.queryParams_.orderBy(KeyIndex_1.KEY_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the PriorityIndex
     * @return {!Query}
     */
    Query.prototype.orderByPriority = function () {
        util_3.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByPriority');
        var newParams = this.queryParams_.orderBy(PriorityIndex_1.PRIORITY_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * Return a new query ordered by the ValueIndex
     * @return {!Query}
     */
    Query.prototype.orderByValue = function () {
        util_3.validateArgCount('Query.orderByValue', 0, 0, arguments.length);
        this.validateNoPreviousOrderByCall_('Query.orderByValue');
        var newParams = this.queryParams_.orderBy(ValueIndex_1.VALUE_INDEX);
        Query.validateQueryEndpoints_(newParams);
        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);
    };
    /**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */
    Query.prototype.startAt = function (value, name) {
        if (value === void 0) { value = null; }
        util_3.validateArgCount('Query.startAt', 0, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);
        validation_1.validateKey('Query.startAt', 2, name, true);
        var newParams = this.queryParams_.startAt(value, name);
        Query.validateLimit_(newParams);
        Query.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasStart()) {
            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +
                'or equalTo).');
        }
        // Calling with no params tells us to start at the beginning.
        if (value === undefined) {
            value = null;
            name = null;
        }
        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
    };
    /**
     * @param {number|string|boolean|null} value
     * @param {?string=} name
     * @return {!Query}
     */
    Query.prototype.endAt = function (value, name) {
        if (value === void 0) { value = null; }
        util_3.validateArgCount('Query.endAt', 0, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);
        validation_1.validateKey('Query.endAt', 2, name, true);
        var newParams = this.queryParams_.endAt(value, name);
        Query.validateLimit_(newParams);
        Query.validateQueryEndpoints_(newParams);
        if (this.queryParams_.hasEnd()) {
            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +
                'equalTo).');
        }
        return new Query(this.repo, this.path, newParams, this.orderByCalled_);
    };
    /**
     * Load the selection of children with exactly the specified value, and, optionally,
     * the specified name.
     * @param {number|string|boolean|null} value
     * @param {string=} name
     * @return {!Query}
     */
    Query.prototype.equalTo = function (value, name) {
        util_3.validateArgCount('Query.equalTo', 1, 2, arguments.length);
        validation_1.validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);
        validation_1.validateKey('Query.equalTo', 2, name, true);
        if (this.queryParams_.hasStart()) {
            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +
                'equalTo).');
        }
        if (this.queryParams_.hasEnd()) {
            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +
                'equalTo).');
        }
        return this.startAt(value, name).endAt(value, name);
    };
    /**
     * @return {!string} URL for this location.
     */
    Query.prototype.toString = function () {
        util_3.validateArgCount('Query.toString', 0, 0, arguments.length);
        return this.repo.toString() + this.path.toUrlEncodedString();
    };
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users.
    Query.prototype.toJSON = function () {
        // An optional spacer argument is unnecessary for a string.
        util_3.validateArgCount('Query.toJSON', 0, 1, arguments.length);
        return this.toString();
    };
    /**
     * An object representation of the query parameters used by this Query.
     * @return {!Object}
     */
    Query.prototype.queryObject = function () {
        return this.queryParams_.getQueryObject();
    };
    /**
     * @return {!string}
     */
    Query.prototype.queryIdentifier = function () {
        var obj = this.queryObject();
        var id = util_2.ObjectToUniqueKey(obj);
        return id === '{}' ? 'default' : id;
    };
    /**
     * Return true if this query and the provided query are equivalent; otherwise, return false.
     * @param {Query} other
     * @return {boolean}
     */
    Query.prototype.isEqual = function (other) {
        util_3.validateArgCount('Query.isEqual', 1, 1, arguments.length);
        if (!(other instanceof Query)) {
            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';
            throw new Error(error);
        }
        var sameRepo = this.repo === other.repo;
        var samePath = this.path.equals(other.path);
        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();
        return sameRepo && samePath && sameQueryIdentifier;
    };
    /**
     * Helper used by .on and .once to extract the context and or cancel arguments.
     * @param {!string} fnName The function name (on or once)
     * @param {(function(Error)|Object)=} cancelOrContext
     * @param {Object=} context
     * @return {{cancel: ?function(Error), context: ?Object}}
     * @private
     */
    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {
        var ret = { cancel: null, context: null };
        if (cancelOrContext && context) {
            ret.cancel = cancelOrContext;
            util_3.validateCallback(fnName, 3, ret.cancel, true);
            ret.context = context;
            util_3.validateContextObject(fnName, 4, ret.context, true);
        }
        else if (cancelOrContext) {
            // we have either a cancel callback or a context.
            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {
                // it's a context!
                ret.context = cancelOrContext;
            }
            else if (typeof cancelOrContext === 'function') {
                ret.cancel = cancelOrContext;
            }
            else {
                throw new Error(util_3.errorPrefix(fnName, 3, true) +
                    ' must either be a cancel callback or a context object.');
            }
        }
        return ret;
    };
    Object.defineProperty(Query.prototype, "ref", {
        get: function () {
            return this.getRef();
        },
        enumerable: true,
        configurable: true
    });
    return Query;
}());
exports.Query = Query;



},{"../core/snap/indexes/KeyIndex":40,"../core/snap/indexes/PathIndex":41,"../core/snap/indexes/PriorityIndex":42,"../core/snap/indexes/ValueIndex":43,"../core/util/Path":58,"../core/util/util":64,"../core/util/validation":65,"../core/view/EventRegistration":73,"@firebase/util":142}],9:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var onDisconnect_1 = require("./onDisconnect");
var TransactionResult_1 = require("./TransactionResult");
var util_1 = require("../core/util/util");
var NextPushId_1 = require("../core/util/NextPushId");
var Query_1 = require("./Query");
var Repo_1 = require("../core/Repo");
var Path_1 = require("../core/util/Path");
var QueryParams_1 = require("../core/view/QueryParams");
var validation_1 = require("../core/util/validation");
var util_2 = require("@firebase/util");
var util_3 = require("@firebase/util");
var SyncPoint_1 = require("../core/SyncPoint");
var Reference = /** @class */ (function (_super) {
    tslib_1.__extends(Reference, _super);
    /**
     * Call options:
     *   new Reference(Repo, Path) or
     *   new Reference(url: string, string|RepoManager)
     *
     * Externally - this is the firebase.database.Reference type.
     *
     * @param {!Repo} repo
     * @param {(!Path)} path
     * @extends {Query}
     */
    function Reference(repo, path) {
        var _this = this;
        if (!(repo instanceof Repo_1.Repo)) {
            throw new Error('new Reference() no longer supported - use app.database().');
        }
        // call Query's constructor, passing in the repo and path.
        _this = _super.call(this, repo, path, QueryParams_1.QueryParams.DEFAULT, false) || this;
        return _this;
    }
    /** @return {?string} */
    Reference.prototype.getKey = function () {
        util_2.validateArgCount('Reference.key', 0, 0, arguments.length);
        if (this.path.isEmpty())
            return null;
        else
            return this.path.getBack();
    };
    /**
     * @param {!(string|Path)} pathString
     * @return {!Reference}
     */
    Reference.prototype.child = function (pathString) {
        util_2.validateArgCount('Reference.child', 1, 1, arguments.length);
        if (typeof pathString === 'number') {
            pathString = String(pathString);
        }
        else if (!(pathString instanceof Path_1.Path)) {
            if (this.path.getFront() === null)
                validation_1.validateRootPathString('Reference.child', 1, pathString, false);
            else
                validation_1.validatePathString('Reference.child', 1, pathString, false);
        }
        return new Reference(this.repo, this.path.child(pathString));
    };
    /** @return {?Reference} */
    Reference.prototype.getParent = function () {
        util_2.validateArgCount('Reference.parent', 0, 0, arguments.length);
        var parentPath = this.path.parent();
        return parentPath === null ? null : new Reference(this.repo, parentPath);
    };
    /** @return {!Reference} */
    Reference.prototype.getRoot = function () {
        util_2.validateArgCount('Reference.root', 0, 0, arguments.length);
        var ref = this;
        while (ref.getParent() !== null) {
            ref = ref.getParent();
        }
        return ref;
    };
    /** @return {!Database} */
    Reference.prototype.databaseProp = function () {
        return this.repo.database;
    };
    /**
     * @param {*} newVal
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.set = function (newVal, onComplete) {
        util_2.validateArgCount('Reference.set', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.set', this.path);
        validation_1.validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);
        util_2.validateCallback('Reference.set', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path, newVal, 
        /*priority=*/ null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.update = function (objectToMerge, onComplete) {
        util_2.validateArgCount('Reference.update', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.update', this.path);
        if (Array.isArray(objectToMerge)) {
            var newObjectToMerge = {};
            for (var i = 0; i < objectToMerge.length; ++i) {
                newObjectToMerge['' + i] = objectToMerge[i];
            }
            objectToMerge = newObjectToMerge;
            util_1.warn('Passing an Array to Firebase.update() is deprecated. ' +
                'Use set() if you want to overwrite the existing data, or ' +
                'an Object with integer keys if you really do want to ' +
                'only update some of the children.');
        }
        validation_1.validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);
        util_2.validateCallback('Reference.update', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} newVal
     * @param {string|number|null} newPriority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {
        util_2.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);
        validation_1.validateWritablePath('Reference.setWithPriority', this.path);
        validation_1.validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);
        validation_1.validatePriority('Reference.setWithPriority', 2, newPriority, false);
        util_2.validateCallback('Reference.setWithPriority', 3, onComplete, true);
        if (this.getKey() === '.length' || this.getKey() === '.keys')
            throw 'Reference.setWithPriority failed: ' +
                this.getKey() +
                ' is a read-only object.';
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.remove = function (onComplete) {
        util_2.validateArgCount('Reference.remove', 0, 1, arguments.length);
        validation_1.validateWritablePath('Reference.remove', this.path);
        util_2.validateCallback('Reference.remove', 1, onComplete, true);
        return this.set(null, onComplete);
    };
    /**
     * @param {function(*):*} transactionUpdate
     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete
     * @param {boolean=} applyLocally
     * @return {!Promise}
     */
    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {
        util_2.validateArgCount('Reference.transaction', 1, 3, arguments.length);
        validation_1.validateWritablePath('Reference.transaction', this.path);
        util_2.validateCallback('Reference.transaction', 1, transactionUpdate, false);
        util_2.validateCallback('Reference.transaction', 2, onComplete, true);
        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how
        // to expose it.
        validation_1.validateBoolean('Reference.transaction', 3, applyLocally, true);
        if (this.getKey() === '.length' || this.getKey() === '.keys')
            throw 'Reference.transaction failed: ' +
                this.getKey() +
                ' is a read-only object.';
        if (applyLocally === undefined)
            applyLocally = true;
        var deferred = new util_3.Deferred();
        if (typeof onComplete === 'function') {
            deferred.promise.catch(function () { });
        }
        var promiseComplete = function (error, committed, snapshot) {
            if (error) {
                deferred.reject(error);
            }
            else {
                deferred.resolve(new TransactionResult_1.TransactionResult(committed, snapshot));
            }
            if (typeof onComplete === 'function') {
                onComplete(error, committed, snapshot);
            }
        };
        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);
        return deferred.promise;
    };
    /**
     * @param {string|number|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!Promise}
     */
    Reference.prototype.setPriority = function (priority, onComplete) {
        util_2.validateArgCount('Reference.setPriority', 1, 2, arguments.length);
        validation_1.validateWritablePath('Reference.setPriority', this.path);
        validation_1.validatePriority('Reference.setPriority', 1, priority, false);
        util_2.validateCallback('Reference.setPriority', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*=} value
     * @param {function(?Error)=} onComplete
     * @return {!Reference}
     */
    Reference.prototype.push = function (value, onComplete) {
        util_2.validateArgCount('Reference.push', 0, 2, arguments.length);
        validation_1.validateWritablePath('Reference.push', this.path);
        validation_1.validateFirebaseDataArg('Reference.push', 1, value, this.path, true);
        util_2.validateCallback('Reference.push', 2, onComplete, true);
        var now = this.repo.serverTime();
        var name = NextPushId_1.nextPushId(now);
        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.
        // We use child() to create handles to two different references. The first is turned into a
        // ThennableReference below by adding then() and catch() methods and is used as the
        // return value of push(). The second remains a regular Reference and is used as the fulfilled
        // value of the first ThennableReference.
        var thennablePushRef = this.child(name);
        var pushRef = this.child(name);
        var promise;
        if (value != null) {
            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });
        }
        else {
            promise = Promise.resolve(pushRef);
        }
        thennablePushRef.then = promise.then.bind(promise);
        thennablePushRef.catch = promise.then.bind(promise, undefined);
        if (typeof onComplete === 'function') {
            promise.catch(function () { });
        }
        return thennablePushRef;
    };
    /**
     * @return {!OnDisconnect}
     */
    Reference.prototype.onDisconnect = function () {
        validation_1.validateWritablePath('Reference.onDisconnect', this.path);
        return new onDisconnect_1.OnDisconnect(this.repo, this.path);
    };
    Object.defineProperty(Reference.prototype, "database", {
        get: function () {
            return this.databaseProp();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "key", {
        get: function () {
            return this.getKey();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "parent", {
        get: function () {
            return this.getParent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "root", {
        get: function () {
            return this.getRoot();
        },
        enumerable: true,
        configurable: true
    });
    return Reference;
}(Query_1.Query));
exports.Reference = Reference;
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */
Query_1.Query.__referenceConstructor = Reference;
SyncPoint_1.SyncPoint.__referenceConstructor = Reference;



},{"../core/Repo":18,"../core/SyncPoint":25,"../core/util/NextPushId":56,"../core/util/Path":58,"../core/util/util":64,"../core/util/validation":65,"../core/view/QueryParams":74,"./Query":8,"./TransactionResult":10,"./onDisconnect":12,"@firebase/util":142,"tslib":176}],10:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var TransactionResult = /** @class */ (function () {
    /**
     * A type for the resolve value of Firebase.transaction.
     * @constructor
     * @dict
     * @param {boolean} committed
     * @param {DataSnapshot} snapshot
     */
    function TransactionResult(committed, snapshot) {
        this.committed = committed;
        this.snapshot = snapshot;
    }
    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary
    // for end-users
    TransactionResult.prototype.toJSON = function () {
        util_1.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);
        return { committed: this.committed, snapshot: this.snapshot.toJSON() };
    };
    return TransactionResult;
}());
exports.TransactionResult = TransactionResult;



},{"@firebase/util":142}],11:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocketConnection_1 = require("../realtime/WebSocketConnection");
var BrowserPollConnection_1 = require("../realtime/BrowserPollConnection");
/**
 * INTERNAL methods for internal-use only (tests, etc.).
 *
 * Customers shouldn't use these or else should be aware that they could break at any time.
 *
 * @const
 */
exports.forceLongPolling = function () {
    WebSocketConnection_1.WebSocketConnection.forceDisallow();
    BrowserPollConnection_1.BrowserPollConnection.forceAllow();
};
exports.forceWebSockets = function () {
    BrowserPollConnection_1.BrowserPollConnection.forceDisallow();
};
/* Used by App Manager */
exports.isWebSocketsAvailable = function () {
    return WebSocketConnection_1.WebSocketConnection['isAvailable']();
};
exports.setSecurityDebugCallback = function (ref, callback) {
    ref.repo.persistentConnection_.securityDebugCallback_ = callback;
};
exports.stats = function (ref, showDelta) {
    ref.repo.stats(showDelta);
};
exports.statsIncrementCounter = function (ref, metric) {
    ref.repo.statsIncrementCounter(metric);
};
exports.dataUpdateCount = function (ref) {
    return ref.repo.dataUpdateCount;
};
exports.interceptServerData = function (ref, callback) {
    return ref.repo.interceptServerData_(callback);
};



},{"../realtime/BrowserPollConnection":81,"../realtime/WebSocketConnection":85}],12:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var validation_1 = require("../core/util/validation");
var util_2 = require("../core/util/util");
var util_3 = require("@firebase/util");
/**
 * @constructor
 */
var OnDisconnect = /** @class */ (function () {
    /**
     * @param {!Repo} repo_
     * @param {!Path} path_
     */
    function OnDisconnect(repo_, path_) {
        this.repo_ = repo_;
        this.path_ = path_;
    }
    /**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.cancel = function (onComplete) {
        util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);
        util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.remove = function (onComplete) {
        util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.remove', this.path_);
        util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} value
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.set = function (value, onComplete) {
        util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.set', this.path_);
        validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);
        util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {*} value
     * @param {number|string|null} priority
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {
        util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);
        validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);
        validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);
        util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    /**
     * @param {!Object} objectToMerge
     * @param {function(?Error)=} onComplete
     * @return {!firebase.Promise}
     */
    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {
        util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);
        validation_1.validateWritablePath('OnDisconnect.update', this.path_);
        if (Array.isArray(objectToMerge)) {
            var newObjectToMerge = {};
            for (var i = 0; i < objectToMerge.length; ++i) {
                newObjectToMerge['' + i] = objectToMerge[i];
            }
            objectToMerge = newObjectToMerge;
            util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +
                'existing data, or an Object with integer keys if you really do want to only update some of the children.');
        }
        validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);
        util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);
        var deferred = new util_3.Deferred();
        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));
        return deferred.promise;
    };
    return OnDisconnect;
}());
exports.OnDisconnect = OnDisconnect;



},{"../core/util/util":64,"../core/util/validation":65,"@firebase/util":142}],13:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var RepoInfo_1 = require("../core/RepoInfo");
var PersistentConnection_1 = require("../core/PersistentConnection");
var RepoManager_1 = require("../core/RepoManager");
var Connection_1 = require("../realtime/Connection");
exports.DataConnection = PersistentConnection_1.PersistentConnection;
/**
 * @param {!string} pathString
 * @param {function(*)} onComplete
 */
PersistentConnection_1.PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {
    this.sendRequest('q', { p: pathString }, onComplete);
};
/**
 * @param {*} data
 * @param {function(*)} onEcho
 */
PersistentConnection_1.PersistentConnection.prototype.echo = function (data, onEcho) {
    this.sendRequest('echo', { d: data }, onEcho);
};
// RealTimeConnection properties that we use in tests.
exports.RealTimeConnection = Connection_1.Connection;
/**
 * @param {function(): string} newHash
 * @return {function()}
 */
exports.hijackHash = function (newHash) {
    var oldPut = PersistentConnection_1.PersistentConnection.prototype.put;
    PersistentConnection_1.PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {
        if (opt_hash !== undefined) {
            opt_hash = newHash();
        }
        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);
    };
    return function () {
        PersistentConnection_1.PersistentConnection.prototype.put = oldPut;
    };
};
/**
 * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}
 */
exports.ConnectionTarget = RepoInfo_1.RepoInfo;
/**
 * @param {!Query} query
 * @return {!string}
 */
exports.queryIdentifier = function (query) {
    return query.queryIdentifier();
};
/**
 * @param {!Query} firebaseRef
 * @return {!Object}
 */
exports.listens = function (firebaseRef) {
    return firebaseRef.repo.persistentConnection_.listens_;
};
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 *
 * @param {boolean} forceRestClient
 */
exports.forceRestClient = function (forceRestClient) {
    RepoManager_1.RepoManager.getInstance().forceRestClient(forceRestClient);
};



},{"../core/PersistentConnection":16,"../core/RepoInfo":19,"../core/RepoManager":20,"../realtime/Connection":82}],14:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util/util");
/**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */
var AuthTokenProvider = /** @class */ (function () {
    /**
     * @param {!FirebaseApp} app_
     */
    function AuthTokenProvider(app_) {
        this.app_ = app_;
    }
    /**
     * @param {boolean} forceRefresh
     * @return {!Promise<FirebaseAuthTokenData>}
     */
    AuthTokenProvider.prototype.getToken = function (forceRefresh) {
        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, 
        // .catch
        function (error) {
            // TODO: Need to figure out all the cases this is raised and whether
            // this makes sense.
            if (error && error.code === 'auth/token-not-initialized') {
                util_1.log('Got auth/token-not-initialized error.  Treating as null token.');
                return null;
            }
            else {
                return Promise.reject(error);
            }
        });
    };
    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {
        // TODO: We might want to wrap the listener and call it with no args to
        // avoid a leaky abstraction, but that makes removing the listener harder.
        this.app_['INTERNAL']['addAuthTokenListener'](listener);
    };
    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {
        this.app_['INTERNAL']['removeAuthTokenListener'](listener);
    };
    AuthTokenProvider.prototype.notifyForInvalidToken = function () {
        var errorMessage = 'Provided authentication credentials for the app named "' +
            this.app_.name +
            '" are invalid. This usually indicates your app was not ' +
            'initialized correctly. ';
        if ('credential' in this.app_.options) {
            errorMessage +=
                'Make sure the "credential" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        }
        else if ('serviceAccount' in this.app_.options) {
            errorMessage +=
                'Make sure the "serviceAccount" property provided to initializeApp() ' +
                    'is authorized to access the specified "databaseURL" and is from the correct ' +
                    'project.';
        }
        else {
            errorMessage +=
                'Make sure the "apiKey" and "databaseURL" properties provided to ' +
                    'initializeApp() match the values provided for your app at ' +
                    'https://console.firebase.google.com/.';
        }
        util_1.warn(errorMessage);
    };
    return AuthTokenProvider;
}());
exports.AuthTokenProvider = AuthTokenProvider;



},{"./util/util":64}],15:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ImmutableTree_1 = require("./util/ImmutableTree");
var Path_1 = require("./util/Path");
var util_1 = require("@firebase/util");
var Node_1 = require("./snap/Node");
var PriorityIndex_1 = require("./snap/indexes/PriorityIndex");
var util_2 = require("@firebase/util");
/**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 *
 * @constructor
 * @param {!ImmutableTree.<!Node>} writeTree
 */
var CompoundWrite = /** @class */ (function () {
    function CompoundWrite(writeTree_) {
        this.writeTree_ = writeTree_;
    }
    /**
     * @param {!Path} path
     * @param {!Node} node
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.addWrite = function (path, node) {
        if (path.isEmpty()) {
            return new CompoundWrite(new ImmutableTree_1.ImmutableTree(node));
        }
        else {
            var rootmost = this.writeTree_.findRootMostValueAndPath(path);
            if (rootmost != null) {
                var rootMostPath = rootmost.path;
                var value = rootmost.value;
                var relativePath = Path_1.Path.relativePath(rootMostPath, path);
                value = value.updateChild(relativePath, node);
                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));
            }
            else {
                var subtree = new ImmutableTree_1.ImmutableTree(node);
                var newWriteTree = this.writeTree_.setTree(path, subtree);
                return new CompoundWrite(newWriteTree);
            }
        }
    };
    /**
     * @param {!Path} path
     * @param {!Object.<string, !Node>} updates
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.addWrites = function (path, updates) {
        var newWrite = this;
        util_1.forEach(updates, function (childKey, node) {
            newWrite = newWrite.addWrite(path.child(childKey), node);
        });
        return newWrite;
    };
    /**
     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
     * location, which must be removed by calling this method with that path.
     *
     * @param {!Path} path The path at which a write and all deeper writes should be removed
     * @return {!CompoundWrite} The new CompoundWrite with the removed path
     */
    CompoundWrite.prototype.removeWrite = function (path) {
        if (path.isEmpty()) {
            return CompoundWrite.Empty;
        }
        else {
            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_1.ImmutableTree.Empty);
            return new CompoundWrite(newWriteTree);
        }
    };
    /**
     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
     * considered "complete".
     *
     * @param {!Path} path The path to check for
     * @return {boolean} Whether there is a complete write at that path
     */
    CompoundWrite.prototype.hasCompleteWrite = function (path) {
        return this.getCompleteNode(path) != null;
    };
    /**
     * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
     * writes from deeper paths, but will return child nodes from a more shallow path.
     *
     * @param {!Path} path The path to get a complete write
     * @return {?Node} The node if complete at that path, or null otherwise.
     */
    CompoundWrite.prototype.getCompleteNode = function (path) {
        var rootmost = this.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            return this.writeTree_
                .get(rootmost.path)
                .getChild(Path_1.Path.relativePath(rootmost.path, path));
        }
        else {
            return null;
        }
    };
    /**
     * Returns all children that are guaranteed to be a complete overwrite.
     *
     * @return {!Array.<NamedNode>} A list of all complete children.
     */
    CompoundWrite.prototype.getCompleteChildren = function () {
        var children = [];
        var node = this.writeTree_.value;
        if (node != null) {
            // If it's a leaf node, it has no children; so nothing to do.
            if (!node.isLeafNode()) {
                node.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                    children.push(new Node_1.NamedNode(childName, childNode));
                });
            }
        }
        else {
            this.writeTree_.children.inorderTraversal(function (childName, childTree) {
                if (childTree.value != null) {
                    children.push(new Node_1.NamedNode(childName, childTree.value));
                }
            });
        }
        return children;
    };
    /**
     * @param {!Path} path
     * @return {!CompoundWrite}
     */
    CompoundWrite.prototype.childCompoundWrite = function (path) {
        if (path.isEmpty()) {
            return this;
        }
        else {
            var shadowingNode = this.getCompleteNode(path);
            if (shadowingNode != null) {
                return new CompoundWrite(new ImmutableTree_1.ImmutableTree(shadowingNode));
            }
            else {
                return new CompoundWrite(this.writeTree_.subtree(path));
            }
        }
    };
    /**
     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
     * @return {boolean} Whether this CompoundWrite is empty
     */
    CompoundWrite.prototype.isEmpty = function () {
        return this.writeTree_.isEmpty();
    };
    /**
     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
     * node
     * @param {!Node} node The node to apply this CompoundWrite to
     * @return {!Node} The node with all writes applied
     */
    CompoundWrite.prototype.apply = function (node) {
        return CompoundWrite.applySubtreeWrite_(Path_1.Path.Empty, this.writeTree_, node);
    };
    /**
     * @type {!CompoundWrite}
     */
    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_1.ImmutableTree(null));
    /**
     * @param {!Path} relativePath
     * @param {!ImmutableTree.<!Node>} writeTree
     * @param {!Node} node
     * @return {!Node}
     * @private
     */
    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {
        if (writeTree.value != null) {
            // Since there a write is always a leaf, we're done here
            return node.updateChild(relativePath, writeTree.value);
        }
        else {
            var priorityWrite_1 = null;
            writeTree.children.inorderTraversal(function (childKey, childTree) {
                if (childKey === '.priority') {
                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                    // to apply priorities to empty nodes that are later filled
                    util_2.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');
                    priorityWrite_1 = childTree.value;
                }
                else {
                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);
                }
            });
            // If there was a priority write, we only apply it if the node is not empty
            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);
            }
            return node;
        }
    };
    return CompoundWrite;
}());
exports.CompoundWrite = CompoundWrite;



},{"./snap/Node":36,"./snap/indexes/PriorityIndex":42,"./util/ImmutableTree":55,"./util/Path":58,"@firebase/util":142}],16:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var app_1 = require("@firebase/app");
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var util_3 = require("@firebase/util");
var util_4 = require("./util/util");
var Path_1 = require("./util/Path");
var VisibilityMonitor_1 = require("./util/VisibilityMonitor");
var OnlineMonitor_1 = require("./util/OnlineMonitor");
var util_5 = require("@firebase/util");
var Connection_1 = require("../realtime/Connection");
var util_6 = require("@firebase/util");
var util_7 = require("@firebase/util");
var ServerActions_1 = require("./ServerActions");
var RECONNECT_MIN_DELAY = 1000;
var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)
var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)
var RECONNECT_DELAY_MULTIPLIER = 1.3;
var RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
var INVALID_AUTH_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */
var PersistentConnection = /** @class */ (function (_super) {
    tslib_1.__extends(PersistentConnection, _super);
    /**
     * @implements {ServerActions}
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param onConnectStatus_
     * @param onServerInfoUpdate_
     * @param authTokenProvider_
     * @param authOverride_
     */
    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.onConnectStatus_ = onConnectStatus_;
        _this.onServerInfoUpdate_ = onServerInfoUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        _this.authOverride_ = authOverride_;
        // Used for diagnostic logging.
        _this.id = PersistentConnection.nextPersistentConnectionId_++;
        _this.log_ = util_4.logWrapper('p:' + _this.id + ':');
        /** @private {Object} */
        _this.interruptReasons_ = {};
        _this.listens_ = {};
        _this.outstandingPuts_ = [];
        _this.outstandingPutCount_ = 0;
        _this.onDisconnectRequestQueue_ = [];
        _this.connected_ = false;
        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
        _this.securityDebugCallback_ = null;
        _this.lastSessionId = null;
        /** @private {number|null} */
        _this.establishConnectionTimer_ = null;
        /** @private {boolean} */
        _this.visible_ = false;
        // Before we get connected, we keep a queue of pending messages to send.
        _this.requestCBHash_ = {};
        _this.requestNumber_ = 0;
        /** @private {?{
         *   sendRequest(Object),
         *   close()
         * }} */
        _this.realtime_ = null;
        /** @private {string|null} */
        _this.authToken_ = null;
        _this.forceTokenRefresh_ = false;
        _this.invalidAuthTokenCount_ = 0;
        _this.firstConnection_ = true;
        _this.lastConnectionAttemptTime_ = null;
        _this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && !util_7.isNodeSdk()) {
            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
        }
        _this.scheduleConnect_(0);
        VisibilityMonitor_1.VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);
        if (repoInfo_.host.indexOf('fblocal') === -1) {
            OnlineMonitor_1.OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
        }
        return _this;
    }
    /**
     * @param {!string} action
     * @param {*} body
     * @param {function(*)=} onResponse
     * @protected
     */
    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
        var curReqNum = ++this.requestNumber_;
        var msg = { r: curReqNum, a: action, b: body };
        this.log_(util_2.stringify(msg));
        util_3.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) {
            this.requestCBHash_[curReqNum] = onResponse;
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
        var queryId = query.queryIdentifier();
        var pathString = query.path.toString();
        this.log_('Listen called for ' + pathString + ' ' + queryId);
        this.listens_[pathString] = this.listens_[pathString] || {};
        util_3.assert(query.getQueryParams().isDefault() ||
            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
        util_3.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');
        var listenSpec = {
            onComplete: onComplete,
            hashFn: currentHashFn,
            query: query,
            tag: tag
        };
        this.listens_[pathString][queryId] = listenSpec;
        if (this.connected_) {
            this.sendListen_(listenSpec);
        }
    };
    /**
     * @param {!{onComplete(),
     *           hashFn():!string,
     *           query: !Query,
     *           tag: ?number}} listenSpec
     * @private
     */
    PersistentConnection.prototype.sendListen_ = function (listenSpec) {
        var _this = this;
        var query = listenSpec.query;
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_('Listen on ' + pathString + ' for ' + queryId);
        var req = { /*path*/ p: pathString };
        var action = 'q';
        // Only bother to send query if it's non-default.
        if (listenSpec.tag) {
            req['q'] = query.queryObject();
            req['t'] = listenSpec.tag;
        }
        req['h'] = listenSpec.hashFn();
        this.sendRequest(action, req, function (message) {
            var payload = message['d'];
            var status = message['s'];
            // print warnings in any case...
            PersistentConnection.warnOnListenWarnings_(payload, query);
            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];
            // only trigger actions if the listen hasn't been removed and readded
            if (currentListenSpec === listenSpec) {
                _this.log_('listen response', message);
                if (status !== 'ok') {
                    _this.removeListen_(pathString, queryId);
                }
                if (listenSpec.onComplete) {
                    listenSpec.onComplete(status, payload);
                }
            }
        });
    };
    /**
     * @param {*} payload
     * @param {!Query} query
     * @private
     */
    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
        if (payload && typeof payload === 'object' && util_1.contains(payload, 'w')) {
            var warnings = util_1.safeGet(payload, 'w');
            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                var indexSpec = '".indexOn": "' +
                    query
                        .getQueryParams()
                        .getIndex()
                        .toString() +
                    '"';
                var indexPath = query.path.toString();
                util_4.warn("Using an unspecified index. Your data will be downloaded and " +
                    ("filtered on the client. Consider adding " + indexSpec + " at ") +
                    (indexPath + " to your security rules for better performance."));
            }
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.refreshAuthToken = function (token) {
        this.authToken_ = token;
        this.log_('Auth token refreshed');
        if (this.authToken_) {
            this.tryAuth();
        }
        else {
            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
            //the credential so we dont become authenticated next time we connect.
            if (this.connected_) {
                this.sendRequest('unauth', {}, function () { });
            }
        }
        this.reduceReconnectDelayIfAdminCredential_(token);
    };
    /**
     * @param {!string} credential
     * @private
     */
    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
        var isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || util_5.isAdmin(credential)) {
            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
    };
    /**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */
    PersistentConnection.prototype.tryAuth = function () {
        var _this = this;
        if (this.connected_ && this.authToken_) {
            var token_1 = this.authToken_;
            var authMethod = util_5.isValidFormat(token_1) ? 'auth' : 'gauth';
            var requestData = { cred: token_1 };
            if (this.authOverride_ === null) {
                requestData['noauth'] = true;
            }
            else if (typeof this.authOverride_ === 'object') {
                requestData['authvar'] = this.authOverride_;
            }
            this.sendRequest(authMethod, requestData, function (res) {
                var status = res['s'];
                var data = res['d'] || 'error';
                if (_this.authToken_ === token_1) {
                    if (status === 'ok') {
                        _this.invalidAuthTokenCount_ = 0;
                    }
                    else {
                        // Triggers reconnect and force refresh for auth token
                        _this.onAuthRevoked_(status, data);
                    }
                }
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.unlisten = function (query, tag) {
        var pathString = query.path.toString();
        var queryId = query.queryIdentifier();
        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
        util_3.assert(query.getQueryParams().isDefault() ||
            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
        var listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) {
            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
        }
    };
    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
        var req = { /*path*/ p: pathString };
        var action = 'n';
        // Only bother sending queryId if it's non-default.
        if (tag) {
            req['q'] = queryObj;
            req['t'] = tag;
        }
        this.sendRequest(action, req);
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('o', pathString, data, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'o',
                data: data,
                onComplete: onComplete
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('om', pathString, data, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'om',
                data: data,
                onComplete: onComplete
            });
        }
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
        if (this.connected_) {
            this.sendOnDisconnect_('oc', pathString, null, onComplete);
        }
        else {
            this.onDisconnectRequestQueue_.push({
                pathString: pathString,
                action: 'oc',
                data: null,
                onComplete: onComplete
            });
        }
    };
    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
        var request = { /*path*/ p: pathString, /*data*/ d: data };
        this.log_('onDisconnect ' + action, request);
        this.sendRequest(action, request, function (response) {
            if (onComplete) {
                setTimeout(function () {
                    onComplete(response['s'], response['d']);
                }, Math.floor(0));
            }
        });
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
        this.putInternal('p', pathString, data, onComplete, hash);
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
        this.putInternal('m', pathString, data, onComplete, hash);
    };
    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
        var request = {
            /*path*/ p: pathString,
            /*data*/ d: data
        };
        if (hash !== undefined)
            request['h'] = hash;
        // TODO: Only keep track of the most recent put for a given path?
        this.outstandingPuts_.push({
            action: action,
            request: request,
            onComplete: onComplete
        });
        this.outstandingPutCount_++;
        var index = this.outstandingPuts_.length - 1;
        if (this.connected_) {
            this.sendPut_(index);
        }
        else {
            this.log_('Buffering put: ' + pathString);
        }
    };
    PersistentConnection.prototype.sendPut_ = function (index) {
        var _this = this;
        var action = this.outstandingPuts_[index].action;
        var request = this.outstandingPuts_[index].request;
        var onComplete = this.outstandingPuts_[index].onComplete;
        this.outstandingPuts_[index].queued = this.connected_;
        this.sendRequest(action, request, function (message) {
            _this.log_(action + ' response', message);
            delete _this.outstandingPuts_[index];
            _this.outstandingPutCount_--;
            // Clean up array occasionally.
            if (_this.outstandingPutCount_ === 0) {
                _this.outstandingPuts_ = [];
            }
            if (onComplete)
                onComplete(message['s'], message['d']);
        });
    };
    /**
     * @inheritDoc
     */
    PersistentConnection.prototype.reportStats = function (stats) {
        var _this = this;
        // If we're not connected, we just drop the stats.
        if (this.connected_) {
            var request = { /*counters*/ c: stats };
            this.log_('reportStats', request);
            this.sendRequest(/*stats*/ 's', request, function (result) {
                var status = result['s'];
                if (status !== 'ok') {
                    var errorReason = result['d'];
                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                }
            });
        }
    };
    /**
     * @param {*} message
     * @private
     */
    PersistentConnection.prototype.onDataMessage_ = function (message) {
        if ('r' in message) {
            // this is a response
            this.log_('from server: ' + util_2.stringify(message));
            var reqNum = message['r'];
            var onResponse = this.requestCBHash_[reqNum];
            if (onResponse) {
                delete this.requestCBHash_[reqNum];
                onResponse(message['b']);
            }
        }
        else if ('error' in message) {
            throw 'A server-side error has occurred: ' + message['error'];
        }
        else if ('a' in message) {
            // a and b are action and body, respectively
            this.onDataPush_(message['a'], message['b']);
        }
    };
    PersistentConnection.prototype.onDataPush_ = function (action, body) {
        this.log_('handleServerMessage', action, body);
        if (action === 'd')
            this.onDataUpdate_(body['p'], body['d'], 
            /*isMerge*/ false, body['t']);
        else if (action === 'm')
            this.onDataUpdate_(body['p'], body['d'], 
            /*isMerge=*/ true, body['t']);
        else if (action === 'c')
            this.onListenRevoked_(body['p'], body['q']);
        else if (action === 'ac')
            this.onAuthRevoked_(body['s'], body['d']);
        else if (action === 'sd')
            this.onSecurityDebugPacket_(body);
        else
            util_4.error('Unrecognized action received from server: ' +
                util_2.stringify(action) +
                '\nAre you using the latest client?');
    };
    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
        this.log_('connection ready');
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = new Date().getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) {
            this.sendConnectStats_();
        }
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
    };
    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
        var _this = this;
        util_3.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) {
            clearTimeout(this.establishConnectionTimer_);
        }
        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
        this.establishConnectionTimer_ = setTimeout(function () {
            _this.establishConnectionTimer_ = null;
            _this.establishConnection_();
        }, Math.floor(timeout));
    };
    /**
     * @param {boolean} visible
     * @private
     */
    PersistentConnection.prototype.onVisible_ = function (visible) {
        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
        if (visible &&
            !this.visible_ &&
            this.reconnectDelay_ === this.maxReconnectDelay_) {
            this.log_('Window became visible.  Reducing delay.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
        this.visible_ = visible;
    };
    PersistentConnection.prototype.onOnline_ = function (online) {
        if (online) {
            this.log_('Browser went online.');
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
        else {
            this.log_('Browser went offline.  Killing connection.');
            if (this.realtime_) {
                this.realtime_.close();
            }
        }
    };
    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
        this.log_('data client disconnected');
        this.connected_ = false;
        this.realtime_ = null;
        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
        this.cancelSentTransactions_();
        // Clear out the pending requests.
        this.requestCBHash_ = {};
        if (this.shouldReconnect_()) {
            if (!this.visible_) {
                this.log_("Window isn't visible.  Delaying reconnect.");
                this.reconnectDelay_ = this.maxReconnectDelay_;
                this.lastConnectionAttemptTime_ = new Date().getTime();
            }
            else if (this.lastConnectionEstablishedTime_) {
                // If we've been connected long enough, reset reconnect delay to minimum.
                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)
                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                this.lastConnectionEstablishedTime_ = null;
            }
            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
            reconnectDelay = Math.random() * reconnectDelay;
            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
            this.scheduleConnect_(reconnectDelay);
            // Adjust reconnect delay for next time.
            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
    };
    PersistentConnection.prototype.establishConnection_ = function () {
        if (this.shouldReconnect_()) {
            this.log_('Making a connection attempt');
            this.lastConnectionAttemptTime_ = new Date().getTime();
            this.lastConnectionEstablishedTime_ = null;
            var onDataMessage_1 = this.onDataMessage_.bind(this);
            var onReady_1 = this.onReady_.bind(this);
            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
            var self_1 = this;
            var lastSessionId_1 = this.lastSessionId;
            var canceled_1 = false;
            var connection_1 = null;
            var closeFn_1 = function () {
                if (connection_1) {
                    connection_1.close();
                }
                else {
                    canceled_1 = true;
                    onDisconnect_1();
                }
            };
            var sendRequestFn = function (msg) {
                util_3.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                connection_1.sendRequest(msg);
            };
            this.realtime_ = {
                close: closeFn_1,
                sendRequest: sendRequestFn
            };
            var forceRefresh = this.forceTokenRefresh_;
            this.forceTokenRefresh_ = false;
            // First fetch auth token, and establish connection after fetching the token was successful
            this.authTokenProvider_
                .getToken(forceRefresh)
                .then(function (result) {
                if (!canceled_1) {
                    util_4.log('getToken() completed. Creating connection.');
                    self_1.authToken_ = result && result.accessToken;
                    connection_1 = new Connection_1.Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, 
                    /* onKill= */ function (reason) {
                        util_4.warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                    }, lastSessionId_1);
                }
                else {
                    util_4.log('getToken() completed but was canceled');
                }
            })
                .then(null, function (error) {
                self_1.log_('Failed to get token: ' + error);
                if (!canceled_1) {
                    if (util_6.CONSTANTS.NODE_ADMIN) {
                        // This may be a critical error for the Admin Node.js SDK, so log a warning.
                        // But getToken() may also just have temporarily failed, so we still want to
                        // continue retrying.
                        util_4.warn(error);
                    }
                    closeFn_1();
                }
            });
        }
    };
    /**
     * @param {string} reason
     */
    PersistentConnection.prototype.interrupt = function (reason) {
        util_4.log('Interrupting connection for reason: ' + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) {
            this.realtime_.close();
        }
        else {
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
                this.establishConnectionTimer_ = null;
            }
            if (this.connected_) {
                this.onRealtimeDisconnect_();
            }
        }
    };
    /**
     * @param {string} reason
     */
    PersistentConnection.prototype.resume = function (reason) {
        util_4.log('Resuming connection for reason: ' + reason);
        delete this.interruptReasons_[reason];
        if (util_1.isEmpty(this.interruptReasons_)) {
            this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            if (!this.realtime_) {
                this.scheduleConnect_(0);
            }
        }
    };
    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
        var delta = timestamp - new Date().getTime();
        this.onServerInfoUpdate_({ serverTimeOffset: delta });
    };
    PersistentConnection.prototype.cancelSentTransactions_ = function () {
        for (var i = 0; i < this.outstandingPuts_.length; i++) {
            var put = this.outstandingPuts_[i];
            if (put && /*hash*/ 'h' in put.request && put.queued) {
                if (put.onComplete)
                    put.onComplete('disconnect');
                delete this.outstandingPuts_[i];
                this.outstandingPutCount_--;
            }
        }
        // Clean up array occasionally.
        if (this.outstandingPutCount_ === 0)
            this.outstandingPuts_ = [];
    };
    /**
     * @param {!string} pathString
     * @param {Array.<*>=} query
     * @private
     */
    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
        var queryId;
        if (!query) {
            queryId = 'default';
        }
        else {
            queryId = query.map(function (q) { return util_4.ObjectToUniqueKey(q); }).join('$');
        }
        var listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete)
            listen.onComplete('permission_denied');
    };
    /**
     * @param {!string} pathString
     * @param {!string} queryId
     * @return {{queries:Array.<Query>, onComplete:function(string)}}
     * @private
     */
    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
        var normalizedPathString = new Path_1.Path(pathString).toString(); // normalize path.
        var listen;
        if (this.listens_[normalizedPathString] !== undefined) {
            listen = this.listens_[normalizedPathString][queryId];
            delete this.listens_[normalizedPathString][queryId];
            if (util_1.getCount(this.listens_[normalizedPathString]) === 0) {
                delete this.listens_[normalizedPathString];
            }
        }
        else {
            // all listens for this path has already been removed
            listen = undefined;
        }
        return listen;
    };
    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
        util_4.log('Auth token revoked: ' + statusCode + '/' + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAuthTokenCount_++;
            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                // Set a long reconnect delay because recovery is unlikely
                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                // Notify the auth token provider that the token is invalid, which will log
                // a warning
                this.authTokenProvider_.notifyForInvalidToken();
            }
        }
    };
    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
        if (this.securityDebugCallback_) {
            this.securityDebugCallback_(body);
        }
        else {
            if ('msg' in body) {
                console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
            }
        }
    };
    PersistentConnection.prototype.restoreState_ = function () {
        var _this = this;
        //Re-authenticate ourselves if we have a credential stored.
        this.tryAuth();
        // Puts depend on having received the corresponding data update from the server before they complete, so we must
        // make sure to send listens before puts.
        util_1.forEach(this.listens_, function (pathString, queries) {
            util_1.forEach(queries, function (key, listenSpec) {
                _this.sendListen_(listenSpec);
            });
        });
        for (var i = 0; i < this.outstandingPuts_.length; i++) {
            if (this.outstandingPuts_[i])
                this.sendPut_(i);
        }
        while (this.onDisconnectRequestQueue_.length) {
            var request = this.onDisconnectRequestQueue_.shift();
            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
    };
    /**
     * Sends client stats for first connection
     * @private
     */
    PersistentConnection.prototype.sendConnectStats_ = function () {
        var stats = {};
        var clientName = 'js';
        if (util_6.CONSTANTS.NODE_ADMIN) {
            clientName = 'admin_node';
        }
        else if (util_6.CONSTANTS.NODE_CLIENT) {
            clientName = 'node';
        }
        stats['sdk.' + clientName + '.' + app_1.default.SDK_VERSION.replace(/\./g, '-')] = 1;
        if (util_7.isMobileCordova()) {
            stats['framework.cordova'] = 1;
        }
        else if (util_7.isReactNative()) {
            stats['framework.reactnative'] = 1;
        }
        this.reportStats(stats);
    };
    /**
     * @return {boolean}
     * @private
     */
    PersistentConnection.prototype.shouldReconnect_ = function () {
        var online = OnlineMonitor_1.OnlineMonitor.getInstance().currentlyOnline();
        return util_1.isEmpty(this.interruptReasons_) && online;
    };
    /**
     * @private
     */
    PersistentConnection.nextPersistentConnectionId_ = 0;
    /**
     * Counter for number of connections created. Mainly used for tagging in the logs
     * @type {number}
     * @private
     */
    PersistentConnection.nextConnectionId_ = 0;
    return PersistentConnection;
}(ServerActions_1.ServerActions));
exports.PersistentConnection = PersistentConnection;



},{"../realtime/Connection":82,"./ServerActions":22,"./util/OnlineMonitor":57,"./util/Path":58,"./util/VisibilityMonitor":62,"./util/util":64,"@firebase/app":2,"@firebase/util":142,"tslib":176}],17:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@firebase/util");
var util_2 = require("./util/util");
var util_3 = require("@firebase/util");
var util_4 = require("@firebase/util");
var util_5 = require("@firebase/util");
var ServerActions_1 = require("./ServerActions");
/**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */
var ReadonlyRestClient = /** @class */ (function (_super) {
    tslib_1.__extends(ReadonlyRestClient, _super);
    /**
     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to
     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server
     * @param {AuthTokenProvider} authTokenProvider_
     * @implements {ServerActions}
     */
    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {
        var _this = _super.call(this) || this;
        _this.repoInfo_ = repoInfo_;
        _this.onDataUpdate_ = onDataUpdate_;
        _this.authTokenProvider_ = authTokenProvider_;
        /** @private {function(...[*])} */
        _this.log_ = util_2.logWrapper('p:rest:');
        /**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         *
         * @private {!Object.<string, !Object>}
         */
        _this.listens_ = {};
        return _this;
    }
    ReadonlyRestClient.prototype.reportStats = function (stats) {
        throw new Error('Method not implemented.');
    };
    /**
     * @param {!Query} query
     * @param {?number=} tag
     * @return {string}
     * @private
     */
    ReadonlyRestClient.getListenId_ = function (query, tag) {
        if (tag !== undefined) {
            return 'tag$' + tag;
        }
        else {
            util_1.assert(query.getQueryParams().isDefault(), "should have a tag if it's not a default query.");
            return query.path.toString();
        }
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {
        var _this = this;
        var pathString = query.path.toString();
        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());
        // Mark this listener so we can tell if it's removed.
        var listenId = ReadonlyRestClient.getListenId_(query, tag);
        var thisListen = {};
        this.listens_[listenId] = thisListen;
        var queryStringParamaters = query
            .getQueryParams()
            .toRestQueryStringParameters();
        this.restRequest_(pathString + '.json', queryStringParamaters, function (error, result) {
            var data = result;
            if (error === 404) {
                data = null;
                error = null;
            }
            if (error === null) {
                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
            }
            if (util_4.safeGet(_this.listens_, listenId) === thisListen) {
                var status_1;
                if (!error) {
                    status_1 = 'ok';
                }
                else if (error == 401) {
                    status_1 = 'permission_denied';
                }
                else {
                    status_1 = 'rest_error:' + error;
                }
                onComplete(status_1, null);
            }
        });
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.unlisten = function (query, tag) {
        var listenId = ReadonlyRestClient.getListenId_(query, tag);
        delete this.listens_[listenId];
    };
    /** @inheritDoc */
    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {
        // no-op since we just always call getToken.
    };
    /**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     *
     * @param {!string} pathString
     * @param {!Object.<string, *>} queryStringParameters
     * @param {?function(?number, *=)} callback
     * @private
     */
    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {
        var _this = this;
        if (queryStringParameters === void 0) { queryStringParameters = {}; }
        queryStringParameters['format'] = 'export';
        this.authTokenProvider_
            .getToken(/*forceRefresh=*/ false)
            .then(function (authTokenData) {
            var authToken = authTokenData && authTokenData.accessToken;
            if (authToken) {
                queryStringParameters['auth'] = authToken;
            }
            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +
                _this.repoInfo_.host +
                pathString +
                '?' +
                util_5.querystring(queryStringParameters);
            _this.log_('Sending REST request for ' + url);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (callback && xhr.readyState === 4) {
                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                    var res = null;
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try {
                            res = util_3.jsonEval(xhr.responseText);
                        }
                        catch (e) {
                            util_2.warn('Failed to parse JSON response for ' +
                                url +
                                ': ' +
                                xhr.responseText);
                        }
                        callback(null, res);
                    }
                    else {
                        // 401 and 404 are expected.
                        if (xhr.status !== 401 && xhr.status !== 404) {
                            util_2.warn('Got unsuccessful REST response for ' +
                                url +
                                ' Status: ' +
                                xhr.status);
                        }
                        callback(xhr.status);
                    }
                    callback = null;
                }
            };
            xhr.open('GET', url, /*asynchronous=*/ true);
            xhr.send();
        });
    };
    return ReadonlyRestClient;
}(ServerActions_1.ServerActions));
exports.ReadonlyRestClient = ReadonlyRestClient;



},{"./ServerActions":22,"./util/util":64,"@firebase/util":142,"tslib":176}],18:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ServerValues_1 = require("./util/ServerValues");
var nodeFromJSON_1 = require("./snap/nodeFromJSON");
var Path_1 = require("./util/Path");
var SparseSnapshotTree_1 = require("./SparseSnapshotTree");
var SyncTree_1 = require("./SyncTree");
var SnapshotHolder_1 = require("./SnapshotHolder");
var util_1 = require("@firebase/util");
var util_2 = require("./util/util");
var util_3 = require("@firebase/util");
var AuthTokenProvider_1 = require("./AuthTokenProvider");
var StatsManager_1 = require("./stats/StatsManager");
var StatsReporter_1 = require("./stats/StatsReporter");
var StatsListener_1 = require("./stats/StatsListener");
var EventQueue_1 = require("./view/EventQueue");
var PersistentConnection_1 = require("./PersistentConnection");
var ReadonlyRestClient_1 = require("./ReadonlyRestClient");
var Database_1 = require("../api/Database");
var INTERRUPT_REASON = 'repo_interrupt';
/**
 * A connection to a single data repository.
 */
var Repo = /** @class */ (function () {
    /**
     * @param {!RepoInfo} repoInfo_
     * @param {boolean} forceRestClient
     * @param {!FirebaseApp} app
     */
    function Repo(repoInfo_, forceRestClient, app) {
        var _this = this;
        this.repoInfo_ = repoInfo_;
        this.app = app;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new EventQueue_1.EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        // A list of data pieces and paths to be set when this client disconnects.
        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
        /**
         * TODO: This should be @private but it's used by test_access.js and internal.js
         * @type {?PersistentConnection}
         */
        this.persistentConnection_ = null;
        /** @type {!AuthTokenProvider} */
        var authTokenProvider = new AuthTokenProvider_1.AuthTokenProvider(app);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo_);
        if (forceRestClient || util_2.beingCrawled()) {
            this.server_ = new ReadonlyRestClient_1.ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);
            // Minor hack: Fire onConnect immediately, since there's no actual connection.
            setTimeout(this.onConnectStatus_.bind(this, true), 0);
        }
        else {
            var authOverride = app.options['databaseAuthVariableOverride'];
            // Validate authOverride
            if (typeof authOverride !== 'undefined' && authOverride !== null) {
                if (typeof authOverride !== 'object') {
                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');
                }
                try {
                    util_1.stringify(authOverride);
                }
                catch (e) {
                    throw new Error('Invalid authOverride provided: ' + e);
                }
            }
            this.persistentConnection_ = new PersistentConnection_1.PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);
            this.server_ = this.persistentConnection_;
        }
        authTokenProvider.addTokenChangeListener(function (token) {
            _this.server_.refreshAuthToken(token);
        });
        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
        this.statsReporter_ = StatsManager_1.StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter_1.StatsReporter(_this.stats_, _this.server_); });
        this.transactions_init_();
        // Used for .info.
        this.infoData_ = new SnapshotHolder_1.SnapshotHolder();
        this.infoSyncTree_ = new SyncTree_1.SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                var infoEvents = [];
                var node = _this.infoData_.getNode(query.path);
                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
                // on initial data...
                if (!node.isEmpty()) {
                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);
                    setTimeout(function () {
                        onComplete('ok');
                    }, 0);
                }
                return infoEvents;
            },
            stopListening: function () { }
        });
        this.updateInfo_('connected', false);
        this.serverSyncTree_ = new SyncTree_1.SyncTree({
            startListening: function (query, tag, currentHashFn, onComplete) {
                _this.server_.listen(query, currentHashFn, tag, function (status, data) {
                    var events = onComplete(status, data);
                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);
                });
                // No synchronous events for network-backed sync trees
                return [];
            },
            stopListening: function (query, tag) {
                _this.server_.unlisten(query, tag);
            }
        });
    }
    /**
     * @return {string}  The URL corresponding to the root of this Firebase.
     */
    Repo.prototype.toString = function () {
        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);
    };
    /**
     * @return {!string} The namespace represented by the repo.
     */
    Repo.prototype.name = function () {
        return this.repoInfo_.namespace;
    };
    /**
     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.
     */
    Repo.prototype.serverTime = function () {
        var offsetNode = this.infoData_.getNode(new Path_1.Path('.info/serverTimeOffset'));
        var offset = offsetNode.val() || 0;
        return new Date().getTime() + offset;
    };
    /**
     * Generate ServerValues using some variables from the repo object.
     * @return {!Object}
     */
    Repo.prototype.generateServerValues = function () {
        return ServerValues_1.generateWithValues({
            timestamp: this.serverTime()
        });
    };
    /**
     * Called by realtime when we get new messages from the server.
     *
     * @private
     * @param {string} pathString
     * @param {*} data
     * @param {boolean} isMerge
     * @param {?number} tag
     */
    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {
        // For testing.
        this.dataUpdateCount++;
        var path = new Path_1.Path(pathString);
        data = this.interceptServerDataCallback_
            ? this.interceptServerDataCallback_(pathString, data)
            : data;
        var events = [];
        if (tag) {
            if (isMerge) {
                var taggedChildren = util_3.map(data, function (raw) {
                    return nodeFromJSON_1.nodeFromJSON(raw);
                });
                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);
            }
            else {
                var taggedSnap = nodeFromJSON_1.nodeFromJSON(data);
                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);
            }
        }
        else if (isMerge) {
            var changedChildren = util_3.map(data, function (raw) {
                return nodeFromJSON_1.nodeFromJSON(raw);
            });
            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);
        }
        else {
            var snap = nodeFromJSON_1.nodeFromJSON(data);
            events = this.serverSyncTree_.applyServerOverwrite(path, snap);
        }
        var affectedPath = path;
        if (events.length > 0) {
            // Since we have a listener outstanding for each transaction, receiving any events
            // is a proxy for some change having occurred.
            affectedPath = this.rerunTransactions_(path);
        }
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);
    };
    /**
     * TODO: This should be @private but it's used by test_access.js and internal.js
     * @param {?function(!string, *):*} callback
     * @private
     */
    Repo.prototype.interceptServerData_ = function (callback) {
        this.interceptServerDataCallback_ = callback;
    };
    /**
     * @param {!boolean} connectStatus
     * @private
     */
    Repo.prototype.onConnectStatus_ = function (connectStatus) {
        this.updateInfo_('connected', connectStatus);
        if (connectStatus === false) {
            this.runOnDisconnectEvents_();
        }
    };
    /**
     * @param {!Object} updates
     * @private
     */
    Repo.prototype.onServerInfoUpdate_ = function (updates) {
        var _this = this;
        util_2.each(updates, function (value, key) {
            _this.updateInfo_(key, value);
        });
    };
    /**
     *
     * @param {!string} pathString
     * @param {*} value
     * @private
     */
    Repo.prototype.updateInfo_ = function (pathString, value) {
        var path = new Path_1.Path('/.info/' + pathString);
        var newNode = nodeFromJSON_1.nodeFromJSON(value);
        this.infoData_.updateSnapshot(path, newNode);
        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
    };
    /**
     * @return {!number}
     * @private
     */
    Repo.prototype.getNextWriteId_ = function () {
        return this.nextWriteId_++;
    };
    /**
     * @param {!Path} path
     * @param {*} newVal
     * @param {number|string|null} newPriority
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {
        var _this = this;
        this.log_('set', {
            path: path.toString(),
            value: newVal,
            priority: newPriority
        });
        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
        // (b) store unresolved paths on JSON parse
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, newPriority);
        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        var writeId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);
        this.eventQueue_.queueEvents(events);
        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {
            var success = status === 'ok';
            if (!success) {
                util_2.warn('set at ' + path + ' failed: ' + status);
            }
            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);
            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
        var affectedPath = this.abortTransactions_(path);
        this.rerunTransactions_(affectedPath);
        // We queued the events above, so just flush the queue here
        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);
    };
    /**
     * @param {!Path} path
     * @param {!Object} childrenToMerge
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.update = function (path, childrenToMerge, onComplete) {
        var _this = this;
        this.log_('update', { path: path.toString(), value: childrenToMerge });
        // Start with our existing data and merge each child into it.
        var empty = true;
        var serverValues = this.generateServerValues();
        var changedChildren = {};
        util_3.forEach(childrenToMerge, function (changedKey, changedValue) {
            empty = false;
            var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(changedValue);
            changedChildren[changedKey] = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        });
        if (!empty) {
            var writeId_1 = this.getNextWriteId_();
            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);
            this.eventQueue_.queueEvents(events);
            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {
                var success = status === 'ok';
                if (!success) {
                    util_2.warn('update at ' + path + ' failed: ' + status);
                }
                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);
                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;
                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);
                _this.callOnCompleteCallback(onComplete, status, errorReason);
            });
            util_3.forEach(childrenToMerge, function (changedPath) {
                var affectedPath = _this.abortTransactions_(path.child(changedPath));
                _this.rerunTransactions_(affectedPath);
            });
            // We queued the events above, so just flush the queue here
            this.eventQueue_.raiseEventsForChangedPath(path, []);
        }
        else {
            util_2.log("update() called with empty data.  Don't do anything.");
            this.callOnCompleteCallback(onComplete, 'ok');
        }
    };
    /**
     * Applies all of the changes stored up in the onDisconnect_ tree.
     * @private
     */
    Repo.prototype.runOnDisconnectEvents_ = function () {
        var _this = this;
        this.log_('onDisconnectEvents');
        var serverValues = this.generateServerValues();
        var resolvedOnDisconnectTree = ServerValues_1.resolveDeferredValueTree(this.onDisconnect_, serverValues);
        var events = [];
        resolvedOnDisconnectTree.forEachTree(Path_1.Path.Empty, function (path, snap) {
            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));
            var affectedPath = _this.abortTransactions_(path);
            _this.rerunTransactions_(affectedPath);
        });
        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();
        this.eventQueue_.raiseEventsForChangedPath(Path_1.Path.Empty, events);
    };
    /**
     * @param {!Path} path
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectCancel = function (path, onComplete) {
        var _this = this;
        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.forget(path);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} value
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON_1.nodeFromJSON(value);
        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.remember(path, newNode);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} value
     * @param {*} priority
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {
        var _this = this;
        var newNode = nodeFromJSON_1.nodeFromJSON(value, priority);
        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {
            if (status === 'ok') {
                _this.onDisconnect_.remember(path, newNode);
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Path} path
     * @param {*} childrenToMerge
     * @param {?function(?Error, *=)} onComplete
     */
    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {
        var _this = this;
        if (util_3.isEmpty(childrenToMerge)) {
            util_2.log("onDisconnect().update() called with empty data.  Don't do anything.");
            this.callOnCompleteCallback(onComplete, 'ok');
            return;
        }
        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {
            if (status === 'ok') {
                util_3.forEach(childrenToMerge, function (childName, childNode) {
                    var newChildNode = nodeFromJSON_1.nodeFromJSON(childNode);
                    _this.onDisconnect_.remember(path.child(childName), newChildNode);
                });
            }
            _this.callOnCompleteCallback(onComplete, status, errorReason);
        });
    };
    /**
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     */
    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {
        var events;
        if (query.path.getFront() === '.info') {
            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);
        }
        else {
            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
    };
    /**
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration
     */
    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {
        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
        // a little bit by handling the return values anyways.
        var events;
        if (query.path.getFront() === '.info') {
            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        else {
            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);
        }
        this.eventQueue_.raiseEventsAtPath(query.path, events);
    };
    Repo.prototype.interrupt = function () {
        if (this.persistentConnection_) {
            this.persistentConnection_.interrupt(INTERRUPT_REASON);
        }
    };
    Repo.prototype.resume = function () {
        if (this.persistentConnection_) {
            this.persistentConnection_.resume(INTERRUPT_REASON);
        }
    };
    Repo.prototype.stats = function (showDelta) {
        if (showDelta === void 0) { showDelta = false; }
        if (typeof console === 'undefined')
            return;
        var stats;
        if (showDelta) {
            if (!this.statsListener_)
                this.statsListener_ = new StatsListener_1.StatsListener(this.stats_);
            stats = this.statsListener_.get();
        }
        else {
            stats = this.stats_.get();
        }
        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {
            return Math.max(currentValue.length, previousValue);
        }, 0);
        util_3.forEach(stats, function (stat, value) {
            // pad stat names to be the same length (plus 2 extra spaces).
            for (var i = stat.length; i < longestName + 2; i++)
                stat += ' ';
            console.log(stat + value);
        });
    };
    Repo.prototype.statsIncrementCounter = function (metric) {
        this.stats_.incrementCounter(metric);
        this.statsReporter_.includeStat(metric);
    };
    /**
     * @param {...*} var_args
     * @private
     */
    Repo.prototype.log_ = function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        var prefix = '';
        if (this.persistentConnection_) {
            prefix = this.persistentConnection_.id + ':';
        }
        util_2.log.apply(void 0, [prefix].concat(var_args));
    };
    /**
     * @param {?function(?Error, *=)} callback
     * @param {!string} status
     * @param {?string=} errorReason
     */
    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {
        if (callback) {
            util_2.exceptionGuard(function () {
                if (status == 'ok') {
                    callback(null);
                }
                else {
                    var code = (status || 'error').toUpperCase();
                    var message = code;
                    if (errorReason)
                        message += ': ' + errorReason;
                    var error = new Error(message);
                    error.code = code;
                    callback(error);
                }
            });
        }
    };
    Object.defineProperty(Repo.prototype, "database", {
        get: function () {
            return this.__database || (this.__database = new Database_1.Database(this));
        },
        enumerable: true,
        configurable: true
    });
    return Repo;
}());
exports.Repo = Repo;



},{"../api/Database":7,"./AuthTokenProvider":14,"./PersistentConnection":16,"./ReadonlyRestClient":17,"./SnapshotHolder":23,"./SparseSnapshotTree":24,"./SyncTree":26,"./snap/nodeFromJSON":44,"./stats/StatsListener":47,"./stats/StatsManager":48,"./stats/StatsReporter":49,"./util/Path":58,"./util/ServerValues":59,"./util/util":64,"./view/EventQueue":72,"@firebase/util":142}],19:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var storage_1 = require("./storage/storage");
var Constants_1 = require("../realtime/Constants");
/**
 * A class that holds metadata about a Repo object
 *
 * @constructor
 */
var RepoInfo = /** @class */ (function () {
    /**
     * @param {string} host Hostname portion of the url for the repo
     * @param {boolean} secure Whether or not this repo is accessed over ssl
     * @param {string} namespace The namespace represented by the repo
     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).
     * @param {string=} persistenceKey Override the default session persistence storage key
     */
    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {
        if (persistenceKey === void 0) { persistenceKey = ''; }
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.persistenceKey = persistenceKey;
        this.host = host.toLowerCase();
        this.domain = this.host.substr(this.host.indexOf('.') + 1);
        this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;
    }
    RepoInfo.prototype.needsQueryParam = function () {
        return this.host !== this.internalHost || this.isCustomHost();
    };
    RepoInfo.prototype.isCacheableHost = function () {
        return this.internalHost.substr(0, 2) === 's-';
    };
    RepoInfo.prototype.isDemoHost = function () {
        return this.domain === 'firebaseio-demo.com';
    };
    RepoInfo.prototype.isCustomHost = function () {
        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');
    };
    RepoInfo.prototype.updateHost = function (newHost) {
        if (newHost !== this.internalHost) {
            this.internalHost = newHost;
            if (this.isCacheableHost()) {
                storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);
            }
        }
    };
    /**
     * Returns the websocket URL for this repo
     * @param {string} type of connection
     * @param {Object} params list
     * @return {string} The URL for this repo
     */
    RepoInfo.prototype.connectionURL = function (type, params) {
        util_1.assert(typeof type === 'string', 'typeof type must == string');
        util_1.assert(typeof params === 'object', 'typeof params must == object');
        var connURL;
        if (type === Constants_1.WEBSOCKET) {
            connURL =
                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';
        }
        else if (type === Constants_1.LONG_POLLING) {
            connURL =
                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';
        }
        else {
            throw new Error('Unknown connection type: ' + type);
        }
        if (this.needsQueryParam()) {
            params['ns'] = this.namespace;
        }
        var pairs = [];
        util_2.forEach(params, function (key, value) {
            pairs.push(key + '=' + value);
        });
        return connURL + pairs.join('&');
    };
    /** @return {string} */
    RepoInfo.prototype.toString = function () {
        var str = this.toURLString();
        if (this.persistenceKey) {
            str += '<' + this.persistenceKey + '>';
        }
        return str;
    };
    /** @return {string} */
    RepoInfo.prototype.toURLString = function () {
        return (this.secure ? 'https://' : 'http://') + this.host;
    };
    return RepoInfo;
}());
exports.RepoInfo = RepoInfo;



},{"../realtime/Constants":83,"./storage/storage":52,"@firebase/util":142}],20:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Repo_1 = require("./Repo");
var util_2 = require("./util/util");
var parser_1 = require("./util/libs/parser");
var validation_1 = require("./util/validation");
require("./Repo_transaction");
/** @const {string} */
var DATABASE_URL_OPTION = 'databaseURL';
var _staticInstance;
/**
 * Creates and caches Repo instances.
 */
var RepoManager = /** @class */ (function () {
    function RepoManager() {
        /**
         * @private {!Object.<string, Object<string, !fb.core.Repo>>}
         */
        this.repos_ = {};
        /**
         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).
         * @private {boolean}
         */
        this.useRestClient_ = false;
    }
    RepoManager.getInstance = function () {
        if (!_staticInstance) {
            _staticInstance = new RepoManager();
        }
        return _staticInstance;
    };
    // TODO(koss): Remove these functions unless used in tests?
    RepoManager.prototype.interrupt = function () {
        for (var appName in this.repos_) {
            for (var dbUrl in this.repos_[appName]) {
                this.repos_[appName][dbUrl].interrupt();
            }
        }
    };
    RepoManager.prototype.resume = function () {
        for (var appName in this.repos_) {
            for (var dbUrl in this.repos_[appName]) {
                this.repos_[appName][dbUrl].resume();
            }
        }
    };
    /**
     * This function should only ever be called to CREATE a new database instance.
     *
     * @param {!FirebaseApp} app
     * @return {!Database}
     */
    RepoManager.prototype.databaseFromApp = function (app, url) {
        var dbUrl = url || app.options[DATABASE_URL_OPTION];
        if (dbUrl === undefined) {
            util_2.fatal("Can't determine Firebase Database URL.  Be sure to include " +
                DATABASE_URL_OPTION +
                ' option when calling firebase.initializeApp().');
        }
        var parsedUrl = parser_1.parseRepoInfo(dbUrl);
        var repoInfo = parsedUrl.repoInfo;
        validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);
        if (!parsedUrl.path.isEmpty()) {
            util_2.fatal('Database URL must point to the root of a Firebase Database ' +
                '(not including a child path).');
        }
        var repo = this.createRepo(repoInfo, app);
        return repo.database;
    };
    /**
     * Remove the repo and make sure it is disconnected.
     *
     * @param {!Repo} repo
     */
    RepoManager.prototype.deleteRepo = function (repo) {
        var appRepos = util_1.safeGet(this.repos_, repo.app.name);
        // This should never happen...
        if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {
            util_2.fatal("Database " + repo.app.name + "(" + repo.repoInfo_ + ") has already been deleted.");
        }
        repo.interrupt();
        delete appRepos[repo.repoInfo_.toURLString()];
    };
    /**
     * Ensures a repo doesn't already exist and then creates one using the
     * provided app.
     *
     * @param {!RepoInfo} repoInfo The metadata about the Repo
     * @param {!FirebaseApp} app
     * @return {!Repo} The Repo object for the specified server / repoName.
     */
    RepoManager.prototype.createRepo = function (repoInfo, app) {
        var appRepos = util_1.safeGet(this.repos_, app.name);
        if (!appRepos) {
            appRepos = {};
            this.repos_[app.name] = appRepos;
        }
        var repo = util_1.safeGet(appRepos, repoInfo.toURLString());
        if (repo) {
            util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
        }
        repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);
        appRepos[repoInfo.toURLString()] = repo;
        return repo;
    };
    /**
     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
     * @param {boolean} forceRestClient
     */
    RepoManager.prototype.forceRestClient = function (forceRestClient) {
        this.useRestClient_ = forceRestClient;
    };
    return RepoManager;
}());
exports.RepoManager = RepoManager;



},{"./Repo":18,"./Repo_transaction":21,"./util/libs/parser":63,"./util/util":64,"./util/validation":65,"@firebase/util":142}],21:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Reference_1 = require("../api/Reference");
var DataSnapshot_1 = require("../api/DataSnapshot");
var Path_1 = require("./util/Path");
var Tree_1 = require("./util/Tree");
var PriorityIndex_1 = require("./snap/indexes/PriorityIndex");
var util_2 = require("./util/util");
var ServerValues_1 = require("./util/ServerValues");
var validation_1 = require("./util/validation");
var util_3 = require("@firebase/util");
var nodeFromJSON_1 = require("./snap/nodeFromJSON");
var ChildrenNode_1 = require("./snap/ChildrenNode");
var Repo_1 = require("./Repo");
// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific
// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well
// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.
// For now it's part of Repo, but in its own file.
/**
 * @enum {number}
 */
var TransactionStatus;
(function (TransactionStatus) {
    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the
    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to
    // mismatched hash.
    TransactionStatus[TransactionStatus["RUN"] = 0] = "RUN";
    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted
    // or rejected yet).
    TransactionStatus[TransactionStatus["SENT"] = 1] = "SENT";
    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be
    // removed when we get a chance to prune completed ones.
    TransactionStatus[TransactionStatus["COMPLETED"] = 2] = "COMPLETED";
    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).
    // If it comes back as unsuccessful, we'll abort it.
    TransactionStatus[TransactionStatus["SENT_NEEDS_ABORT"] = 3] = "SENT_NEEDS_ABORT";
    // Temporary state used to mark transactions that need to be aborted.
    TransactionStatus[TransactionStatus["NEEDS_ABORT"] = 4] = "NEEDS_ABORT";
})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));
/**
 * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's
 * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.
 * @type {number}
 * @const
 * @private
 */
Repo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;
/**
 * Setup the transaction data structures
 * @private
 */
Repo_1.Repo.prototype.transactions_init_ = function () {
    /**
     * Stores queues of outstanding transactions for Firebase locations.
     *
     * @type {!Tree.<Array.<!Transaction>>}
     * @private
     */
    this.transactionQueueTree_ = new Tree_1.Tree();
};
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.
 *
 * @param {!Path} path Path at which to do transaction.
 * @param {function(*):*} transactionUpdate Update callback.
 * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.
 * @param {boolean} applyLocally Whether or not to make intermediate results visible
 */
Repo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {
    this.log_('transaction on ' + path);
    // Add a watch to make sure we get server updates.
    var valueCallback = function () { };
    var watchRef = new Reference_1.Reference(this, path);
    watchRef.on('value', valueCallback);
    var unwatcher = function () {
        watchRef.off('value', valueCallback);
    };
    // Initialize transaction.
    var transaction = {
        path: path,
        update: transactionUpdate,
        onComplete: onComplete,
        // One of TransactionStatus enums.
        status: null,
        // Used when combining transactions at different locations to figure out which one goes first.
        order: util_2.LUIDGenerator(),
        // Whether to raise local events for this transaction.
        applyLocally: applyLocally,
        // Count of how many times we've retried the transaction.
        retryCount: 0,
        // Function to call to clean up our .on() listener.
        unwatcher: unwatcher,
        // Stores why a transaction was aborted.
        abortReason: null,
        currentWriteId: null,
        currentInputSnapshot: null,
        currentOutputSnapshotRaw: null,
        currentOutputSnapshotResolved: null
    };
    // Run transaction initially.
    var currentState = this.getLatestState_(path);
    transaction.currentInputSnapshot = currentState;
    var newVal = transaction.update(currentState.val());
    if (newVal === undefined) {
        // Abort transaction.
        transaction.unwatcher();
        transaction.currentOutputSnapshotRaw = null;
        transaction.currentOutputSnapshotResolved = null;
        if (transaction.onComplete) {
            // We just set the input snapshot, so this cast should be safe
            var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);
            transaction.onComplete(null, false, snapshot);
        }
    }
    else {
        validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
        // Mark as run and add to our queue.
        transaction.status = TransactionStatus.RUN;
        var queueNode = this.transactionQueueTree_.subTree(path);
        var nodeQueue = queueNode.getValue() || [];
        nodeQueue.push(transaction);
        queueNode.setValue(nodeQueue);
        // Update visibleData and raise events
        // Note: We intentionally raise events after updating all of our transaction state, since the user could
        // start new transactions from the event callbacks.
        var priorityForNode = void 0;
        if (typeof newVal === 'object' &&
            newVal !== null &&
            util_3.contains(newVal, '.priority')) {
            priorityForNode = util_3.safeGet(newVal, '.priority');
            util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +
                'Priority must be a valid string, finite number, server value, or null.');
        }
        else {
            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||
                ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            priorityForNode = currentNode.getPriority().val();
        }
        priorityForNode /** @type {null|number|string} */ = priorityForNode;
        var serverValues = this.generateServerValues();
        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);
        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);
        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
        transaction.currentOutputSnapshotResolved = newNode;
        transaction.currentWriteId = this.getNextWriteId_();
        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        this.sendReadyTransactions_();
    }
};
/**
 * @param {!Path} path
 * @param {Array.<number>=} excludeSets A specific set to exclude
 * @return {Node}
 * @private
 */
Repo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {
    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||
        ChildrenNode_1.ChildrenNode.EMPTY_NODE);
};
/**
 * Sends any already-run transactions that aren't waiting for outstanding transactions to
 * complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively with a particular
 * transactionQueueTree node to recurse through the tree.
 *
 * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.
 * @private
 */
Repo_1.Repo.prototype.sendReadyTransactions_ = function (node) {
    var _this = this;
    if (node === void 0) { node = this.transactionQueueTree_; }
    // Before recursing, make sure any completed transactions are removed.
    if (!node) {
        this.pruneCompletedTransactionsBelowNode_(node);
    }
    if (node.getValue() !== null) {
        var queue = this.buildTransactionQueue_(node);
        util_1.assert(queue.length > 0, 'Sending zero length transaction queue');
        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });
        // If they're all run (and not sent), we can send them.  Else, we must wait.
        if (allRun) {
            this.sendTransactionQueue_(node.path(), queue);
        }
    }
    else if (node.hasChildren()) {
        node.forEachChild(function (childNode) {
            _this.sendReadyTransactions_(childNode);
        });
    }
};
/**
 * Given a list of run transactions, send them to the server and then handle the result (success or failure).
 *
 * @param {!Path} path The location of the queue.
 * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.
 * @private
 */
Repo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {
    var _this = this;
    // Mark transactions as sent and increment retry count!
    var setsToIgnore = queue.map(function (txn) {
        return txn.currentWriteId;
    });
    var latestState = this.getLatestState_(path, setsToIgnore);
    var snapToSend = latestState;
    var latestHash = latestState.hash();
    for (var i = 0; i < queue.length; i++) {
        var txn = queue[i];
        util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');
        txn.status = TransactionStatus.SENT;
        txn.retryCount++;
        var relativePath = Path_1.Path.relativePath(path, txn.path);
        // If we've gotten to this point, the output snapshot must be defined.
        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);
    }
    var dataToSend = snapToSend.val(true);
    var pathToSend = path;
    // Send the put.
    this.server_.put(pathToSend.toString(), dataToSend, function (status) {
        _this.log_('transaction put response', {
            path: pathToSend.toString(),
            status: status
        });
        var events = [];
        if (status === 'ok') {
            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
            // the callback could trigger more transactions or sets.
            var callbacks = [];
            for (var i = 0; i < queue.length; i++) {
                queue[i].status = TransactionStatus.COMPLETED;
                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));
                if (queue[i].onComplete) {
                    // We never unset the output snapshot, and given that this transaction is complete, it should be set
                    var node = queue[i].currentOutputSnapshotResolved;
                    var ref = new Reference_1.Reference(_this, queue[i].path);
                    var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);
                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));
                }
                queue[i].unwatcher();
            }
            // Now remove the completed transactions.
            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));
            // There may be pending transactions that we can now send.
            _this.sendReadyTransactions_();
            _this.eventQueue_.raiseEventsForChangedPath(path, events);
            // Finally, trigger onComplete callbacks.
            for (var i = 0; i < callbacks.length; i++) {
                util_2.exceptionGuard(callbacks[i]);
            }
        }
        else {
            // transactions are no longer sent.  Update their status appropriately.
            if (status === 'datastale') {
                for (var i = 0; i < queue.length; i++) {
                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)
                        queue[i].status = TransactionStatus.NEEDS_ABORT;
                    else
                        queue[i].status = TransactionStatus.RUN;
                }
            }
            else {
                util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                for (var i = 0; i < queue.length; i++) {
                    queue[i].status = TransactionStatus.NEEDS_ABORT;
                    queue[i].abortReason = status;
                }
            }
            _this.rerunTransactions_(path);
        }
    }, latestHash);
};
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to
 * be raised for.
 *
 * @param {!Path} changedPath The path in mergedData that changed.
 * @return {!Path} The rootmost path that was affected by rerunning transactions.
 * @private
 */
Repo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {
    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);
    var path = rootMostTransactionNode.path();
    var queue = this.buildTransactionQueue_(rootMostTransactionNode);
    this.rerunTransactionQueue_(queue, path);
    return path;
};
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).
 *
 * @param {Array.<Transaction>} queue The queue of transactions to run.
 * @param {!Path} path The path the queue is for.
 * @private
 */
Repo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {
    if (queue.length === 0) {
        return; // Nothing to do!
    }
    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
    // the callback could trigger more transactions or sets.
    var callbacks = [];
    var events = [];
    // Ignore all of the sets we're going to re-run.
    var txnsToRerun = queue.filter(function (q) {
        return q.status === TransactionStatus.RUN;
    });
    var setsToIgnore = txnsToRerun.map(function (q) {
        return q.currentWriteId;
    });
    for (var i = 0; i < queue.length; i++) {
        var transaction = queue[i];
        var relativePath = Path_1.Path.relativePath(path, transaction.path);
        var abortTransaction = false, abortReason = void 0;
        util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
        if (transaction.status === TransactionStatus.NEEDS_ABORT) {
            abortTransaction = true;
            abortReason = transaction.abortReason;
            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
        }
        else if (transaction.status === TransactionStatus.RUN) {
            if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {
                abortTransaction = true;
                abortReason = 'maxretry';
                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
            }
            else {
                // This code reruns a transaction
                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);
                transaction.currentInputSnapshot = currentNode;
                var newData = queue[i].update(currentNode.val());
                if (newData !== undefined) {
                    validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                    var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);
                    var hasExplicitPriority = typeof newData === 'object' &&
                        newData != null &&
                        util_3.contains(newData, '.priority');
                    if (!hasExplicitPriority) {
                        // Keep the old priority if there wasn't a priority explicitly specified.
                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                    }
                    var oldWriteId = transaction.currentWriteId;
                    var serverValues = this.generateServerValues();
                    var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);
                    transaction.currentOutputSnapshotRaw = newDataNode;
                    transaction.currentOutputSnapshotResolved = newNodeResolved;
                    transaction.currentWriteId = this.getNextWriteId_();
                    // Mutates setsToIgnore in place
                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));
                }
                else {
                    abortTransaction = true;
                    abortReason = 'nodata';
                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));
                }
            }
        }
        this.eventQueue_.raiseEventsForChangedPath(path, events);
        events = [];
        if (abortTransaction) {
            // Abort.
            queue[i].status = TransactionStatus.COMPLETED;
            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).
            // So defer the unwatcher until we're done.
            (function (unwatcher) {
                setTimeout(unwatcher, Math.floor(0));
            })(queue[i].unwatcher);
            if (queue[i].onComplete) {
                if (abortReason === 'nodata') {
                    var ref = new Reference_1.Reference(this, queue[i].path);
                    // We set this field immediately, so it's safe to cast to an actual snapshot
                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;
                    var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);
                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));
                }
                else {
                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));
                }
            }
        }
    }
    // Clean up completed transactions.
    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);
    // Now fire callbacks, now that we're in a good, known state.
    for (var i = 0; i < callbacks.length; i++) {
        util_2.exceptionGuard(callbacks[i]);
    }
    // Try to send the transaction result to the server.
    this.sendReadyTransactions_();
};
/**
 * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns
 * the node for the given path if there are no pending transactions on any ancestor.
 *
 * @param {!Path} path The location to start at.
 * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.
 * @private
 */
Repo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {
    var front;
    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.
    var transactionNode = this.transactionQueueTree_;
    while ((front = path.getFront()) !== null &&
        transactionNode.getValue() === null) {
        transactionNode = transactionNode.subTree(front);
        path = path.popFront();
    }
    return transactionNode;
};
/**
 * Builds the queue of all transactions at or below the specified transactionNode.
 *
 * @param {!Tree.<Array.<Transaction>>} transactionNode
 * @return {Array.<Transaction>} The generated queue.
 * @private
 */
Repo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {
    // Walk any child transaction queues and aggregate them into a single queue.
    var transactionQueue = [];
    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);
    // Sort them by the order the transactions were created.
    transactionQueue.sort(function (a, b) {
        return a.order - b.order;
    });
    return transactionQueue;
};
/**
 * @param {!Tree.<Array.<Transaction>>} node
 * @param {Array.<Transaction>} queue
 * @private
 */
Repo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {
    var _this = this;
    var nodeQueue = node.getValue();
    if (nodeQueue !== null) {
        for (var i = 0; i < nodeQueue.length; i++) {
            queue.push(nodeQueue[i]);
        }
    }
    node.forEachChild(function (child) {
        _this.aggregateTransactionQueuesForNode_(child, queue);
    });
};
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 *
 * @param {!Tree.<Array.<!Transaction>>} node
 * @private
 */
Repo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {
    var _this = this;
    var queue = node.getValue();
    if (queue) {
        var to = 0;
        for (var from = 0; from < queue.length; from++) {
            if (queue[from].status !== TransactionStatus.COMPLETED) {
                queue[to] = queue[from];
                to++;
            }
        }
        queue.length = to;
        node.setValue(queue.length > 0 ? queue : null);
    }
    node.forEachChild(function (childNode) {
        _this.pruneCompletedTransactionsBelowNode_(childNode);
    });
};
/**
 * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()
 * since we consider them incompatible with transactions.
 *
 * @param {!Path} path Path for which we want to abort related transactions.
 * @return {!Path}
 * @private
 */
Repo_1.Repo.prototype.abortTransactions_ = function (path) {
    var _this = this;
    var affectedPath = this.getAncestorTransactionNode_(path).path();
    var transactionNode = this.transactionQueueTree_.subTree(path);
    transactionNode.forEachAncestor(function (node) {
        _this.abortTransactionsOnNode_(node);
    });
    this.abortTransactionsOnNode_(transactionNode);
    transactionNode.forEachDescendant(function (node) {
        _this.abortTransactionsOnNode_(node);
    });
    return affectedPath;
};
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.
 * @private
 */
Repo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {
    var queue = node.getValue();
    if (queue !== null) {
        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since
        // the callback could trigger more transactions or sets.
        var callbacks = [];
        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones
        // can be immediately aborted and removed.
        var events = [];
        var lastSent = -1;
        for (var i = 0; i < queue.length; i++) {
            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {
                // Already marked.  No action needed.
            }
            else if (queue[i].status === TransactionStatus.SENT) {
                util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                lastSent = i;
                // Mark transaction for abort when it comes back.
                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;
                queue[i].abortReason = 'set';
            }
            else {
                util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');
                // We can abort it immediately.
                queue[i].unwatcher();
                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));
                if (queue[i].onComplete) {
                    var snapshot = null;
                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));
                }
            }
        }
        if (lastSent === -1) {
            // We're not waiting for any sent transactions.  We can clear the queue.
            node.setValue(null);
        }
        else {
            // Remove the transactions we aborted.
            queue.length = lastSent + 1;
        }
        // Now fire the callbacks.
        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);
        for (var i = 0; i < callbacks.length; i++) {
            util_2.exceptionGuard(callbacks[i]);
        }
    }
};



},{"../api/DataSnapshot":6,"../api/Reference":9,"./Repo":18,"./snap/ChildrenNode":33,"./snap/indexes/PriorityIndex":42,"./snap/nodeFromJSON":44,"./util/Path":58,"./util/ServerValues":59,"./util/Tree":61,"./util/util":64,"./util/validation":65,"@firebase/util":142}],22:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */
var ServerActions = /** @class */ (function () {
    function ServerActions() {
    }
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     * @param {string=} hash
     */
    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, ?string)} onComplete
     * @param {string=} hash
     */
    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };
    /**
     * Refreshes the auth token for the current connection.
     * @param {string} token The authentication token
     */
    ServerActions.prototype.refreshAuthToken = function (token) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };
    /**
     * @param {string} pathString
     * @param {*} data
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };
    /**
     * @param {string} pathString
     * @param {function(string, string)=} onComplete
     */
    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };
    /**
     * @param {Object.<string, *>} stats
     */
    ServerActions.prototype.reportStats = function (stats) { };
    return ServerActions;
}());
exports.ServerActions = ServerActions;



},{}],23:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = require("./snap/ChildrenNode");
/**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 *
 * @constructor
 */
var SnapshotHolder = /** @class */ (function () {
    function SnapshotHolder() {
        this.rootNode_ = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
    }
    SnapshotHolder.prototype.getNode = function (path) {
        return this.rootNode_.getChild(path);
    };
    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
    };
    return SnapshotHolder;
}());
exports.SnapshotHolder = SnapshotHolder;



},{"./snap/ChildrenNode":33}],24:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = require("./util/Path");
var PriorityIndex_1 = require("./snap/indexes/PriorityIndex");
var CountedSet_1 = require("./util/CountedSet");
/**
 * Helper class to store a sparse set of snapshots.
 *
 * @constructor
 */
var SparseSnapshotTree = /** @class */ (function () {
    function SparseSnapshotTree() {
        /**
         * @private
         * @type {Node}
         */
        this.value_ = null;
        /**
         * @private
         * @type {CountedSet}
         */
        this.children_ = null;
    }
    /**
     * Gets the node stored at the given path if one exists.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @return {?Node} The retrieved node, or null.
     */
    SparseSnapshotTree.prototype.find = function (path) {
        if (this.value_ != null) {
            return this.value_.getChild(path);
        }
        else if (!path.isEmpty() && this.children_ != null) {
            var childKey = path.getFront();
            path = path.popFront();
            if (this.children_.contains(childKey)) {
                var childTree = this.children_.get(childKey);
                return childTree.find(path);
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    };
    /**
     * Stores the given node at the specified path. If there is already a node
     * at a shallower path, it merges the new data into that snapshot node.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @param {!Node} data The new data, or null.
     */
    SparseSnapshotTree.prototype.remember = function (path, data) {
        if (path.isEmpty()) {
            this.value_ = data;
            this.children_ = null;
        }
        else if (this.value_ !== null) {
            this.value_ = this.value_.updateChild(path, data);
        }
        else {
            if (this.children_ == null) {
                this.children_ = new CountedSet_1.CountedSet();
            }
            var childKey = path.getFront();
            if (!this.children_.contains(childKey)) {
                this.children_.add(childKey, new SparseSnapshotTree());
            }
            var child = this.children_.get(childKey);
            path = path.popFront();
            child.remember(path, data);
        }
    };
    /**
     * Purge the data at path from the cache.
     *
     * @param {!Path} path Path to look up snapshot for.
     * @return {boolean} True if this node should now be removed.
     */
    SparseSnapshotTree.prototype.forget = function (path) {
        if (path.isEmpty()) {
            this.value_ = null;
            this.children_ = null;
            return true;
        }
        else {
            if (this.value_ !== null) {
                if (this.value_.isLeafNode()) {
                    // We're trying to forget a node that doesn't exist
                    return false;
                }
                else {
                    var value = this.value_;
                    this.value_ = null;
                    var self_1 = this;
                    value.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, tree) {
                        self_1.remember(new Path_1.Path(key), tree);
                    });
                    return this.forget(path);
                }
            }
            else if (this.children_ !== null) {
                var childKey = path.getFront();
                path = path.popFront();
                if (this.children_.contains(childKey)) {
                    var safeToRemove = this.children_.get(childKey).forget(path);
                    if (safeToRemove) {
                        this.children_.remove(childKey);
                    }
                }
                if (this.children_.isEmpty()) {
                    this.children_ = null;
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }
        }
    };
    /**
     * Recursively iterates through all of the stored tree and calls the
     * callback on each one.
     *
     * @param {!Path} prefixPath Path to look up node for.
     * @param {!Function} func The function to invoke for each tree.
     */
    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
        if (this.value_ !== null) {
            func(prefixPath, this.value_);
        }
        else {
            this.forEachChild(function (key, tree) {
                var path = new Path_1.Path(prefixPath.toString() + '/' + key);
                tree.forEachTree(path, func);
            });
        }
    };
    /**
     * Iterates through each immediate child and triggers the callback.
     *
     * @param {!Function} func The function to invoke for each child.
     */
    SparseSnapshotTree.prototype.forEachChild = function (func) {
        if (this.children_ !== null) {
            this.children_.each(function (key, tree) {
                func(key, tree);
            });
        }
    };
    return SparseSnapshotTree;
}());
exports.SparseSnapshotTree = SparseSnapshotTree;



},{"./snap/indexes/PriorityIndex":42,"./util/CountedSet":53,"./util/Path":58}],25:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CacheNode_1 = require("./view/CacheNode");
var ChildrenNode_1 = require("./snap/ChildrenNode");
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var ViewCache_1 = require("./view/ViewCache");
var View_1 = require("./view/View");
var __referenceConstructor;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */
var SyncPoint = /** @class */ (function () {
    function SyncPoint() {
        /**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         *
         * @type {!Object.<!string, !View>}
         * @private
         */
        this.views_ = {};
    }
    Object.defineProperty(SyncPoint, "__referenceConstructor", {
        get: function () {
            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
            return __referenceConstructor;
        },
        set: function (val) {
            util_1.assert(!__referenceConstructor, '__referenceConstructor has already been defined');
            __referenceConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {boolean}
     */
    SyncPoint.prototype.isEmpty = function () {
        return util_2.isEmpty(this.views_);
    };
    /**
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} optCompleteServerCache
     * @return {!Array.<!Event>}
     */
    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
        var queryId = operation.source.queryId;
        if (queryId !== null) {
            var view = util_2.safeGet(this.views_, queryId);
            util_1.assert(view != null, 'SyncTree gave us an op for an invalid query.');
            return view.applyOperation(operation, writesCache, optCompleteServerCache);
        }
        else {
            var events_1 = [];
            util_2.forEach(this.views_, function (key, view) {
                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
            });
            return events_1;
        }
    };
    /**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache Complete server cache, if we have it.
     * @param {boolean} serverCacheComplete
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
        var queryId = query.queryIdentifier();
        var view = util_2.safeGet(this.views_, queryId);
        if (!view) {
            // TODO: make writesCache take flag for complete server node
            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
            var eventCacheComplete = false;
            if (eventCache) {
                eventCacheComplete = true;
            }
            else if (serverCache instanceof ChildrenNode_1.ChildrenNode) {
                eventCache = writesCache.calcCompleteEventChildren(serverCache);
                eventCacheComplete = false;
            }
            else {
                eventCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                eventCacheComplete = false;
            }
            var viewCache = new ViewCache_1.ViewCache(new CacheNode_1.CacheNode(
            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode_1.CacheNode(
            /** @type {!Node} */ (serverCache), serverCacheComplete, false));
            view = new View_1.View(query, viewCache);
            this.views_[queryId] = view;
        }
        // This is guaranteed to exist now, we just created anything that was missing
        view.addEventRegistration(eventRegistration);
        return view.getInitialEvents(eventRegistration);
    };
    /**
     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
     *
     * If query is the default query, we'll check all views for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events
     */
    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
        var queryId = query.queryIdentifier();
        var removed = [];
        var cancelEvents = [];
        var hadCompleteView = this.hasCompleteView();
        if (queryId === 'default') {
            // When you do ref.off(...), we search all views for the registration to remove.
            var self_1 = this;
            util_2.forEach(this.views_, function (viewQueryId, view) {
                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                if (view.isEmpty()) {
                    delete self_1.views_[viewQueryId];
                    // We'll deal with complete views later.
                    if (!view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        removed.push(view.getQuery());
                    }
                }
            });
        }
        else {
            // remove the callback from the specific view.
            var view = util_2.safeGet(this.views_, queryId);
            if (view) {
                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));
                if (view.isEmpty()) {
                    delete this.views_[queryId];
                    // We'll deal with complete views later.
                    if (!view
                        .getQuery()
                        .getQueryParams()
                        .loadsAllData()) {
                        removed.push(view.getQuery());
                    }
                }
            }
        }
        if (hadCompleteView && !this.hasCompleteView()) {
            // We removed our last complete view.
            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
        }
        return { removed: removed, events: cancelEvents };
    };
    /**
     * @return {!Array.<!View>}
     */
    SyncPoint.prototype.getQueryViews = function () {
        var _this = this;
        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });
        return values.filter(function (view) {
            return !view
                .getQuery()
                .getQueryParams()
                .loadsAllData();
        });
    };
    /**
     *
     * @param {!Path} path The path to the desired complete snapshot
     * @return {?Node} A complete cache, if it exists
     */
    SyncPoint.prototype.getCompleteServerCache = function (path) {
        var serverCache = null;
        util_2.forEach(this.views_, function (key, view) {
            serverCache = serverCache || view.getCompleteServerCache(path);
        });
        return serverCache;
    };
    /**
     * @param {!Query} query
     * @return {?View}
     */
    SyncPoint.prototype.viewForQuery = function (query) {
        var params = query.getQueryParams();
        if (params.loadsAllData()) {
            return this.getCompleteView();
        }
        else {
            var queryId = query.queryIdentifier();
            return util_2.safeGet(this.views_, queryId);
        }
    };
    /**
     * @param {!Query} query
     * @return {boolean}
     */
    SyncPoint.prototype.viewExistsForQuery = function (query) {
        return this.viewForQuery(query) != null;
    };
    /**
     * @return {boolean}
     */
    SyncPoint.prototype.hasCompleteView = function () {
        return this.getCompleteView() != null;
    };
    /**
     * @return {?View}
     */
    SyncPoint.prototype.getCompleteView = function () {
        var completeView = util_2.findValue(this.views_, function (view) {
            return view
                .getQuery()
                .getQueryParams()
                .loadsAllData();
        });
        return completeView || null;
    };
    return SyncPoint;
}());
exports.SyncPoint = SyncPoint;



},{"./snap/ChildrenNode":33,"./view/CacheNode":66,"./view/View":75,"./view/ViewCache":76,"@firebase/util":142}],26:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("./util/util");
var AckUserWrite_1 = require("./operation/AckUserWrite");
var ChildrenNode_1 = require("./snap/ChildrenNode");
var util_3 = require("@firebase/util");
var ImmutableTree_1 = require("./util/ImmutableTree");
var ListenComplete_1 = require("./operation/ListenComplete");
var Merge_1 = require("./operation/Merge");
var Operation_1 = require("./operation/Operation");
var Overwrite_1 = require("./operation/Overwrite");
var Path_1 = require("./util/Path");
var SyncPoint_1 = require("./SyncPoint");
var WriteTree_1 = require("./WriteTree");
/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 * @constructor
 */
var SyncTree = /** @class */ (function () {
    /**
     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening
     *   to server data.
     */
    function SyncTree(listenProvider_) {
        this.listenProvider_ = listenProvider_;
        /**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         * @type {!ImmutableTree.<!SyncPoint>}
         * @private
         */
        this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;
        /**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         * @type {!WriteTree}
         * @private
         */
        this.pendingWriteTree_ = new WriteTree_1.WriteTree();
        this.tagToQueryMap_ = {};
        this.queryToTagMap_ = {};
    }
    /**
     * Apply the data changes for a user-generated set() or transaction() call.
     *
     * @param {!Path} path
     * @param {!Node} newData
     * @param {number} writeId
     * @param {boolean=} visible
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {
        // Record pending write.
        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);
        if (!visible) {
            return [];
        }
        else {
            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));
        }
    };
    /**
     * Apply the data from a user-generated update() call
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {
        // Record pending merge.
        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);
        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));
    };
    /**
     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
     *
     * @param {!number} writeId
     * @param {boolean=} revert True if the given write failed and needs to be reverted
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.ackUserWrite = function (writeId, revert) {
        if (revert === void 0) { revert = false; }
        var write = this.pendingWriteTree_.getWrite(writeId);
        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);
        if (!needToReevaluate) {
            return [];
        }
        else {
            var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;
            if (write.snap != null) {
                // overwrite
                affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);
            }
            else {
                util_3.forEach(write.children, function (pathString, node) {
                    affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);
                });
            }
            return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));
        }
    };
    /**
     * Apply new server data for the specified path..
     *
     * @param {!Path} path
     * @param {!Node} newData
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyServerOverwrite = function (path, newData) {
        return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));
    };
    /**
     * Apply new server data to be merged in at the specified path.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {
        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));
    };
    /**
     * Apply a listen complete for a query
     *
     * @param {!Path} path
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyListenComplete = function (path) {
        return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));
    };
    /**
     * Apply new server data for the specified tagged query.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey != null) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // Query must have been removed already
            return [];
        }
    };
    /**
     * Apply server data to be merged in for the specified tagged query.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);
            var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    };
    /**
     * Apply a listen complete for a tagged query
     *
     * @param {!Path} path
     * @param {!number} tag
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {
        var queryKey = this.queryKeyForTag_(tag);
        if (queryKey) {
            var r = SyncTree.parseQueryKey_(queryKey);
            var queryPath = r.path, queryId = r.queryId;
            var relativePath = Path_1.Path.relativePath(queryPath, path);
            var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);
            return this.applyTaggedOperation_(queryPath, op);
        }
        else {
            // We've already removed the query. No big deal, ignore the update
            return [];
        }
    };
    /**
     * Add an event callback for the specified query.
     *
     * @param {!Query} query
     * @param {!EventRegistration} eventRegistration
     * @return {!Array.<!Event>} Events to raise.
     */
    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {
        var path = query.path;
        var serverCache = null;
        var foundAncestorDefaultView = false;
        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
        // Consider optimizing this once there's a better understanding of what actual behavior will be.
        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {
            var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);
            serverCache = serverCache || sp.getCompleteServerCache(relativePath);
            foundAncestorDefaultView =
                foundAncestorDefaultView || sp.hasCompleteView();
        });
        var syncPoint = this.syncPointTree_.get(path);
        if (!syncPoint) {
            syncPoint = new SyncPoint_1.SyncPoint();
            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);
        }
        else {
            foundAncestorDefaultView =
                foundAncestorDefaultView || syncPoint.hasCompleteView();
            serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);
        }
        var serverCacheComplete;
        if (serverCache != null) {
            serverCacheComplete = true;
        }
        else {
            serverCacheComplete = false;
            serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
            var subtree = this.syncPointTree_.subtree(path);
            subtree.foreachChild(function (childName, childSyncPoint) {
                var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);
                if (completeCache) {
                    serverCache = serverCache.updateImmediateChild(childName, completeCache);
                }
            });
        }
        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);
        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {
            // We need to track a tag for this query
            var queryKey = SyncTree.makeQueryKey_(query);
            util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');
            var tag = SyncTree.getNextQueryTag_();
            this.queryToTagMap_[queryKey] = tag;
            // Coerce to string to avoid sparse arrays.
            this.tagToQueryMap_['_' + tag] = queryKey;
        }
        var writesCache = this.pendingWriteTree_.childWrites(path);
        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);
        if (!viewAlreadyExists && !foundAncestorDefaultView) {
            var view /** @type !View */ = syncPoint.viewForQuery(query);
            events = events.concat(this.setupListener_(query, view));
        }
        return events;
    };
    /**
     * Remove event callback(s).
     *
     * If query is the default query, we'll check all queries for the specified eventRegistration.
     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
     *
     * @param {!Query} query
     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */
    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
        var _this = this;
        // Find the syncPoint first. Then deal with whether or not it has matching listeners
        var path = query.path;
        var maybeSyncPoint = this.syncPointTree_.get(path);
        var cancelEvents = [];
        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
        // not loadsAllData().
        if (maybeSyncPoint &&
            (query.queryIdentifier() === 'default' ||
                maybeSyncPoint.viewExistsForQuery(query))) {
            /**
             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}
             */
            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);
            if (maybeSyncPoint.isEmpty()) {
                this.syncPointTree_ = this.syncPointTree_.remove(path);
            }
            var removed = removedAndEvents.removed;
            cancelEvents = removedAndEvents.events;
            // We may have just removed one of many listeners and can short-circuit this whole process
            // We may also not have removed a default listener, in which case all of the descendant listeners should already be
            // properly set up.
            //
            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
            // queryId === 'default'
            var removingDefault = -1 !==
                removed.findIndex(function (query) {
                    return query.getQueryParams().loadsAllData();
                });
            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {
                return parentSyncPoint.hasCompleteView();
            });
            if (removingDefault && !covered) {
                var subtree = this.syncPointTree_.subtree(path);
                // There are potentially child listeners. Determine what if any listens we need to send before executing the
                // removal
                if (!subtree.isEmpty()) {
                    // We need to fold over our subtree and collect the listeners to send
                    var newViews = this.collectDistinctViewsForSubTree_(subtree);
                    // Ok, we've collected all the listens we need. Set them up.
                    for (var i = 0; i < newViews.length; ++i) {
                        var view = newViews[i], newQuery = view.getQuery();
                        var listener = this.createListenerForView_(view);
                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);
                    }
                }
                else {
                    // There's nothing below us, so nothing we need to start listening on
                }
            }
            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
            // Also, note that if we have a cancelError, it's already been removed at the provider level.
            if (!covered && removed.length > 0 && !cancelError) {
                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                // default. Otherwise, we need to iterate through and cancel each individual query
                if (removingDefault) {
                    // We don't tag default listeners
                    var defaultTag = null;
                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);
                }
                else {
                    removed.forEach(function (queryToRemove) {
                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];
                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);
                    });
                }
            }
            // Now, clear all of the tags we're tracking for the removed listens
            this.removeTags_(removed);
        }
        else {
            // No-op, this listener must've been already removed
        }
        return cancelEvents;
    };
    /**
     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above
     * it, but as this is only used by transaction code, that should always be the case anyways.
     *
     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
     * @param {!Path} path The path to the data we want
     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded
     * @return {?Node}
     */
    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {
        var includeHiddenSets = true;
        var writeTree = this.pendingWriteTree_;
        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {
            var relativePath = Path_1.Path.relativePath(pathSoFar, path);
            var serverCache = syncPoint.getCompleteServerCache(relativePath);
            if (serverCache) {
                return serverCache;
            }
        });
        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);
    };
    /**
     * This collapses multiple unfiltered views into a single view, since we only need a single
     * listener for them.
     *
     * @param {!ImmutableTree.<!SyncPoint>} subtree
     * @return {!Array.<!View>}
     * @private
     */
    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {
        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {
                var completeView = maybeChildSyncPoint.getCompleteView();
                return [completeView];
            }
            else {
                // No complete view here, flatten any deeper listens into an array
                var views_1 = [];
                if (maybeChildSyncPoint) {
                    views_1 = maybeChildSyncPoint.getQueryViews();
                }
                util_3.forEach(childMap, function (key, childViews) {
                    views_1 = views_1.concat(childViews);
                });
                return views_1;
            }
        });
    };
    /**
     * @param {!Array.<!Query>} queries
     * @private
     */
    SyncTree.prototype.removeTags_ = function (queries) {
        for (var j = 0; j < queries.length; ++j) {
            var removedQuery = queries[j];
            if (!removedQuery.getQueryParams().loadsAllData()) {
                // We should have a tag for this
                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);
                var removedQueryTag = this.queryToTagMap_[removedQueryKey];
                delete this.queryToTagMap_[removedQueryKey];
                delete this.tagToQueryMap_['_' + removedQueryTag];
            }
        }
    };
    /**
     * Normalizes a query to a query we send the server for listening
     * @param {!Query} query
     * @return {!Query} The normalized query
     * @private
     */
    SyncTree.queryForListening_ = function (query) {
        if (query.getQueryParams().loadsAllData() &&
            !query.getQueryParams().isDefault()) {
            // We treat queries that load all data as default queries
            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
            // from Query
            return /** @type {!Query} */ query.getRef();
        }
        else {
            return query;
        }
    };
    /**
     * For a given new listen, manage the de-duplication of outstanding subscriptions.
     *
     * @param {!Query} query
     * @param {!View} view
     * @return {!Array.<!Event>} This method can return events to support synchronous data sources
     * @private
     */
    SyncTree.prototype.setupListener_ = function (query, view) {
        var path = query.path;
        var tag = this.tagForQuery_(query);
        var listener = this.createListenerForView_(view);
        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);
        var subtree = this.syncPointTree_.subtree(path);
        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
        // may need to shadow other listens as well.
        if (tag) {
            util_1.assert(!subtree.value.hasCompleteView(), "If we're adding a query, it shouldn't be shadowed");
        }
        else {
            // Shadow everything at or below this location, this is a default listener.
            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {
                if (!relativePath.isEmpty() &&
                    maybeChildSyncPoint &&
                    maybeChildSyncPoint.hasCompleteView()) {
                    return [maybeChildSyncPoint.getCompleteView().getQuery()];
                }
                else {
                    // No default listener here, flatten any deeper queries into an array
                    var queries_1 = [];
                    if (maybeChildSyncPoint) {
                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));
                    }
                    util_3.forEach(childMap, function (key, childQueries) {
                        queries_1 = queries_1.concat(childQueries);
                    });
                    return queries_1;
                }
            });
            for (var i = 0; i < queriesToStop.length; ++i) {
                var queryToStop = queriesToStop[i];
                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));
            }
        }
        return events;
    };
    /**
     *
     * @param {!View} view
     * @return {{hashFn: function(), onComplete: function(!string, *)}}
     * @private
     */
    SyncTree.prototype.createListenerForView_ = function (view) {
        var _this = this;
        var query = view.getQuery();
        var tag = this.tagForQuery_(query);
        return {
            hashFn: function () {
                var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                return cache.hash();
            },
            onComplete: function (status) {
                if (status === 'ok') {
                    if (tag) {
                        return _this.applyTaggedListenComplete(query.path, tag);
                    }
                    else {
                        return _this.applyListenComplete(query.path);
                    }
                }
                else {
                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                    var error = util_2.errorForServerCode(status, query);
                    return _this.removeEventRegistration(query, 
                    /*eventRegistration*/ null, error);
                }
            }
        };
    };
    /**
     * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
     * @private
     * @param {!Query} query
     * @return {string}
     */
    SyncTree.makeQueryKey_ = function (query) {
        return query.path.toString() + '$' + query.queryIdentifier();
    };
    /**
     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
     * @private
     * @param {!string} queryKey
     * @return {{queryId: !string, path: !Path}}
     */
    SyncTree.parseQueryKey_ = function (queryKey) {
        var splitIndex = queryKey.indexOf('$');
        util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
        return {
            queryId: queryKey.substr(splitIndex + 1),
            path: new Path_1.Path(queryKey.substr(0, splitIndex))
        };
    };
    /**
     * Return the query associated with the given tag, if we have one
     * @param {!number} tag
     * @return {?string}
     * @private
     */
    SyncTree.prototype.queryKeyForTag_ = function (tag) {
        return this.tagToQueryMap_['_' + tag];
    };
    /**
     * Return the tag associated with the given query.
     * @param {!Query} query
     * @return {?number}
     * @private
     */
    SyncTree.prototype.tagForQuery_ = function (query) {
        var queryKey = SyncTree.makeQueryKey_(query);
        return util_3.safeGet(this.queryToTagMap_, queryKey);
    };
    /**
     * Static accessor for query tags.
     * @return {number}
     * @private
     */
    SyncTree.getNextQueryTag_ = function () {
        return SyncTree.nextQueryTag_++;
    };
    /**
     * A helper method to apply tagged operations
     *
     * @param {!Path} queryPath
     * @param {!Operation} operation
     * @return {!Array.<!Event>}
     * @private
     */
    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {
        var syncPoint = this.syncPointTree_.get(queryPath);
        util_1.assert(syncPoint, "Missing sync point for query tag that we're tracking");
        var writesCache = this.pendingWriteTree_.childWrites(queryPath);
        return syncPoint.applyOperation(operation, writesCache, 
        /*serverCache=*/ null);
    };
    /**
     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
     *
     * NOTES:
     * - Descendant SyncPoints will be visited first (since we raise events depth-first).
  
     * - We call applyOperation() on each SyncPoint passing three things:
     *   1. A version of the Operation that has been made relative to the SyncPoint location.
     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
     *   3. A snapshot Node with cached server data, if we have it.
  
     * - We concatenate all of the events returned by each SyncPoint and return the result.
     *
     * @param {!Operation} operation
     * @return {!Array.<!Event>}
     * @private
     */
    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {
        return this.applyOperationHelper_(operation, this.syncPointTree_, 
        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));
    };
    /**
     * Recursive helper for applyOperationToSyncPoints_
     *
     * @private
     * @param {!Operation} operation
     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
     * @param {?Node} serverCache
     * @param {!WriteTreeRef} writesCache
     * @return {!Array.<!Event>}
     */
    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
        if (operation.path.isEmpty()) {
            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
        }
        else {
            var syncPoint = syncPointTree.get(Path_1.Path.Empty);
            // If we don't have cached server data, see if we can get it from this SyncPoint.
            if (serverCache == null && syncPoint != null) {
                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
            }
            var events = [];
            var childName = operation.path.getFront();
            var childOperation = operation.operationForChild(childName);
            var childTree = syncPointTree.children.get(childName);
            if (childTree && childOperation) {
                var childServerCache = serverCache
                    ? serverCache.getImmediateChild(childName)
                    : null;
                var childWritesCache = writesCache.child(childName);
                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
            if (syncPoint) {
                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
            }
            return events;
        }
    };
    /**
     * Recursive helper for applyOperationToSyncPoints_
     *
     * @private
     * @param {!Operation} operation
     * @param {ImmutableTree.<!SyncPoint>} syncPointTree
     * @param {?Node} serverCache
     * @param {!WriteTreeRef} writesCache
     * @return {!Array.<!Event>}
     */
    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {
        var _this = this;
        var syncPoint = syncPointTree.get(Path_1.Path.Empty);
        // If we don't have cached server data, see if we can get it from this SyncPoint.
        if (serverCache == null && syncPoint != null) {
            serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);
        }
        var events = [];
        syncPointTree.children.inorderTraversal(function (childName, childTree) {
            var childServerCache = serverCache
                ? serverCache.getImmediateChild(childName)
                : null;
            var childWritesCache = writesCache.child(childName);
            var childOperation = operation.operationForChild(childName);
            if (childOperation) {
                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
            }
        });
        if (syncPoint) {
            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));
        }
        return events;
    };
    /**
     * Static tracker for next query tag.
     * @type {number}
     * @private
     */
    SyncTree.nextQueryTag_ = 1;
    return SyncTree;
}());
exports.SyncTree = SyncTree;



},{"./SyncPoint":25,"./WriteTree":27,"./operation/AckUserWrite":28,"./operation/ListenComplete":29,"./operation/Merge":30,"./operation/Operation":31,"./operation/Overwrite":32,"./snap/ChildrenNode":33,"./util/ImmutableTree":55,"./util/Path":58,"./util/util":64,"@firebase/util":142}],27:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var Path_1 = require("./util/Path");
var CompoundWrite_1 = require("./CompoundWrite");
var PriorityIndex_1 = require("./snap/indexes/PriorityIndex");
var ChildrenNode_1 = require("./snap/ChildrenNode");
/**
 * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them
 * with underlying server data (to create "event cache" data).  Pending writes are added with addOverwrite()
 * and addMerge(), and removed with removeWrite().
 *
 * @constructor
 */
var WriteTree = /** @class */ (function () {
    function WriteTree() {
        /**
         * A tree tracking the result of applying all visible writes.  This does not include transactions with
         * applyLocally=false or writes that are completely shadowed by other writes.
         *
         * @type {!CompoundWrite}
         * @private
         */
        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;
        /**
         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary
         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also
         * used by transactions).
         *
         * @type {!Array.<!WriteRecord>}
         * @private
         */
        this.allWrites_ = [];
        this.lastWriteId_ = -1;
    }
    /**
     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
     *
     * @param {!Path} path
     * @return {!WriteTreeRef}
     */
    WriteTree.prototype.childWrites = function (path) {
        return new WriteTreeRef(path, this);
    };
    /**
     * Record a new overwrite from user code.
     *
     * @param {!Path} path
     * @param {!Node} snap
     * @param {!number} writeId
     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches
     */
    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {
        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');
        if (visible === undefined) {
            visible = true;
        }
        this.allWrites_.push({
            path: path,
            snap: snap,
            writeId: writeId,
            visible: visible
        });
        if (visible) {
            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);
        }
        this.lastWriteId_ = writeId;
    };
    /**
     * Record a new merge from user code.
     *
     * @param {!Path} path
     * @param {!Object.<string, !Node>} changedChildren
     * @param {!number} writeId
     */
    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {
        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');
        this.allWrites_.push({
            path: path,
            children: changedChildren,
            writeId: writeId,
            visible: true
        });
        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);
        this.lastWriteId_ = writeId;
    };
    /**
     * @param {!number} writeId
     * @return {?WriteRecord}
     */
    WriteTree.prototype.getWrite = function (writeId) {
        for (var i = 0; i < this.allWrites_.length; i++) {
            var record = this.allWrites_[i];
            if (record.writeId === writeId) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
     *
     * @param {!number} writeId
     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise
     * events as a result).
     */
    WriteTree.prototype.removeWrite = function (writeId) {
        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
        // out of order.
        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
        //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
        var _this = this;
        var idx = this.allWrites_.findIndex(function (s) {
            return s.writeId === writeId;
        });
        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');
        var writeToRemove = this.allWrites_[idx];
        this.allWrites_.splice(idx, 1);
        var removedWriteWasVisible = writeToRemove.visible;
        var removedWriteOverlapsWithOtherWrites = false;
        var i = this.allWrites_.length - 1;
        while (removedWriteWasVisible && i >= 0) {
            var currentWrite = this.allWrites_[i];
            if (currentWrite.visible) {
                if (i >= idx &&
                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {
                    // The removed write was completely shadowed by a subsequent write.
                    removedWriteWasVisible = false;
                }
                else if (writeToRemove.path.contains(currentWrite.path)) {
                    // Either we're covering some writes or they're covering part of us (depending on which came first).
                    removedWriteOverlapsWithOtherWrites = true;
                }
            }
            i--;
        }
        if (!removedWriteWasVisible) {
            return false;
        }
        else if (removedWriteOverlapsWithOtherWrites) {
            // There's some shadowing going on. Just rebuild the visible writes from scratch.
            this.resetTree_();
            return true;
        }
        else {
            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
            if (writeToRemove.snap) {
                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);
            }
            else {
                var children = writeToRemove.children;
                util_1.forEach(children, function (childName) {
                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));
                });
            }
            return true;
        }
    };
    /**
     * Return a complete snapshot for the given path if there's visible write data at that path, else null.
     * No server data is considered.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTree.prototype.getCompleteWriteData = function (path) {
        return this.visibleWrites_.getCompleteNode(path);
    };
    /**
     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
     * writes), attempt to calculate a complete snapshot for the given path
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */
    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        if (!writeIdsToExclude && !includeHiddenWrites) {
            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);
            if (shadowingNode != null) {
                return shadowingNode;
            }
            else {
                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);
                if (subMerge.isEmpty()) {
                    return completeServerCache;
                }
                else if (completeServerCache == null &&
                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {
                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
                    return null;
                }
                else {
                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    return subMerge.apply(layeredCache);
                }
            }
        }
        else {
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            if (!includeHiddenWrites && merge.isEmpty()) {
                return completeServerCache;
            }
            else {
                // If the server cache is null, and we don't have a complete cache, we need to return null
                if (!includeHiddenWrites &&
                    completeServerCache == null &&
                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {
                    return null;
                }
                else {
                    var filter = function (write) {
                        return ((write.visible || includeHiddenWrites) &&
                            (!writeIdsToExclude ||
                                !~writeIdsToExclude.indexOf(write.writeId)) &&
                            (write.path.contains(treePath) || treePath.contains(write.path)));
                    };
                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);
                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    return mergeAtPath.apply(layeredCache);
                }
            }
        }
    };
    /**
     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
     * Used when creating new views, to pre-fill their complete event children snapshot.
     *
     * @param {!Path} treePath
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */
    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {
        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);
        if (topLevelSet) {
            if (!topLevelSet.isLeafNode()) {
                // we're shadowing everything. Return the children.
                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {
                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
                });
            }
            return completeChildren;
        }
        else if (completeServerChildren) {
            // Layer any children we have on top of this
            // We know we don't have a top-level set, so just enumerate existing children
            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);
            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
                var node = merge_1
                    .childCompoundWrite(new Path_1.Path(childName))
                    .apply(childNode);
                completeChildren = completeChildren.updateImmediateChild(childName, node);
            });
            // Add any complete children we have from the set
            merge_1.getCompleteChildren().forEach(function (namedNode) {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
        else {
            // We don't have anything to layer on top of. Layer on any children we have
            // Note that we can return an empty snap if we have a defined delete
            var merge = this.visibleWrites_.childCompoundWrite(treePath);
            merge.getCompleteChildren().forEach(function (namedNode) {
                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
            });
            return completeChildren;
        }
    };
    /**
     * Given that the underlying server data has updated, determine what, if anything, needs to be
     * applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events
     *
     * Either existingEventSnap or existingServerSnap must exist
     *
     * @param {!Path} treePath
     * @param {!Path} childPath
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */
    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {
        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
        var path = treePath.child(childPath);
        if (this.visibleWrites_.hasCompleteWrite(path)) {
            // At this point we can probably guarantee that we're in case 2, meaning no events
            // May need to check visibility while doing the findRootMostValueAndPath call
            return null;
        }
        else {
            // No complete shadowing. We're either partially shadowing or not shadowing at all.
            var childMerge = this.visibleWrites_.childCompoundWrite(path);
            if (childMerge.isEmpty()) {
                // We're not shadowing at all. Case 1
                return existingServerSnap.getChild(childPath);
            }
            else {
                // This could be more efficient if the serverNode + updates doesn't change the eventSnap
                // However this is tricky to find out, since user updates don't necessary change the server
                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
                // adds nodes, but doesn't change any existing writes. It is therefore not enough to
                // only check if the updates change the serverNode.
                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
                return childMerge.apply(existingServerSnap.getChild(childPath));
            }
        }
    };
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!Path} treePath
     * @param {!string} childKey
     * @param {!CacheNode} existingServerSnap
     * @return {?Node}
     */
    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {
        var path = treePath.child(childKey);
        var shadowingNode = this.visibleWrites_.getCompleteNode(path);
        if (shadowingNode != null) {
            return shadowingNode;
        }
        else {
            if (existingServerSnap.isCompleteForChild(childKey)) {
                var childMerge = this.visibleWrites_.childCompoundWrite(path);
                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));
            }
            else {
                return null;
            }
        }
    };
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTree.prototype.shadowingWrite = function (path) {
        return this.visibleWrites_.getCompleteNode(path);
    };
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window.
     *
     * @param {!Path} treePath
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */
    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {
        var toIterate;
        var merge = this.visibleWrites_.childCompoundWrite(treePath);
        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);
        if (shadowingNode != null) {
            toIterate = shadowingNode;
        }
        else if (completeServerData != null) {
            toIterate = merge.apply(completeServerData);
        }
        else {
            // no children to iterate on
            return [];
        }
        toIterate = toIterate.withIndex(index);
        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
            var nodes = [];
            var cmp = index.getCompare();
            var iter = reverse
                ? toIterate.getReverseIteratorFrom(startPost, index)
                : toIterate.getIteratorFrom(startPost, index);
            var next = iter.getNext();
            while (next && nodes.length < count) {
                if (cmp(next, startPost) !== 0) {
                    nodes.push(next);
                }
                next = iter.getNext();
            }
            return nodes;
        }
        else {
            return [];
        }
    };
    /**
     * @param {!WriteRecord} writeRecord
     * @param {!Path} path
     * @return {boolean}
     * @private
     */
    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {
        if (writeRecord.snap) {
            return writeRecord.path.contains(path);
        }
        else {
            // findKey can return undefined, so use !! to coerce to boolean
            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {
                return writeRecord.path.child(childName).contains(path);
            });
        }
    };
    /**
     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
     * @private
     */
    WriteTree.prototype.resetTree_ = function () {
        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);
        if (this.allWrites_.length > 0) {
            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;
        }
        else {
            this.lastWriteId_ = -1;
        }
    };
    /**
     * The default filter used when constructing the tree. Keep everything that's visible.
     *
     * @param {!WriteRecord} write
     * @return {boolean}
     * @private
     */
    WriteTree.DefaultFilter_ = function (write) {
        return write.visible;
    };
    /**
     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
     * event data at that path.
     *
     * @param {!Array.<!WriteRecord>} writes
     * @param {!function(!WriteRecord):boolean} filter
     * @param {!Path} treeRoot
     * @return {!CompoundWrite}
     * @private
     */
    WriteTree.layerTree_ = function (writes, filter, treeRoot) {
        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;
        for (var i = 0; i < writes.length; ++i) {
            var write = writes[i];
            // Theory, a later set will either:
            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
            if (filter(write)) {
                var writePath = write.path;
                var relativePath = void 0;
                if (write.snap) {
                    if (treeRoot.contains(writePath)) {
                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);
                    }
                    else if (writePath.contains(treeRoot)) {
                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);
                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));
                    }
                    else {
                        // There is no overlap between root path and write path, ignore write
                    }
                }
                else if (write.children) {
                    if (treeRoot.contains(writePath)) {
                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);
                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);
                    }
                    else if (writePath.contains(treeRoot)) {
                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);
                        if (relativePath.isEmpty()) {
                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);
                        }
                        else {
                            var child = util_1.safeGet(write.children, relativePath.getFront());
                            if (child) {
                                // There exists a child in this node that matches the root path
                                var deepNode = child.getChild(relativePath.popFront());
                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);
                            }
                        }
                    }
                    else {
                        // There is no overlap between root path and write path, ignore write
                    }
                }
                else {
                    throw util_2.assertionError('WriteRecord should have .snap or .children');
                }
            }
        }
        return compoundWrite;
    };
    return WriteTree;
}());
exports.WriteTree = WriteTree;
/**
 * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods
 * just proxy to the underlying WriteTree.
 *
 * @constructor
 */
var WriteTreeRef = /** @class */ (function () {
    /**
     * @param {!Path} path
     * @param {!WriteTree} writeTree
     */
    function WriteTreeRef(path, writeTree) {
        this.treePath_ = path;
        this.writeTree_ = writeTree;
    }
    /**
     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
     * can lead to a more expensive calculation.
     *
     * @param {?Node} completeServerCache
     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.
     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {
        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);
    };
    /**
     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
     * mix of the given server data and write data.
     *
     * @param {?ChildrenNode} completeServerChildren
     * @return {!ChildrenNode}
     */
    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {
        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);
    };
    /**
     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
     * if anything, needs to be applied to the event cache.
     *
     * Possibilities:
     *
     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
     *
     * 2. Some write is completely shadowing. No events to be raised
     *
     * 3. Is partially shadowed. Events should be raised
     *
     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
     *
     * @param {!Path} path
     * @param {?Node} existingEventSnap
     * @param {?Node} existingServerSnap
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {
        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);
    };
    /**
     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
     * a higher path, this will return the child of that write relative to the write and this path.
     * Returns null if there is no write at this path.
     *
     * @param {!Path} path
     * @return {?Node}
     */
    WriteTreeRef.prototype.shadowingWrite = function (path) {
        return this.writeTree_.shadowingWrite(this.treePath_.child(path));
    };
    /**
     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
     * the window, but may now be in the window
     *
     * @param {?Node} completeServerData
     * @param {!NamedNode} startPost
     * @param {!number} count
     * @param {boolean} reverse
     * @param {!Index} index
     * @return {!Array.<!NamedNode>}
     */
    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {
        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);
    };
    /**
     * Returns a complete child for a given server snap after applying all user writes or null if there is no
     * complete child for this ChildKey.
     *
     * @param {!string} childKey
     * @param {!CacheNode} existingServerCache
     * @return {?Node}
     */
    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {
        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);
    };
    /**
     * Return a WriteTreeRef for a child.
     *
     * @param {string} childName
     * @return {!WriteTreeRef}
     */
    WriteTreeRef.prototype.child = function (childName) {
        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);
    };
    return WriteTreeRef;
}());
exports.WriteTreeRef = WriteTreeRef;



},{"./CompoundWrite":15,"./snap/ChildrenNode":33,"./snap/indexes/PriorityIndex":42,"./util/Path":58,"@firebase/util":142}],28:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Path_1 = require("../util/Path");
var Operation_1 = require("./Operation");
var AckUserWrite = /** @class */ (function () {
    /**
     *
     * @param {!Path} path
     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.
     * @param {!boolean} revert
     */
    function AckUserWrite(
    /**@inheritDoc */ path, 
    /**@inheritDoc */ affectedTree, 
    /**@inheritDoc */ revert) {
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.ACK_USER_WRITE;
        /** @inheritDoc */
        this.source = Operation_1.OperationSource.User;
    }
    /**
     * @inheritDoc
     */
    AckUserWrite.prototype.operationForChild = function (childName) {
        if (!this.path.isEmpty()) {
            util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
        }
        else if (this.affectedTree.value != null) {
            util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
            // All child locations are affected as well; just return same operation.
            return this;
        }
        else {
            var childTree = this.affectedTree.subtree(new Path_1.Path(childName));
            return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);
        }
    };
    return AckUserWrite;
}());
exports.AckUserWrite = AckUserWrite;



},{"../util/Path":58,"./Operation":31,"@firebase/util":142}],29:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = require("../util/Path");
var Operation_1 = require("./Operation");
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @constructor
 * @implements {Operation}
 */
var ListenComplete = /** @class */ (function () {
    function ListenComplete(source, path) {
        this.source = source;
        this.path = path;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.LISTEN_COMPLETE;
    }
    ListenComplete.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            return new ListenComplete(this.source, Path_1.Path.Empty);
        }
        else {
            return new ListenComplete(this.source, this.path.popFront());
        }
    };
    return ListenComplete;
}());
exports.ListenComplete = ListenComplete;



},{"../util/Path":58,"./Operation":31}],30:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = require("./Operation");
var Overwrite_1 = require("./Overwrite");
var Path_1 = require("../util/Path");
var util_1 = require("@firebase/util");
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!ImmutableTree.<!Node>} children
 * @constructor
 * @implements {Operation}
 */
var Merge = /** @class */ (function () {
    function Merge(
    /**@inheritDoc */ source, 
    /**@inheritDoc */ path, 
    /**@inheritDoc */ children) {
        this.source = source;
        this.path = path;
        this.children = children;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.MERGE;
    }
    /**
     * @inheritDoc
     */
    Merge.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            var childTree = this.children.subtree(new Path_1.Path(childName));
            if (childTree.isEmpty()) {
                // This child is unaffected
                return null;
            }
            else if (childTree.value) {
                // We have a snapshot for the child in question.  This becomes an overwrite of the child.
                return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);
            }
            else {
                // This is a merge at a deeper level
                return new Merge(this.source, Path_1.Path.Empty, childTree);
            }
        }
        else {
            util_1.assert(this.path.getFront() === childName, "Can't get a merge for a child not on the path of the operation");
            return new Merge(this.source, this.path.popFront(), this.children);
        }
    };
    /**
     * @inheritDoc
     */
    Merge.prototype.toString = function () {
        return ('Operation(' +
            this.path +
            ': ' +
            this.source.toString() +
            ' merge: ' +
            this.children.toString() +
            ')');
    };
    return Merge;
}());
exports.Merge = Merge;



},{"../util/Path":58,"./Operation":31,"./Overwrite":32,"@firebase/util":142}],31:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 *
 * @enum
 */
var OperationType;
(function (OperationType) {
    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType[OperationType["MERGE"] = 1] = "MERGE";
    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
/**
 * @param {boolean} fromUser
 * @param {boolean} fromServer
 * @param {?string} queryId
 * @param {boolean} tagged
 * @constructor
 */
var OperationSource = /** @class */ (function () {
    function OperationSource(fromUser, fromServer, queryId, tagged) {
        this.fromUser = fromUser;
        this.fromServer = fromServer;
        this.queryId = queryId;
        this.tagged = tagged;
        util_1.assert(!tagged || fromServer, 'Tagged queries must be from server.');
    }
    /**
     * @const
     * @type {!OperationSource}
     */
    OperationSource.User = new OperationSource(
    /*fromUser=*/ true, false, null, 
    /*tagged=*/ false);
    /**
     * @const
     * @type {!OperationSource}
     */
    OperationSource.Server = new OperationSource(false, 
    /*fromServer=*/ true, null, 
    /*tagged=*/ false);
    /**
     * @param {string} queryId
     * @return {!OperationSource}
     */
    OperationSource.forServerTaggedQuery = function (queryId) {
        return new OperationSource(false, 
        /*fromServer=*/ true, queryId, 
        /*tagged=*/ true);
    };
    return OperationSource;
}());
exports.OperationSource = OperationSource;



},{"@firebase/util":142}],32:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = require("./Operation");
var Path_1 = require("../util/Path");
/**
 * @param {!OperationSource} source
 * @param {!Path} path
 * @param {!Node} snap
 * @constructor
 * @implements {Operation}
 */
var Overwrite = /** @class */ (function () {
    function Overwrite(source, path, snap) {
        this.source = source;
        this.path = path;
        this.snap = snap;
        /** @inheritDoc */
        this.type = Operation_1.OperationType.OVERWRITE;
    }
    Overwrite.prototype.operationForChild = function (childName) {
        if (this.path.isEmpty()) {
            return new Overwrite(this.source, Path_1.Path.Empty, this.snap.getImmediateChild(childName));
        }
        else {
            return new Overwrite(this.source, this.path.popFront(), this.snap);
        }
    };
    return Overwrite;
}());
exports.Overwrite = Overwrite;



},{"../util/Path":58,"./Operation":31}],33:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var SortedMap_1 = require("../util/SortedMap");
var Node_1 = require("./Node");
var snap_1 = require("./snap");
var PriorityIndex_1 = require("./indexes/PriorityIndex");
var KeyIndex_1 = require("./indexes/KeyIndex");
var IndexMap_1 = require("./IndexMap");
var LeafNode_1 = require("./LeafNode");
var comparators_1 = require("./comparators");
// TODO: For memory savings, don't store priorityNode_ if it's empty.
var EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 *
 * @constructor
 * @implements {Node}
 */
var ChildrenNode = /** @class */ (function () {
    /**
     *
     * @param {!SortedMap.<string, !Node>} children_ List of children
     * of this node..
     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).
     * @param {!IndexMap} indexMap_
     */
    function ChildrenNode(children_, priorityNode_, indexMap_) {
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        /**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */
        if (this.priorityNode_) {
            snap_1.validatePriorityNode(this.priorityNode_);
        }
        if (this.children_.isEmpty()) {
            util_1.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
        }
    }
    Object.defineProperty(ChildrenNode, "EMPTY_NODE", {
        get: function () {
            return (EMPTY_NODE ||
                (EMPTY_NODE = new ChildrenNode(new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), null, IndexMap_1.IndexMap.Default)));
        },
        enumerable: true,
        configurable: true
    });
    /** @inheritDoc */
    ChildrenNode.prototype.isLeafNode = function () {
        return false;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getPriority = function () {
        return this.priorityNode_ || EMPTY_NODE;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {
        if (this.children_.isEmpty()) {
            // Don't allow priorities on empty nodes
            return this;
        }
        else {
            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getImmediateChild = function (childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') {
            return this.getPriority();
        }
        else {
            var child = this.children_.get(childName);
            return child === null ? EMPTY_NODE : child;
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getChild = function (path) {
        var front = path.getFront();
        if (front === null)
            return this;
        return this.getImmediateChild(front).getChild(path.popFront());
    };
    /** @inheritDoc */
    ChildrenNode.prototype.hasChild = function (childName) {
        return this.children_.get(childName) !== null;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {
        util_1.assert(newChildNode, 'We should always be passing snapshot nodes');
        if (childName === '.priority') {
            return this.updatePriority(newChildNode);
        }
        else {
            var namedNode = new Node_1.NamedNode(childName, newChildNode);
            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;
            if (newChildNode.isEmpty()) {
                newChildren = this.children_.remove(childName);
                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
            }
            else {
                newChildren = this.children_.insert(childName, newChildNode);
                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
            }
            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
            return new ChildrenNode(newChildren, newPriority, newIndexMap);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.updateChild = function (path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
            return newChildNode;
        }
        else {
            util_1.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);
            return this.updateImmediateChild(front, newImmediateChild);
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.isEmpty = function () {
        return this.children_.isEmpty();
    };
    /** @inheritDoc */
    ChildrenNode.prototype.numChildren = function () {
        return this.children_.count();
    };
    /** @inheritDoc */
    ChildrenNode.prototype.val = function (exportFormat) {
        if (this.isEmpty())
            return null;
        var obj = {};
        var numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
            obj[key] = childNode.val(exportFormat);
            numKeys++;
            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {
                maxKey = Math.max(maxKey, Number(key));
            }
            else {
                allIntegerKeys = false;
            }
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
            // convert to array.
            var array = [];
            for (var key in obj)
                array[key] = obj[key];
            return array;
        }
        else {
            if (exportFormat && !this.getPriority().isEmpty()) {
                obj['.priority'] = this.getPriority().val();
            }
            return obj;
        }
    };
    /** @inheritDoc */
    ChildrenNode.prototype.hash = function () {
        if (this.lazyHash_ === null) {
            var toHash_1 = '';
            if (!this.getPriority().isEmpty())
                toHash_1 +=
                    'priority:' +
                        snap_1.priorityHashText(this.getPriority().val()) +
                        ':';
            this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                var childHash = childNode.hash();
                if (childHash !== '')
                    toHash_1 += ':' + key + ':' + childHash;
            });
            this.lazyHash_ = toHash_1 === '' ? '' : util_2.sha1(toHash_1);
        }
        return this.lazyHash_;
    };
    /** @inheritDoc */
    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {
        var idx = this.resolveIndex_(index);
        if (idx) {
            var predecessor = idx.getPredecessorKey(new Node_1.NamedNode(childName, childNode));
            return predecessor ? predecessor.name : null;
        }
        else {
            return this.children_.getPredecessorKey(childName);
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?string}
     */
    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var minKey = idx.minKey();
            return minKey && minKey.name;
        }
        else {
            return this.children_.minKey();
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */
    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {
        var minKey = this.getFirstChildName(indexDefinition);
        if (minKey) {
            return new Node_1.NamedNode(minKey, this.children_.get(minKey));
        }
        else {
            return null;
        }
    };
    /**
     * Given an index, return the key name of the largest value we have, according to that index
     * @param {!Index} indexDefinition
     * @return {?string}
     */
    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            var maxKey = idx.maxKey();
            return maxKey && maxKey.name;
        }
        else {
            return this.children_.maxKey();
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {?NamedNode}
     */
    ChildrenNode.prototype.getLastChild = function (indexDefinition) {
        var maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) {
            return new Node_1.NamedNode(maxKey, this.children_.get(maxKey));
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.forEachChild = function (index, action) {
        var idx = this.resolveIndex_(index);
        if (idx) {
            return idx.inorderTraversal(function (wrappedNode) {
                return action(wrappedNode.name, wrappedNode.node);
            });
        }
        else {
            return this.children_.inorderTraversal(action);
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {SortedMapIterator}
     */
    ChildrenNode.prototype.getIterator = function (indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
    };
    /**
     *
     * @param {!NamedNode} startPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            return idx.getIteratorFrom(startPost, function (key) { return key; });
        }
        else {
            var iterator = this.children_.getIteratorFrom(startPost.name, Node_1.NamedNode.Wrap);
            var next = iterator.peek();
            while (next != null && indexDefinition.compare(next, startPost) < 0) {
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
    };
    /**
     * @param {!NamedNode} endPost
     * @param {!Index} indexDefinition
     * @return {!SortedMapIterator}
     */
    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {
        var idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            return idx.getReverseIteratorFrom(endPost, function (key) {
                return key;
            });
        }
        else {
            var iterator = this.children_.getReverseIteratorFrom(endPost.name, Node_1.NamedNode.Wrap);
            var next = iterator.peek();
            while (next != null && indexDefinition.compare(next, endPost) > 0) {
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.compareTo = function (other) {
        if (this.isEmpty()) {
            if (other.isEmpty()) {
                return 0;
            }
            else {
                return -1;
            }
        }
        else if (other.isLeafNode() || other.isEmpty()) {
            return 1;
        }
        else if (other === exports.MAX_NODE) {
            return -1;
        }
        else {
            // Must be another node with children.
            return 0;
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.withIndex = function (indexDefinition) {
        if (indexDefinition === KeyIndex_1.KEY_INDEX ||
            this.indexMap_.hasIndex(indexDefinition)) {
            return this;
        }
        else {
            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
        }
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.isIndexed = function (index) {
        return index === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(index);
    };
    /**
     * @inheritDoc
     */
    ChildrenNode.prototype.equals = function (other) {
        if (other === this) {
            return true;
        }
        else if (other.isLeafNode()) {
            return false;
        }
        else {
            var otherChildrenNode = other;
            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
                return false;
            }
            else if (this.children_.count() === otherChildrenNode.children_.count()) {
                var thisIter = this.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                var otherIter = otherChildrenNode.getIterator(PriorityIndex_1.PRIORITY_INDEX);
                var thisCurrent = thisIter.getNext();
                var otherCurrent = otherIter.getNext();
                while (thisCurrent && otherCurrent) {
                    if (thisCurrent.name !== otherCurrent.name ||
                        !thisCurrent.node.equals(otherCurrent.node)) {
                        return false;
                    }
                    thisCurrent = thisIter.getNext();
                    otherCurrent = otherIter.getNext();
                }
                return thisCurrent === null && otherCurrent === null;
            }
            else {
                return false;
            }
        }
    };
    /**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     * @private
     * @param {!Index} indexDefinition
     * @return {?SortedMap.<NamedNode, Node>}
     */
    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {
        if (indexDefinition === KeyIndex_1.KEY_INDEX) {
            return null;
        }
        else {
            return this.indexMap_.get(indexDefinition.toString());
        }
    };
    /**
     * @private
     * @type {RegExp}
     */
    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
    return ChildrenNode;
}());
exports.ChildrenNode = ChildrenNode;
/**
 * @constructor
 * @extends {ChildrenNode}
 * @private
 */
var MaxNode = /** @class */ (function (_super) {
    tslib_1.__extends(MaxNode, _super);
    function MaxNode() {
        return _super.call(this, new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap_1.IndexMap.Default) || this;
    }
    MaxNode.prototype.compareTo = function (other) {
        if (other === this) {
            return 0;
        }
        else {
            return 1;
        }
    };
    MaxNode.prototype.equals = function (other) {
        // Not that we every compare it, but MAX_NODE is only ever equal to itself
        return other === this;
    };
    MaxNode.prototype.getPriority = function () {
        return this;
    };
    MaxNode.prototype.getImmediateChild = function (childName) {
        return ChildrenNode.EMPTY_NODE;
    };
    MaxNode.prototype.isEmpty = function () {
        return false;
    };
    return MaxNode;
}(ChildrenNode));
exports.MaxNode = MaxNode;
/**
 * Marker that will sort higher than any other snapshot.
 * @type {!MAX_NODE}
 * @const
 */
exports.MAX_NODE = new MaxNode();
Object.defineProperties(Node_1.NamedNode, {
    MIN: {
        value: new Node_1.NamedNode(util_2.MIN_NAME, ChildrenNode.EMPTY_NODE)
    },
    MAX: {
        value: new Node_1.NamedNode(util_2.MAX_NAME, exports.MAX_NODE)
    }
});
/**
 * Reference Extensions
 */
KeyIndex_1.KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode_1.LeafNode.__childrenNodeConstructor = ChildrenNode;
snap_1.setMaxNode(exports.MAX_NODE);
PriorityIndex_1.setMaxNode(exports.MAX_NODE);



},{"../util/SortedMap":60,"../util/util":64,"./IndexMap":34,"./LeafNode":35,"./Node":36,"./comparators":38,"./indexes/KeyIndex":40,"./indexes/PriorityIndex":42,"./snap":45,"@firebase/util":142,"tslib":176}],34:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var childSet_1 = require("./childSet");
var util_2 = require("@firebase/util");
var Node_1 = require("./Node");
var PriorityIndex_1 = require("./indexes/PriorityIndex");
var KeyIndex_1 = require("./indexes/KeyIndex");
var _defaultIndexMap;
var fallbackObject = {};
/**
 *
 * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes
 * @param {Object.<string, Index>} indexSet
 * @constructor
 */
var IndexMap = /** @class */ (function () {
    function IndexMap(indexes_, indexSet_) {
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
    }
    Object.defineProperty(IndexMap, "Default", {
        /**
         * The default IndexMap for nodes without a priority
         * @type {!IndexMap}
         * @const
         */
        get: function () {
            util_1.assert(fallbackObject && PriorityIndex_1.PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
            _defaultIndexMap =
                _defaultIndexMap ||
                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PriorityIndex_1.PRIORITY_INDEX });
            return _defaultIndexMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param {!string} indexKey
     * @return {?SortedMap.<NamedNode, Node>}
     */
    IndexMap.prototype.get = function (indexKey) {
        var sortedMap = util_2.safeGet(this.indexes_, indexKey);
        if (!sortedMap)
            throw new Error('No index defined for ' + indexKey);
        if (sortedMap === fallbackObject) {
            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
            // regular child map
            return null;
        }
        else {
            return sortedMap;
        }
    };
    /**
     * @param {!Index} indexDefinition
     * @return {boolean}
     */
    IndexMap.prototype.hasIndex = function (indexDefinition) {
        return util_2.contains(this.indexSet_, indexDefinition.toString());
    };
    /**
     * @param {!Index} indexDefinition
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
        util_1.assert(indexDefinition !== KeyIndex_1.KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        var childList = [];
        var sawIndexedValue = false;
        var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
        var next = iter.getNext();
        while (next) {
            sawIndexedValue =
                sawIndexedValue || indexDefinition.isDefinedOn(next.node);
            childList.push(next);
            next = iter.getNext();
        }
        var newIndex;
        if (sawIndexedValue) {
            newIndex = childSet_1.buildChildSet(childList, indexDefinition.getCompare());
        }
        else {
            newIndex = fallbackObject;
        }
        var indexName = indexDefinition.toString();
        var newIndexSet = util_2.clone(this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        var newIndexes = util_2.clone(this.indexes_);
        newIndexes[indexName] = newIndex;
        return new IndexMap(newIndexes, newIndexSet);
    };
    /**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     * @param {!NamedNode} namedNode
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
        var _this = this;
        var newIndexes = util_2.map(this.indexes_, function (indexedChildren, indexName) {
            var index = util_2.safeGet(_this.indexSet_, indexName);
            util_1.assert(index, 'Missing index implementation for ' + indexName);
            if (indexedChildren === fallbackObject) {
                // Check to see if we need to index everything
                if (index.isDefinedOn(namedNode.node)) {
                    // We need to build this index
                    var childList = [];
                    var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
                    var next = iter.getNext();
                    while (next) {
                        if (next.name != namedNode.name) {
                            childList.push(next);
                        }
                        next = iter.getNext();
                    }
                    childList.push(namedNode);
                    return childSet_1.buildChildSet(childList, index.getCompare());
                }
                else {
                    // No change, this remains a fallback
                    return fallbackObject;
                }
            }
            else {
                var existingSnap = existingChildren.get(namedNode.name);
                var newChildren = indexedChildren;
                if (existingSnap) {
                    newChildren = newChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                }
                return newChildren.insert(namedNode, namedNode.node);
            }
        });
        return new IndexMap(newIndexes, this.indexSet_);
    };
    /**
     * Create a new IndexMap instance with the given value removed
     * @param {!NamedNode} namedNode
     * @param {!SortedMap.<string, !Node>} existingChildren
     * @return {!IndexMap}
     */
    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
        var newIndexes = util_2.map(this.indexes_, function (indexedChildren) {
            if (indexedChildren === fallbackObject) {
                // This is the fallback. Just return it, nothing to do in this case
                return indexedChildren;
            }
            else {
                var existingSnap = existingChildren.get(namedNode.name);
                if (existingSnap) {
                    return indexedChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                }
                else {
                    // No record of this child
                    return indexedChildren;
                }
            }
        });
        return new IndexMap(newIndexes, this.indexSet_);
    };
    return IndexMap;
}());
exports.IndexMap = IndexMap;



},{"./Node":36,"./childSet":37,"./indexes/KeyIndex":40,"./indexes/PriorityIndex":42,"@firebase/util":142}],35:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var snap_1 = require("./snap");
var __childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */
var LeafNode = /** @class */ (function () {
    /**
     * @implements {Node}
     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.
     *                                         The object type is possible in the event of a deferred value
     * @param {!Node=} priorityNode_ The priority of this node.
     */
    function LeafNode(value_, priorityNode_) {
        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        util_1.assert(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        snap_1.validatePriorityNode(this.priorityNode_);
    }
    Object.defineProperty(LeafNode, "__childrenNodeConstructor", {
        get: function () {
            return __childrenNodeConstructor;
        },
        set: function (val) {
            __childrenNodeConstructor = val;
        },
        enumerable: true,
        configurable: true
    });
    /** @inheritDoc */
    LeafNode.prototype.isLeafNode = function () {
        return true;
    };
    /** @inheritDoc */
    LeafNode.prototype.getPriority = function () {
        return this.priorityNode_;
    };
    /** @inheritDoc */
    LeafNode.prototype.updatePriority = function (newPriorityNode) {
        return new LeafNode(this.value_, newPriorityNode);
    };
    /** @inheritDoc */
    LeafNode.prototype.getImmediateChild = function (childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') {
            return this.priorityNode_;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.getChild = function (path) {
        if (path.isEmpty()) {
            return this;
        }
        else if (path.getFront() === '.priority') {
            return this.priorityNode_;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;
        }
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.hasChild = function () {
        return false;
    };
    /** @inheritDoc */
    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {
        return null;
    };
    /** @inheritDoc */
    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {
        if (childName === '.priority') {
            return this.updatePriority(newChildNode);
        }
        else if (newChildNode.isEmpty() && childName !== '.priority') {
            return this;
        }
        else {
            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.updateChild = function (path, newChildNode) {
        var front = path.getFront();
        if (front === null) {
            return newChildNode;
        }
        else if (newChildNode.isEmpty() && front !== '.priority') {
            return this;
        }
        else {
            util_1.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');
            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));
        }
    };
    /** @inheritDoc */
    LeafNode.prototype.isEmpty = function () {
        return false;
    };
    /** @inheritDoc */
    LeafNode.prototype.numChildren = function () {
        return 0;
    };
    /** @inheritDoc */
    LeafNode.prototype.forEachChild = function (index, action) {
        return false;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.val = function (exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty())
            return {
                '.value': this.getValue(),
                '.priority': this.getPriority().val()
            };
        else
            return this.getValue();
    };
    /** @inheritDoc */
    LeafNode.prototype.hash = function () {
        if (this.lazyHash_ === null) {
            var toHash = '';
            if (!this.priorityNode_.isEmpty())
                toHash +=
                    'priority:' +
                        snap_1.priorityHashText(this.priorityNode_.val()) +
                        ':';
            var type = typeof this.value_;
            toHash += type + ':';
            if (type === 'number') {
                toHash += util_2.doubleToIEEE754String(this.value_);
            }
            else {
                toHash += this.value_;
            }
            this.lazyHash_ = util_2.sha1(toHash);
        }
        return this.lazyHash_;
    };
    /**
     * Returns the value of the leaf node.
     * @return {Object|string|number|boolean} The value of the node.
     */
    LeafNode.prototype.getValue = function () {
        return this.value_;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.compareTo = function (other) {
        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {
            return 1;
        }
        else if (other instanceof LeafNode.__childrenNodeConstructor) {
            return -1;
        }
        else {
            util_1.assert(other.isLeafNode(), 'Unknown node type');
            return this.compareToLeafNode_(other);
        }
    };
    /**
     * Comparison specifically for two leaf nodes
     * @param {!LeafNode} otherLeaf
     * @return {!number}
     * @private
     */
    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {
        var otherLeafType = typeof otherLeaf.value_;
        var thisLeafType = typeof this.value_;
        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        util_1.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
        util_1.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
        if (otherIndex === thisIndex) {
            // Same type, compare values
            if (thisLeafType === 'object') {
                // Deferred value nodes are all equal, but we should also never get to this point...
                return 0;
            }
            else {
                // Note that this works because true > false, all others are number or string comparisons
                if (this.value_ < otherLeaf.value_) {
                    return -1;
                }
                else if (this.value_ === otherLeaf.value_) {
                    return 0;
                }
                else {
                    return 1;
                }
            }
        }
        else {
            return thisIndex - otherIndex;
        }
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.withIndex = function () {
        return this;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.isIndexed = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    LeafNode.prototype.equals = function (other) {
        /**
         * @inheritDoc
         */
        if (other === this) {
            return true;
        }
        else if (other.isLeafNode()) {
            var otherLeaf = other;
            return (this.value_ === otherLeaf.value_ &&
                this.priorityNode_.equals(otherLeaf.priorityNode_));
        }
        else {
            return false;
        }
    };
    /**
     * The sort order for comparing leaf nodes of different types. If two leaf nodes have
     * the same type, the comparison falls back to their value
     * @type {Array.<!string>}
     * @const
     */
    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];
    return LeafNode;
}());
exports.LeafNode = LeafNode;



},{"../util/util":64,"./snap":45,"@firebase/util":142}],36:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * @param {!string} name
 * @param {!Node} node
 * @constructor
 * @struct
 */
var NamedNode = /** @class */ (function () {
    function NamedNode(name, node) {
        this.name = name;
        this.node = node;
    }
    /**
     *
     * @param {!string} name
     * @param {!Node} node
     * @return {NamedNode}
     */
    NamedNode.Wrap = function (name, node) {
        return new NamedNode(name, node);
    };
    return NamedNode;
}());
exports.NamedNode = NamedNode;



},{}],37:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SortedMap_1 = require("../util/SortedMap");
var SortedMap_2 = require("../util/SortedMap");
var LOG_2 = Math.log(2);
/**
 * @constructor
 */
var Base12Num = /** @class */ (function () {
    /**
     * @param {number} length
     */
    function Base12Num(length) {
        var logBase2 = function (num) {
            return parseInt((Math.log(num) / LOG_2), 10);
        };
        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        var mask = bitMask(this.count);
        this.bits_ = (length + 1) & mask;
    }
    /**
     * @return {boolean}
     */
    Base12Num.prototype.nextBitIsOne = function () {
        //noinspection JSBitwiseOperatorUsage
        var result = !(this.bits_ & (0x1 << this.current_));
        this.current_--;
        return result;
    };
    return Base12Num;
}());
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @template K, V
 * @param {Array.<!NamedNode>} childList Unsorted list of children
 * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used
 * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's
 *                                                        type is not NamedNode
 * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map
 * @return {SortedMap.<K, V>}
 */
exports.buildChildSet = function (childList, cmp, keyFn, mapSortFn) {
    childList.sort(cmp);
    var buildBalancedTree = function (low, high) {
        var length = high - low;
        var namedNode;
        var key;
        if (length == 0) {
            return null;
        }
        else if (length == 1) {
            namedNode = childList[low];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, null, null);
        }
        else {
            var middle = parseInt((length / 2), 10) + low;
            var left = buildBalancedTree(low, middle);
            var right = buildBalancedTree(middle + 1, high);
            namedNode = childList[middle];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, left, right);
        }
    };
    var buildFrom12Array = function (base12) {
        var node = null;
        var root = null;
        var index = childList.length;
        var buildPennant = function (chunkSize, color) {
            var low = index - chunkSize;
            var high = index;
            index -= chunkSize;
            var childTree = buildBalancedTree(low + 1, high);
            var namedNode = childList[low];
            var key = keyFn ? keyFn(namedNode) : namedNode;
            attachPennant(new SortedMap_1.LLRBNode(key, namedNode.node, color, null, childTree));
        };
        var attachPennant = function (pennant) {
            if (node) {
                node.left = pennant;
                node = pennant;
            }
            else {
                root = pennant;
                node = pennant;
            }
        };
        for (var i = 0; i < base12.count; ++i) {
            var isOne = base12.nextBitIsOne();
            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
            var chunkSize = Math.pow(2, base12.count - (i + 1));
            if (isOne) {
                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
            }
            else {
                // current == 2
                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);
                buildPennant(chunkSize, SortedMap_1.LLRBNode.RED);
            }
        }
        return root;
    };
    var base12 = new Base12Num(childList.length);
    var root = buildFrom12Array(base12);
    return new SortedMap_2.SortedMap(mapSortFn || cmp, root);
};



},{"../util/SortedMap":60}],38:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util/util");
function NAME_ONLY_COMPARATOR(left, right) {
    return util_1.nameCompare(left.name, right.name);
}
exports.NAME_ONLY_COMPARATOR = NAME_ONLY_COMPARATOR;
function NAME_COMPARATOR(left, right) {
    return util_1.nameCompare(left, right);
}
exports.NAME_COMPARATOR = NAME_COMPARATOR;



},{"../util/util":64}],39:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = require("../Node");
var util_1 = require("../../util/util");
/**
 *
 * @constructor
 */
var Index = /** @class */ (function () {
    function Index() {
    }
    /**
     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for
     * this index
     */
    Index.prototype.getCompare = function () {
        return this.compare.bind(this);
    };
    /**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     * @param {!Node} oldNode
     * @param {!Node} newNode
     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode
     */
    Index.prototype.indexedValueChanged = function (oldNode, newNode) {
        var oldWrapped = new Node_1.NamedNode(util_1.MIN_NAME, oldNode);
        var newWrapped = new Node_1.NamedNode(util_1.MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
    };
    /**
     * @return {!NamedNode} a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */
    Index.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    return Index;
}());
exports.Index = Index;



},{"../../util/util":64,"../Node":36}],40:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Index_1 = require("./Index");
var Node_1 = require("../Node");
var util_1 = require("../../util/util");
var util_2 = require("@firebase/util");
var __EMPTY_NODE;
var KeyIndex = /** @class */ (function (_super) {
    tslib_1.__extends(KeyIndex, _super);
    function KeyIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KeyIndex, "__EMPTY_NODE", {
        get: function () {
            return __EMPTY_NODE;
        },
        set: function (val) {
            __EMPTY_NODE = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.compare = function (a, b) {
        return util_1.nameCompare(a.name, b.name);
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.isDefinedOn = function (node) {
        // We could probably return true here (since every node has a key), but it's never called
        // so just leaving unimplemented for now.
        throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return false; // The key for a node never changes.
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    KeyIndex.prototype.maxPost = function () {
        // TODO: This should really be created once and cached in a static property, but
        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
        return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    KeyIndex.prototype.makePost = function (indexValue, name) {
        util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
        return new Node_1.NamedNode(indexValue, __EMPTY_NODE);
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    KeyIndex.prototype.toString = function () {
        return '.key';
    };
    return KeyIndex;
}(Index_1.Index));
exports.KeyIndex = KeyIndex;
exports.KEY_INDEX = new KeyIndex();



},{"../../util/util":64,"../Node":36,"./Index":39,"@firebase/util":142,"tslib":176}],41:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@firebase/util");
var util_2 = require("../../util/util");
var Index_1 = require("./Index");
var ChildrenNode_1 = require("../ChildrenNode");
var Node_1 = require("../Node");
var nodeFromJSON_1 = require("../nodeFromJSON");
/**
 * @param {!Path} indexPath
 * @constructor
 * @extends {Index}
 */
var PathIndex = /** @class */ (function (_super) {
    tslib_1.__extends(PathIndex, _super);
    function PathIndex(indexPath_) {
        var _this = _super.call(this) || this;
        _this.indexPath_ = indexPath_;
        util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
        return _this;
    }
    /**
     * @param {!Node} snap
     * @return {!Node}
     * @protected
     */
    PathIndex.prototype.extractChild = function (snap) {
        return snap.getChild(this.indexPath_);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.isDefinedOn = function (node) {
        return !node.getChild(this.indexPath_).isEmpty();
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.compare = function (a, b) {
        var aChild = this.extractChild(a.node);
        var bChild = this.extractChild(b.node);
        var indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) {
            return util_2.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.makePost = function (indexValue, name) {
        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new Node_1.NamedNode(name, node);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.maxPost = function () {
        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);
        return new Node_1.NamedNode(util_2.MAX_NAME, node);
    };
    /**
     * @inheritDoc
     */
    PathIndex.prototype.toString = function () {
        return this.indexPath_.slice().join('/');
    };
    return PathIndex;
}(Index_1.Index));
exports.PathIndex = PathIndex;



},{"../../util/util":64,"../ChildrenNode":33,"../Node":36,"../nodeFromJSON":44,"./Index":39,"@firebase/util":142,"tslib":176}],42:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Index_1 = require("./Index");
var util_1 = require("../../util/util");
var Node_1 = require("../Node");
var LeafNode_1 = require("../LeafNode");
var nodeFromJSON;
var MAX_NODE;
function setNodeFromJSON(val) {
    nodeFromJSON = val;
}
exports.setNodeFromJSON = setNodeFromJSON;
function setMaxNode(val) {
    MAX_NODE = val;
}
exports.setMaxNode = setMaxNode;
/**
 * @constructor
 * @extends {Index}
 * @private
 */
var PriorityIndex = /** @class */ (function (_super) {
    tslib_1.__extends(PriorityIndex, _super);
    function PriorityIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.compare = function (a, b) {
        var aPriority = a.node.getPriority();
        var bPriority = b.node.getPriority();
        var indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) {
            return util_1.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.isDefinedOn = function (node) {
        return !node.getPriority().isEmpty();
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    PriorityIndex.prototype.maxPost = function () {
        return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    PriorityIndex.prototype.makePost = function (indexValue, name) {
        var priorityNode = nodeFromJSON(indexValue);
        return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    PriorityIndex.prototype.toString = function () {
        return '.priority';
    };
    return PriorityIndex;
}(Index_1.Index));
exports.PriorityIndex = PriorityIndex;
exports.PRIORITY_INDEX = new PriorityIndex();



},{"../../util/util":64,"../LeafNode":35,"../Node":36,"./Index":39,"tslib":176}],43:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Index_1 = require("./Index");
var Node_1 = require("../Node");
var util_1 = require("../../util/util");
var nodeFromJSON_1 = require("../nodeFromJSON");
/**
 * @constructor
 * @extends {Index}
 * @private
 */
var ValueIndex = /** @class */ (function (_super) {
    tslib_1.__extends(ValueIndex, _super);
    function ValueIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.compare = function (a, b) {
        var indexCmp = a.node.compareTo(b.node);
        if (indexCmp === 0) {
            return util_1.nameCompare(a.name, b.name);
        }
        else {
            return indexCmp;
        }
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.isDefinedOn = function (node) {
        return true;
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {
        return !oldNode.equals(newNode);
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.minPost = function () {
        return Node_1.NamedNode.MIN;
    };
    /**
     * @inheritDoc
     */
    ValueIndex.prototype.maxPost = function () {
        return Node_1.NamedNode.MAX;
    };
    /**
     * @param {*} indexValue
     * @param {string} name
     * @return {!NamedNode}
     */
    ValueIndex.prototype.makePost = function (indexValue, name) {
        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
        return new Node_1.NamedNode(name, valueNode);
    };
    /**
     * @return {!string} String representation for inclusion in a query spec
     */
    ValueIndex.prototype.toString = function () {
        return '.value';
    };
    return ValueIndex;
}(Index_1.Index));
exports.ValueIndex = ValueIndex;
exports.VALUE_INDEX = new ValueIndex();



},{"../../util/util":64,"../Node":36,"../nodeFromJSON":44,"./Index":39,"tslib":176}],44:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = require("./ChildrenNode");
var LeafNode_1 = require("./LeafNode");
var Node_1 = require("./Node");
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var childSet_1 = require("./childSet");
var comparators_1 = require("./comparators");
var IndexMap_1 = require("./IndexMap");
var PriorityIndex_1 = require("./indexes/PriorityIndex");
var USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param {*} json JSON to create a node for.
 * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 * @return {!Node}
 */
function nodeFromJSON(json, priority) {
    if (priority === void 0) { priority = null; }
    if (json === null) {
        return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
    }
    if (typeof json === 'object' && '.priority' in json) {
        priority = json['.priority'];
    }
    util_2.assert(priority === null ||
        typeof priority === 'string' ||
        typeof priority === 'number' ||
        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);
    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {
        json = json['.value'];
    }
    // Valid leaf nodes include non-objects or server-value wrapper objects
    if (typeof json !== 'object' || '.sv' in json) {
        var jsonLeaf = json;
        return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));
    }
    if (!(json instanceof Array) && USE_HINZE) {
        var children_1 = [];
        var childrenHavePriority_1 = false;
        var hinzeJsonObj_1 = json;
        util_1.forEach(hinzeJsonObj_1, function (key, child) {
            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {
                // Ignore metadata nodes
                var childNode = nodeFromJSON(hinzeJsonObj_1[key]);
                if (!childNode.isEmpty()) {
                    childrenHavePriority_1 =
                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();
                    children_1.push(new Node_1.NamedNode(key, childNode));
                }
            }
        });
        if (children_1.length == 0) {
            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, comparators_1.NAME_COMPARATOR);
        if (childrenHavePriority_1) {
            var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());
            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({ '.priority': sortedChildSet }, { '.priority': PriorityIndex_1.PRIORITY_INDEX }));
        }
        else {
            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);
        }
    }
    else {
        var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        var jsonObj_1 = json;
        util_1.forEach(jsonObj_1, function (key, childData) {
            if (util_1.contains(jsonObj_1, key)) {
                if (key.substring(0, 1) !== '.') {
                    // ignore metadata nodes.
                    var childNode = nodeFromJSON(childData);
                    if (childNode.isLeafNode() || !childNode.isEmpty())
                        node_1 = node_1.updateImmediateChild(key, childNode);
                }
            }
        });
        return node_1.updatePriority(nodeFromJSON(priority));
    }
}
exports.nodeFromJSON = nodeFromJSON;
PriorityIndex_1.setNodeFromJSON(nodeFromJSON);



},{"./ChildrenNode":33,"./IndexMap":34,"./LeafNode":35,"./Node":36,"./childSet":37,"./comparators":38,"./indexes/PriorityIndex":42,"@firebase/util":142}],45:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var util_3 = require("@firebase/util");
var MAX_NODE;
function setMaxNode(val) {
    MAX_NODE = val;
}
exports.setMaxNode = setMaxNode;
/**
 * @param {(!string|!number)} priority
 * @return {!string}
 */
exports.priorityHashText = function (priority) {
    if (typeof priority === 'number')
        return 'number:' + util_2.doubleToIEEE754String(priority);
    else
        return 'string:' + priority;
};
/**
 * Validates that a priority snapshot Node is valid.
 *
 * @param {!Node} priorityNode
 */
exports.validatePriorityNode = function (priorityNode) {
    if (priorityNode.isLeafNode()) {
        var val = priorityNode.val();
        util_1.assert(typeof val === 'string' ||
            typeof val === 'number' ||
            (typeof val === 'object' && util_3.contains(val, '.sv')), 'Priority must be a string or number.');
    }
    else {
        util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');
    }
    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
    util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};



},{"../util/util":64,"@firebase/util":142}],46:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
/**
 * Tracks a collection of stats.
 *
 * @constructor
 */
var StatsCollection = /** @class */ (function () {
    function StatsCollection() {
        this.counters_ = {};
    }
    StatsCollection.prototype.incrementCounter = function (name, amount) {
        if (amount === void 0) { amount = 1; }
        if (!util_2.contains(this.counters_, name))
            this.counters_[name] = 0;
        this.counters_[name] += amount;
    };
    StatsCollection.prototype.get = function () {
        return util_1.deepCopy(this.counters_);
    };
    return StatsCollection;
}());
exports.StatsCollection = StatsCollection;



},{"@firebase/util":142}],47:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ The collection to "listen" to.
 * @constructor
 */
var StatsListener = /** @class */ (function () {
    function StatsListener(collection_) {
        this.collection_ = collection_;
        this.last_ = null;
    }
    StatsListener.prototype.get = function () {
        var newStats = this.collection_.get();
        var delta = util_1.clone(newStats);
        if (this.last_) {
            util_1.forEach(this.last_, function (stat, value) {
                delta[stat] = delta[stat] - value;
            });
        }
        this.last_ = newStats;
        return delta;
    };
    return StatsListener;
}());
exports.StatsListener = StatsListener;



},{"@firebase/util":142}],48:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var StatsCollection_1 = require("./StatsCollection");
var StatsManager = /** @class */ (function () {
    function StatsManager() {
    }
    StatsManager.getCollection = function (repoInfo) {
        var hashString = repoInfo.toString();
        if (!this.collections_[hashString]) {
            this.collections_[hashString] = new StatsCollection_1.StatsCollection();
        }
        return this.collections_[hashString];
    };
    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {
        var hashString = repoInfo.toString();
        if (!this.reporters_[hashString]) {
            this.reporters_[hashString] = creatorFunction();
        }
        return this.reporters_[hashString];
    };
    StatsManager.collections_ = {};
    StatsManager.reporters_ = {};
    return StatsManager;
}());
exports.StatsManager = StatsManager;



},{"./StatsCollection":46}],49:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var StatsListener_1 = require("./StatsListener");
// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
var FIRST_STATS_MIN_TIME = 10 * 1000;
var FIRST_STATS_MAX_TIME = 30 * 1000;
// We'll continue to report stats on average every 5 minutes.
var REPORT_STATS_INTERVAL = 5 * 60 * 1000;
/**
 * @constructor
 */
var StatsReporter = /** @class */ (function () {
    /**
     * @param collection
     * @param server_
     */
    function StatsReporter(collection, server_) {
        this.server_ = server_;
        this.statsToReport_ = {};
        this.statsListener_ = new StatsListener_1.StatsListener(collection);
        var timeout = FIRST_STATS_MIN_TIME +
            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
    }
    StatsReporter.prototype.includeStat = function (stat) {
        this.statsToReport_[stat] = true;
    };
    StatsReporter.prototype.reportStats_ = function () {
        var _this = this;
        var stats = this.statsListener_.get();
        var reportedStats = {};
        var haveStatsToReport = false;
        util_1.forEach(stats, function (stat, value) {
            if (value > 0 && util_1.contains(_this.statsToReport_, stat)) {
                reportedStats[stat] = value;
                haveStatsToReport = true;
            }
        });
        if (haveStatsToReport) {
            this.server_.reportStats(reportedStats);
        }
        // queue our next run.
        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
    };
    return StatsReporter;
}());
exports.StatsReporter = StatsReporter;



},{"../util/util":64,"./StatsListener":47,"@firebase/util":142}],50:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 * @constructor
 */
var DOMStorageWrapper = /** @class */ (function () {
    /**
     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)
     */
    function DOMStorageWrapper(domStorage_) {
        this.domStorage_ = domStorage_;
        // Use a prefix to avoid collisions with other stuff saved by the app.
        this.prefix_ = 'firebase:';
    }
    /**
     * @param {string} key The key to save the value under
     * @param {?Object} value The value being stored, or null to remove the key.
     */
    DOMStorageWrapper.prototype.set = function (key, value) {
        if (value == null) {
            this.domStorage_.removeItem(this.prefixedName_(key));
        }
        else {
            this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));
        }
    };
    /**
     * @param {string} key
     * @return {*} The value that was stored under this key, or null
     */
    DOMStorageWrapper.prototype.get = function (key) {
        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) {
            return null;
        }
        else {
            return util_1.jsonEval(storedVal);
        }
    };
    /**
     * @param {string} key
     */
    DOMStorageWrapper.prototype.remove = function (key) {
        this.domStorage_.removeItem(this.prefixedName_(key));
    };
    /**
     * @param {string} name
     * @return {string}
     */
    DOMStorageWrapper.prototype.prefixedName_ = function (name) {
        return this.prefix_ + name;
    };
    DOMStorageWrapper.prototype.toString = function () {
        return this.domStorage_.toString();
    };
    return DOMStorageWrapper;
}());
exports.DOMStorageWrapper = DOMStorageWrapper;



},{"@firebase/util":142}],51:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 *
 * @constructor
 */
var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.cache_ = {};
        this.isInMemoryStorage = true;
    }
    MemoryStorage.prototype.set = function (key, value) {
        if (value == null) {
            delete this.cache_[key];
        }
        else {
            this.cache_[key] = value;
        }
    };
    MemoryStorage.prototype.get = function (key) {
        if (util_1.contains(this.cache_, key)) {
            return this.cache_[key];
        }
        return null;
    };
    MemoryStorage.prototype.remove = function (key) {
        delete this.cache_[key];
    };
    return MemoryStorage;
}());
exports.MemoryStorage = MemoryStorage;



},{"@firebase/util":142}],52:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DOMStorageWrapper_1 = require("./DOMStorageWrapper");
var MemoryStorage_1 = require("./MemoryStorage");
/**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param {string} domStorageName Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @return {?} Turning off type information until a common interface is defined.
 */
var createStoragefor = function (domStorageName) {
    try {
        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
        // so it must be inside the try/catch.
        if (typeof window !== 'undefined' &&
            typeof window[domStorageName] !== 'undefined') {
            // Need to test cache. Just because it's here doesn't mean it works
            var domStorage = window[domStorageName];
            domStorage.setItem('firebase:sentinel', 'cache');
            domStorage.removeItem('firebase:sentinel');
            return new DOMStorageWrapper_1.DOMStorageWrapper(domStorage);
        }
    }
    catch (e) { }
    // Failed to create wrapper.  Just return in-memory storage.
    // TODO: log?
    return new MemoryStorage_1.MemoryStorage();
};
/** A storage object that lasts across sessions */
exports.PersistentStorage = createStoragefor('localStorage');
/** A storage object that only lasts one session */
exports.SessionStorage = createStoragefor('sessionStorage');



},{"./DOMStorageWrapper":50,"./MemoryStorage":51}],53:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Implements a set with a count of elements.
 *
 * @template K, V
 */
var CountedSet = /** @class */ (function () {
    function CountedSet() {
        this.set = {};
    }
    /**
     * @param {!K} item
     * @param {V} val
     */
    CountedSet.prototype.add = function (item, val) {
        this.set[item] = val !== null ? val : true;
    };
    /**
     * @param {!K} key
     * @return {boolean}
     */
    CountedSet.prototype.contains = function (key) {
        return util_1.contains(this.set, key);
    };
    /**
     * @param {!K} item
     * @return {V}
     */
    CountedSet.prototype.get = function (item) {
        return this.contains(item) ? this.set[item] : undefined;
    };
    /**
     * @param {!K} item
     */
    CountedSet.prototype.remove = function (item) {
        delete this.set[item];
    };
    /**
     * Deletes everything in the set
     */
    CountedSet.prototype.clear = function () {
        this.set = {};
    };
    /**
     * True if there's nothing in the set
     * @return {boolean}
     */
    CountedSet.prototype.isEmpty = function () {
        return util_1.isEmpty(this.set);
    };
    /**
     * @return {number} The number of items in the set
     */
    CountedSet.prototype.count = function () {
        return util_1.getCount(this.set);
    };
    /**
     * Run a function on each k,v pair in the set
     * @param {function(K, V)} fn
     */
    CountedSet.prototype.each = function (fn) {
        util_1.forEach(this.set, function (k, v) { return fn(k, v); });
    };
    /**
     * Mostly for debugging
     * @return {Array.<K>} The keys present in this CountedSet
     */
    CountedSet.prototype.keys = function () {
        var keys = [];
        util_1.forEach(this.set, function (k) {
            keys.push(k);
        });
        return keys;
    };
    return CountedSet;
}());
exports.CountedSet = CountedSet;



},{"@firebase/util":142}],54:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */
var EventEmitter = /** @class */ (function () {
    /**
     * @param {!Array.<string>} allowedEvents_
     */
    function EventEmitter(allowedEvents_) {
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {};
        util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
    }
    /**
     * To be called by derived classes to trigger events.
     * @param {!string} eventType
     * @param {...*} var_args
     */
    EventEmitter.prototype.trigger = function (eventType) {
        var var_args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            var_args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(this.listeners_[eventType])) {
            // Clone the list, since callbacks could add/remove listeners.
            var listeners = this.listeners_[eventType].slice();
            for (var i = 0; i < listeners.length; i++) {
                listeners[i].callback.apply(listeners[i].context, var_args);
            }
        }
    };
    EventEmitter.prototype.on = function (eventType, callback, context) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({ callback: callback, context: context });
        var eventData = this.getInitialEvent(eventType);
        if (eventData) {
            callback.apply(context, eventData);
        }
    };
    EventEmitter.prototype.off = function (eventType, callback, context) {
        this.validateEventType_(eventType);
        var listeners = this.listeners_[eventType] || [];
        for (var i = 0; i < listeners.length; i++) {
            if (listeners[i].callback === callback &&
                (!context || context === listeners[i].context)) {
                listeners.splice(i, 1);
                return;
            }
        }
    };
    EventEmitter.prototype.validateEventType_ = function (eventType) {
        util_1.assert(this.allowedEvents_.find(function (et) {
            return et === eventType;
        }), 'Unknown event: ' + eventType);
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;



},{"@firebase/util":142}],55:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SortedMap_1 = require("./SortedMap");
var Path_1 = require("./Path");
var util_1 = require("./util");
var util_2 = require("@firebase/util");
var emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 * @const
 * @type {!SortedMap.<string, !ImmutableTree.<?>>}
 */
var EmptyChildren = function () {
    if (!emptyChildrenSingleton) {
        emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);
    }
    return emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */
var ImmutableTree = /** @class */ (function () {
    /**
     * @template T
     * @param {?T} value
     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children
     */
    function ImmutableTree(value, children) {
        if (children === void 0) { children = EmptyChildren(); }
        this.value = value;
        this.children = children;
    }
    /**
     * @template T
     * @param {!Object.<string, !T>} obj
     * @return {!ImmutableTree.<!T>}
     */
    ImmutableTree.fromObject = function (obj) {
        var tree = ImmutableTree.Empty;
        util_2.forEach(obj, function (childPath, childSnap) {
            tree = tree.set(new Path_1.Path(childPath), childSnap);
        });
        return tree;
    };
    /**
     * True if the value is empty and there are no children
     * @return {boolean}
     */
    ImmutableTree.prototype.isEmpty = function () {
        return this.value === null && this.children.isEmpty();
    };
    /**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects
     * on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param {!Path} relativePath The remainder of the path
     * @param {function(T):boolean} predicate The predicate to satisfy to return a
     *   node
     * @return {?{path:!Path, value:!T}}
     */
    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {
        if (this.value != null && predicate(this.value)) {
            return { path: Path_1.Path.Empty, value: this.value };
        }
        else {
            if (relativePath.isEmpty()) {
                return null;
            }
            else {
                var front = relativePath.getFront();
                var child = this.children.get(front);
                if (child !== null) {
                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);
                    if (childExistingPathAndValue != null) {
                        var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);
                        return { path: fullPath, value: childExistingPathAndValue.value };
                    }
                    else {
                        return null;
                    }
                }
                else {
                    return null;
                }
            }
        }
    };
    /**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     * @param {!Path} relativePath
     * @return {?{path: !Path, value: !T}}
     */
    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });
    };
    /**
     * @param {!Path} relativePath
     * @return {!ImmutableTree.<T>} The subtree at the given path
     */
    ImmutableTree.prototype.subtree = function (relativePath) {
        if (relativePath.isEmpty()) {
            return this;
        }
        else {
            var front = relativePath.getFront();
            var childTree = this.children.get(front);
            if (childTree !== null) {
                return childTree.subtree(relativePath.popFront());
            }
            else {
                return ImmutableTree.Empty;
            }
        }
    };
    /**
     * Sets a value at the specified path.
     *
     * @param {!Path} relativePath Path to set value at.
     * @param {?T} toSet Value to set.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */
    ImmutableTree.prototype.set = function (relativePath, toSet) {
        if (relativePath.isEmpty()) {
            return new ImmutableTree(toSet, this.children);
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front) || ImmutableTree.Empty;
            var newChild = child.set(relativePath.popFront(), toSet);
            var newChildren = this.children.insert(front, newChild);
            return new ImmutableTree(this.value, newChildren);
        }
    };
    /**
     * Removes the value at the specified path.
     *
     * @param {!Path} relativePath Path to value to remove.
     * @return {!ImmutableTree.<T>} Resulting tree.
     */
    ImmutableTree.prototype.remove = function (relativePath) {
        if (relativePath.isEmpty()) {
            if (this.children.isEmpty()) {
                return ImmutableTree.Empty;
            }
            else {
                return new ImmutableTree(null, this.children);
            }
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front);
            if (child) {
                var newChild = child.remove(relativePath.popFront());
                var newChildren = void 0;
                if (newChild.isEmpty()) {
                    newChildren = this.children.remove(front);
                }
                else {
                    newChildren = this.children.insert(front, newChild);
                }
                if (this.value === null && newChildren.isEmpty()) {
                    return ImmutableTree.Empty;
                }
                else {
                    return new ImmutableTree(this.value, newChildren);
                }
            }
            else {
                return this;
            }
        }
    };
    /**
     * Gets a value from the tree.
     *
     * @param {!Path} relativePath Path to get value for.
     * @return {?T} Value at path, or null.
     */
    ImmutableTree.prototype.get = function (relativePath) {
        if (relativePath.isEmpty()) {
            return this.value;
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front);
            if (child) {
                return child.get(relativePath.popFront());
            }
            else {
                return null;
            }
        }
    };
    /**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param {!Path} relativePath Path to replace subtree for.
     * @param {!ImmutableTree} newTree New tree.
     * @return {!ImmutableTree} Resulting tree.
     */
    ImmutableTree.prototype.setTree = function (relativePath, newTree) {
        if (relativePath.isEmpty()) {
            return newTree;
        }
        else {
            var front = relativePath.getFront();
            var child = this.children.get(front) || ImmutableTree.Empty;
            var newChild = child.setTree(relativePath.popFront(), newTree);
            var newChildren = void 0;
            if (newChild.isEmpty()) {
                newChildren = this.children.remove(front);
            }
            else {
                newChildren = this.children.insert(front, newChild);
            }
            return new ImmutableTree(this.value, newChildren);
        }
    };
    /**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     * @template V
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     */
    ImmutableTree.prototype.fold = function (fn) {
        return this.fold_(Path_1.Path.Empty, fn);
    };
    /**
     * Recursive helper for public-facing fold() method
     * @template V
     * @param {!Path} pathSoFar
     * @param {function(Path, ?T, Object.<string, V>):V} fn
     * @return {V}
     * @private
     */
    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {
        var accum = {};
        this.children.inorderTraversal(function (childKey, childTree) {
            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);
        });
        return fn(pathSoFar, this.value, accum);
    };
    /**
     * Find the first matching value on the given path. Return the result of applying f to it.
     * @template V
     * @param {!Path} path
     * @param {!function(!Path, !T):?V} f
     * @return {?V}
     */
    ImmutableTree.prototype.findOnPath = function (path, f) {
        return this.findOnPath_(path, Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {
        var result = this.value ? f(pathSoFar, this.value) : false;
        if (result) {
            return result;
        }
        else {
            if (pathToFollow.isEmpty()) {
                return null;
            }
            else {
                var front = pathToFollow.getFront();
                var nextChild = this.children.get(front);
                if (nextChild) {
                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);
                }
                else {
                    return null;
                }
            }
        }
    };
    /**
     *
     * @param {!Path} path
     * @param {!function(!Path, !T)} f
     * @returns {!ImmutableTree.<T>}
     */
    ImmutableTree.prototype.foreachOnPath = function (path, f) {
        return this.foreachOnPath_(path, Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {
        if (pathToFollow.isEmpty()) {
            return this;
        }
        else {
            if (this.value) {
                f(currentRelativePath, this.value);
            }
            var front = pathToFollow.getFront();
            var nextChild = this.children.get(front);
            if (nextChild) {
                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);
            }
            else {
                return ImmutableTree.Empty;
            }
        }
    };
    /**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param {function(!Path, !T)} f A function to be called with
     *   the path from the root of the tree to a node, and the value at that node.
     *   Called in depth-first order.
     */
    ImmutableTree.prototype.foreach = function (f) {
        this.foreach_(Path_1.Path.Empty, f);
    };
    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {
        this.children.inorderTraversal(function (childName, childTree) {
            childTree.foreach_(currentRelativePath.child(childName), f);
        });
        if (this.value) {
            f(currentRelativePath, this.value);
        }
    };
    /**
     *
     * @param {function(string, !T)} f
     */
    ImmutableTree.prototype.foreachChild = function (f) {
        this.children.inorderTraversal(function (childName, childTree) {
            if (childTree.value) {
                f(childName, childTree.value);
            }
        });
    };
    ImmutableTree.Empty = new ImmutableTree(null);
    return ImmutableTree;
}());
exports.ImmutableTree = ImmutableTree;



},{"./Path":58,"./SortedMap":60,"./util":64,"@firebase/util":142}],56:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */
exports.nextPushId = (function () {
    // Modeled after base64 web-safe chars, but ordered by ASCII.
    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
    // Timestamp of last push, used to prevent local collisions if you push twice
    // in one ms.
    var lastPushTime = 0;
    // We generate 72-bits of randomness which get turned into 12 characters and
    // appended to the timestamp to prevent collisions with other clients. We
    // store the last characters we generated because in the event of a collision,
    // we'll use those same characters except "incremented" by one.
    var lastRandChars = [];
    return function (now) {
        var duplicateTime = now === lastPushTime;
        lastPushTime = now;
        var i;
        var timeStampChars = new Array(8);
        for (i = 7; i >= 0; i--) {
            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
            // NOTE: Can't use << here because javascript will convert to int and lose
            // the upper bits.
            now = Math.floor(now / 64);
        }
        util_1.assert(now === 0, 'Cannot push at time == 0');
        var id = timeStampChars.join('');
        if (!duplicateTime) {
            for (i = 0; i < 12; i++) {
                lastRandChars[i] = Math.floor(Math.random() * 64);
            }
        }
        else {
            // If the timestamp hasn't changed since last push, use the same random
            // number, except incremented by 1.
            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
                lastRandChars[i] = 0;
            }
            lastRandChars[i]++;
        }
        for (i = 0; i < 12; i++) {
            id += PUSH_CHARS.charAt(lastRandChars[i]);
        }
        util_1.assert(id.length === 20, 'nextPushId: Length should be 20.');
        return id;
    };
})();



},{"@firebase/util":142}],57:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@firebase/util");
var EventEmitter_1 = require("./EventEmitter");
var util_2 = require("@firebase/util");
/**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 *
 * @extends {EventEmitter}
 */
var OnlineMonitor = /** @class */ (function (_super) {
    tslib_1.__extends(OnlineMonitor, _super);
    function OnlineMonitor() {
        var _this = _super.call(this, ['online']) || this;
        _this.online_ = true;
        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
        // It would seem that the 'online' event does not always fire consistently. So we disable it
        // for Cordova.
        if (typeof window !== 'undefined' &&
            typeof window.addEventListener !== 'undefined' &&
            !util_2.isMobileCordova()) {
            window.addEventListener('online', function () {
                if (!_this.online_) {
                    _this.online_ = true;
                    _this.trigger('online', true);
                }
            }, false);
            window.addEventListener('offline', function () {
                if (_this.online_) {
                    _this.online_ = false;
                    _this.trigger('online', false);
                }
            }, false);
        }
        return _this;
    }
    OnlineMonitor.getInstance = function () {
        return new OnlineMonitor();
    };
    /**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */
    OnlineMonitor.prototype.getInitialEvent = function (eventType) {
        util_1.assert(eventType === 'online', 'Unknown event type: ' + eventType);
        return [this.online_];
    };
    /**
     * @return {boolean}
     */
    OnlineMonitor.prototype.currentlyOnline = function () {
        return this.online_;
    };
    return OnlineMonitor;
}(EventEmitter_1.EventEmitter));
exports.OnlineMonitor = OnlineMonitor;



},{"./EventEmitter":54,"@firebase/util":142,"tslib":176}],58:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var util_2 = require("@firebase/util");
/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */
var Path = /** @class */ (function () {
    /**
     * @param {string|Array.<string>} pathOrString Path string to parse,
     *      or another path, or the raw tokens array
     * @param {number=} pieceNum
     */
    function Path(pathOrString, pieceNum) {
        if (pieceNum === void 0) {
            this.pieces_ = pathOrString.split('/');
            // Remove empty pieces.
            var copyTo = 0;
            for (var i = 0; i < this.pieces_.length; i++) {
                if (this.pieces_[i].length > 0) {
                    this.pieces_[copyTo] = this.pieces_[i];
                    copyTo++;
                }
            }
            this.pieces_.length = copyTo;
            this.pieceNum_ = 0;
        }
        else {
            this.pieces_ = pathOrString;
            this.pieceNum_ = pieceNum;
        }
    }
    Object.defineProperty(Path, "Empty", {
        /**
         * Singleton to represent an empty path
         *
         * @const
         */
        get: function () {
            return new Path('');
        },
        enumerable: true,
        configurable: true
    });
    Path.prototype.getFront = function () {
        if (this.pieceNum_ >= this.pieces_.length)
            return null;
        return this.pieces_[this.pieceNum_];
    };
    /**
     * @return {number} The number of segments in this path
     */
    Path.prototype.getLength = function () {
        return this.pieces_.length - this.pieceNum_;
    };
    /**
     * @return {!Path}
     */
    Path.prototype.popFront = function () {
        var pieceNum = this.pieceNum_;
        if (pieceNum < this.pieces_.length) {
            pieceNum++;
        }
        return new Path(this.pieces_, pieceNum);
    };
    /**
     * @return {?string}
     */
    Path.prototype.getBack = function () {
        if (this.pieceNum_ < this.pieces_.length)
            return this.pieces_[this.pieces_.length - 1];
        return null;
    };
    Path.prototype.toString = function () {
        var pathString = '';
        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
            if (this.pieces_[i] !== '')
                pathString += '/' + this.pieces_[i];
        }
        return pathString || '/';
    };
    Path.prototype.toUrlEncodedString = function () {
        var pathString = '';
        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
            if (this.pieces_[i] !== '')
                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));
        }
        return pathString || '/';
    };
    /**
     * Shallow copy of the parts of the path.
     *
     * @param {number=} begin
     * @return {!Array<string>}
     */
    Path.prototype.slice = function (begin) {
        if (begin === void 0) { begin = 0; }
        return this.pieces_.slice(this.pieceNum_ + begin);
    };
    /**
     * @return {?Path}
     */
    Path.prototype.parent = function () {
        if (this.pieceNum_ >= this.pieces_.length)
            return null;
        var pieces = [];
        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)
            pieces.push(this.pieces_[i]);
        return new Path(pieces, 0);
    };
    /**
     * @param {string|!Path} childPathObj
     * @return {!Path}
     */
    Path.prototype.child = function (childPathObj) {
        var pieces = [];
        for (var i = this.pieceNum_; i < this.pieces_.length; i++)
            pieces.push(this.pieces_[i]);
        if (childPathObj instanceof Path) {
            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
                pieces.push(childPathObj.pieces_[i]);
            }
        }
        else {
            var childPieces = childPathObj.split('/');
            for (var i = 0; i < childPieces.length; i++) {
                if (childPieces[i].length > 0)
                    pieces.push(childPieces[i]);
            }
        }
        return new Path(pieces, 0);
    };
    /**
     * @return {boolean} True if there are no segments in this path
     */
    Path.prototype.isEmpty = function () {
        return this.pieceNum_ >= this.pieces_.length;
    };
    /**
     * @param {!Path} outerPath
     * @param {!Path} innerPath
     * @return {!Path} The path from outerPath to innerPath
     */
    Path.relativePath = function (outerPath, innerPath) {
        var outer = outerPath.getFront(), inner = innerPath.getFront();
        if (outer === null) {
            return innerPath;
        }
        else if (outer === inner) {
            return Path.relativePath(outerPath.popFront(), innerPath.popFront());
        }
        else {
            throw new Error('INTERNAL ERROR: innerPath (' +
                innerPath +
                ') is not within ' +
                'outerPath (' +
                outerPath +
                ')');
        }
    };
    /**
     * @param {!Path} left
     * @param {!Path} right
     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.
     */
    Path.comparePaths = function (left, right) {
        var leftKeys = left.slice();
        var rightKeys = right.slice();
        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
            var cmp = util_1.nameCompare(leftKeys[i], rightKeys[i]);
            if (cmp !== 0)
                return cmp;
        }
        if (leftKeys.length === rightKeys.length)
            return 0;
        return leftKeys.length < rightKeys.length ? -1 : 1;
    };
    /**
     *
     * @param {Path} other
     * @return {boolean} true if paths are the same.
     */
    Path.prototype.equals = function (other) {
        if (this.getLength() !== other.getLength()) {
            return false;
        }
        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {
            if (this.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
        }
        return true;
    };
    /**
     *
     * @param {!Path} other
     * @return {boolean} True if this path is a parent (or the same as) other
     */
    Path.prototype.contains = function (other) {
        var i = this.pieceNum_;
        var j = other.pieceNum_;
        if (this.getLength() > other.getLength()) {
            return false;
        }
        while (i < this.pieces_.length) {
            if (this.pieces_[i] !== other.pieces_[j]) {
                return false;
            }
            ++i;
            ++j;
        }
        return true;
    };
    return Path;
}()); // end Path
exports.Path = Path;
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */
var ValidationPath = /** @class */ (function () {
    /**
     * @param {!Path} path Initial Path.
     * @param {string} errorPrefix_ Prefix for any error messages.
     */
    function ValidationPath(path, errorPrefix_) {
        this.errorPrefix_ = errorPrefix_;
        /** @type {!Array<string>} */
        this.parts_ = path.slice();
        /** @type {number} Initialize to number of '/' chars needed in path. */
        this.byteLength_ = Math.max(1, this.parts_.length);
        for (var i = 0; i < this.parts_.length; i++) {
            this.byteLength_ += util_2.stringLength(this.parts_[i]);
        }
        this.checkValid_();
    }
    Object.defineProperty(ValidationPath, "MAX_PATH_DEPTH", {
        /** @const {number} Maximum key depth. */
        get: function () {
            return 32;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationPath, "MAX_PATH_LENGTH_BYTES", {
        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */
        get: function () {
            return 768;
        },
        enumerable: true,
        configurable: true
    });
    /** @param {string} child */
    ValidationPath.prototype.push = function (child) {
        // Count the needed '/'
        if (this.parts_.length > 0) {
            this.byteLength_ += 1;
        }
        this.parts_.push(child);
        this.byteLength_ += util_2.stringLength(child);
        this.checkValid_();
    };
    ValidationPath.prototype.pop = function () {
        var last = this.parts_.pop();
        this.byteLength_ -= util_2.stringLength(last);
        // Un-count the previous '/'
        if (this.parts_.length > 0) {
            this.byteLength_ -= 1;
        }
    };
    ValidationPath.prototype.checkValid_ = function () {
        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {
            throw new Error(this.errorPrefix_ +
                'has a key path longer than ' +
                ValidationPath.MAX_PATH_LENGTH_BYTES +
                ' bytes (' +
                this.byteLength_ +
                ').');
        }
        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {
            throw new Error(this.errorPrefix_ +
                'path specified exceeds the maximum depth that can be written (' +
                ValidationPath.MAX_PATH_DEPTH +
                ') or object contains a cycle ' +
                this.toErrorString());
        }
    };
    /**
     * String for use in error messages - uses '.' notation for path.
     *
     * @return {string}
     */
    ValidationPath.prototype.toErrorString = function () {
        if (this.parts_.length == 0) {
            return '';
        }
        return "in property '" + this.parts_.join('.') + "'";
    };
    return ValidationPath;
}());
exports.ValidationPath = ValidationPath;



},{"./util":64,"@firebase/util":142}],59:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Path_1 = require("./Path");
var SparseSnapshotTree_1 = require("../SparseSnapshotTree");
var LeafNode_1 = require("../snap/LeafNode");
var nodeFromJSON_1 = require("../snap/nodeFromJSON");
var PriorityIndex_1 = require("../snap/indexes/PriorityIndex");
/**
 * Generate placeholders for deferred values.
 * @param {?Object} values
 * @return {!Object}
 */
exports.generateWithValues = function (values) {
    values = values || {};
    values['timestamp'] = values['timestamp'] || new Date().getTime();
    return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 * @param {(Object|string|number|boolean)} value
 * @param {!Object} serverValues
 * @return {!(string|number|boolean)}
 */
exports.resolveDeferredValue = function (value, serverValues) {
    if (!value || typeof value !== 'object') {
        return value;
    }
    else {
        util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');
        return serverValues[value['.sv']];
    }
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param {!SparseSnapshotTree} tree
 * @param {!Object} serverValues
 * @return {!SparseSnapshotTree}
 */
exports.resolveDeferredValueTree = function (tree, serverValues) {
    var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();
    tree.forEachTree(new Path_1.Path(''), function (path, node) {
        resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));
    });
    return resolvedTree;
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 * @param {!Node} node
 * @param {!Object} serverValues
 * @return {!Node}
 */
exports.resolveDeferredValueSnapshot = function (node, serverValues) {
    var rawPri = node.getPriority().val();
    var priority = exports.resolveDeferredValue(rawPri, serverValues);
    var newNode;
    if (node.isLeafNode()) {
        var leafNode = node;
        var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);
        if (value !== leafNode.getValue() ||
            priority !== leafNode.getPriority().val()) {
            return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));
        }
        else {
            return node;
        }
    }
    else {
        var childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) {
            newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));
        }
        childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {
            var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);
            if (newChildNode !== childNode) {
                newNode = newNode.updateImmediateChild(childName, newChildNode);
            }
        });
        return newNode;
    }
};



},{"../SparseSnapshotTree":24,"../snap/LeafNode":35,"../snap/indexes/PriorityIndex":42,"../snap/nodeFromJSON":44,"./Path":58,"@firebase/util":142}],60:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An iterator over an LLRBNode.
 */
var SortedMapIterator = /** @class */ (function () {
    /**
     * @template K, V, T
     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.
     * @param {?K} startKey
     * @param {function(K, K): number} comparator
     * @param {boolean} isReverse_ Whether or not to iterate in reverse
     * @param {(function(K, V):T)=} resultGenerator_
     */
    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
        if (resultGenerator_ === void 0) { resultGenerator_ = null; }
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        /** @private
         * @type {Array.<!LLRBNode>}
         */
        this.nodeStack_ = [];
        var cmp = 1;
        while (!node.isEmpty()) {
            node = node;
            cmp = startKey ? comparator(node.key, startKey) : 1;
            // flip the comparison if we're going in reverse
            if (isReverse_)
                cmp *= -1;
            if (cmp < 0) {
                // This node is less than our start key. ignore it
                if (this.isReverse_) {
                    node = node.left;
                }
                else {
                    node = node.right;
                }
            }
            else if (cmp === 0) {
                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                this.nodeStack_.push(node);
                break;
            }
            else {
                // This node is greater than our start key, add it to the stack and move to the next one
                this.nodeStack_.push(node);
                if (this.isReverse_) {
                    node = node.right;
                }
                else {
                    node = node.left;
                }
            }
        }
    }
    SortedMapIterator.prototype.getNext = function () {
        if (this.nodeStack_.length === 0)
            return null;
        var node = this.nodeStack_.pop();
        var result;
        if (this.resultGenerator_)
            result = this.resultGenerator_(node.key, node.value);
        else
            result = { key: node.key, value: node.value };
        if (this.isReverse_) {
            node = node.left;
            while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.right;
            }
        }
        else {
            node = node.right;
            while (!node.isEmpty()) {
                this.nodeStack_.push(node);
                node = node.left;
            }
        }
        return result;
    };
    SortedMapIterator.prototype.hasNext = function () {
        return this.nodeStack_.length > 0;
    };
    SortedMapIterator.prototype.peek = function () {
        if (this.nodeStack_.length === 0)
            return null;
        var node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) {
            return this.resultGenerator_(node.key, node.value);
        }
        else {
            return { key: node.key, value: node.value };
        }
    };
    return SortedMapIterator;
}());
exports.SortedMapIterator = SortedMapIterator;
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */
var LLRBNode = /** @class */ (function () {
    /**
     * @template K, V
     * @param {!K} key Key associated with this node.
     * @param {!V} value Value associated with this node.
     * @param {?boolean} color Whether this node is red.
     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.
     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.
     */
    function LLRBNode(key, value, color, left, right) {
        this.key = key;
        this.value = value;
        this.color = color != null ? color : LLRBNode.RED;
        this.left =
            left != null ? left : SortedMap.EMPTY_NODE;
        this.right =
            right != null ? right : SortedMap.EMPTY_NODE;
    }
    /**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param {?K} key New key for the node, or null.
     * @param {?V} value New value for the node, or null.
     * @param {?boolean} color New color for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.
     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.
     * @return {!LLRBNode} The node copy.
     */
    LLRBNode.prototype.copy = function (key, value, color, left, right) {
        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
    };
    /**
     * @return {number} The total number of nodes in the tree.
     */
    LLRBNode.prototype.count = function () {
        return this.left.count() + 1 + this.right.count();
    };
    /**
     * @return {boolean} True if the tree is empty.
     */
    LLRBNode.prototype.isEmpty = function () {
        return false;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */
    LLRBNode.prototype.inorderTraversal = function (action) {
        return (this.left.inorderTraversal(action) ||
            action(this.key, this.value) ||
            this.right.inorderTraversal(action));
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!Object, !Object)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {*} True if traversal was aborted.
     */
    LLRBNode.prototype.reverseTraversal = function (action) {
        return (this.right.reverseTraversal(action) ||
            action(this.key, this.value) ||
            this.left.reverseTraversal(action));
    };
    /**
     * @return {!Object} The minimum node in the tree.
     * @private
     */
    LLRBNode.prototype.min_ = function () {
        if (this.left.isEmpty()) {
            return this;
        }
        else {
            return this.left.min_();
        }
    };
    /**
     * @return {!K} The maximum key in the tree.
     */
    LLRBNode.prototype.minKey = function () {
        return this.min_().key;
    };
    /**
     * @return {!K} The maximum key in the tree.
     */
    LLRBNode.prototype.maxKey = function () {
        if (this.right.isEmpty()) {
            return this.key;
        }
        else {
            return this.right.maxKey();
        }
    };
    /**
     *
     * @param {!Object} key Key to insert.
     * @param {!Object} value Value to insert.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with the key/value added.
     */
    LLRBNode.prototype.insert = function (key, value, comparator) {
        var cmp, n;
        n = this;
        cmp = comparator(key, n.key);
        if (cmp < 0) {
            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
        }
        else if (cmp === 0) {
            n = n.copy(null, value, null, null, null);
        }
        else {
            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
        }
        return n.fixUp_();
    };
    /**
     * @private
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.
     */
    LLRBNode.prototype.removeMin_ = function () {
        if (this.left.isEmpty()) {
            return SortedMap.EMPTY_NODE;
        }
        var n = this;
        if (!n.left.isRed_() && !n.left.left.isRed_())
            n = n.moveRedLeft_();
        n = n.copy(null, null, null, n.left.removeMin_(), null);
        return n.fixUp_();
    };
    /**
     * @param {!Object} key The key of the item to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.
     */
    LLRBNode.prototype.remove = function (key, comparator) {
        var n, smallest;
        n = this;
        if (comparator(key, n.key) < 0) {
            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                n = n.moveRedLeft_();
            }
            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
        }
        else {
            if (n.left.isRed_())
                n = n.rotateRight_();
            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                n = n.moveRedRight_();
            }
            if (comparator(key, n.key) === 0) {
                if (n.right.isEmpty()) {
                    return SortedMap.EMPTY_NODE;
                }
                else {
                    smallest = n.right.min_();
                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                }
            }
            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
        }
        return n.fixUp_();
    };
    /**
     * @private
     * @return {boolean} Whether this is a RED node.
     */
    LLRBNode.prototype.isRed_ = function () {
        return this.color;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree after performing any needed rotations.
     */
    LLRBNode.prototype.fixUp_ = function () {
        var n = this;
        if (n.right.isRed_() && !n.left.isRed_())
            n = n.rotateLeft_();
        if (n.left.isRed_() && n.left.left.isRed_())
            n = n.rotateRight_();
        if (n.left.isRed_() && n.right.isRed_())
            n = n.colorFlip_();
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after moveRedLeft.
     */
    LLRBNode.prototype.moveRedLeft_ = function () {
        var n = this.colorFlip_();
        if (n.right.left.isRed_()) {
            n = n.copy(null, null, null, null, n.right.rotateRight_());
            n = n.rotateLeft_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after moveRedRight.
     */
    LLRBNode.prototype.moveRedRight_ = function () {
        var n = this.colorFlip_();
        if (n.left.left.isRed_()) {
            n = n.rotateRight_();
            n = n.colorFlip_();
        }
        return n;
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after rotateLeft.
     */
    LLRBNode.prototype.rotateLeft_ = function () {
        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after rotateRight.
     */
    LLRBNode.prototype.rotateRight_ = function () {
        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
    };
    /**
     * @private
     * @return {!LLRBNode} New tree, after colorFlip.
     */
    LLRBNode.prototype.colorFlip_ = function () {
        var left = this.left.copy(null, null, !this.left.color, null, null);
        var right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
    };
    /**
     * For testing.
     *
     * @private
     * @return {boolean} True if all is well.
     */
    LLRBNode.prototype.checkMaxDepth_ = function () {
        var blackDepth = this.check_();
        return Math.pow(2.0, blackDepth) <= this.count() + 1;
    };
    /**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */
    LLRBNode.prototype.check_ = function () {
        var blackDepth;
        if (this.isRed_() && this.left.isRed_()) {
            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
        }
        if (this.right.isRed_()) {
            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
        }
        blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) {
            throw new Error('Black depths differ');
        }
        else {
            return blackDepth + (this.isRed_() ? 0 : 1);
        }
    };
    LLRBNode.RED = true;
    LLRBNode.BLACK = false;
    return LLRBNode;
}());
exports.LLRBNode = LLRBNode;
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */
var LLRBEmptyNode = /** @class */ (function () {
    function LLRBEmptyNode() {
    }
    /**
     * Returns a copy of the current node.
     *
     * @return {!LLRBEmptyNode} The node copy.
     */
    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
        return this;
    };
    /**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBNode} New tree, with item added.
     */
    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
        return new LLRBNode(key, value, null);
    };
    /**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @param {Comparator} comparator Comparator.
     * @return {!LLRBEmptyNode} New tree, with item removed.
     */
    LLRBEmptyNode.prototype.remove = function (key, comparator) {
        return this;
    };
    /**
     * @return {number} The total number of nodes in the tree.
     */
    LLRBEmptyNode.prototype.count = function () {
        return 0;
    };
    /**
     * @return {boolean} True if the tree is empty.
     */
    LLRBEmptyNode.prototype.isEmpty = function () {
        return true;
    };
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V):*} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */
    LLRBEmptyNode.prototype.inorderTraversal = function (action) {
        return false;
    };
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param {function(!K, !V)} action Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @return {boolean} True if traversal was aborted.
     */
    LLRBEmptyNode.prototype.reverseTraversal = function (action) {
        return false;
    };
    /**
     * @return {null}
     */
    LLRBEmptyNode.prototype.minKey = function () {
        return null;
    };
    /**
     * @return {null}
     */
    LLRBEmptyNode.prototype.maxKey = function () {
        return null;
    };
    /**
     * @private
     * @return {number} Not sure what this returns exactly. :-).
     */
    LLRBEmptyNode.prototype.check_ = function () {
        return 0;
    };
    /**
     * @private
     * @return {boolean} Whether this node is red.
     */
    LLRBEmptyNode.prototype.isRed_ = function () {
        return false;
    };
    return LLRBEmptyNode;
}());
exports.LLRBEmptyNode = LLRBEmptyNode;
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */
var SortedMap = /** @class */ (function () {
    /**
     * @template K, V
     * @param {function(K, K):number} comparator_ Key comparator.
     * @param {LLRBNode=} root_ (Optional) Root node for the map.
     */
    function SortedMap(comparator_, root_) {
        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }
        this.comparator_ = comparator_;
        this.root_ = root_;
    }
    /**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param {!K} key Key to be added.
     * @param {!V} value Value to be added.
     * @return {!SortedMap.<K, V>} New map, with item added.
     */
    SortedMap.prototype.insert = function (key, value) {
        return new SortedMap(this.comparator_, this.root_
            .insert(key, value, this.comparator_)
            .copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param {!K} key The key to remove.
     * @return {!SortedMap.<K, V>} New map, with item removed.
     */
    SortedMap.prototype.remove = function (key) {
        return new SortedMap(this.comparator_, this.root_
            .remove(key, this.comparator_)
            .copy(null, null, LLRBNode.BLACK, null, null));
    };
    /**
     * Returns the value of the node with the given key, or null.
     *
     * @param {!K} key The key to look up.
     * @return {?V} The value of the node with the given key, or null if the
     * key doesn't exist.
     */
    SortedMap.prototype.get = function (key) {
        var cmp;
        var node = this.root_;
        while (!node.isEmpty()) {
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                return node.value;
            }
            else if (cmp < 0) {
                node = node.left;
            }
            else if (cmp > 0) {
                node = node.right;
            }
        }
        return null;
    };
    /**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param {K} key The key to find the predecessor of
     * @return {?K} The predecessor key.
     */
    SortedMap.prototype.getPredecessorKey = function (key) {
        var cmp, node = this.root_, rightParent = null;
        while (!node.isEmpty()) {
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                if (!node.left.isEmpty()) {
                    node = node.left;
                    while (!node.right.isEmpty())
                        node = node.right;
                    return node.key;
                }
                else if (rightParent) {
                    return rightParent.key;
                }
                else {
                    return null; // first item.
                }
            }
            else if (cmp < 0) {
                node = node.left;
            }
            else if (cmp > 0) {
                rightParent = node;
                node = node.right;
            }
        }
        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
    };
    /**
     * @return {boolean} True if the map is empty.
     */
    SortedMap.prototype.isEmpty = function () {
        return this.root_.isEmpty();
    };
    /**
     * @return {number} The total number of nodes in the map.
     */
    SortedMap.prototype.count = function () {
        return this.root_.count();
    };
    /**
     * @return {?K} The minimum key in the map.
     */
    SortedMap.prototype.minKey = function () {
        return this.root_.minKey();
    };
    /**
     * @return {?K} The maximum key in the map.
     */
    SortedMap.prototype.maxKey = function () {
        return this.root_.maxKey();
    };
    /**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!K, !V):*} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} The first truthy value returned by action, or the last falsey
     *   value returned by action
     */
    SortedMap.prototype.inorderTraversal = function (action) {
        return this.root_.inorderTraversal(action);
    };
    /**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param {function(!Object, !Object)} action Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @return {*} True if the traversal was aborted.
     */
    SortedMap.prototype.reverseTraversal = function (action) {
        return this.root_.reverseTraversal(action);
    };
    /**
     * Returns an iterator over the SortedMap.
     * @template T
     * @param {(function(K, V):T)=} resultGenerator
     * @return {SortedMapIterator.<K, V, T>} The iterator.
     */
    SortedMap.prototype.getIterator = function (resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
    };
    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
    };
    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
    };
    SortedMap.prototype.getReverseIterator = function (resultGenerator) {
        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
    };
    /**
     * Always use the same empty node, to reduce memory.
     * @const
     */
    SortedMap.EMPTY_NODE = new LLRBEmptyNode();
    return SortedMap;
}());
exports.SortedMap = SortedMap;



},{}],61:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Path_1 = require("./Path");
var util_2 = require("@firebase/util");
/**
 * Node in a Tree.
 */
var TreeNode = /** @class */ (function () {
    function TreeNode() {
        // TODO: Consider making accessors that create children and value lazily or
        // separate Internal / Leaf 'types'.
        this.children = {};
        this.childCount = 0;
        this.value = null;
    }
    return TreeNode;
}());
exports.TreeNode = TreeNode;
/**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */
var Tree = /** @class */ (function () {
    /**
     * @template T
     * @param {string=} name_ Optional name of the node.
     * @param {Tree=} parent_ Optional parent node.
     * @param {TreeNode=} node_ Optional node to wrap.
     */
    function Tree(name_, parent_, node_) {
        if (name_ === void 0) { name_ = ''; }
        if (parent_ === void 0) { parent_ = null; }
        if (node_ === void 0) { node_ = new TreeNode(); }
        this.name_ = name_;
        this.parent_ = parent_;
        this.node_ = node_;
    }
    /**
     * Returns a sub-Tree for the given path.
     *
     * @param {!(string|Path)} pathObj Path to look up.
     * @return {!Tree.<T>} Tree for path.
     */
    Tree.prototype.subTree = function (pathObj) {
        // TODO: Require pathObj to be Path?
        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);
        var child = this, next;
        while ((next = path.getFront()) !== null) {
            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();
            child = new Tree(next, child, childNode);
            path = path.popFront();
        }
        return child;
    };
    /**
     * Returns the data associated with this tree node.
     *
     * @return {?T} The data or null if no data exists.
     */
    Tree.prototype.getValue = function () {
        return this.node_.value;
    };
    /**
     * Sets data to this tree node.
     *
     * @param {!T} value Value to set.
     */
    Tree.prototype.setValue = function (value) {
        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');
        this.node_.value = value;
        this.updateParents_();
    };
    /**
     * Clears the contents of the tree node (its value and all children).
     */
    Tree.prototype.clear = function () {
        this.node_.value = null;
        this.node_.children = {};
        this.node_.childCount = 0;
        this.updateParents_();
    };
    /**
     * @return {boolean} Whether the tree has any children.
     */
    Tree.prototype.hasChildren = function () {
        return this.node_.childCount > 0;
    };
    /**
     * @return {boolean} Whether the tree is empty (no value or children).
     */
    Tree.prototype.isEmpty = function () {
        return this.getValue() === null && !this.hasChildren();
    };
    /**
     * Calls action for each child of this tree node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */
    Tree.prototype.forEachChild = function (action) {
        var _this = this;
        util_2.forEach(this.node_.children, function (child, childTree) {
            action(new Tree(child, _this, childTree));
        });
    };
    /**
     * Does a depth-first traversal of this node's descendants, calling action for each one.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to
     *   false.
     * @param {boolean=} childrenFirst Whether to call action on children before calling it on
     *   parent.
     */
    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {
        if (includeSelf && !childrenFirst)
            action(this);
        this.forEachChild(function (child) {
            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);
        });
        if (includeSelf && childrenFirst)
            action(this);
    };
    /**
     * Calls action on each ancestor node.
     *
     * @param {function(!Tree.<T>)} action Action to be called on each parent; return
     *   true to abort.
     * @param {boolean=} includeSelf Whether to call action on this node as well.
     * @return {boolean} true if the action callback returned true.
     */
    Tree.prototype.forEachAncestor = function (action, includeSelf) {
        var node = includeSelf ? this : this.parent();
        while (node !== null) {
            if (action(node)) {
                return true;
            }
            node = node.parent();
        }
        return false;
    };
    /**
     * Does a depth-first traversal of this node's descendants.  When a descendant with a value
     * is found, action is called on it and traversal does not continue inside the node.
     * Action is *not* called on this node.
     *
     * @param {function(!Tree.<T>)} action Action to be called for each child.
     */
    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {
        this.forEachChild(function (child) {
            if (child.getValue() !== null)
                action(child);
            else
                child.forEachImmediateDescendantWithValue(action);
        });
    };
    /**
     * @return {!Path} The path of this tree node, as a Path.
     */
    Tree.prototype.path = function () {
        return new Path_1.Path(this.parent_ === null
            ? this.name_
            : this.parent_.path() + '/' + this.name_);
    };
    /**
     * @return {string} The name of the tree node.
     */
    Tree.prototype.name = function () {
        return this.name_;
    };
    /**
     * @return {?Tree} The parent tree node, or null if this is the root of the tree.
     */
    Tree.prototype.parent = function () {
        return this.parent_;
    };
    /**
     * Adds or removes this child from its parent based on whether it's empty or not.
     *
     * @private
     */
    Tree.prototype.updateParents_ = function () {
        if (this.parent_ !== null)
            this.parent_.updateChild_(this.name_, this);
    };
    /**
     * Adds or removes the passed child to this tree node, depending on whether it's empty.
     *
     * @param {string} childName The name of the child to update.
     * @param {!Tree.<T>} child The child to update.
     * @private
     */
    Tree.prototype.updateChild_ = function (childName, child) {
        var childEmpty = child.isEmpty();
        var childExists = util_2.contains(this.node_.children, childName);
        if (childEmpty && childExists) {
            delete this.node_.children[childName];
            this.node_.childCount--;
            this.updateParents_();
        }
        else if (!childEmpty && !childExists) {
            this.node_.children[childName] = child.node_;
            this.node_.childCount++;
            this.updateParents_();
        }
    };
    return Tree;
}());
exports.Tree = Tree;



},{"./Path":58,"@firebase/util":142}],62:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var EventEmitter_1 = require("./EventEmitter");
var util_1 = require("@firebase/util");
/**
 * @extends {EventEmitter}
 */
var VisibilityMonitor = /** @class */ (function (_super) {
    tslib_1.__extends(VisibilityMonitor, _super);
    function VisibilityMonitor() {
        var _this = _super.call(this, ['visible']) || this;
        var hidden;
        var visibilityChange;
        if (typeof document !== 'undefined' &&
            typeof document.addEventListener !== 'undefined') {
            if (typeof document['hidden'] !== 'undefined') {
                // Opera 12.10 and Firefox 18 and later support
                visibilityChange = 'visibilitychange';
                hidden = 'hidden';
            }
            else if (typeof document['mozHidden'] !== 'undefined') {
                visibilityChange = 'mozvisibilitychange';
                hidden = 'mozHidden';
            }
            else if (typeof document['msHidden'] !== 'undefined') {
                visibilityChange = 'msvisibilitychange';
                hidden = 'msHidden';
            }
            else if (typeof document['webkitHidden'] !== 'undefined') {
                visibilityChange = 'webkitvisibilitychange';
                hidden = 'webkitHidden';
            }
        }
        // Initially, we always assume we are visible. This ensures that in browsers
        // without page visibility support or in cases where we are never visible
        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
        // reconnects
        _this.visible_ = true;
        if (visibilityChange) {
            document.addEventListener(visibilityChange, function () {
                var visible = !document[hidden];
                if (visible !== _this.visible_) {
                    _this.visible_ = visible;
                    _this.trigger('visible', visible);
                }
            }, false);
        }
        return _this;
    }
    VisibilityMonitor.getInstance = function () {
        return new VisibilityMonitor();
    };
    /**
     * @param {!string} eventType
     * @return {Array.<boolean>}
     */
    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {
        util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);
        return [this.visible_];
    };
    return VisibilityMonitor;
}(EventEmitter_1.EventEmitter));
exports.VisibilityMonitor = VisibilityMonitor;



},{"./EventEmitter":54,"@firebase/util":142,"tslib":176}],63:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = require("../Path");
var RepoInfo_1 = require("../../RepoInfo");
var util_1 = require("../util");
/**
 * @param {!string} pathString
 * @return {string}
 */
function decodePath(pathString) {
    var pathStringDecoded = '';
    var pieces = pathString.split('/');
    for (var i = 0; i < pieces.length; i++) {
        if (pieces[i].length > 0) {
            var piece = pieces[i];
            try {
                piece = decodeURIComponent(piece.replace(/\+/g, ' '));
            }
            catch (e) { }
            pathStringDecoded += '/' + piece;
        }
    }
    return pathStringDecoded;
}
/**
 * @param {!string} queryString
 * @return {!{[key:string]:string}} key value hash
 */
function decodeQuery(queryString) {
    var results = {};
    if (queryString.startsWith('?')) {
        queryString = queryString.substring(1);
    }
    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {
        var segment = _a[_i];
        if (segment.length === 0) {
            continue;
        }
        var kv = segment.split('=');
        if (kv.length === 2) {
            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
        }
        else {
            util_1.warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
        }
    }
    return results;
}
/**
 *
 * @param {!string} dataURL
 * @return {{repoInfo: !RepoInfo, path: !Path}}
 */
exports.parseRepoInfo = function (dataURL) {
    var parsedUrl = exports.parseURL(dataURL), namespace = parsedUrl.subdomain;
    if (parsedUrl.domain === 'firebase') {
        util_1.fatal(parsedUrl.host +
            ' is no longer supported. ' +
            'Please use <YOUR FIREBASE>.firebaseio.com instead');
    }
    // Catch common error of uninitialized namespace value.
    if ((!namespace || namespace == 'undefined') &&
        parsedUrl.domain !== 'localhost') {
        util_1.fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
    }
    if (!parsedUrl.secure) {
        util_1.warnIfPageIsSecure();
    }
    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
    return {
        repoInfo: new RepoInfo_1.RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),
        path: new Path_1.Path(parsedUrl.pathString)
    };
};
/**
 *
 * @param {!string} dataURL
 * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}
 */
exports.parseURL = function (dataURL) {
    // Default to empty strings in the event of a malformed string.
    var host = '', domain = '', subdomain = '', pathString = '';
    // Always default to SSL, unless otherwise specified.
    var secure = true, scheme = 'https', port = 443;
    // Don't do any validation here. The caller is responsible for validating the result of parsing.
    if (typeof dataURL === 'string') {
        // Parse scheme.
        var colonInd = dataURL.indexOf('//');
        if (colonInd >= 0) {
            scheme = dataURL.substring(0, colonInd - 1);
            dataURL = dataURL.substring(colonInd + 2);
        }
        // Parse host, path, and query string.
        var slashInd = dataURL.indexOf('/');
        if (slashInd === -1) {
            slashInd = dataURL.length;
        }
        var questionMarkInd = dataURL.indexOf('?');
        if (questionMarkInd === -1) {
            questionMarkInd = dataURL.length;
        }
        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
        if (slashInd < questionMarkInd) {
            // For pathString, questionMarkInd will always come after slashInd
            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
        }
        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
        // If we have a port, use scheme for determining if it's secure.
        colonInd = host.indexOf(':');
        if (colonInd >= 0) {
            secure = scheme === 'https' || scheme === 'wss';
            port = parseInt(host.substring(colonInd + 1), 10);
        }
        else {
            colonInd = dataURL.length;
        }
        var parts = host.split('.');
        if (parts.length === 3) {
            // Normalize namespaces to lowercase to share storage / connection.
            domain = parts[1];
            subdomain = parts[0].toLowerCase();
        }
        else if (parts.length === 2) {
            domain = parts[0];
        }
        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {
            domain = 'localhost';
        }
        // Support `ns` query param if subdomain not already set
        if (subdomain === '' && 'ns' in queryParams) {
            subdomain = queryParams['ns'];
        }
    }
    return {
        host: host,
        port: port,
        domain: domain,
        subdomain: subdomain,
        secure: secure,
        scheme: scheme,
        pathString: pathString
    };
};



},{"../../RepoInfo":19,"../Path":58,"../util":64}],64:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
var util_3 = require("@firebase/util");
var util_4 = require("@firebase/util");
var util_5 = require("@firebase/util");
var util_6 = require("@firebase/util");
var storage_1 = require("../storage/storage");
var util_7 = require("@firebase/util");
var logger_1 = require("@firebase/logger");
var logClient = new logger_1.Logger('@firebase/database');
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 * @type {function(): number} Generated ID.
 */
exports.LUIDGenerator = (function () {
    var id = 1;
    return function () {
        return id++;
    };
})();
/**
 * Sha1 hash of the input string
 * @param {!string} str The string to hash
 * @return {!string} The resulting hash
 */
exports.sha1 = function (str) {
    var utf8Bytes = util_5.stringToByteArray(str);
    var sha1 = new util_4.Sha1();
    sha1.update(utf8Bytes);
    var sha1Bytes = sha1.digest();
    return util_3.base64.encodeByteArray(sha1Bytes);
};
/**
 * @param {...*} var_args
 * @return {string}
 * @private
 */
var buildLogMessage_ = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = '';
    for (var i = 0; i < var_args.length; i++) {
        if (Array.isArray(var_args[i]) ||
            (var_args[i] &&
                typeof var_args[i] === 'object' &&
                typeof var_args[i].length === 'number')) {
            message += buildLogMessage_.apply(null, var_args[i]);
        }
        else if (typeof var_args[i] === 'object') {
            message += util_6.stringify(var_args[i]);
        }
        else {
            message += var_args[i];
        }
        message += ' ';
    }
    return message;
};
/**
 * Use this for all debug messages in Firebase.
 * @type {?function(string)}
 */
exports.logger = null;
/**
 * Flag to check for log availability on first log message
 * @type {boolean}
 * @private
 */
var firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger
 * @param {boolean=} persistent Whether or not to persist logging settings across refreshes
 */
exports.enableLogging = function (logger_, persistent) {
    util_1.assert(!persistent || (logger_ === true || logger_ === false), "Can't turn on custom loggers persistently.");
    if (logger_ === true) {
        logClient.logLevel = logger_1.LogLevel.VERBOSE;
        exports.logger = logClient.log.bind(logClient);
        if (persistent)
            storage_1.SessionStorage.set('logging_enabled', true);
    }
    else if (typeof logger_ === 'function') {
        exports.logger = logger_;
    }
    else {
        exports.logger = null;
        storage_1.SessionStorage.remove('logging_enabled');
    }
};
/**
 *
 * @param {...(string|Arguments)} var_args
 */
exports.log = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    if (firstLog_ === true) {
        firstLog_ = false;
        if (exports.logger === null && storage_1.SessionStorage.get('logging_enabled') === true)
            exports.enableLogging(true);
    }
    if (exports.logger) {
        var message = buildLogMessage_.apply(null, var_args);
        exports.logger(message);
    }
};
/**
 * @param {!string} prefix
 * @return {function(...[*])}
 */
exports.logWrapper = function (prefix) {
    return function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        exports.log.apply(void 0, [prefix].concat(var_args));
    };
};
/**
 * @param {...string} var_args
 */
exports.error = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);
    logClient.error(message);
};
/**
 * @param {...string} var_args
 */
exports.fatal = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, var_args);
    logClient.error(message);
    throw new Error(message);
};
/**
 * @param {...*} var_args
 */
exports.warn = function () {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);
    logClient.warn(message);
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */
exports.warnIfPageIsSecure = function () {
    // Be very careful accessing browser globals. Who knows what may or may not exist.
    if (typeof window !== 'undefined' &&
        window.location &&
        window.location.protocol &&
        window.location.protocol.indexOf('https:') !== -1) {
        exports.warn('Insecure Firebase access from a secure page. ' +
            'Please use https in calls to new Firebase().');
    }
};
/**
 * @param {!String} methodName
 */
exports.warnAboutUnsupportedMethod = function (methodName) {
    exports.warn(methodName +
        ' is unsupported and will likely change soon.  ' +
        'Please do not use.');
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 * @param {*} data
 * @return {boolean}
 */
exports.isInvalidJSONNumber = function (data) {
    return (typeof data === 'number' &&
        (data != data || // NaN
            data == Number.POSITIVE_INFINITY ||
            data == Number.NEGATIVE_INFINITY));
};
/**
 * @param {function()} fn
 */
exports.executeWhenDOMReady = function (fn) {
    if (util_7.isNodeSdk() || document.readyState === 'complete') {
        fn();
    }
    else {
        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
        // fire before onload), but fall back to onload.
        var called_1 = false;
        var wrappedFn_1 = function () {
            if (!document.body) {
                setTimeout(wrappedFn_1, Math.floor(10));
                return;
            }
            if (!called_1) {
                called_1 = true;
                fn();
            }
        };
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);
            // fallback to onload.
            window.addEventListener('load', wrappedFn_1, false);
        }
        else if (document.attachEvent) {
            // IE.
            document.attachEvent('onreadystatechange', function () {
                if (document.readyState === 'complete')
                    wrappedFn_1();
            });
            // fallback to onload.
            window.attachEvent('onload', wrappedFn_1);
            // jQuery has an extra hack for IE that we could employ (based on
            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
            // I'm hoping we don't need it.
        }
    }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 * @type {!string}
 */
exports.MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 * @type {!string}
 */
exports.MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 * @param {!string} a
 * @param {!string} b
 * @return {!number}
 */
exports.nameCompare = function (a, b) {
    if (a === b) {
        return 0;
    }
    else if (a === exports.MIN_NAME || b === exports.MAX_NAME) {
        return -1;
    }
    else if (b === exports.MIN_NAME || a === exports.MAX_NAME) {
        return 1;
    }
    else {
        var aAsInt = exports.tryParseInt(a), bAsInt = exports.tryParseInt(b);
        if (aAsInt !== null) {
            if (bAsInt !== null) {
                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;
            }
            else {
                return -1;
            }
        }
        else if (bAsInt !== null) {
            return 1;
        }
        else {
            return a < b ? -1 : 1;
        }
    }
};
/**
 * @param {!string} a
 * @param {!string} b
 * @return {!number} comparison result.
 */
exports.stringCompare = function (a, b) {
    if (a === b) {
        return 0;
    }
    else if (a < b) {
        return -1;
    }
    else {
        return 1;
    }
};
/**
 * @param {string} key
 * @param {Object} obj
 * @return {*}
 */
exports.requireKey = function (key, obj) {
    if (obj && key in obj) {
        return obj[key];
    }
    else {
        throw new Error('Missing required key (' + key + ') in object: ' + util_6.stringify(obj));
    }
};
/**
 * @param {*} obj
 * @return {string}
 */
exports.ObjectToUniqueKey = function (obj) {
    if (typeof obj !== 'object' || obj === null)
        return util_6.stringify(obj);
    var keys = [];
    for (var k in obj) {
        keys.push(k);
    }
    // Export as json, but with the keys sorted.
    keys.sort();
    var key = '{';
    for (var i = 0; i < keys.length; i++) {
        if (i !== 0)
            key += ',';
        key += util_6.stringify(keys[i]);
        key += ':';
        key += exports.ObjectToUniqueKey(obj[keys[i]]);
    }
    key += '}';
    return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param {!string} str The string
 * @param {!number} segsize The maximum number of chars in the string.
 * @return {Array.<string>} The string, split into appropriately-sized chunks
 */
exports.splitStringBySize = function (str, segsize) {
    var len = str.length;
    if (len <= segsize) {
        return [str];
    }
    var dataSegs = [];
    for (var c = 0; c < len; c += segsize) {
        if (c + segsize > len) {
            dataSegs.push(str.substring(c, len));
        }
        else {
            dataSegs.push(str.substring(c, c + segsize));
        }
    }
    return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param {!(Object|Array)} obj The object or array to iterate over
 * @param {function(?, ?)} fn The function to apply
 */
exports.each = function (obj, fn) {
    if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; ++i) {
            fn(i, obj[i]);
        }
    }
    else {
        /**
         * in the conversion of code we removed the goog.object.forEach
         * function which did a value,key callback. We standardized on
         * a single impl that does a key, value callback. So we invert
         * to not have to touch the `each` code points
         */
        util_2.forEach(obj, function (key, val) { return fn(val, key); });
    }
};
/**
 * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.
 * @param {function(*)} callback Callback function.
 * @param {?Object=} context Optional context to bind to.
 * @return {function(*)}
 */
exports.bindCallback = function (callback, context) {
    return context ? callback.bind(context) : callback;
};
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param {!number} v A double
 * @return {string}
 */
exports.doubleToIEEE754String = function (v) {
    util_1.assert(!exports.isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
    var ebits = 11, fbits = 52;
    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;
    // Compute sign, exponent, fraction
    // Skip NaN / Infinity handling --MJL.
    if (v === 0) {
        e = 0;
        f = 0;
        s = 1 / v === -Infinity ? 1 : 0;
    }
    else {
        s = v < 0;
        v = Math.abs(v);
        if (v >= Math.pow(2, 1 - bias)) {
            // Normalized
            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
            e = ln + bias;
            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
        }
        else {
            // Denormalized
            e = 0;
            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
        }
    }
    // Pack sign, exponent, fraction
    bits = [];
    for (i = fbits; i; i -= 1) {
        bits.push(f % 2 ? 1 : 0);
        f = Math.floor(f / 2);
    }
    for (i = ebits; i; i -= 1) {
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    str = bits.join('');
    // Return the data as a hex string. --MJL
    var hexByteString = '';
    for (i = 0; i < 64; i += 8) {
        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
        if (hexByte.length === 1)
            hexByte = '0' + hexByte;
        hexByteString = hexByteString + hexByte;
    }
    return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 * @return {boolean}
 */
exports.isChromeExtensionContentScript = function () {
    return !!(typeof window === 'object' &&
        window['chrome'] &&
        window['chrome']['extension'] &&
        !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 * @return {boolean}
 */
exports.isWindowsStoreApp = function () {
    // Check for the presence of a couple WinRT globals
    return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a Javascript Error
 * @param {!string} code
 * @param {!Query} query
 * @return {Error}
 */
exports.errorForServerCode = function (code, query) {
    var reason = 'Unknown Error';
    if (code === 'too_big') {
        reason =
            'The data requested exceeds the maximum size ' +
                'that can be accessed with a single request.';
    }
    else if (code == 'permission_denied') {
        reason = "Client doesn't have permission to access the desired data.";
    }
    else if (code == 'unavailable') {
        reason = 'The service is unavailable';
    }
    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);
    error.code = code.toUpperCase();
    return error;
};
/**
 * Used to test for integer-looking strings
 * @type {RegExp}
 * @private
 */
exports.INTEGER_REGEXP_ = new RegExp('^-?\\d{1,10}$');
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 * @param {!string} str
 * @return {?number}
 */
exports.tryParseInt = function (str) {
    if (exports.INTEGER_REGEXP_.test(str)) {
        var intVal = Number(str);
        if (intVal >= -2147483648 && intVal <= 2147483647) {
            return intVal;
        }
    }
    return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param {!function()} fn The code to guard.
 */
exports.exceptionGuard = function (fn) {
    try {
        fn();
    }
    catch (e) {
        // Re-throw exception when it's safe.
        setTimeout(function () {
            // It used to be that "throw e" would result in a good console error with
            // relevant context, but as of Chrome 39, you just get the firebase.js
            // file/line number where we re-throw it, which is useless. So we log
            // e.stack explicitly.
            var stack = e.stack || '';
            exports.warn('Exception was thrown by user callback.', stack);
            throw e;
        }, Math.floor(0));
    }
};
/**
 * Helper function to safely call opt_callback with the specified arguments.  It:
 * 1. Turns into a no-op if opt_callback is null or undefined.
 * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.
 *
 * @param {?Function=} callback Optional onComplete callback.
 * @param {...*} var_args Arbitrary args to be passed to opt_onComplete
 */
exports.callUserCallback = function (callback) {
    var var_args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        var_args[_i - 1] = arguments[_i];
    }
    if (typeof callback === 'function') {
        exports.exceptionGuard(function () {
            callback.apply(void 0, var_args);
        });
    }
};
/**
 * @return {boolean} true if we think we're currently being crawled.
 */
exports.beingCrawled = function () {
    var userAgent = (typeof window === 'object' &&
        window['navigator'] &&
        window['navigator']['userAgent']) ||
        '';
    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
    // believe to support JavaScript/AJAX rendering.
    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
    // would have seen the page" is flaky if we don't treat it as a crawler.
    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);
};
/**
 * Export a property of an object using a getter function.
 *
 * @param {!Object} object
 * @param {string} name
 * @param {!function(): *} fnGet
 */
exports.exportPropGetter = function (object, name, fnGet) {
    Object.defineProperty(object, name, { get: fnGet });
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param {Function} fn Function to run.
 * @param {number} time Milliseconds to wait before running.
 * @return {number|Object} The setTimeout() return value.
 */
exports.setTimeoutNonBlocking = function (fn, time) {
    var timeout = setTimeout(fn, time);
    if (typeof timeout === 'object' && timeout['unref']) {
        timeout['unref']();
    }
    return timeout;
};



},{"../storage/storage":52,"@firebase/logger":87,"@firebase/util":142}],65:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Path_1 = require("./Path");
var util_1 = require("@firebase/util");
var util_2 = require("./util");
var util_3 = require("@firebase/util");
var util_4 = require("@firebase/util");
/**
 * True for invalid Firebase keys
 * @type {RegExp}
 * @private
 */
exports.INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 * @type {RegExp}
 * @private
 */
exports.INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 * @type {number}
 * @private
 */
exports.MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
/**
 * @param {*} key
 * @return {boolean}
 */
exports.isValidKey = function (key) {
    return (typeof key === 'string' && key.length !== 0 && !exports.INVALID_KEY_REGEX_.test(key));
};
/**
 * @param {string} pathString
 * @return {boolean}
 */
exports.isValidPathString = function (pathString) {
    return (typeof pathString === 'string' &&
        pathString.length !== 0 &&
        !exports.INVALID_PATH_REGEX_.test(pathString));
};
/**
 * @param {string} pathString
 * @return {boolean}
 */
exports.isValidRootPathString = function (pathString) {
    if (pathString) {
        // Allow '/.info/' at the beginning.
        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    }
    return exports.isValidPathString(pathString);
};
/**
 * @param {*} priority
 * @return {boolean}
 */
exports.isValidPriority = function (priority) {
    return (priority === null ||
        typeof priority === 'string' ||
        (typeof priority === 'number' && !util_2.isInvalidJSONNumber(priority)) ||
        (priority && typeof priority === 'object' && util_1.contains(priority, '.sv')));
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */
exports.validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {
    if (optional && data === undefined)
        return;
    exports.validateFirebaseData(util_3.errorPrefix(fnName, argumentNumber, optional), data, path);
};
/**
 * Validate a data object client-side before sending to server.
 *
 * @param {string} errorPrefix
 * @param {*} data
 * @param {!Path|!ValidationPath} path_
 */
exports.validateFirebaseData = function (errorPrefix, data, path_) {
    var path = path_ instanceof Path_1.Path ? new Path_1.ValidationPath(path_, errorPrefix) : path_;
    if (data === undefined) {
        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());
    }
    if (typeof data === 'function') {
        throw new Error(errorPrefix +
            'contains a function ' +
            path.toErrorString() +
            ' with contents = ' +
            data.toString());
    }
    if (util_2.isInvalidJSONNumber(data)) {
        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());
    }
    // Check max leaf size, but try to avoid the utf8 conversion if we can.
    if (typeof data === 'string' &&
        data.length > exports.MAX_LEAF_SIZE_ / 3 &&
        util_4.stringLength(data) > exports.MAX_LEAF_SIZE_) {
        throw new Error(errorPrefix +
            'contains a string greater than ' +
            exports.MAX_LEAF_SIZE_ +
            ' utf8 bytes ' +
            path.toErrorString() +
            " ('" +
            data.substring(0, 50) +
            "...')");
    }
    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
    // to save extra walking of large objects.
    if (data && typeof data === 'object') {
        var hasDotValue_1 = false, hasActualChild_1 = false;
        util_1.forEach(data, function (key, value) {
            if (key === '.value') {
                hasDotValue_1 = true;
            }
            else if (key !== '.priority' && key !== '.sv') {
                hasActualChild_1 = true;
                if (!exports.isValidKey(key)) {
                    throw new Error(errorPrefix +
                        ' contains an invalid key (' +
                        key +
                        ') ' +
                        path.toErrorString() +
                        '.  Keys must be non-empty strings ' +
                        'and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }
            }
            path.push(key);
            exports.validateFirebaseData(errorPrefix, value, path);
            path.pop();
        });
        if (hasDotValue_1 && hasActualChild_1) {
            throw new Error(errorPrefix +
                ' contains ".value" child ' +
                path.toErrorString() +
                ' in addition to actual children.');
        }
    }
};
/**
 * Pre-validate paths passed in the firebase function.
 *
 * @param {string} errorPrefix
 * @param {Array<!Path>} mergePaths
 */
exports.validateFirebaseMergePaths = function (errorPrefix, mergePaths) {
    var i, curPath;
    for (i = 0; i < mergePaths.length; i++) {
        curPath = mergePaths[i];
        var keys = curPath.slice();
        for (var j = 0; j < keys.length; j++) {
            if (keys[j] === '.priority' && j === keys.length - 1) {
                // .priority is OK
            }
            else if (!exports.isValidKey(keys[j])) {
                throw new Error(errorPrefix +
                    'contains an invalid key (' +
                    keys[j] +
                    ') in path ' +
                    curPath.toString() +
                    '. Keys must be non-empty strings ' +
                    'and can\'t contain ".", "#", "$", "/", "[", or "]"');
            }
        }
    }
    // Check that update keys are not descendants of each other.
    // We rely on the property that sorting guarantees that ancestors come
    // right before descendants.
    mergePaths.sort(Path_1.Path.comparePaths);
    var prevPath = null;
    for (i = 0; i < mergePaths.length; i++) {
        curPath = mergePaths[i];
        if (prevPath !== null && prevPath.contains(curPath)) {
            throw new Error(errorPrefix +
                'contains a path ' +
                prevPath.toString() +
                ' that is ancestor of another path ' +
                curPath.toString());
        }
        prevPath = curPath;
    }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 *
 * @param {string} fnName
 * @param {number} argumentNumber
 * @param {*} data
 * @param {!Path} path
 * @param {boolean} optional
 */
exports.validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {
    if (optional && data === undefined)
        return;
    var errorPrefix = util_3.errorPrefix(fnName, argumentNumber, optional);
    if (!(data && typeof data === 'object') || Array.isArray(data)) {
        throw new Error(errorPrefix + ' must be an object containing the children to replace.');
    }
    var mergePaths = [];
    util_1.forEach(data, function (key, value) {
        var curPath = new Path_1.Path(key);
        exports.validateFirebaseData(errorPrefix, value, path.child(curPath));
        if (curPath.getBack() === '.priority') {
            if (!exports.isValidPriority(value)) {
                throw new Error(errorPrefix +
                    "contains an invalid value for '" +
                    curPath.toString() +
                    "', which must be a valid " +
                    'Firebase priority (a string, finite number, server value, or null).');
            }
        }
        mergePaths.push(curPath);
    });
    exports.validateFirebaseMergePaths(errorPrefix, mergePaths);
};
exports.validatePriority = function (fnName, argumentNumber, priority, optional) {
    if (optional && priority === undefined)
        return;
    if (util_2.isInvalidJSONNumber(priority))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'is ' +
            priority.toString() +
            ', but must be a valid Firebase priority (a string, finite number, ' +
            'server value, or null).');
    // Special case to allow importing data with a .sv.
    if (!exports.isValidPriority(priority))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid Firebase priority ' +
            '(a string, finite number, server value, or null).');
};
exports.validateEventType = function (fnName, argumentNumber, eventType, optional) {
    if (optional && eventType === undefined)
        return;
    switch (eventType) {
        case 'value':
        case 'child_added':
        case 'child_removed':
        case 'child_changed':
        case 'child_moved':
            break;
        default:
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                'must be a valid event type = "value", "child_added", "child_removed", ' +
                '"child_changed", or "child_moved".');
    }
};
exports.validateKey = function (fnName, argumentNumber, key, optional) {
    if (optional && key === undefined)
        return;
    if (!exports.isValidKey(key))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'was an invalid key = "' +
            key +
            '".  Firebase keys must be non-empty strings and ' +
            'can\'t contain ".", "#", "$", "/", "[", or "]").');
};
exports.validatePathString = function (fnName, argumentNumber, pathString, optional) {
    if (optional && pathString === undefined)
        return;
    if (!exports.isValidPathString(pathString))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'was an invalid path = "' +
            pathString +
            '". Paths must be non-empty strings and ' +
            'can\'t contain ".", "#", "$", "[", or "]"');
};
exports.validateRootPathString = function (fnName, argumentNumber, pathString, optional) {
    if (pathString) {
        // Allow '/.info/' at the beginning.
        pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    }
    exports.validatePathString(fnName, argumentNumber, pathString, optional);
};
exports.validateWritablePath = function (fnName, path) {
    if (path.getFront() === '.info') {
        throw new Error(fnName + " failed = Can't modify data under /.info/");
    }
};
exports.validateUrl = function (fnName, argumentNumber, parsedUrl) {
    // TODO = Validate server better.
    var pathString = parsedUrl.path.toString();
    if (!(typeof parsedUrl.repoInfo.host === 'string') ||
        parsedUrl.repoInfo.host.length === 0 ||
        (!exports.isValidKey(parsedUrl.repoInfo.namespace) &&
            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||
        (pathString.length !== 0 && !exports.isValidRootPathString(pathString))) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, false) +
            'must be a valid firebase URL and ' +
            'the path can\'t contain ".", "#", "$", "[", or "]".');
    }
};
exports.validateCredential = function (fnName, argumentNumber, cred, optional) {
    if (optional && cred === undefined)
        return;
    if (!(typeof cred === 'string'))
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid credential (a string).');
};
exports.validateBoolean = function (fnName, argumentNumber, bool, optional) {
    if (optional && bool === undefined)
        return;
    if (typeof bool !== 'boolean')
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');
};
exports.validateString = function (fnName, argumentNumber, string, optional) {
    if (optional && string === undefined)
        return;
    if (!(typeof string === 'string')) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid string.');
    }
};
exports.validateObject = function (fnName, argumentNumber, obj, optional) {
    if (optional && obj === undefined)
        return;
    if (!(obj && typeof obj === 'object') || obj === null) {
        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid object.');
    }
};
exports.validateObjectContainsKey = function (fnName, argumentNumber, obj, key, optional, opt_type) {
    var objectContainsKey = obj && typeof obj === 'object' && util_1.contains(obj, key);
    if (!objectContainsKey) {
        if (optional) {
            return;
        }
        else {
            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                'must contain the key "' +
                key +
                '"');
        }
    }
    if (opt_type) {
        var val = util_1.safeGet(obj, key);
        if ((opt_type === 'number' && !(typeof val === 'number')) ||
            (opt_type === 'string' && !(typeof val === 'string')) ||
            (opt_type === 'boolean' && !(typeof val === 'boolean')) ||
            (opt_type === 'function' && !(typeof val === 'function')) ||
            (opt_type === 'object' && !(typeof val === 'object') && val)) {
            if (optional) {
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                    'contains invalid value for key "' +
                    key +
                    '" (must be of type "' +
                    opt_type +
                    '")');
            }
            else {
                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +
                    'must contain the key "' +
                    key +
                    '" with type "' +
                    opt_type +
                    '"');
            }
        }
    }
};



},{"./Path":58,"./util":64,"@firebase/util":142}],66:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */
var CacheNode = /** @class */ (function () {
    /**
     * @param {!Node} node_
     * @param {boolean} fullyInitialized_
     * @param {boolean} filtered_
     */
    function CacheNode(node_, fullyInitialized_, filtered_) {
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
    }
    /**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     * @return {boolean}
     */
    CacheNode.prototype.isFullyInitialized = function () {
        return this.fullyInitialized_;
    };
    /**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     * @return {boolean}
     */
    CacheNode.prototype.isFiltered = function () {
        return this.filtered_;
    };
    /**
     * @param {!Path} path
     * @return {boolean}
     */
    CacheNode.prototype.isCompleteForPath = function (path) {
        if (path.isEmpty()) {
            return this.isFullyInitialized() && !this.filtered_;
        }
        var childKey = path.getFront();
        return this.isCompleteForChild(childKey);
    };
    /**
     * @param {!string} key
     * @return {boolean}
     */
    CacheNode.prototype.isCompleteForChild = function (key) {
        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));
    };
    /**
     * @return {!Node}
     */
    CacheNode.prototype.getNode = function () {
        return this.node_;
    };
    return CacheNode;
}());
exports.CacheNode = CacheNode;



},{}],67:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @constructor
 * @struct
 * @param {!string} type The event type
 * @param {!Node} snapshotNode The data
 * @param {string=} childName The name for this child, if it's a child event
 * @param {Node=} oldSnap Used for intermediate processing of child changed events
 * @param {string=} prevName The name for the previous child, if applicable
 */
var Change = /** @class */ (function () {
    function Change(type, snapshotNode, childName, oldSnap, prevName) {
        this.type = type;
        this.snapshotNode = snapshotNode;
        this.childName = childName;
        this.oldSnap = oldSnap;
        this.prevName = prevName;
    }
    /**
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.valueChange = function (snapshot) {
        return new Change(Change.VALUE, snapshot);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childAddedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_ADDED, snapshot, childKey);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childRemovedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_REMOVED, snapshot, childKey);
    };
    /**
     * @param {string} childKey
     * @param {!Node} newSnapshot
     * @param {!Node} oldSnapshot
     * @return {!Change}
     */
    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {
        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);
    };
    /**
     * @param {string} childKey
     * @param {!Node} snapshot
     * @return {!Change}
     */
    Change.childMovedChange = function (childKey, snapshot) {
        return new Change(Change.CHILD_MOVED, snapshot, childKey);
    };
    //event types
    /** Event type for a child added */
    Change.CHILD_ADDED = 'child_added';
    /** Event type for a child removed */
    Change.CHILD_REMOVED = 'child_removed';
    /** Event type for a child changed */
    Change.CHILD_CHANGED = 'child_changed';
    /** Event type for a child moved */
    Change.CHILD_MOVED = 'child_moved';
    /** Event type for a value change */
    Change.VALUE = 'value';
    return Change;
}());
exports.Change = Change;



},{}],68:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Change_1 = require("./Change");
var util_2 = require("@firebase/util");
/**
 * @constructor
 */
var ChildChangeAccumulator = /** @class */ (function () {
    function ChildChangeAccumulator() {
        this.changeMap_ = {};
    }
    /**
     * @param {!Change} change
     */
    ChildChangeAccumulator.prototype.trackChildChange = function (change) {
        var type = change.type;
        var childKey /** @type {!string} */ = change.childName;
        util_2.assert(type == Change_1.Change.CHILD_ADDED ||
            type == Change_1.Change.CHILD_CHANGED ||
            type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');
        util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
        var oldChange = util_1.safeGet(this.changeMap_, childKey);
        if (oldChange) {
            var oldType = oldChange.type;
            if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {
                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);
            }
            else if (type == Change_1.Change.CHILD_REMOVED &&
                oldType == Change_1.Change.CHILD_ADDED) {
                delete this.changeMap_[childKey];
            }
            else if (type == Change_1.Change.CHILD_REMOVED &&
                oldType == Change_1.Change.CHILD_CHANGED) {
                this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);
            }
            else if (type == Change_1.Change.CHILD_CHANGED &&
                oldType == Change_1.Change.CHILD_ADDED) {
                this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);
            }
            else if (type == Change_1.Change.CHILD_CHANGED &&
                oldType == Change_1.Change.CHILD_CHANGED) {
                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);
            }
            else {
                throw util_2.assertionError('Illegal combination of changes: ' +
                    change +
                    ' occurred after ' +
                    oldChange);
            }
        }
        else {
            this.changeMap_[childKey] = change;
        }
    };
    /**
     * @return {!Array.<!Change>}
     */
    ChildChangeAccumulator.prototype.getChanges = function () {
        return util_1.getValues(this.changeMap_);
    };
    return ChildChangeAccumulator;
}());
exports.ChildChangeAccumulator = ChildChangeAccumulator;



},{"./Change":67,"@firebase/util":142}],69:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CacheNode_1 = require("./CacheNode");
/**
 * An implementation of CompleteChildSource that never returns any additional children
 *
 * @private
 * @constructor
 * @implements CompleteChildSource
 */
var NoCompleteChildSource_ = /** @class */ (function () {
    function NoCompleteChildSource_() {
    }
    /**
     * @inheritDoc
     */
    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {
        return null;
    };
    /**
     * @inheritDoc
     */
    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {
        return null;
    };
    return NoCompleteChildSource_;
}());
exports.NoCompleteChildSource_ = NoCompleteChildSource_;
/**
 * Singleton instance.
 * @const
 * @type {!CompleteChildSource}
 */
exports.NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 *
 *
 * @implements CompleteChildSource
 */
var WriteTreeCompleteChildSource = /** @class */ (function () {
    /**
     * @param {!WriteTreeRef} writes_
     * @param {!ViewCache} viewCache_
     * @param {?Node} optCompleteServerCache_
     */
    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {
        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
    }
    /**
     * @inheritDoc
     */
    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {
        var node = this.viewCache_.getEventCache();
        if (node.isCompleteForChild(childKey)) {
            return node.getNode().getImmediateChild(childKey);
        }
        else {
            var serverNode = this.optCompleteServerCache_ != null
                ? new CacheNode_1.CacheNode(this.optCompleteServerCache_, true, false)
                : this.viewCache_.getServerCache();
            return this.writes_.calcCompleteChild(childKey, serverNode);
        }
    };
    /**
     * @inheritDoc
     */
    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {
        var completeServerData = this.optCompleteServerCache_ != null
            ? this.optCompleteServerCache_
            : this.viewCache_.getCompleteServerSnap();
        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);
        if (nodes.length === 0) {
            return null;
        }
        else {
            return nodes[0];
        }
    };
    return WriteTreeCompleteChildSource;
}());
exports.WriteTreeCompleteChildSource = WriteTreeCompleteChildSource;



},{"./CacheNode":66}],70:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
/**
 * Encapsulates the data needed to raise an event
 * @implements {Event}
 */
var DataEvent = /** @class */ (function () {
    /**
     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed
     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided
     * @param {!DataSnapshot} snapshot The data backing the event
     * @param {?string=} prevName Optional, the name of the previous child for child_* events.
     */
    function DataEvent(eventType, eventRegistration, snapshot, prevName) {
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
    }
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getPath = function () {
        var ref = this.snapshot.getRef();
        if (this.eventType === 'value') {
            return ref.path;
        }
        else {
            return ref.getParent().path;
        }
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventType = function () {
        return this.eventType;
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.getEventRunner = function () {
        return this.eventRegistration.getEventRunner(this);
    };
    /**
     * @inheritDoc
     */
    DataEvent.prototype.toString = function () {
        return (this.getPath().toString() +
            ':' +
            this.eventType +
            ':' +
            util_1.stringify(this.snapshot.exportVal()));
    };
    return DataEvent;
}());
exports.DataEvent = DataEvent;
var CancelEvent = /** @class */ (function () {
    /**
     * @param {EventRegistration} eventRegistration
     * @param {Error} error
     * @param {!Path} path
     */
    function CancelEvent(eventRegistration, error, path) {
        this.eventRegistration = eventRegistration;
        this.error = error;
        this.path = path;
    }
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getPath = function () {
        return this.path;
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventType = function () {
        return 'cancel';
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.getEventRunner = function () {
        return this.eventRegistration.getEventRunner(this);
    };
    /**
     * @inheritDoc
     */
    CancelEvent.prototype.toString = function () {
        return this.path.toString() + ':cancel';
    };
    return CancelEvent;
}());
exports.CancelEvent = CancelEvent;



},{"@firebase/util":142}],71:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = require("../snap/Node");
var Change_1 = require("./Change");
var util_1 = require("@firebase/util");
/**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 * @constructor
 */
var EventGenerator = /** @class */ (function () {
    /**
     *
     * @param {!Query} query_
     */
    function EventGenerator(query_) {
        this.query_ = query_;
        /**
         * @private
         * @type {!Index}
         */
        this.index_ = this.query_.getQueryParams().getIndex();
    }
    /**
     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
     *
     * Notes:
     *  - child_moved events will be synthesized at this time for any child_changed events that affect
     *    our index.
     *  - prevName will be calculated based on the index ordering.
     *
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {!Array.<!EventRegistration>} eventRegistrations
     * @return {!Array.<!Event>}
     */
    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {
        var _this = this;
        var events = [];
        var moves = [];
        changes.forEach(function (change) {
            if (change.type === Change_1.Change.CHILD_CHANGED &&
                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
                moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));
            }
        });
        this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);
        this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);
        return events;
    };
    /**
     * Given changes of a single change type, generate the corresponding events.
     *
     * @param {!Array.<!Event>} events
     * @param {!string} eventType
     * @param {!Array.<!Change>} changes
     * @param {!Array.<!EventRegistration>} registrations
     * @param {!Node} eventCache
     * @private
     */
    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {
        var _this = this;
        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });
        filteredChanges.sort(this.compareChanges_.bind(this));
        filteredChanges.forEach(function (change) {
            var materializedChange = _this.materializeSingleChange_(change, eventCache);
            registrations.forEach(function (registration) {
                if (registration.respondsTo(change.type)) {
                    events.push(registration.createEvent(materializedChange, _this.query_));
                }
            });
        });
    };
    /**
     * @param {!Change} change
     * @param {!Node} eventCache
     * @return {!Change}
     * @private
     */
    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {
        if (change.type === 'value' || change.type === 'child_removed') {
            return change;
        }
        else {
            change.prevName = eventCache.getPredecessorChildName(
            /** @type {!string} */
            change.childName, change.snapshotNode, this.index_);
            return change;
        }
    };
    /**
     * @param {!Change} a
     * @param {!Change} b
     * @return {number}
     * @private
     */
    EventGenerator.prototype.compareChanges_ = function (a, b) {
        if (a.childName == null || b.childName == null) {
            throw util_1.assertionError('Should only compare child_ events.');
        }
        var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);
        var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);
        return this.index_.compare(aWrapped, bWrapped);
    };
    return EventGenerator;
}());
exports.EventGenerator = EventGenerator;



},{"../snap/Node":36,"./Change":67,"@firebase/util":142}],72:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../util/util");
/**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 * @constructor
 */
var EventQueue = /** @class */ (function () {
    function EventQueue() {
        /**
         * @private
         * @type {!Array.<EventList>}
         */
        this.eventLists_ = [];
        /**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         * @private
         * @type {!number}
         */
        this.recursionDepth_ = 0;
    }
    /**
     * @param {!Array.<Event>} eventDataList The new events to queue.
     */
    EventQueue.prototype.queueEvents = function (eventDataList) {
        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
        var currList = null;
        for (var i = 0; i < eventDataList.length; i++) {
            var eventData = eventDataList[i];
            var eventPath = eventData.getPath();
            if (currList !== null && !eventPath.equals(currList.getPath())) {
                this.eventLists_.push(currList);
                currList = null;
            }
            if (currList === null) {
                currList = new EventList(eventPath);
            }
            currList.add(eventData);
        }
        if (currList) {
            this.eventLists_.push(currList);
        }
    };
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones)
     * for the specified path.
     *
     * It is assumed that the new events are all for the specified path.
     *
     * @param {!Path} path The path to raise events for.
     * @param {!Array.<Event>} eventDataList The new events to raise.
     */
    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
            return eventPath.equals(path);
        });
    };
    /**
     * Queues the specified events and synchronously raises all events (including previously queued ones) for
     * locations related to the specified change path (i.e. all ancestors and descendants).
     *
     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
     *
     * @param {!Path} changedPath The path to raise events for.
     * @param {!Array.<!Event>} eventDataList The events to raise
     */
    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {
        this.queueEvents(eventDataList);
        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {
            return eventPath.contains(changedPath) || changedPath.contains(eventPath);
        });
    };
    /**
     * @param {!function(!Path):boolean} predicate
     * @private
     */
    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {
        this.recursionDepth_++;
        var sentAll = true;
        for (var i = 0; i < this.eventLists_.length; i++) {
            var eventList = this.eventLists_[i];
            if (eventList) {
                var eventPath = eventList.getPath();
                if (predicate(eventPath)) {
                    this.eventLists_[i].raise();
                    this.eventLists_[i] = null;
                }
                else {
                    sentAll = false;
                }
            }
        }
        if (sentAll) {
            this.eventLists_ = [];
        }
        this.recursionDepth_--;
    };
    return EventQueue;
}());
exports.EventQueue = EventQueue;
/**
 * @param {!Path} path
 * @constructor
 */
var EventList = /** @class */ (function () {
    function EventList(path_) {
        this.path_ = path_;
        /**
         * @type {!Array.<Event>}
         * @private
         */
        this.events_ = [];
    }
    /**
     * @param {!Event} eventData
     */
    EventList.prototype.add = function (eventData) {
        this.events_.push(eventData);
    };
    /**
     * Iterates through the list and raises each event
     */
    EventList.prototype.raise = function () {
        for (var i = 0; i < this.events_.length; i++) {
            var eventData = this.events_[i];
            if (eventData !== null) {
                this.events_[i] = null;
                var eventFn = eventData.getEventRunner();
                if (util_1.logger) {
                    util_1.log('event: ' + eventData.toString());
                }
                util_1.exceptionGuard(eventFn);
            }
        }
    };
    /**
     * @return {!Path}
     */
    EventList.prototype.getPath = function () {
        return this.path_;
    };
    return EventList;
}());
exports.EventList = EventList;



},{"../util/util":64}],73:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DataSnapshot_1 = require("../../api/DataSnapshot");
var Event_1 = require("./Event");
var util_1 = require("@firebase/util");
var util_2 = require("@firebase/util");
/**
 * Represents registration for 'value' events.
 */
var ValueEventRegistration = /** @class */ (function () {
    /**
     * @param {?function(!DataSnapshot)} callback_
     * @param {?function(Error)} cancelCallback_
     * @param {?Object} context_
     */
    function ValueEventRegistration(callback_, cancelCallback_, context_) {
        this.callback_ = callback_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
    }
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.respondsTo = function (eventType) {
        return eventType === 'value';
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.createEvent = function (change, query) {
        var index = query.getQueryParams().getIndex();
        return new Event_1.DataEvent('value', this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, query.getRef(), index));
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.getEventRunner = function (eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === 'cancel') {
            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
            var cancelCB_1 = this.cancelCallback_;
            return function () {
                // We know that error exists, we checked above that this is a cancel event
                cancelCB_1.call(ctx, eventData.error);
            };
        }
        else {
            var cb_1 = this.callback_;
            return function () {
                cb_1.call(ctx, eventData.snapshot);
            };
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {
        if (this.cancelCallback_) {
            return new Event_1.CancelEvent(this, error, path);
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.matches = function (other) {
        if (!(other instanceof ValueEventRegistration)) {
            return false;
        }
        else if (!other.callback_ || !this.callback_) {
            // If no callback specified, we consider it to match any callback.
            return true;
        }
        else {
            return (other.callback_ === this.callback_ && other.context_ === this.context_);
        }
    };
    /**
     * @inheritDoc
     */
    ValueEventRegistration.prototype.hasAnyCallback = function () {
        return this.callback_ !== null;
    };
    return ValueEventRegistration;
}());
exports.ValueEventRegistration = ValueEventRegistration;
/**
 * Represents the registration of 1 or more child_xxx events.
 *
 * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you
 * register a group of callbacks together in the future.
 *
 * @constructor
 * @implements {EventRegistration}
 */
var ChildEventRegistration = /** @class */ (function () {
    /**
     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_
     * @param {?function(Error)} cancelCallback_
     * @param {Object=} context_
     */
    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {
        this.callbacks_ = callbacks_;
        this.cancelCallback_ = cancelCallback_;
        this.context_ = context_;
    }
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.respondsTo = function (eventType) {
        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
        eventToCheck =
            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
        return util_1.contains(this.callbacks_, eventToCheck);
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {
        if (this.cancelCallback_) {
            return new Event_1.CancelEvent(this, error, path);
        }
        else {
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.createEvent = function (change, query) {
        util_2.assert(change.childName != null, 'Child events should have a childName.');
        var ref = query.getRef().child(/** @type {!string} */ (change.childName));
        var index = query.getQueryParams().getIndex();
        return new Event_1.DataEvent(change.type, this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, ref, index), change.prevName);
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.getEventRunner = function (eventData) {
        var ctx = this.context_;
        if (eventData.getEventType() === 'cancel') {
            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');
            var cancelCB_2 = this.cancelCallback_;
            return function () {
                // We know that error exists, we checked above that this is a cancel event
                cancelCB_2.call(ctx, eventData.error);
            };
        }
        else {
            var cb_2 = this.callbacks_[eventData.eventType];
            return function () {
                cb_2.call(ctx, eventData.snapshot, eventData.prevName);
            };
        }
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.matches = function (other) {
        if (other instanceof ChildEventRegistration) {
            if (!this.callbacks_ || !other.callbacks_) {
                return true;
            }
            else if (this.context_ === other.context_) {
                var otherCount = util_1.getCount(other.callbacks_);
                var thisCount = util_1.getCount(this.callbacks_);
                if (otherCount === thisCount) {
                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.
                    //  If event types don't match, not a match
                    // If count is not 1, exact match across all
                    if (otherCount === 1) {
                        var otherKey /** @type {!string} */ = util_1.getAnyKey(other.callbacks_);
                        var thisKey /** @type {!string} */ = util_1.getAnyKey(this.callbacks_);
                        return (thisKey === otherKey &&
                            (!other.callbacks_[otherKey] ||
                                !this.callbacks_[thisKey] ||
                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));
                    }
                    else {
                        // Exact match on each key.
                        return util_1.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });
                    }
                }
            }
        }
        return false;
    };
    /**
     * @inheritDoc
     */
    ChildEventRegistration.prototype.hasAnyCallback = function () {
        return this.callbacks_ !== null;
    };
    return ChildEventRegistration;
}());
exports.ChildEventRegistration = ChildEventRegistration;



},{"../../api/DataSnapshot":6,"./Event":70,"@firebase/util":142}],74:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var util_2 = require("../util/util");
var KeyIndex_1 = require("../snap/indexes/KeyIndex");
var PriorityIndex_1 = require("../snap/indexes/PriorityIndex");
var ValueIndex_1 = require("../snap/indexes/ValueIndex");
var PathIndex_1 = require("../snap/indexes/PathIndex");
var IndexedFilter_1 = require("./filter/IndexedFilter");
var LimitedFilter_1 = require("./filter/LimitedFilter");
var RangedFilter_1 = require("./filter/RangedFilter");
var util_3 = require("@firebase/util");
/**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 * @constructor
 */
var QueryParams = /** @class */ (function () {
    function QueryParams() {
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.limit_ = 0;
        this.viewFrom_ = '';
        this.indexStartValue_ = null;
        this.indexStartName_ = '';
        this.indexEndValue_ = null;
        this.indexEndName_ = '';
        this.index_ = PriorityIndex_1.PRIORITY_INDEX;
    }
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasStart = function () {
        return this.startSet_;
    };
    /**
     * @return {boolean} True if it would return from left.
     */
    QueryParams.prototype.isViewFromLeft = function () {
        if (this.viewFrom_ === '') {
            // limit(), rather than limitToFirst or limitToLast was called.
            // This means that only one of startSet_ and endSet_ is true. Use them
            // to calculate which side of the view to anchor to. If neither is set,
            // anchor to the end.
            return this.startSet_;
        }
        else {
            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);
        }
    };
    /**
     * Only valid to call if hasStart() returns true
     * @return {*}
     */
    QueryParams.prototype.getIndexStartValue = function () {
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        return this.indexStartValue_;
    };
    /**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     * @return {!string}
     */
    QueryParams.prototype.getIndexStartName = function () {
        util_1.assert(this.startSet_, 'Only valid if start has been set');
        if (this.startNameSet_) {
            return this.indexStartName_;
        }
        else {
            return util_2.MIN_NAME;
        }
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasEnd = function () {
        return this.endSet_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     * @return {*}
     */
    QueryParams.prototype.getIndexEndValue = function () {
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        return this.indexEndValue_;
    };
    /**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     * @return {!string}
     */
    QueryParams.prototype.getIndexEndName = function () {
        util_1.assert(this.endSet_, 'Only valid if end has been set');
        if (this.endNameSet_) {
            return this.indexEndName_;
        }
        else {
            return util_2.MAX_NAME;
        }
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.hasLimit = function () {
        return this.limitSet_;
    };
    /**
     * @return {boolean} True if a limit has been set and it has been explicitly anchored
     */
    QueryParams.prototype.hasAnchoredLimit = function () {
        return this.limitSet_ && this.viewFrom_ !== '';
    };
    /**
     * Only valid to call if hasLimit() returns true
     * @return {!number}
     */
    QueryParams.prototype.getLimit = function () {
        util_1.assert(this.limitSet_, 'Only valid if limit has been set');
        return this.limit_;
    };
    /**
     * @return {!Index}
     */
    QueryParams.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @return {!QueryParams}
     * @private
     */
    QueryParams.prototype.copy_ = function () {
        var copy = new QueryParams();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limit = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = '';
        return newParams;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limitToFirst = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
        return newParams;
    };
    /**
     * @param {!number} newLimit
     * @return {!QueryParams}
     */
    QueryParams.prototype.limitToLast = function (newLimit) {
        var newParams = this.copy_();
        newParams.limitSet_ = true;
        newParams.limit_ = newLimit;
        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
        return newParams;
    };
    /**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */
    QueryParams.prototype.startAt = function (indexValue, key) {
        var newParams = this.copy_();
        newParams.startSet_ = true;
        if (!(indexValue !== undefined)) {
            indexValue = null;
        }
        newParams.indexStartValue_ = indexValue;
        if (key != null) {
            newParams.startNameSet_ = true;
            newParams.indexStartName_ = key;
        }
        else {
            newParams.startNameSet_ = false;
            newParams.indexStartName_ = '';
        }
        return newParams;
    };
    /**
     * @param {*} indexValue
     * @param {?string=} key
     * @return {!QueryParams}
     */
    QueryParams.prototype.endAt = function (indexValue, key) {
        var newParams = this.copy_();
        newParams.endSet_ = true;
        if (!(indexValue !== undefined)) {
            indexValue = null;
        }
        newParams.indexEndValue_ = indexValue;
        if (key !== undefined) {
            newParams.endNameSet_ = true;
            newParams.indexEndName_ = key;
        }
        else {
            newParams.endNameSet_ = false;
            newParams.indexEndName_ = '';
        }
        return newParams;
    };
    /**
     * @param {!Index} index
     * @return {!QueryParams}
     */
    QueryParams.prototype.orderBy = function (index) {
        var newParams = this.copy_();
        newParams.index_ = index;
        return newParams;
    };
    /**
     * @return {!Object}
     */
    QueryParams.prototype.getQueryObject = function () {
        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
        var obj = {};
        if (this.startSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;
            if (this.startNameSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
            }
        }
        if (this.endSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;
            if (this.endNameSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
            }
        }
        if (this.limitSet_) {
            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
            var viewFrom = this.viewFrom_;
            if (viewFrom === '') {
                if (this.isViewFromLeft()) {
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                }
                else {
                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                }
            }
            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
        }
        // For now, priority index is the default, so we only specify if it's some other index
        if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {
            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
        }
        return obj;
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.loadsAllData = function () {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
    };
    /**
     * @return {boolean}
     */
    QueryParams.prototype.isDefault = function () {
        return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;
    };
    /**
     * @return {!NodeFilter}
     */
    QueryParams.prototype.getNodeFilter = function () {
        if (this.loadsAllData()) {
            return new IndexedFilter_1.IndexedFilter(this.getIndex());
        }
        else if (this.hasLimit()) {
            return new LimitedFilter_1.LimitedFilter(this);
        }
        else {
            return new RangedFilter_1.RangedFilter(this);
        }
    };
    /**
     * Returns a set of REST query string parameters representing this query.
     *
     * @return {!Object.<string,*>} query string parameters
     */
    QueryParams.prototype.toRestQueryStringParameters = function () {
        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
        var qs = {};
        if (this.isDefault()) {
            return qs;
        }
        var orderBy;
        if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {
            orderBy = REST_CONSTANTS.PRIORITY_INDEX;
        }
        else if (this.index_ === ValueIndex_1.VALUE_INDEX) {
            orderBy = REST_CONSTANTS.VALUE_INDEX;
        }
        else if (this.index_ === KeyIndex_1.KEY_INDEX) {
            orderBy = REST_CONSTANTS.KEY_INDEX;
        }
        else {
            util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');
            orderBy = this.index_.toString();
        }
        qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);
        if (this.startSet_) {
            qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);
            if (this.startNameSet_) {
                qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);
            }
        }
        if (this.endSet_) {
            qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);
            if (this.endNameSet_) {
                qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);
            }
        }
        if (this.limitSet_) {
            if (this.isViewFromLeft()) {
                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
            }
            else {
                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
            }
        }
        return qs;
    };
    /**
     * Wire Protocol Constants
     * @const
     * @enum {string}
     * @private
     */
    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
        INDEX_START_VALUE: 'sp',
        INDEX_START_NAME: 'sn',
        INDEX_END_VALUE: 'ep',
        INDEX_END_NAME: 'en',
        LIMIT: 'l',
        VIEW_FROM: 'vf',
        VIEW_FROM_LEFT: 'l',
        VIEW_FROM_RIGHT: 'r',
        INDEX: 'i'
    };
    /**
     * REST Query Constants
     * @const
     * @enum {string}
     * @private
     */
    QueryParams.REST_QUERY_CONSTANTS_ = {
        ORDER_BY: 'orderBy',
        PRIORITY_INDEX: '$priority',
        VALUE_INDEX: '$value',
        KEY_INDEX: '$key',
        START_AT: 'startAt',
        END_AT: 'endAt',
        LIMIT_TO_FIRST: 'limitToFirst',
        LIMIT_TO_LAST: 'limitToLast'
    };
    /**
     * Default, empty query parameters
     * @type {!QueryParams}
     * @const
     */
    QueryParams.DEFAULT = new QueryParams();
    return QueryParams;
}());
exports.QueryParams = QueryParams;



},{"../snap/indexes/KeyIndex":40,"../snap/indexes/PathIndex":41,"../snap/indexes/PriorityIndex":42,"../snap/indexes/ValueIndex":43,"../util/util":64,"./filter/IndexedFilter":78,"./filter/LimitedFilter":79,"./filter/RangedFilter":80,"@firebase/util":142}],75:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedFilter_1 = require("./filter/IndexedFilter");
var ViewProcessor_1 = require("./ViewProcessor");
var ChildrenNode_1 = require("../snap/ChildrenNode");
var CacheNode_1 = require("./CacheNode");
var ViewCache_1 = require("./ViewCache");
var EventGenerator_1 = require("./EventGenerator");
var util_1 = require("@firebase/util");
var Operation_1 = require("../operation/Operation");
var Change_1 = require("./Change");
var PriorityIndex_1 = require("../snap/indexes/PriorityIndex");
/**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 * @constructor
 */
var View = /** @class */ (function () {
    /**
     *
     * @param {!Query} query_
     * @param {!ViewCache} initialViewCache
     */
    function View(query_, initialViewCache) {
        this.query_ = query_;
        this.eventRegistrations_ = [];
        var params = this.query_.getQueryParams();
        var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());
        var filter = params.getNodeFilter();
        /**
         * @type {ViewProcessor}
         * @private
         */
        this.processor_ = new ViewProcessor_1.ViewProcessor(filter);
        var initialServerCache = initialViewCache.getServerCache();
        var initialEventCache = initialViewCache.getEventCache();
        // Don't filter server node with other filter than index, wait for tagged listen
        var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
        var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
        var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
        var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
        /**
         * @type {!ViewCache}
         * @private
         */
        this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);
        /**
         * @type {!EventGenerator}
         * @private
         */
        this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);
    }
    /**
     * @return {!Query}
     */
    View.prototype.getQuery = function () {
        return this.query_;
    };
    /**
     * @return {?Node}
     */
    View.prototype.getServerCache = function () {
        return this.viewCache_.getServerCache().getNode();
    };
    /**
     * @param {!Path} path
     * @return {?Node}
     */
    View.prototype.getCompleteServerCache = function (path) {
        var cache = this.viewCache_.getCompleteServerSnap();
        if (cache) {
            // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
            // we need to see if it contains the child we're interested in.
            if (this.query_.getQueryParams().loadsAllData() ||
                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {
                return cache.getChild(path);
            }
        }
        return null;
    };
    /**
     * @return {boolean}
     */
    View.prototype.isEmpty = function () {
        return this.eventRegistrations_.length === 0;
    };
    /**
     * @param {!EventRegistration} eventRegistration
     */
    View.prototype.addEventRegistration = function (eventRegistration) {
        this.eventRegistrations_.push(eventRegistration);
    };
    /**
     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.
     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.
     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.
     */
    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
        var cancelEvents = [];
        if (cancelError) {
            util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
            var path_1 = this.query_.path;
            this.eventRegistrations_.forEach(function (registration) {
                cancelError /** @type {!Error} */ = cancelError;
                var maybeEvent = registration.createCancelEvent(cancelError, path_1);
                if (maybeEvent) {
                    cancelEvents.push(maybeEvent);
                }
            });
        }
        if (eventRegistration) {
            var remaining = [];
            for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                var existing = this.eventRegistrations_[i];
                if (!existing.matches(eventRegistration)) {
                    remaining.push(existing);
                }
                else if (eventRegistration.hasAnyCallback()) {
                    // We're removing just this one
                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                    break;
                }
            }
            this.eventRegistrations_ = remaining;
        }
        else {
            this.eventRegistrations_ = [];
        }
        return cancelEvents;
    };
    /**
     * Applies the given Operation, updates our cache, and returns the appropriate events.
     *
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @return {!Array.<!Event>}
     */
    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
        if (operation.type === Operation_1.OperationType.MERGE &&
            operation.source.queryId !== null) {
            util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
            util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
        }
        var oldViewCache = this.viewCache_;
        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
        this.processor_.assertIndexed(result.viewCache);
        util_1.assert(result.viewCache.getServerCache().isFullyInitialized() ||
            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
        this.viewCache_ = result.viewCache;
        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
    };
    /**
     * @param {!EventRegistration} registration
     * @return {!Array.<!Event>}
     */
    View.prototype.getInitialEvents = function (registration) {
        var eventSnap = this.viewCache_.getEventCache();
        var initialChanges = [];
        if (!eventSnap.getNode().isLeafNode()) {
            var eventNode = eventSnap.getNode();
            eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                initialChanges.push(Change_1.Change.childAddedChange(key, childNode));
            });
        }
        if (eventSnap.isFullyInitialized()) {
            initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));
        }
        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
    };
    /**
     * @private
     * @param {!Array.<!Change>} changes
     * @param {!Node} eventCache
     * @param {EventRegistration=} eventRegistration
     * @return {!Array.<!Event>}
     */
    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
        var registrations = eventRegistration
            ? [eventRegistration]
            : this.eventRegistrations_;
        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
    };
    return View;
}());
exports.View = View;



},{"../operation/Operation":31,"../snap/ChildrenNode":33,"../snap/indexes/PriorityIndex":42,"./CacheNode":66,"./Change":67,"./EventGenerator":71,"./ViewCache":76,"./ViewProcessor":77,"./filter/IndexedFilter":78,"@firebase/util":142}],76:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ChildrenNode_1 = require("../snap/ChildrenNode");
var CacheNode_1 = require("./CacheNode");
/**
 * Stores the data we have cached for a view.
 *
 * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).
 *
 * @constructor
 */
var ViewCache = /** @class */ (function () {
    /**
     *
     * @param {!CacheNode} eventCache_
     * @param {!CacheNode} serverCache_
     */
    function ViewCache(eventCache_, serverCache_) {
        this.eventCache_ = eventCache_;
        this.serverCache_ = serverCache_;
    }
    /**
     * @param {!Node} eventSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */
    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {
        return new ViewCache(new CacheNode_1.CacheNode(eventSnap, complete, filtered), this.serverCache_);
    };
    /**
     * @param {!Node} serverSnap
     * @param {boolean} complete
     * @param {boolean} filtered
     * @return {!ViewCache}
     */
    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {
        return new ViewCache(this.eventCache_, new CacheNode_1.CacheNode(serverSnap, complete, filtered));
    };
    /**
     * @return {!CacheNode}
     */
    ViewCache.prototype.getEventCache = function () {
        return this.eventCache_;
    };
    /**
     * @return {?Node}
     */
    ViewCache.prototype.getCompleteEventSnap = function () {
        return this.eventCache_.isFullyInitialized()
            ? this.eventCache_.getNode()
            : null;
    };
    /**
     * @return {!CacheNode}
     */
    ViewCache.prototype.getServerCache = function () {
        return this.serverCache_;
    };
    /**
     * @return {?Node}
     */
    ViewCache.prototype.getCompleteServerSnap = function () {
        return this.serverCache_.isFullyInitialized()
            ? this.serverCache_.getNode()
            : null;
    };
    /**
     * @const
     * @type {ViewCache}
     */
    ViewCache.Empty = new ViewCache(new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, 
    /*fullyInitialized=*/ false, 
    /*filtered=*/ false), new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, 
    /*fullyInitialized=*/ false, 
    /*filtered=*/ false));
    return ViewCache;
}());
exports.ViewCache = ViewCache;



},{"../snap/ChildrenNode":33,"./CacheNode":66}],77:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Operation_1 = require("../operation/Operation");
var util_1 = require("@firebase/util");
var ChildChangeAccumulator_1 = require("./ChildChangeAccumulator");
var Change_1 = require("./Change");
var ChildrenNode_1 = require("../snap/ChildrenNode");
var KeyIndex_1 = require("../snap/indexes/KeyIndex");
var ImmutableTree_1 = require("../util/ImmutableTree");
var Path_1 = require("../util/Path");
var CompleteChildSource_1 = require("./CompleteChildSource");
/**
 * @constructor
 * @struct
 */
var ProcessorResult = /** @class */ (function () {
    /**
     * @param {!ViewCache} viewCache
     * @param {!Array.<!Change>} changes
     */
    function ProcessorResult(viewCache, changes) {
        this.viewCache = viewCache;
        this.changes = changes;
    }
    return ProcessorResult;
}());
exports.ProcessorResult = ProcessorResult;
/**
 * @constructor
 */
var ViewProcessor = /** @class */ (function () {
    /**
     * @param {!NodeFilter} filter_
     */
    function ViewProcessor(filter_) {
        this.filter_ = filter_;
    }
    /**
     * @param {!ViewCache} viewCache
     */
    ViewProcessor.prototype.assertIndexed = function (viewCache) {
        util_1.assert(viewCache
            .getEventCache()
            .getNode()
            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
        util_1.assert(viewCache
            .getServerCache()
            .getNode()
            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Operation} operation
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @return {!ProcessorResult}
     */
    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
        var accumulator = new ChildChangeAccumulator_1.ChildChangeAccumulator();
        var newViewCache, filterServerNode;
        if (operation.type === Operation_1.OperationType.OVERWRITE) {
            var overwrite = operation;
            if (overwrite.source.fromUser) {
                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
            }
            else {
                util_1.assert(overwrite.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered  and the
                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
                // again
                filterServerNode =
                    overwrite.source.tagged ||
                        (oldViewCache.getServerCache().isFiltered() &&
                            !overwrite.path.isEmpty());
                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.MERGE) {
            var merge = operation;
            if (merge.source.fromUser) {
                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
            }
            else {
                util_1.assert(merge.source.fromServer, 'Unknown source.');
                // We filter the node if it's a tagged update or the node has been previously filtered
                filterServerNode =
                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.ACK_USER_WRITE) {
            var ackUserWrite = operation;
            if (!ackUserWrite.revert) {
                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
            }
            else {
                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
            }
        }
        else if (operation.type === Operation_1.OperationType.LISTEN_COMPLETE) {
            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
        }
        else {
            throw util_1.assertionError('Unknown operation type: ' + operation.type);
        }
        var changes = accumulator.getChanges();
        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
        return new ProcessorResult(newViewCache, changes);
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!ViewCache} newViewCache
     * @param {!Array.<!Change>} accumulator
     * @private
     */
    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
        var eventSnap = newViewCache.getEventCache();
        if (eventSnap.isFullyInitialized()) {
            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();
            if (accumulator.length > 0 ||
                !oldViewCache.getEventCache().isFullyInitialized() ||
                (isLeafOrEmpty &&
                    !eventSnap
                        .getNode()
                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||
                !eventSnap
                    .getNode()
                    .getPriority()
                    .equals(oldCompleteSnap.getPriority())) {
                accumulator.push(Change_1.Change.valueChange(
                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));
            }
        }
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} changePath
     * @param {!WriteTreeRef} writesCache
     * @param {!CompleteChildSource} source
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
        var oldEventSnap = viewCache.getEventCache();
        if (writesCache.shadowingWrite(changePath) != null) {
            // we have a shadowing write, ignore changes
            return viewCache;
        }
        else {
            var newEventCache = void 0, serverNode = void 0;
            if (changePath.isEmpty()) {
                // TODO: figure out how this plays with "sliding ack windows"
                util_1.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');
                if (viewCache.getServerCache().isFiltered()) {
                    // We need to special case this, because we need to only apply writes to complete children, or
                    // we might end up raising events for incomplete children. If the server data is filtered deep
                    // writes cannot be guaranteed to be complete
                    var serverCache = viewCache.getCompleteServerSnap();
                    var completeChildren = serverCache instanceof ChildrenNode_1.ChildrenNode
                        ? serverCache
                        : ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                }
                else {
                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                }
            }
            else {
                var childKey = changePath.getFront();
                if (childKey == '.priority') {
                    util_1.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
                    var oldEventNode = oldEventSnap.getNode();
                    serverNode = viewCache.getServerCache().getNode();
                    // we might have overwrites for this priority
                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);
                    if (updatedPriority != null) {
                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                    }
                    else {
                        // priority didn't change, keep old node
                        newEventCache = oldEventSnap.getNode();
                    }
                }
                else {
                    var childChangePath = changePath.popFront();
                    // update child
                    var newEventChild = void 0;
                    if (oldEventSnap.isCompleteForChild(childKey)) {
                        serverNode = viewCache.getServerCache().getNode();
                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);
                        if (eventChildUpdate != null) {
                            newEventChild = oldEventSnap
                                .getNode()
                                .getImmediateChild(childKey)
                                .updateChild(childChangePath, eventChildUpdate);
                        }
                        else {
                            // Nothing changed, just keep the old child
                            newEventChild = oldEventSnap
                                .getNode()
                                .getImmediateChild(childKey);
                        }
                    }
                    else {
                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                    }
                    if (newEventChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                    }
                    else {
                        // no complete child available or no change
                        newEventCache = oldEventSnap.getNode();
                    }
                }
            }
            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
        }
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
        var oldServerSnap = oldViewCache.getServerCache();
        var newServerCache;
        var serverFilter = filterServerNode
            ? this.filter_
            : this.filter_.getIndexedFilter();
        if (changePath.isEmpty()) {
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
        }
        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
            var newServerNode = oldServerSnap
                .getNode()
                .updateChild(changePath, changedSnap);
            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
        }
        else {
            var childKey = changePath.getFront();
            if (!oldServerSnap.isCompleteForPath(changePath) &&
                changePath.getLength() > 1) {
                // We don't update incomplete nodes with updates intended for other listeners
                return oldViewCache;
            }
            var childChangePath = changePath.popFront();
            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
            var newChildNode = childNode.updateChild(childChangePath, changedSnap);
            if (childKey == '.priority') {
                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
            }
            else {
                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, null);
            }
        }
        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
    };
    /**
     * @param {!ViewCache} oldViewCache
     * @param {!Path} changePath
     * @param {!Node} changedSnap
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
        var oldEventSnap = oldViewCache.getEventCache();
        var newViewCache, newEventCache;
        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
        if (changePath.isEmpty()) {
            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
        }
        else {
            var childKey = changePath.getFront();
            if (childKey === '.priority') {
                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
            }
            else {
                var childChangePath = changePath.popFront();
                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                var newChild = void 0;
                if (childChangePath.isEmpty()) {
                    // Child overwrite, we can replace the child
                    newChild = changedSnap;
                }
                else {
                    var childNode = source.getCompleteChild(childKey);
                    if (childNode != null) {
                        if (childChangePath.getBack() === '.priority' &&
                            childNode.getChild(childChangePath.parent()).isEmpty()) {
                            // This is a priority update on an empty node. If this node exists on the server, the
                            // server will send down the priority in the update, so ignore for now
                            newChild = childNode;
                        }
                        else {
                            newChild = childNode.updateChild(childChangePath, changedSnap);
                        }
                    }
                    else {
                        // There is no complete child node available
                        newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    }
                }
                if (!oldChild.equals(newChild)) {
                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                }
                else {
                    newViewCache = oldViewCache;
                }
            }
        }
        return newViewCache;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {string} childKey
     * @return {boolean}
     * @private
     */
    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
        return viewCache.getEventCache().isCompleteForChild(childKey);
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
        var _this = this;
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        var curViewCache = viewCache;
        changedChildren.foreach(function (relativePath, childNode) {
            var writePath = path.child(relativePath);
            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        changedChildren.foreach(function (relativePath, childNode) {
            var writePath = path.child(relativePath);
            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
            }
        });
        return curViewCache;
    };
    /**
     * @param {!Node} node
     * @param {ImmutableTree.<!Node>} merge
     * @return {!Node}
     * @private
     */
    ViewProcessor.prototype.applyMerge_ = function (node, merge) {
        merge.foreach(function (relativePath, childNode) {
            node = node.updateChild(relativePath, childNode);
        });
        return node;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!ImmutableTree.<!Node>} changedChildren
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} serverCache
     * @param {boolean} filterServerNode
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
        var _this = this;
        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
        // wait for the complete data update coming soon.
        if (viewCache
            .getServerCache()
            .getNode()
            .isEmpty() &&
            !viewCache.getServerCache().isFullyInitialized()) {
            return viewCache;
        }
        // HACK: In the case of a limit query, there may be some changes that bump things out of the
        // window leaving room for new items.  It's important we process these changes first, so we
        // iterate the changes twice, first processing any that affect items currently in view.
        // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
        // not the other.
        var curViewCache = viewCache;
        var viewMergeTree;
        if (path.isEmpty()) {
            viewMergeTree = changedChildren;
        }
        else {
            viewMergeTree = ImmutableTree_1.ImmutableTree.Empty.setTree(path, changedChildren);
        }
        var serverNode = viewCache.getServerCache().getNode();
        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
            if (serverNode.hasChild(childKey)) {
                var serverChild = viewCache
                    .getServerCache()
                    .getNode()
                    .getImmediateChild(childKey);
                var newChild = _this.applyMerge_(serverChild, childTree);
                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&
                childMergeTree.value == null;
            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                var serverChild = viewCache
                    .getServerCache()
                    .getNode()
                    .getImmediateChild(childKey);
                var newChild = _this.applyMerge_(serverChild, childMergeTree);
                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
            }
        });
        return curViewCache;
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} ackPath
     * @param {!ImmutableTree<!boolean>} affectedTree
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
        if (writesCache.shadowingWrite(ackPath) != null) {
            return viewCache;
        }
        // Only filter server node if it is currently filtered
        var filterServerNode = viewCache.getServerCache().isFiltered();
        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
        // now that it won't be shadowed.
        var serverCache = viewCache.getServerCache();
        if (affectedTree.value != null) {
            // This is an overwrite.
            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||
                serverCache.isCompleteForPath(ackPath)) {
                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
            }
            else if (ackPath.isEmpty()) {
                // This is a goofy edge case where we are acking data at this location but don't have full data.  We
                // should just re-apply whatever we have in our cache as a merge.
                var changedChildren_1 = ImmutableTree_1.ImmutableTree.Empty;
                serverCache.getNode().forEachChild(KeyIndex_1.KEY_INDEX, function (name, node) {
                    changedChildren_1 = changedChildren_1.set(new Path_1.Path(name), node);
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
            }
            else {
                return viewCache;
            }
        }
        else {
            // This is a merge.
            var changedChildren_2 = ImmutableTree_1.ImmutableTree.Empty;
            affectedTree.foreach(function (mergePath, value) {
                var serverCachePath = ackPath.child(mergePath);
                if (serverCache.isCompleteForPath(serverCachePath)) {
                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                }
            });
            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
        }
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
        var oldServerNode = viewCache.getServerCache();
        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, accumulator);
    };
    /**
     * @param {!ViewCache} viewCache
     * @param {!Path} path
     * @param {!WriteTreeRef} writesCache
     * @param {?Node} completeServerCache
     * @param {!ChildChangeAccumulator} accumulator
     * @return {!ViewCache}
     * @private
     */
    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
        var complete;
        if (writesCache.shadowingWrite(path) != null) {
            return viewCache;
        }
        else {
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
            var oldEventCache = viewCache.getEventCache().getNode();
            var newEventCache = void 0;
            if (path.isEmpty() || path.getFront() === '.priority') {
                var newNode = void 0;
                if (viewCache.getServerCache().isFullyInitialized()) {
                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                }
                else {
                    var serverChildren = viewCache.getServerCache().getNode();
                    util_1.assert(serverChildren instanceof ChildrenNode_1.ChildrenNode, 'serverChildren would be complete if leaf node');
                    newNode = writesCache.calcCompleteEventChildren(serverChildren);
                }
                newNode = newNode;
                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
            }
            else {
                var childKey = path.getFront();
                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                if (newChild == null &&
                    viewCache.getServerCache().isCompleteForChild(childKey)) {
                    newChild = oldEventCache.getImmediateChild(childKey);
                }
                if (newChild != null) {
                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                }
                else if (viewCache
                    .getEventCache()
                    .getNode()
                    .hasChild(childKey)) {
                    // No complete child available, delete the existing one, if any
                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                }
                else {
                    newEventCache = oldEventCache;
                }
                if (newEventCache.isEmpty() &&
                    viewCache.getServerCache().isFullyInitialized()) {
                    // We might have reverted all child writes. Maybe the old event was a leaf node
                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    if (complete.isLeafNode()) {
                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                    }
                }
            }
            complete =
                viewCache.getServerCache().isFullyInitialized() ||
                    writesCache.shadowingWrite(Path_1.Path.Empty) != null;
            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
        }
    };
    return ViewProcessor;
}());
exports.ViewProcessor = ViewProcessor;



},{"../operation/Operation":31,"../snap/ChildrenNode":33,"../snap/indexes/KeyIndex":40,"../util/ImmutableTree":55,"../util/Path":58,"./Change":67,"./ChildChangeAccumulator":68,"./CompleteChildSource":69,"@firebase/util":142}],78:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var Change_1 = require("../Change");
var ChildrenNode_1 = require("../../snap/ChildrenNode");
var PriorityIndex_1 = require("../../snap/indexes/PriorityIndex");
/**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 *
 * @constructor
 * @implements {NodeFilter}
 * @param {!Index} index
 */
var IndexedFilter = /** @class */ (function () {
    function IndexedFilter(index_) {
        this.index_ = index_;
    }
    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        util_1.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
        var oldChild = snap.getImmediateChild(key);
        // Check if anything actually changed.
        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
            // to avoid treating these cases as "nothing changed."
            if (oldChild.isEmpty() == newChild.isEmpty()) {
                // Nothing changed.
                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
                return snap;
            }
        }
        if (optChangeAccumulator != null) {
            if (newChild.isEmpty()) {
                if (snap.hasChild(key)) {
                    optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, oldChild));
                }
                else {
                    util_1.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
                }
            }
            else if (oldChild.isEmpty()) {
                optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, newChild));
            }
            else {
                optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, newChild, oldChild));
            }
        }
        if (snap.isLeafNode() && newChild.isEmpty()) {
            return snap;
        }
        else {
            // Make sure the node is indexed
            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
        }
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        if (optChangeAccumulator != null) {
            if (!oldSnap.isLeafNode()) {
                oldSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    if (!newSnap.hasChild(key)) {
                        optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, childNode));
                    }
                });
            }
            if (!newSnap.isLeafNode()) {
                newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    if (oldSnap.hasChild(key)) {
                        var oldChild = oldSnap.getImmediateChild(key);
                        if (!oldChild.equals(childNode)) {
                            optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, childNode, oldChild));
                        }
                    }
                    else {
                        optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, childNode));
                    }
                });
            }
        }
        return newSnap.withIndex(this.index_);
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        if (oldSnap.isEmpty()) {
            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        else {
            return oldSnap.updatePriority(newPriority);
        }
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.filtersNodes = function () {
        return false;
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.getIndexedFilter = function () {
        return this;
    };
    /**
     * @inheritDoc
     */
    IndexedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    return IndexedFilter;
}());
exports.IndexedFilter = IndexedFilter;



},{"../../snap/ChildrenNode":33,"../../snap/indexes/PriorityIndex":42,"../Change":67,"@firebase/util":142}],79:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var RangedFilter_1 = require("./RangedFilter");
var ChildrenNode_1 = require("../../snap/ChildrenNode");
var Node_1 = require("../../snap/Node");
var util_1 = require("@firebase/util");
var Change_1 = require("../Change");
/**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 *
 * @constructor
 * @implements {NodeFilter}
 */
var LimitedFilter = /** @class */ (function () {
    /**
     * @param {!QueryParams} params
     */
    function LimitedFilter(params) {
        this.rangedFilter_ = new RangedFilter_1.RangedFilter(params);
        this.index_ = params.getIndex();
        this.limit_ = params.getLimit();
        this.reverse_ = !params.isViewFromLeft();
    }
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.rangedFilter_.matches(new Node_1.NamedNode(key, newChild))) {
            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        if (snap.getImmediateChild(key).equals(newChild)) {
            // No change
            return snap;
        }
        else if (snap.numChildren() < this.limit_) {
            return this.rangedFilter_
                .getIndexedFilter()
                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        }
        else {
            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
        }
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        var filtered;
        if (newSnap.isLeafNode() || newSnap.isEmpty()) {
            // Make sure we have a children node with the correct index, not a leaf node;
            filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        }
        else {
            if (this.limit_ * 2 < newSnap.numChildren() &&
                newSnap.isIndexed(this.index_)) {
                // Easier to build up a snapshot, since what we're given has more than twice the elements we want
                filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);
                // anchor to the startPost, endPost, or last element as appropriate
                var iterator = void 0;
                if (this.reverse_) {
                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
                }
                else {
                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
                }
                var count = 0;
                while (iterator.hasNext() && count < this.limit_) {
                    var next = iterator.getNext();
                    var inRange = void 0;
                    if (this.reverse_) {
                        inRange =
                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
                    }
                    else {
                        inRange =
                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
                    }
                    if (inRange) {
                        filtered = filtered.updateImmediateChild(next.name, next.node);
                        count++;
                    }
                    else {
                        // if we have reached the end post, we cannot keep adding elemments
                        break;
                    }
                }
            }
            else {
                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
                filtered = newSnap.withIndex(this.index_);
                // Don't support priorities on queries
                filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                var startPost = void 0;
                var endPost = void 0;
                var cmp = void 0;
                var iterator = void 0;
                if (this.reverse_) {
                    iterator = filtered.getReverseIterator(this.index_);
                    startPost = this.rangedFilter_.getEndPost();
                    endPost = this.rangedFilter_.getStartPost();
                    var indexCompare_1 = this.index_.getCompare();
                    cmp = function (a, b) { return indexCompare_1(b, a); };
                }
                else {
                    iterator = filtered.getIterator(this.index_);
                    startPost = this.rangedFilter_.getStartPost();
                    endPost = this.rangedFilter_.getEndPost();
                    cmp = this.index_.getCompare();
                }
                var count = 0;
                var foundStartPost = false;
                while (iterator.hasNext()) {
                    var next = iterator.getNext();
                    if (!foundStartPost && cmp(startPost, next) <= 0) {
                        // start adding
                        foundStartPost = true;
                    }
                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
                    if (inRange) {
                        count++;
                    }
                    else {
                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                    }
                }
            }
        }
        return this.rangedFilter_
            .getIndexedFilter()
            .updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.filtersNodes = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.getIndexedFilter = function () {
        return this.rangedFilter_.getIndexedFilter();
    };
    /**
     * @inheritDoc
     */
    LimitedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @param {!Node} snap
     * @param {string} childKey
     * @param {!Node} childSnap
     * @param {!CompleteChildSource} source
     * @param {?ChildChangeAccumulator} changeAccumulator
     * @return {!Node}
     * @private
     */
    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {
        // TODO: rename all cache stuff etc to general snap terminology
        var cmp;
        if (this.reverse_) {
            var indexCmp_1 = this.index_.getCompare();
            cmp = function (a, b) { return indexCmp_1(b, a); };
        }
        else {
            cmp = this.index_.getCompare();
        }
        var oldEventCache = snap;
        util_1.assert(oldEventCache.numChildren() == this.limit_, '');
        var newChildNamedNode = new Node_1.NamedNode(childKey, childSnap);
        var windowBoundary = this.reverse_
            ? oldEventCache.getFirstChild(this.index_)
            : oldEventCache.getLastChild(this.index_);
        var inRange = this.rangedFilter_.matches(newChildNamedNode);
        if (oldEventCache.hasChild(childKey)) {
            var oldChildSnap = oldEventCache.getImmediateChild(childKey);
            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
            while (nextChild != null &&
                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {
                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
                // been applied to the limited filter yet. Ignore this next child which will be updated later in
                // the limited filter...
                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
            }
            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
            if (remainsInWindow) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childChangedChange(childKey, childSnap, oldChildSnap));
                }
                return oldEventCache.updateImmediateChild(childKey, childSnap);
            }
            else {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(childKey, oldChildSnap));
                }
                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                if (nextChildInRange) {
                    if (changeAccumulator != null) {
                        changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(nextChild.name, nextChild.node));
                    }
                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                }
                else {
                    return newEventCache;
                }
            }
        }
        else if (childSnap.isEmpty()) {
            // we're deleting a node, but it was not in the window, so ignore it
            return snap;
        }
        else if (inRange) {
            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(windowBoundary.name, windowBoundary.node));
                    changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(childKey, childSnap));
                }
                return oldEventCache
                    .updateImmediateChild(childKey, childSnap)
                    .updateImmediateChild(windowBoundary.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
            }
            else {
                return snap;
            }
        }
        else {
            return snap;
        }
    };
    return LimitedFilter;
}());
exports.LimitedFilter = LimitedFilter;



},{"../../snap/ChildrenNode":33,"../../snap/Node":36,"../Change":67,"./RangedFilter":80,"@firebase/util":142}],80:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedFilter_1 = require("./IndexedFilter");
var PriorityIndex_1 = require("../../snap/indexes/PriorityIndex");
var Node_1 = require("../../../core/snap/Node");
var ChildrenNode_1 = require("../../snap/ChildrenNode");
/**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 *
 * @constructor
 * @implements {NodeFilter}
 */
var RangedFilter = /** @class */ (function () {
    /**
     * @param {!QueryParams} params
     */
    function RangedFilter(params) {
        this.indexedFilter_ = new IndexedFilter_1.IndexedFilter(params.getIndex());
        this.index_ = params.getIndex();
        this.startPost_ = RangedFilter.getStartPost_(params);
        this.endPost_ = RangedFilter.getEndPost_(params);
    }
    /**
     * @return {!NamedNode}
     */
    RangedFilter.prototype.getStartPost = function () {
        return this.startPost_;
    };
    /**
     * @return {!NamedNode}
     */
    RangedFilter.prototype.getEndPost = function () {
        return this.endPost_;
    };
    /**
     * @param {!NamedNode} node
     * @return {boolean}
     */
    RangedFilter.prototype.matches = function (node) {
        return (this.index_.compare(this.getStartPost(), node) <= 0 &&
            this.index_.compare(node, this.getEndPost()) <= 0);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.matches(new Node_1.NamedNode(key, newChild))) {
            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {
        if (newSnap.isLeafNode()) {
            // Make sure we have a children node with the correct index, not a leaf node;
            newSnap = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
        }
        var filtered = newSnap.withIndex(this.index_);
        // Don't support priorities on queries
        filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);
        var self = this;
        newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
            if (!self.matches(new Node_1.NamedNode(key, childNode))) {
                filtered = filtered.updateImmediateChild(key, ChildrenNode_1.ChildrenNode.EMPTY_NODE);
            }
        });
        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.filtersNodes = function () {
        return true;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.getIndexedFilter = function () {
        return this.indexedFilter_;
    };
    /**
     * @inheritDoc
     */
    RangedFilter.prototype.getIndex = function () {
        return this.index_;
    };
    /**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */
    RangedFilter.getStartPost_ = function (params) {
        if (params.hasStart()) {
            var startName = params.getIndexStartName();
            return params.getIndex().makePost(params.getIndexStartValue(), startName);
        }
        else {
            return params.getIndex().minPost();
        }
    };
    /**
     * @param {!QueryParams} params
     * @return {!NamedNode}
     * @private
     */
    RangedFilter.getEndPost_ = function (params) {
        if (params.hasEnd()) {
            var endName = params.getIndexEndName();
            return params.getIndex().makePost(params.getIndexEndValue(), endName);
        }
        else {
            return params.getIndex().maxPost();
        }
    };
    return RangedFilter;
}());
exports.RangedFilter = RangedFilter;



},{"../../../core/snap/Node":36,"../../snap/ChildrenNode":33,"../../snap/indexes/PriorityIndex":42,"./IndexedFilter":78}],81:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../core/util/util");
var CountedSet_1 = require("../core/util/CountedSet");
var StatsManager_1 = require("../core/stats/StatsManager");
var PacketReceiver_1 = require("./polling/PacketReceiver");
var Constants_1 = require("./Constants");
var util_2 = require("@firebase/util");
var util_3 = require("@firebase/util");
// URL query parameters associated with longpolling
exports.FIREBASE_LONGPOLL_START_PARAM = 'start';
exports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
exports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
exports.FIREBASE_LONGPOLL_ID_PARAM = 'id';
exports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';
exports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
exports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';
exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';
exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
var MAX_URL_DATA_SIZE = 1870;
var SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 * @const
 * @type {number}
 */
var KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 * @const
 * @type {number}
 */
var LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 *
 * @constructor
 * @implements {Transport}
 */
var BrowserPollConnection = /** @class */ (function () {
    /**
     * @param {string} connId An identifier for this connection, used for logging
     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.
     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing
     *                                         transport session
     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a
     *                                     connection previously
     */
    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = util_1.logWrapper(connId);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);
        this.urlFn = function (params) {
            return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);
        };
    }
    /**
     *
     * @param {function(Object)} onMessage Callback when messages arrive
     * @param {function()} onDisconnect Callback with connection lost.
     */
    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {
        var _this = this;
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect;
        this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(function () {
            _this.log_('Timed out trying to connect.');
            // Make sure we clear the host cache
            _this.onClosed_();
            _this.connectTimeoutTimer_ = null;
        }, Math.floor(LP_CONNECT_TIMEOUT));
        // Ensure we delay the creation of the iframe until the DOM is loaded.
        util_1.executeWhenDOMReady(function () {
            if (_this.isClosed_)
                return;
            //Set up a callback that gets triggered once a connection is set up.
            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var command = args[0], arg1 = args[1], arg2 = args[2], arg3 = args[3], arg4 = args[4];
                _this.incrementIncomingBytes_(args);
                if (!_this.scriptTagHolder)
                    return; // we closed the connection.
                if (_this.connectTimeoutTimer_) {
                    clearTimeout(_this.connectTimeoutTimer_);
                    _this.connectTimeoutTimer_ = null;
                }
                _this.everConnected_ = true;
                if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {
                    _this.id = arg1;
                    _this.password = arg2;
                }
                else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
                    if (arg1) {
                        // We aren't expecting any more data (other than what the server's already in the process of sending us
                        // through our already open polls), so don't send any more.
                        _this.scriptTagHolder.sendNewPolls = false;
                        // arg1 in this case is the last response number sent by the server. We should try to receive
                        // all of the responses up to this one before closing
                        _this.myPacketOrderer.closeAfter(arg1, function () {
                            _this.onClosed_();
                        });
                    }
                    else {
                        _this.onClosed_();
                    }
                }
                else {
                    throw new Error('Unrecognized command received: ' + command);
                }
            }, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var pN = args[0], data = args[1];
                _this.incrementIncomingBytes_(args);
                _this.myPacketOrderer.handleResponse(pN, data);
            }, function () {
                _this.onClosed_();
            }, _this.urlFn);
            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
            //from cache.
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';
            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
            if (_this.scriptTagHolder.uniqueCallbackIdentifier)
                urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
            urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;
            if (_this.transportSessionId) {
                urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
            }
            if (_this.lastSessionId) {
                urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;
            }
            if (!util_3.isNodeSdk() &&
                typeof location !== 'undefined' &&
                location.href &&
                location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
                urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
            }
            var connectURL = _this.urlFn(urlParams);
            _this.log_('Connecting via long-poll to ' + connectURL);
            _this.scriptTagHolder.addTag(connectURL, function () {
                /* do nothing */
            });
        });
    };
    /**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */
    BrowserPollConnection.prototype.start = function () {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
    };
    /**
     * Forces long polling to be considered as a potential transport
     */
    BrowserPollConnection.forceAllow = function () {
        BrowserPollConnection.forceAllow_ = true;
    };
    /**
     * Forces longpolling to not be considered as a potential transport
     */
    BrowserPollConnection.forceDisallow = function () {
        BrowserPollConnection.forceDisallow_ = true;
    };
    // Static method, use string literal so it can be accessed in a generic way
    BrowserPollConnection.isAvailable = function () {
        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
        return (BrowserPollConnection.forceAllow_ ||
            (!BrowserPollConnection.forceDisallow_ &&
                typeof document !== 'undefined' &&
                document.createElement != null &&
                !util_1.isChromeExtensionContentScript() &&
                !util_1.isWindowsStoreApp() &&
                !util_3.isNodeSdk()));
    };
    /**
     * No-op for polling
     */
    BrowserPollConnection.prototype.markConnectionHealthy = function () { };
    /**
     * Stops polling and cleans up the iframe
     * @private
     */
    BrowserPollConnection.prototype.shutdown_ = function () {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
            this.scriptTagHolder.close();
            this.scriptTagHolder = null;
        }
        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
        if (this.myDisconnFrame) {
            document.body.removeChild(this.myDisconnFrame);
            this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
            clearTimeout(this.connectTimeoutTimer_);
            this.connectTimeoutTimer_ = null;
        }
    };
    /**
     * Triggered when this transport is closed
     * @private
     */
    BrowserPollConnection.prototype.onClosed_ = function () {
        if (!this.isClosed_) {
            this.log_('Longpoll is closing itself');
            this.shutdown_();
            if (this.onDisconnect_) {
                this.onDisconnect_(this.everConnected_);
                this.onDisconnect_ = null;
            }
        }
    };
    /**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */
    BrowserPollConnection.prototype.close = function () {
        if (!this.isClosed_) {
            this.log_('Longpoll is being closed.');
            this.shutdown_();
        }
    };
    /**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param {!Object} data The JSON data to transmit.
     */
    BrowserPollConnection.prototype.send = function (data) {
        var dataStr = util_2.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //first, lets get the base64-encoded data
        var base64data = util_2.base64Encode(dataStr);
        //We can only fit a certain amount in each URL, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
        //of segments so that we can reassemble the packet on the server.
        for (var i = 0; i < dataSegs.length; i++) {
            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
            this.curSegmentNum++;
        }
    };
    /**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     * @param {!string} id
     * @param {!string} pw
     */
    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {
        if (util_3.isNodeSdk())
            return;
        this.myDisconnFrame = document.createElement('iframe');
        var urlParams = {};
        urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
        urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;
        urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = 'none';
        document.body.appendChild(this.myDisconnFrame);
    };
    /**
     * Used to track the bytes received by this client
     * @param {*} args
     * @private
     */
    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {
        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
        var bytesReceived = util_2.stringify(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter('bytes_received', bytesReceived);
    };
    return BrowserPollConnection;
}());
exports.BrowserPollConnection = BrowserPollConnection;
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 * @constructor
 *********************************************************************************************/
var FirebaseIFrameScriptHolder = /** @class */ (function () {
    /**
     * @param commandCB - The callback to be called when control commands are recevied from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */
    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {
        this.onDisconnect = onDisconnect;
        this.urlFn = urlFn;
        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
        //problems in some browsers.
        /**
         * @type {CountedSet.<number, number>}
         */
        this.outstandingRequests = new CountedSet_1.CountedSet();
        //A queue of the pending segments waiting for transmission to the server.
        this.pendingSegs = [];
        //A serial number. We use this for two things:
        // 1) A way to ensure the browser doesn't cache responses to polls
        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
        //    JSONP code in the order it was added to the iframe.
        this.currentSerial = Math.floor(Math.random() * 100000000);
        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
        // incoming data from the server that we're waiting for).
        this.sendNewPolls = true;
        if (!util_3.isNodeSdk()) {
            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
            //iframes where we put the long-polling script tags. We have two callbacks:
            //   1) Command Callback - Triggered for control issues, like starting a connection.
            //   2) Message Callback - Triggered when new data arrives.
            this.uniqueCallbackIdentifier = util_1.LUIDGenerator();
            window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
            window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
            //Create an iframe for us to add script tags to.
            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();
            // Set the iframe's contents.
            var script = '';
            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
            // for ie9, but ie8 needs to do it again in the document itself.
            if (this.myIFrame.src &&
                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {
                var currentDomain = document.domain;
                script = '<script>document.domain="' + currentDomain + '";</script>';
            }
            var iframeContents = '<html><body>' + script + '</body></html>';
            try {
                this.myIFrame.doc.open();
                this.myIFrame.doc.write(iframeContents);
                this.myIFrame.doc.close();
            }
            catch (e) {
                util_1.log('frame writing exception');
                if (e.stack) {
                    util_1.log(e.stack);
                }
                util_1.log(e);
            }
        }
        else {
            this.commandCB = commandCB;
            this.onMessageCB = onMessageCB;
        }
    }
    /**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     * @private
     * @return {Element}
     */
    FirebaseIFrameScriptHolder.createIFrame_ = function () {
        var iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        // This is necessary in order to initialize the document inside the iframe
        if (document.body) {
            document.body.appendChild(iframe);
            try {
                // If document.domain has been modified in IE, this will throw an error, and we need to set the
                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                var a = iframe.contentWindow.document;
                if (!a) {
                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                    util_1.log('No IE domain setting required');
                }
            }
            catch (e) {
                var domain = document.domain;
                iframe.src =
                    "javascript:void((function(){document.open();document.domain='" +
                        domain +
                        "';document.close();})())";
            }
        }
        else {
            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
            // never gets hit.
            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
        }
        // Get the document of the iframe in a browser-specific way.
        if (iframe.contentDocument) {
            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
        }
        else if (iframe.contentWindow) {
            iframe.doc = iframe.contentWindow.document; // Internet Explorer
        }
        else if (iframe.document) {
            iframe.doc = iframe.document; //others?
        }
        return iframe;
    };
    /**
     * Cancel all outstanding queries and remove the frame.
     */
    FirebaseIFrameScriptHolder.prototype.close = function () {
        var _this = this;
        //Mark this iframe as dead, so no new requests are sent.
        this.alive = false;
        if (this.myIFrame) {
            //We have to actually remove all of the html inside this iframe before removing it from the
            //window, or IE will continue loading and executing the script tags we've already added, which
            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.
            this.myIFrame.doc.body.innerHTML = '';
            setTimeout(function () {
                if (_this.myIFrame !== null) {
                    document.body.removeChild(_this.myIFrame);
                    _this.myIFrame = null;
                }
            }, Math.floor(0));
        }
        if (util_3.isNodeSdk() && this.myID) {
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';
            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            var theURL = this.urlFn(urlParams);
            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);
        }
        // Protect from being called recursively.
        var onDisconnect = this.onDisconnect;
        if (onDisconnect) {
            this.onDisconnect = null;
            onDisconnect();
        }
    };
    /**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param {!string} id - The ID of this connection
     * @param {!string} pw - The password for this connection
     */
    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {
        this.myID = id;
        this.myPW = pw;
        this.alive = true;
        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
        while (this.newRequest_()) { }
    };
    /**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */
    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {
        // We keep one outstanding request open all the time to receive data, but if we need to send data
        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
        // close the old request.
        if (this.alive &&
            this.sendNewPolls &&
            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {
            //construct our url
            this.currentSerial++;
            var urlParams = {};
            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
            var theURL = this.urlFn(urlParams);
            //Now add as much data as we can.
            var curDataString = '';
            var i = 0;
            while (this.pendingSegs.length > 0) {
                //first, lets see if the next segment will fit.
                var nextSeg = this.pendingSegs[0];
                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=
                    MAX_URL_DATA_SIZE) {
                    //great, the segment will fit. Lets append it.
                    var theSeg = this.pendingSegs.shift();
                    curDataString =
                        curDataString +
                            '&' +
                            exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +
                            i +
                            '=' +
                            theSeg.seg +
                            '&' +
                            exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +
                            i +
                            '=' +
                            theSeg.ts +
                            '&' +
                            exports.FIREBASE_LONGPOLL_DATA_PARAM +
                            i +
                            '=' +
                            theSeg.d;
                    i++;
                }
                else {
                    break;
                }
            }
            theURL = theURL + curDataString;
            this.addLongPollTag_(theURL, this.currentSerial);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */
    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {
        //add this to the queue of segments to send.
        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
        //send the data immediately if there isn't already data being transmitted, unless
        //startLongPoll hasn't been called yet.
        if (this.alive) {
            this.newRequest_();
        }
    };
    /**
     * Add a script tag for a regular long-poll request.
     * @param {!string} url - The URL of the script tag.
     * @param {!number} serial - The serial number of the request.
     * @private
     */
    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {
        var _this = this;
        //remember that we sent this request.
        this.outstandingRequests.add(serial, 1);
        var doNewRequest = function () {
            _this.outstandingRequests.remove(serial);
            _this.newRequest_();
        };
        // If this request doesn't return on its own accord (by the server sending us some data), we'll
        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
        var readyStateCB = function () {
            // Request completed.  Cancel the keepalive.
            clearTimeout(keepaliveTimeout);
            // Trigger a new request so we can continue receiving data.
            doNewRequest();
        };
        this.addTag(url, readyStateCB);
    };
    /**
     * Add an arbitrary script tag to the iframe.
     * @param {!string} url - The URL for the script tag source.
     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.
     */
    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {
        var _this = this;
        if (util_3.isNodeSdk()) {
            this.doNodeLongPoll(url, loadCB);
        }
        else {
            setTimeout(function () {
                try {
                    // if we're already closed, don't add this poll
                    if (!_this.sendNewPolls)
                        return;
                    var newScript_1 = _this.myIFrame.doc.createElement('script');
                    newScript_1.type = 'text/javascript';
                    newScript_1.async = true;
                    newScript_1.src = url;
                    newScript_1.onload = newScript_1.onreadystatechange = function () {
                        var rstate = newScript_1.readyState;
                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                            newScript_1.onload = newScript_1.onreadystatechange = null;
                            if (newScript_1.parentNode) {
                                newScript_1.parentNode.removeChild(newScript_1);
                            }
                            loadCB();
                        }
                    };
                    newScript_1.onerror = function () {
                        util_1.log('Long-poll script failed to load: ' + url);
                        _this.sendNewPolls = false;
                        _this.close();
                    };
                    _this.myIFrame.doc.body.appendChild(newScript_1);
                }
                catch (e) {
                    // TODO: we should make this error visible somehow
                }
            }, Math.floor(1));
        }
    };
    return FirebaseIFrameScriptHolder;
}());
exports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;



},{"../core/stats/StatsManager":48,"../core/util/CountedSet":53,"../core/util/util":64,"./Constants":83,"./polling/PacketReceiver":86,"@firebase/util":142}],82:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../core/util/util");
var storage_1 = require("../core/storage/storage");
var Constants_1 = require("./Constants");
var TransportManager_1 = require("./TransportManager");
// Abort upgrade attempt if it takes longer than 60s.
var UPGRADE_TIMEOUT = 60000;
// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
var MESSAGE_TYPE = 't';
var MESSAGE_DATA = 'd';
var CONTROL_SHUTDOWN = 's';
var CONTROL_RESET = 'r';
var CONTROL_ERROR = 'e';
var CONTROL_PONG = 'o';
var SWITCH_ACK = 'a';
var END_TRANSMISSION = 'n';
var PING = 'p';
var SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 *
 * @constructor
 */
var Connection = /** @class */ (function () {
    /**
     * @param {!string} id - an id for this connection
     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to
     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives
     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost
     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */
    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
        this.id = id;
        this.repoInfo_ = repoInfo_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0 /* CONNECTING */;
        this.log_ = util_1.logWrapper('c:' + this.id + ':');
        this.transportManager_ = new TransportManager_1.TransportManager(repoInfo_);
        this.log_('Connection created');
        this.start_();
    }
    /**
     * Starts a connection attempt
     * @private
     */
    Connection.prototype.start_ = function () {
        var _this = this;
        var conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        var onMessageReceived = this.connReceiver_(this.conn_);
        var onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        /*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */
        setTimeout(function () {
            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        var healthyTimeout_ms = conn['healthyTimeout'] || 0;
        if (healthyTimeout_ms > 0) {
            this.healthyTimeout_ = util_1.setTimeoutNonBlocking(function () {
                _this.healthyTimeout_ = null;
                if (!_this.isHealthy_) {
                    if (_this.conn_ &&
                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                        _this.log_('Connection exceeded healthy timeout but has received ' +
                            _this.conn_.bytesReceived +
                            ' bytes.  Marking connection healthy.');
                        _this.isHealthy_ = true;
                        _this.conn_.markConnectionHealthy();
                    }
                    else if (_this.conn_ &&
                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                        _this.log_('Connection exceeded healthy timeout but has sent ' +
                            _this.conn_.bytesSent +
                            ' bytes.  Leaving connection alive.');
                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to
                        // the server.
                    }
                    else {
                        _this.log_('Closing unhealthy connection after timeout.');
                        _this.close();
                    }
                }
            }, Math.floor(healthyTimeout_ms));
        }
    };
    /**
     * @return {!string}
     * @private
     */
    Connection.prototype.nextTransportId_ = function () {
        return 'c:' + this.id + ':' + this.connectionCount++;
    };
    Connection.prototype.disconnReceiver_ = function (conn) {
        var _this = this;
        return function (everConnected) {
            if (conn === _this.conn_) {
                _this.onConnectionLost_(everConnected);
            }
            else if (conn === _this.secondaryConn_) {
                _this.log_('Secondary connection lost.');
                _this.onSecondaryConnectionLost_();
            }
            else {
                _this.log_('closing an old connection');
            }
        };
    };
    Connection.prototype.connReceiver_ = function (conn) {
        var _this = this;
        return function (message) {
            if (_this.state_ != 2 /* DISCONNECTED */) {
                if (conn === _this.rx_) {
                    _this.onPrimaryMessageReceived_(message);
                }
                else if (conn === _this.secondaryConn_) {
                    _this.onSecondaryMessageReceived_(message);
                }
                else {
                    _this.log_('message on old connection');
                }
            }
        };
    };
    /**
     *
     * @param {Object} dataMsg An arbitrary data message to be sent to the server
     */
    Connection.prototype.sendRequest = function (dataMsg) {
        // wrap in a data message envelope and send it on
        var msg = { t: 'd', d: dataMsg };
        this.sendData_(msg);
    };
    Connection.prototype.tryCleanupConnection = function () {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
            this.conn_ = this.secondaryConn_;
            this.secondaryConn_ = null;
            // the server will shutdown the old connection
        }
    };
    Connection.prototype.onSecondaryControl_ = function (controlData) {
        if (MESSAGE_TYPE in controlData) {
            var cmd = controlData[MESSAGE_TYPE];
            if (cmd === SWITCH_ACK) {
                this.upgradeIfSecondaryHealthy_();
            }
            else if (cmd === CONTROL_RESET) {
                // Most likely the session wasn't valid. Abandon the switch attempt
                this.log_('Got a reset on secondary, closing it');
                this.secondaryConn_.close();
                // If we were already using this connection for something, than we need to fully close
                if (this.tx_ === this.secondaryConn_ ||
                    this.rx_ === this.secondaryConn_) {
                    this.close();
                }
            }
            else if (cmd === CONTROL_PONG) {
                this.log_('got pong on secondary.');
                this.secondaryResponsesRequired_--;
                this.upgradeIfSecondaryHealthy_();
            }
        }
    };
    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
        var layer = util_1.requireKey('t', parsedData);
        var data = util_1.requireKey('d', parsedData);
        if (layer == 'c') {
            this.onSecondaryControl_(data);
        }
        else if (layer == 'd') {
            // got a data message, but we're still second connection. Need to buffer it up
            this.pendingDataMessages.push(data);
        }
        else {
            throw new Error('Unknown protocol layer: ' + layer);
        }
    };
    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
        if (this.secondaryResponsesRequired_ <= 0) {
            this.log_('Secondary connection is healthy.');
            this.isHealthy_ = true;
            this.secondaryConn_.markConnectionHealthy();
            this.proceedWithUpgrade_();
        }
        else {
            // Send a ping to make sure the connection is healthy.
            this.log_('sending ping on secondary.');
            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });
        }
    };
    Connection.prototype.proceedWithUpgrade_ = function () {
        // tell this connection to consider itself open
        this.secondaryConn_.start();
        // send ack
        this.log_('sending client ack on secondary');
        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });
        // send end packet on primary transport, switch to sending on this one
        // can receive on this one, buffer responses until end received on primary transport
        this.log_('Ending transmission on primary');
        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
    };
    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
        var layer = util_1.requireKey('t', parsedData);
        var data = util_1.requireKey('d', parsedData);
        if (layer == 'c') {
            this.onControl_(data);
        }
        else if (layer == 'd') {
            this.onDataMessage_(data);
        }
    };
    Connection.prototype.onDataMessage_ = function (message) {
        this.onPrimaryResponse_();
        // We don't do anything with data messages, just kick them up a level
        this.onMessage_(message);
    };
    Connection.prototype.onPrimaryResponse_ = function () {
        if (!this.isHealthy_) {
            this.primaryResponsesRequired_--;
            if (this.primaryResponsesRequired_ <= 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
            }
        }
    };
    Connection.prototype.onControl_ = function (controlData) {
        var cmd = util_1.requireKey(MESSAGE_TYPE, controlData);
        if (MESSAGE_DATA in controlData) {
            var payload = controlData[MESSAGE_DATA];
            if (cmd === SERVER_HELLO) {
                this.onHandshake_(payload);
            }
            else if (cmd === END_TRANSMISSION) {
                this.log_('recvd end transmission on primary');
                this.rx_ = this.secondaryConn_;
                for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                    this.onDataMessage_(this.pendingDataMessages[i]);
                }
                this.pendingDataMessages = [];
                this.tryCleanupConnection();
            }
            else if (cmd === CONTROL_SHUTDOWN) {
                // This was previously the 'onKill' callback passed to the lower-level connection
                // payload in this case is the reason for the shutdown. Generally a human-readable error
                this.onConnectionShutdown_(payload);
            }
            else if (cmd === CONTROL_RESET) {
                // payload in this case is the host we should contact
                this.onReset_(payload);
            }
            else if (cmd === CONTROL_ERROR) {
                util_1.error('Server Error: ' + payload);
            }
            else if (cmd === CONTROL_PONG) {
                this.log_('got pong on primary.');
                this.onPrimaryResponse_();
                this.sendPingOnPrimaryIfNecessary_();
            }
            else {
                util_1.error('Unknown control packet command: ' + cmd);
            }
        }
    };
    /**
     *
     * @param {Object} handshake The handshake data returned from the server
     * @private
     */
    Connection.prototype.onHandshake_ = function (handshake) {
        var timestamp = handshake.ts;
        var version = handshake.v;
        var host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.updateHost(host);
        // if we've already closed the connection, then don't bother trying to progress further
        if (this.state_ == 0 /* CONNECTING */) {
            this.conn_.start();
            this.onConnectionEstablished_(this.conn_, timestamp);
            if (Constants_1.PROTOCOL_VERSION !== version) {
                util_1.warn('Protocol version mismatch detected');
            }
            // TODO: do we want to upgrade? when? maybe a delay?
            this.tryStartUpgrade_();
        }
    };
    Connection.prototype.tryStartUpgrade_ = function () {
        var conn = this.transportManager_.upgradeTransport();
        if (conn) {
            this.startUpgrade_(conn);
        }
    };
    Connection.prototype.startUpgrade_ = function (conn) {
        var _this = this;
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.secondaryResponsesRequired_ =
            conn['responsesRequiredToBeHealthy'] || 0;
        var onMessage = this.connReceiver_(this.secondaryConn_);
        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect);
        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
        util_1.setTimeoutNonBlocking(function () {
            if (_this.secondaryConn_) {
                _this.log_('Timed out trying to upgrade.');
                _this.secondaryConn_.close();
            }
        }, Math.floor(UPGRADE_TIMEOUT));
    };
    Connection.prototype.onReset_ = function (host) {
        this.log_('Reset packet received.  New host: ' + host);
        this.repoInfo_.updateHost(host);
        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
        // We don't currently support resets after the connection has already been established
        if (this.state_ === 1 /* CONNECTED */) {
            this.close();
        }
        else {
            // Close whatever connections we have open and start again.
            this.closeConnections_();
            this.start_();
        }
    };
    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
        var _this = this;
        this.log_('Realtime connection established.');
        this.conn_ = conn;
        this.state_ = 1 /* CONNECTED */;
        if (this.onReady_) {
            this.onReady_(timestamp, this.sessionId);
            this.onReady_ = null;
        }
        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
        // send some pings.
        if (this.primaryResponsesRequired_ === 0) {
            this.log_('Primary connection is healthy.');
            this.isHealthy_ = true;
        }
        else {
            util_1.setTimeoutNonBlocking(function () {
                _this.sendPingOnPrimaryIfNecessary_();
            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
        }
    };
    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {
            this.log_('sending ping on primary.');
            this.sendData_({ t: 'c', d: { t: PING, d: {} } });
        }
    };
    Connection.prototype.onSecondaryConnectionLost_ = function () {
        var conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) {
            // we are relying on this connection already in some capacity. Therefore, a failure is real
            this.close();
        }
    };
    /**
     *
     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     * @private
     */
    Connection.prototype.onConnectionLost_ = function (everConnected) {
        this.conn_ = null;
        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
        if (!everConnected && this.state_ === 0 /* CONNECTING */) {
            this.log_('Realtime connection failed.');
            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
            if (this.repoInfo_.isCacheableHost()) {
                storage_1.PersistentStorage.remove('host:' + this.repoInfo_.host);
                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                this.repoInfo_.internalHost = this.repoInfo_.host;
            }
        }
        else if (this.state_ === 1 /* CONNECTED */) {
            this.log_('Realtime connection lost.');
        }
        this.close();
    };
    /**
     *
     * @param {string} reason
     * @private
     */
    Connection.prototype.onConnectionShutdown_ = function (reason) {
        this.log_('Connection shutdown command received. Shutting down...');
        if (this.onKill_) {
            this.onKill_(reason);
            this.onKill_ = null;
        }
        // We intentionally don't want to fire onDisconnect (kill is a different case),
        // so clear the callback.
        this.onDisconnect_ = null;
        this.close();
    };
    Connection.prototype.sendData_ = function (data) {
        if (this.state_ !== 1 /* CONNECTED */) {
            throw 'Connection is not connected';
        }
        else {
            this.tx_.send(data);
        }
    };
    /**
     * Cleans up this connection, calling the appropriate callbacks
     */
    Connection.prototype.close = function () {
        if (this.state_ !== 2 /* DISCONNECTED */) {
            this.log_('Closing realtime connection.');
            this.state_ = 2 /* DISCONNECTED */;
            this.closeConnections_();
            if (this.onDisconnect_) {
                this.onDisconnect_();
                this.onDisconnect_ = null;
            }
        }
    };
    /**
     *
     * @private
     */
    Connection.prototype.closeConnections_ = function () {
        this.log_('Shutting down all connections');
        if (this.conn_) {
            this.conn_.close();
            this.conn_ = null;
        }
        if (this.secondaryConn_) {
            this.secondaryConn_.close();
            this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
            clearTimeout(this.healthyTimeout_);
            this.healthyTimeout_ = null;
        }
    };
    return Connection;
}());
exports.Connection = Connection;



},{"../core/storage/storage":52,"../core/util/util":64,"./Constants":83,"./TransportManager":84}],83:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROTOCOL_VERSION = '5';
exports.VERSION_PARAM = 'v';
exports.TRANSPORT_SESSION_PARAM = 's';
exports.REFERER_PARAM = 'r';
exports.FORGE_REF = 'f';
exports.FORGE_DOMAIN = 'firebaseio.com';
exports.LAST_SESSION_PARAM = 'ls';
exports.WEBSOCKET = 'websocket';
exports.LONG_POLLING = 'long_polling';



},{}],84:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var BrowserPollConnection_1 = require("./BrowserPollConnection");
var WebSocketConnection_1 = require("./WebSocketConnection");
var util_1 = require("../core/util/util");
/**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 * @constructor
 */
var TransportManager = /** @class */ (function () {
    /**
     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to
     */
    function TransportManager(repoInfo) {
        this.initTransports_(repoInfo);
    }
    Object.defineProperty(TransportManager, "ALL_TRANSPORTS", {
        /**
         * @const
         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}
         */
        get: function () {
            return [BrowserPollConnection_1.BrowserPollConnection, WebSocketConnection_1.WebSocketConnection];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {!RepoInfo} repoInfo
     * @private
     */
    TransportManager.prototype.initTransports_ = function (repoInfo) {
        var isWebSocketsAvailable = WebSocketConnection_1.WebSocketConnection && WebSocketConnection_1.WebSocketConnection['isAvailable']();
        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection_1.WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
            if (!isWebSocketsAvailable)
                util_1.warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
            isSkipPollConnection = true;
        }
        if (isSkipPollConnection) {
            this.transports_ = [WebSocketConnection_1.WebSocketConnection];
        }
        else {
            var transports_1 = (this.transports_ = []);
            util_1.each(TransportManager.ALL_TRANSPORTS, function (i, transport) {
                if (transport && transport['isAvailable']()) {
                    transports_1.push(transport);
                }
            });
        }
    };
    /**
     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the
     * initial transport to use
     */
    TransportManager.prototype.initialTransport = function () {
        if (this.transports_.length > 0) {
            return this.transports_[0];
        }
        else {
            throw new Error('No transports available');
        }
    };
    /**
     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next
     * transport, or null
     */
    TransportManager.prototype.upgradeTransport = function () {
        if (this.transports_.length > 1) {
            return this.transports_[1];
        }
        else {
            return null;
        }
    };
    return TransportManager;
}());
exports.TransportManager = TransportManager;



},{"../core/util/util":64,"./BrowserPollConnection":81,"./WebSocketConnection":85}],85:[function(require,module,exports){
(function (process){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = require("@firebase/app");
var util_1 = require("@firebase/util");
var util_2 = require("../core/util/util");
var StatsManager_1 = require("../core/stats/StatsManager");
var Constants_1 = require("./Constants");
var util_3 = require("@firebase/util");
var storage_1 = require("../core/storage/storage");
var util_4 = require("@firebase/util");
var util_5 = require("@firebase/util");
var WEBSOCKET_MAX_FRAME_SIZE = 16384;
var WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
var WebSocketImpl = null;
if (typeof MozWebSocket !== 'undefined') {
    WebSocketImpl = MozWebSocket;
}
else if (typeof WebSocket !== 'undefined') {
    WebSocketImpl = WebSocket;
}
function setWebSocketImpl(impl) {
    WebSocketImpl = impl;
}
exports.setWebSocketImpl = setWebSocketImpl;
/**
 * Create a new websocket connection with the given callbacks.
 * @constructor
 * @implements {Transport}
 */
var WebSocketConnection = /** @class */ (function () {
    /**
     * @param {string} connId identifier for this transport
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     */
    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {
        this.connId = connId;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = util_2.logWrapper(this.connId);
        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);
        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);
    }
    /**
     * @param {RepoInfo} repoInfo The info for the websocket endpoint.
     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection
     * @return {string} connection url
     * @private
     */
    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {
        var urlParams = {};
        urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;
        if (!util_5.isNodeSdk() &&
            typeof location !== 'undefined' &&
            location.href &&
            location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {
            urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;
        }
        if (transportSessionId) {
            urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = transportSessionId;
        }
        if (lastSessionId) {
            urlParams[Constants_1.LAST_SESSION_PARAM] = lastSessionId;
        }
        return repoInfo.connectionURL(Constants_1.WEBSOCKET, urlParams);
    };
    /**
     *
     * @param onMessage Callback when messages arrive
     * @param onDisconnect Callback with connection lost.
     */
    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {
        var _this = this;
        this.onDisconnect = onDisconnect;
        this.onMessage = onMessage;
        this.log_('Websocket connecting to ' + this.connURL);
        this.everConnected_ = false;
        // Assume failure until proven otherwise.
        storage_1.PersistentStorage.set('previous_websocket_failure', true);
        try {
            if (util_5.isNodeSdk()) {
                var device = util_3.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';
                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                var options = {
                    headers: {
                        'User-Agent': "Firebase/" + Constants_1.PROTOCOL_VERSION + "/" + app_1.default.SDK_VERSION + "/" + process.platform + "/" + device
                    }
                };
                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                var env = process['env'];
                var proxy = this.connURL.indexOf('wss://') == 0
                    ? env['HTTPS_PROXY'] || env['https_proxy']
                    : env['HTTP_PROXY'] || env['http_proxy'];
                if (proxy) {
                    options['proxy'] = { origin: proxy };
                }
                this.mySock = new WebSocketImpl(this.connURL, [], options);
            }
            else {
                this.mySock = new WebSocketImpl(this.connURL);
            }
        }
        catch (e) {
            this.log_('Error instantiating WebSocket.');
            var error = e.message || e.data;
            if (error) {
                this.log_(error);
            }
            this.onClosed_();
            return;
        }
        this.mySock.onopen = function () {
            _this.log_('Websocket connected.');
            _this.everConnected_ = true;
        };
        this.mySock.onclose = function () {
            _this.log_('Websocket connection was disconnected.');
            _this.mySock = null;
            _this.onClosed_();
        };
        this.mySock.onmessage = function (m) {
            _this.handleIncomingFrame(m);
        };
        this.mySock.onerror = function (e) {
            _this.log_('WebSocket error.  Closing connection.');
            var error = e.message || e.data;
            if (error) {
                _this.log_(error);
            }
            _this.onClosed_();
        };
    };
    /**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */
    WebSocketConnection.prototype.start = function () { };
    WebSocketConnection.forceDisallow = function () {
        WebSocketConnection.forceDisallow_ = true;
    };
    WebSocketConnection.isAvailable = function () {
        var isOldAndroid = false;
        if (typeof navigator !== 'undefined' && navigator.userAgent) {
            var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                if (parseFloat(oldAndroidMatch[1]) < 4.4) {
                    isOldAndroid = true;
                }
            }
        }
        return (!isOldAndroid &&
            WebSocketImpl !== null &&
            !WebSocketConnection.forceDisallow_);
    };
    /**
     * Returns true if we previously failed to connect with this transport.
     * @return {boolean}
     */
    WebSocketConnection.previouslyFailed = function () {
        // If our persistent storage is actually only in-memory storage,
        // we default to assuming that it previously failed to be safe.
        return (storage_1.PersistentStorage.isInMemoryStorage ||
            storage_1.PersistentStorage.get('previous_websocket_failure') === true);
    };
    WebSocketConnection.prototype.markConnectionHealthy = function () {
        storage_1.PersistentStorage.remove('previous_websocket_failure');
    };
    WebSocketConnection.prototype.appendFrame_ = function (data) {
        this.frames.push(data);
        if (this.frames.length == this.totalFrames) {
            var fullMess = this.frames.join('');
            this.frames = null;
            var jsonMess = util_4.jsonEval(fullMess);
            //handle the message
            this.onMessage(jsonMess);
        }
    };
    /**
     * @param {number} frameCount The number of frames we are expecting from the server
     * @private
     */
    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
    };
    /**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @param {!String} data
     * @return {?String} Any remaining data to be process, or null if there is none
     * @private
     */
    WebSocketConnection.prototype.extractFrameCount_ = function (data) {
        util_1.assert(this.frames === null, 'We already have a frame buffer');
        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
        if (data.length <= 6) {
            var frameCount = Number(data);
            if (!isNaN(frameCount)) {
                this.handleNewFrameCount_(frameCount);
                return null;
            }
        }
        this.handleNewFrameCount_(1);
        return data;
    };
    /**
     * Process a websocket frame that has arrived from the server.
     * @param mess The frame data
     */
    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {
        if (this.mySock === null)
            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
        var data = mess['data'];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter('bytes_received', data.length);
        this.resetKeepAlive();
        if (this.frames !== null) {
            // we're buffering
            this.appendFrame_(data);
        }
        else {
            // try to parse out a frame count, otherwise, assume 1 and process it
            var remainingData = this.extractFrameCount_(data);
            if (remainingData !== null) {
                this.appendFrame_(remainingData);
            }
        }
    };
    /**
     * Send a message to the server
     * @param {Object} data The JSON object to transmit
     */
    WebSocketConnection.prototype.send = function (data) {
        this.resetKeepAlive();
        var dataStr = util_4.stringify(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //We can only fit a certain amount in each websocket frame, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        var dataSegs = util_2.splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
        //Send the length header
        if (dataSegs.length > 1) {
            this.sendString_(String(dataSegs.length));
        }
        //Send the actual data in segments.
        for (var i = 0; i < dataSegs.length; i++) {
            this.sendString_(dataSegs[i]);
        }
    };
    WebSocketConnection.prototype.shutdown_ = function () {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = null;
        }
        if (this.mySock) {
            this.mySock.close();
            this.mySock = null;
        }
    };
    WebSocketConnection.prototype.onClosed_ = function () {
        if (!this.isClosed_) {
            this.log_('WebSocket is closing itself');
            this.shutdown_();
            // since this is an internal close, trigger the close listener
            if (this.onDisconnect) {
                this.onDisconnect(this.everConnected_);
                this.onDisconnect = null;
            }
        }
    };
    /**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */
    WebSocketConnection.prototype.close = function () {
        if (!this.isClosed_) {
            this.log_('WebSocket is being closed');
            this.shutdown_();
        }
    };
    /**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */
    WebSocketConnection.prototype.resetKeepAlive = function () {
        var _this = this;
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(function () {
            //If there has been no websocket activity for a while, send a no-op
            if (_this.mySock) {
                _this.sendString_('0');
            }
            _this.resetKeepAlive();
        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
    };
    /**
     * Send a string over the websocket.
     *
     * @param {string} str String to send.
     * @private
     */
    WebSocketConnection.prototype.sendString_ = function (str) {
        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
        // calls for some unknown reason.  We treat these as an error and disconnect.
        // See https://app.asana.com/0/58926111402292/68021340250410
        try {
            this.mySock.send(str);
        }
        catch (e) {
            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
            setTimeout(this.onClosed_.bind(this), 0);
        }
    };
    /**
     * Number of response before we consider the connection "healthy."
     * @type {number}
     */
    WebSocketConnection.responsesRequiredToBeHealthy = 2;
    /**
     * Time to wait for the connection te become healthy before giving up.
     * @type {number}
     */
    WebSocketConnection.healthyTimeout = 30000;
    return WebSocketConnection;
}());
exports.WebSocketConnection = WebSocketConnection;



}).call(this,require('_process'))
},{"../core/stats/StatsManager":48,"../core/storage/storage":52,"../core/util/util":64,"./Constants":83,"@firebase/app":2,"@firebase/util":142,"_process":180}],86:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../core/util/util");
/**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 * @constructor
 */
var PacketReceiver = /** @class */ (function () {
    /**
     * @param onMessage_
     */
    function PacketReceiver(onMessage_) {
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
    }
    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
            this.onClose();
            this.onClose = null;
        }
    };
    /**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     * @param {number} requestNum
     * @param {Array} data
     */
    PacketReceiver.prototype.handleResponse = function (requestNum, data) {
        var _this = this;
        this.pendingResponses[requestNum] = data;
        var _loop_1 = function () {
            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
            delete this_1.pendingResponses[this_1.currentResponseNum];
            var _loop_2 = function (i) {
                if (toProcess[i]) {
                    util_1.exceptionGuard(function () {
                        _this.onMessage_(toProcess[i]);
                    });
                }
            };
            for (var i = 0; i < toProcess.length; ++i) {
                _loop_2(i);
            }
            if (this_1.currentResponseNum === this_1.closeAfterResponse) {
                if (this_1.onClose) {
                    this_1.onClose();
                    this_1.onClose = null;
                }
                return "break";
            }
            this_1.currentResponseNum++;
        };
        var this_1 = this;
        while (this.pendingResponses[this.currentResponseNum]) {
            var state_1 = _loop_1();
            if (state_1 === "break")
                break;
        }
    };
    return PacketReceiver;
}());
exports.PacketReceiver = PacketReceiver;



},{"../../core/util/util":64}],87:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("./src/logger");
function setLogLevel(level) {
    logger_1.instances.forEach(function (inst) {
        inst.logLevel = level;
    });
}
exports.setLogLevel = setLogLevel;
var logger_2 = require("./src/logger");
exports.Logger = logger_2.Logger;
exports.LogLevel = logger_2.LogLevel;



},{"./src/logger":88}],88:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A container for all of the Logger instances
 */
exports.instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/**
 * The default log level
 */
var defaultLogLevel = LogLevel.INFO;
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
var defaultLogHandler = function (instance, logType) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (logType < instance.logLevel)
        return;
    var now = new Date().toISOString();
    switch (logType) {
        /**
         * By default, `console.debug` is not displayed in the developer console (in
         * chrome). To avoid forcing users to have to opt-in to these logs twice
         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
         * logs to the `console.log` function.
         */
        case LogLevel.DEBUG:
            console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
            break;
        case LogLevel.VERBOSE:
            console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
            break;
        case LogLevel.INFO:
            console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
            break;
        case LogLevel.WARN:
            console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
            break;
        case LogLevel.ERROR:
            console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
            break;
        default:
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
    }
};
var Logger = /** @class */ (function () {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    function Logger(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The log handler for the Logger instance.
         */
        this._logHandler = defaultLogHandler;
        /**
         * Capture the current instance for later use
         */
        exports.instances.push(this);
    }
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function () {
            return this._logLevel;
        },
        set: function (val) {
            if (!(val in LogLevel)) {
                throw new TypeError('Invalid value assigned to `logLevel`');
            }
            this._logLevel = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "logHandler", {
        get: function () {
            return this._logHandler;
        },
        set: function (val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The functions below are all based on the `console` interface
     */
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));
    };
    Logger.prototype.info = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));
    };
    return Logger;
}());
exports.Logger = Logger;



},{}],89:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var window_controller_1 = require("./src/controllers/window-controller");
var sw_controller_1 = require("./src/controllers/sw-controller");
var app_1 = require("@firebase/app");
function registerMessaging(instance) {
    var messagingName = 'messaging';
    var factoryMethod = function (app) {
        if (self && 'ServiceWorkerGlobalScope' in self) {
            return new sw_controller_1.default(app);
        }
        // Assume we are in the window context.
        return new window_controller_1.default(app);
    };
    var namespaceExports = {
        // no-inline
        Messaging: window_controller_1.default
    };
    instance.INTERNAL.registerService(messagingName, factoryMethod, namespaceExports);
}
exports.registerMessaging = registerMessaging;
registerMessaging(app_1.firebase);



},{"./src/controllers/sw-controller":91,"./src/controllers/window-controller":92,"@firebase/app":2}],90:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var errors_1 = require("../models/errors");
var token_details_model_1 = require("../models/token-details-model");
var vapid_details_model_1 = require("../models/vapid-details-model");
var notification_permission_1 = require("../models/notification-permission");
var iid_model_1 = require("../models/iid-model");
var array_buffer_to_base64_1 = require("../helpers/array-buffer-to-base64");
var SENDER_ID_OPTION_NAME = 'messagingSenderId';
// Database cache should be invalidated once a week.
exports.TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days
var ControllerInterface = /** @class */ (function () {
    /**
     * An interface of the Messaging Service API
     * @param {!firebase.app.App} app
     */
    function ControllerInterface(app) {
        var _this = this;
        this.errorFactory_ = new util_1.ErrorFactory('messaging', 'Messaging', errors_1.default.map);
        if (!app.options[SENDER_ID_OPTION_NAME] ||
            typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {
            throw this.errorFactory_.create(errors_1.default.codes.BAD_SENDER_ID);
        }
        this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];
        this.tokenDetailsModel_ = new token_details_model_1.default();
        this.vapidDetailsModel_ = new vapid_details_model_1.default();
        this.iidModel_ = new iid_model_1.default();
        this.app = app;
        this.INTERNAL = {};
        this.INTERNAL.delete = function () { return _this.delete(); };
    }
    /**
     * @export
     */
    ControllerInterface.prototype.getToken = function () {
        var _this = this;
        // Check with permissions
        var currentPermission = this.getNotificationPermission_();
        if (currentPermission !== notification_permission_1.default.granted) {
            if (currentPermission === notification_permission_1.default.denied) {
                return Promise.reject(this.errorFactory_.create(errors_1.default.codes.NOTIFICATIONS_BLOCKED));
            }
            // We must wait for permission to be granted
            return Promise.resolve(null);
        }
        var swReg;
        return this.getSWRegistration_()
            .then(function (reg) {
            swReg = reg;
            return _this.tokenDetailsModel_.getTokenDetailsFromSWScope(swReg.scope);
        })
            .then(function (tokenDetails) {
            if (tokenDetails) {
                return _this.manageExistingToken(tokenDetails, swReg);
            }
            return _this.getNewToken(swReg);
        });
    };
    /**
     * manageExistingToken is triggered if there's an existing FCM token in the
     * database and it can take 3 different actions:
     * 1) Retrieve the existing FCM token from the database.
     * 2) If VAPID details have changed: Delete the existing token and create a
     * new one with the new VAPID key.
     * 3) If the database cache is invalidated: Send a request to FCM to update
     * the token, and to check if the token is still valid on FCM-side.
     */
    ControllerInterface.prototype.manageExistingToken = function (tokenDetails, swReg) {
        var _this = this;
        return this.isTokenStillValid(tokenDetails).then(function (isValid) {
            if (isValid) {
                var now = Date.now();
                if (now < tokenDetails['createTime'] + exports.TOKEN_EXPIRATION_MILLIS) {
                    return tokenDetails['fcmToken'];
                }
                else {
                    return _this.updateToken(tokenDetails, swReg);
                }
            }
            else {
                // If the VAPID details are updated, delete the existing token,
                // and create a new one.
                return _this.deleteToken(tokenDetails['fcmToken']).then(function () {
                    return _this.getNewToken(swReg);
                });
            }
        });
    };
    /*
     * Checks if the tokenDetails match the details provided in the clients.
     */
    ControllerInterface.prototype.isTokenStillValid = function (tokenDetails) {
        // TODO Validate rest of the details.
        return this.getPublicVapidKey_().then(function (publicKey) {
            if (array_buffer_to_base64_1.default(publicKey) !== tokenDetails['vapidKey']) {
                return false;
            }
            return true;
        });
    };
    ControllerInterface.prototype.updateToken = function (tokenDetails, swReg) {
        var _this = this;
        var publicVapidKey;
        var updatedToken;
        var subscription;
        return this.getPublicVapidKey_()
            .then(function (publicKey) {
            publicVapidKey = publicKey;
            return _this.getPushSubscription_(swReg, publicVapidKey);
        })
            .then(function (pushSubscription) {
            subscription = pushSubscription;
            return _this.iidModel_.updateToken(_this.messagingSenderId_, tokenDetails['fcmToken'], tokenDetails['fcmPushSet'], subscription, publicVapidKey);
        })
            .catch(function (err) {
            return _this.deleteToken(tokenDetails['fcmToken']).then(function () {
                throw err;
            });
        })
            .then(function (token) {
            updatedToken = token;
            var allDetails = {
                swScope: swReg.scope,
                vapidKey: publicVapidKey,
                subscription: subscription,
                fcmSenderId: _this.messagingSenderId_,
                fcmToken: updatedToken,
                fcmPushSet: tokenDetails['fcmPushSet']
            };
            return _this.tokenDetailsModel_.saveTokenDetails(allDetails);
        })
            .then(function () {
            return _this.vapidDetailsModel_.saveVapidDetails(swReg.scope, publicVapidKey);
        })
            .then(function () {
            return updatedToken;
        });
    };
    ControllerInterface.prototype.getNewToken = function (swReg) {
        var _this = this;
        var publicVapidKey;
        var subscription;
        var tokenDetails;
        return this.getPublicVapidKey_()
            .then(function (publicKey) {
            publicVapidKey = publicKey;
            return _this.getPushSubscription_(swReg, publicVapidKey);
        })
            .then(function (pushSubscription) {
            subscription = pushSubscription;
            return _this.iidModel_.getToken(_this.messagingSenderId_, subscription, publicVapidKey);
        })
            .then(function (iidTokenDetails) {
            tokenDetails = iidTokenDetails;
            var allDetails = {
                swScope: swReg.scope,
                vapidKey: publicVapidKey,
                subscription: subscription,
                fcmSenderId: _this.messagingSenderId_,
                fcmToken: tokenDetails['token'],
                fcmPushSet: tokenDetails['pushSet']
            };
            return _this.tokenDetailsModel_.saveTokenDetails(allDetails);
        })
            .then(function () {
            return _this.vapidDetailsModel_.saveVapidDetails(swReg.scope, publicVapidKey);
        })
            .then(function () {
            return tokenDetails['token'];
        });
    };
    /**
     * This method deletes tokens that the token manager looks after,
     * unsubscribes the token from FCM  and then unregisters the push
     * subscription if it exists. It returns a promise that indicates
     * whether or not the unsubscribe request was processed successfully.
     * @export
     */
    ControllerInterface.prototype.deleteToken = function (token) {
        var _this = this;
        return this.tokenDetailsModel_
            .deleteToken(token)
            .then(function (details) {
            return _this.iidModel_.deleteToken(details['fcmSenderId'], details['fcmToken'], details['fcmPushSet']);
        })
            .then(function () {
            return _this.getSWRegistration_()
                .then(function (registration) {
                if (registration) {
                    return registration.pushManager.getSubscription();
                }
            })
                .then(function (subscription) {
                if (subscription) {
                    return subscription.unsubscribe();
                }
            });
        });
    };
    ControllerInterface.prototype.getSWRegistration_ = function () {
        throw this.errorFactory_.create(errors_1.default.codes.SHOULD_BE_INHERITED);
    };
    ControllerInterface.prototype.getPublicVapidKey_ = function () {
        throw this.errorFactory_.create(errors_1.default.codes.SHOULD_BE_INHERITED);
    };
    //
    // The following methods should only be available in the window.
    //
    ControllerInterface.prototype.requestPermission = function () {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    ControllerInterface.prototype.getPushSubscription_ = function (registration, publicVapidKey) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!ServiceWorkerRegistration} registration
     */
    ControllerInterface.prototype.useServiceWorker = function (registration) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!string} b64PublicKey
     */
    ControllerInterface.prototype.usePublicVapidKey = function (b64PublicKey) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!firebase.Observer|function(*)} nextOrObserver
     * @param {function(!Error)=} optError
     * @param {function()=} optCompleted
     * @return {!function()}
     */
    ControllerInterface.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    /**
     * @export
     * @param {!firebase.Observer|function()} nextOrObserver An observer object
     * or a function triggered on token refresh.
     * @param {function(!Error)=} optError Optional A function
     * triggered on token refresh error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_WINDOW);
    };
    //
    // The following methods are used by the service worker only.
    //
    /**
     * @export
     * @param {function(Object)} callback
     */
    ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {
        throw this.errorFactory_.create(errors_1.default.codes.AVAILABLE_IN_SW);
    };
    //
    // The following methods are used by the service themselves and not exposed
    // publicly or not expected to be used by developers.
    //
    /**
     * This method is required to adhere to the Firebase interface.
     * It closes any currently open indexdb database connections.
     */
    ControllerInterface.prototype.delete = function () {
        return Promise.all([
            this.tokenDetailsModel_.closeDatabase(),
            this.vapidDetailsModel_.closeDatabase()
        ]);
    };
    /**
     * Returns the current Notification Permission state.
     * @private
     * @return {string} The currenct permission state.
     */
    ControllerInterface.prototype.getNotificationPermission_ = function () {
        return Notification.permission;
    };
    ControllerInterface.prototype.getTokenDetailsModel = function () {
        return this.tokenDetailsModel_;
    };
    ControllerInterface.prototype.getVapidDetailsModel = function () {
        return this.vapidDetailsModel_;
    };
    /**
     * @protected
     * @returns {IIDModel}
     */
    ControllerInterface.prototype.getIIDModel = function () {
        return this.iidModel_;
    };
    return ControllerInterface;
}());
exports.default = ControllerInterface;



},{"../helpers/array-buffer-to-base64":93,"../models/errors":98,"../models/iid-model":100,"../models/notification-permission":101,"../models/token-details-model":102,"../models/vapid-details-model":103,"@firebase/util":142}],91:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var controller_interface_1 = require("./controller-interface");
var errors_1 = require("../models/errors");
var fcm_details_1 = require("../models/fcm-details");
var worker_page_message_1 = require("../models/worker-page-message");
var FCM_MSG = 'FCM_MSG';
var SWController = /** @class */ (function (_super) {
    tslib_1.__extends(SWController, _super);
    function SWController(app) {
        var _this = _super.call(this, app) || this;
        self.addEventListener('push', function (e) { return _this.onPush_(e); }, false);
        self.addEventListener('pushsubscriptionchange', function (e) { return _this.onSubChange_(e); }, false);
        self.addEventListener('notificationclick', function (e) { return _this.onNotificationClick_(e); }, false);
        /**
         * @private
         * @type {function(Object)|null}
         */
        _this.bgMessageHandler_ = null;
        return _this;
    }
    /**
     * A handler for push events that shows notifications based on the content of
     * the payload.
     *
     * The payload must be a JSON-encoded Object with a `notification` key. The
     * value of the `notification` property will be used as the NotificationOptions
     * object passed to showNotification. Additionally, the `title` property of the
     * notification object will be used as the title.
     *
     * If there is no notification data in the payload then no notification will be
     * shown.
     * @private
     */
    SWController.prototype.onPush_ = function (event) {
        var _this = this;
        var msgPayload;
        try {
            msgPayload = event.data.json();
        }
        catch (err) {
            // Not JSON so not an FCM message
            return;
        }
        var handleMsgPromise = this.hasVisibleClients_().then(function (hasVisibleClients) {
            if (hasVisibleClients) {
                // Do not need to show a notification.
                if (msgPayload.notification || _this.bgMessageHandler_) {
                    // Send to page
                    return _this.sendMessageToWindowClients_(msgPayload);
                }
                return;
            }
            var notificationDetails = _this.getNotificationData_(msgPayload);
            if (notificationDetails) {
                var notificationTitle_1 = notificationDetails.title || '';
                return _this.getSWRegistration_().then(function (reg) {
                    return reg.showNotification(notificationTitle_1, notificationDetails);
                });
            }
            else if (_this.bgMessageHandler_) {
                return _this.bgMessageHandler_(msgPayload);
            }
        });
        event.waitUntil(handleMsgPromise);
    };
    /**
     * @private
     */
    SWController.prototype.onSubChange_ = function (event) {
        var _this = this;
        var promiseChain = this.getSWRegistration_()
            .then(function (registration) {
            return registration.pushManager
                .getSubscription()
                .then(function (subscription) {
                // TODO: Check if it's still valid
                // TODO: If not, then update token
            })
                .catch(function (err) {
                // The best thing we can do is log this to the terminal so
                // developers might notice the error.
                var tokenDetailsModel = _this.getTokenDetailsModel();
                return tokenDetailsModel
                    .getTokenDetailsFromSWScope(registration.scope)
                    .then(function (tokenDetails) {
                    if (!tokenDetails) {
                        // This should rarely occure, but could if indexedDB
                        // is corrupted or wiped
                        throw err;
                    }
                    // Attempt to delete the token if we know it's bad
                    return _this.deleteToken(tokenDetails['fcmToken']).then(function () {
                        throw err;
                    });
                });
            });
        })
            .catch(function (err) {
            throw _this.errorFactory_.create(errors_1.default.codes.UNABLE_TO_RESUBSCRIBE, {
                message: err
            });
        });
        event.waitUntil(promiseChain);
    };
    /**
     * @private
     */
    SWController.prototype.onNotificationClick_ = function (event) {
        var _this = this;
        if (!(event.notification &&
            event.notification.data &&
            event.notification.data[FCM_MSG])) {
            // Not an FCM notification, do nothing.
            return;
        }
        // Prevent other listeners from receiving the event
        event.stopImmediatePropagation();
        event.notification.close();
        var msgPayload = event.notification.data[FCM_MSG];
        if (!msgPayload['notification']) {
            // Nothing to do.
            return;
        }
        var clickAction = msgPayload['notification']['click_action'];
        if (!clickAction) {
            // Nothing to do.
            return;
        }
        var promiseChain = this.getWindowClient_(clickAction)
            .then(function (windowClient) {
            if (!windowClient) {
                // Unable to find window client so need to open one.
                return self.clients.openWindow(clickAction);
            }
            return windowClient.focus();
        })
            .then(function (windowClient) {
            if (!windowClient) {
                // Window Client will not be returned if it's for a third party origin.
                return;
            }
            // Delete notification data from payload before sending to the page.
            var notificationData = msgPayload['notification'];
            delete msgPayload['notification'];
            var internalMsg = worker_page_message_1.default.createNewMsg(worker_page_message_1.default.TYPES_OF_MSG.NOTIFICATION_CLICKED, msgPayload);
            // Attempt to send a message to the client to handle the data
            // Is affected by: https://github.com/slightlyoff/ServiceWorker/issues/728
            return _this.attemptToMessageClient_(windowClient, internalMsg);
        });
        event.waitUntil(promiseChain);
    };
    /**
     * @private
     * @param {Object} msgPayload
     * @return {NotificationOptions|undefined}
     */
    SWController.prototype.getNotificationData_ = function (msgPayload) {
        if (!msgPayload) {
            return;
        }
        if (typeof msgPayload.notification !== 'object') {
            return;
        }
        var notificationInformation = Object.assign({}, msgPayload.notification);
        // Put the message payload under FCM_MSG name so we can identify the
        // notification as being an FCM notification vs a notification from
        // somewhere else (i.e. normal web push or developer generated
        // notification).
        notificationInformation['data'] = (_a = {},
            _a[FCM_MSG] = msgPayload,
            _a);
        return notificationInformation;
        var _a;
    };
    /**
     * Calling setBackgroundMessageHandler will opt in to some specific
     * behaviours.
     * 1.) If a notification doesn't need to be shown due to a window already
     * being visible, then push messages will be sent to the page.
     * 2.) If a notification needs to be shown, and the message contains no
     * notification data this method will be called
     * and the promise it returns will be passed to event.waitUntil.
     * If you do not set this callback then all push messages will let and the
     * developer can handle them in a their own 'push' event callback
     * @export
     * @param {function(Object)} callback The callback to be called when a push
     * message is received and a notification must be shown. The callback will
     * be given the data from the push message.
     */
    SWController.prototype.setBackgroundMessageHandler = function (callback) {
        if (!callback || typeof callback !== 'function') {
            throw this.errorFactory_.create(errors_1.default.codes.BG_HANDLER_FUNCTION_EXPECTED);
        }
        this.bgMessageHandler_ = callback;
    };
    /**
     * @private
     * @param {string} url The URL to look for when focusing a client.
     * @return {Object} Returns an existing window client or a newly opened
     * WindowClient.
     */
    SWController.prototype.getWindowClient_ = function (url) {
        // Use URL to normalize the URL when comparing to windowClients.
        // This at least handles whether to include trailing slashes or not
        var parsedURL = new URL(url, self.location).href;
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            var suitableClient = null;
            for (var i = 0; i < clientList.length; i++) {
                var parsedClientUrl = new URL(clientList[i].url, self.location).href;
                if (parsedClientUrl === parsedURL) {
                    suitableClient = clientList[i];
                    break;
                }
            }
            if (suitableClient) {
                return suitableClient;
            }
            return null;
        });
    };
    /**
     * This message will attempt to send the message to a window client.
     * @private
     * @param {Object} client The WindowClient to send the message to.
     * @param {Object} message The message to send to the client.
     * @returns {Promise} Returns a promise that resolves after sending the
     * message. This does not guarantee that the message was successfully
     * received.
     */
    SWController.prototype.attemptToMessageClient_ = function (client, message) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // NOTE: This returns a promise in case this API is abstracted later on to
                // do additional work
                if (!client) {
                    return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.NO_WINDOW_CLIENT_TO_MSG))];
                }
                client.postMessage(message);
                return [2 /*return*/];
            });
        });
    };
    /**
     * @private
     * @returns {Promise<boolean>} If there is currently a visible WindowClient,
     * this method will resolve to true, otherwise false.
     */
    SWController.prototype.hasVisibleClients_ = function () {
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            return clientList.some(function (client) { return client.visibilityState === 'visible'; });
        });
    };
    /**
     * @private
     * @param {Object} msgPayload The data from the push event that should be sent
     * to all available pages.
     * @returns {Promise} Returns a promise that resolves once the message
     * has been sent to all WindowClients.
     */
    SWController.prototype.sendMessageToWindowClients_ = function (msgPayload) {
        var _this = this;
        return self.clients
            .matchAll({
            type: 'window',
            includeUncontrolled: true
        })
            .then(function (clientList) {
            var internalMsg = worker_page_message_1.default.createNewMsg(worker_page_message_1.default.TYPES_OF_MSG.PUSH_MSG_RECEIVED, msgPayload);
            return Promise.all(clientList.map(function (client) {
                return _this.attemptToMessageClient_(client, internalMsg);
            }));
        });
    };
    /**
     * This will register the default service worker and return the registration.
     * @private
     * @return {Promise<!ServiceWorkerRegistration>} The service worker
     * registration to be used for the push service.
     */
    SWController.prototype.getSWRegistration_ = function () {
        return Promise.resolve(self.registration);
    };
    /**
     * This will return the default VAPID key or the uint8array version of the
     * public VAPID key provided by the developer.
     */
    SWController.prototype.getPublicVapidKey_ = function () {
        var _this = this;
        return this.getSWRegistration_()
            .then(function (swReg) {
            return _this.getVapidDetailsModel().getVapidFromSWScope(swReg.scope);
        })
            .then(function (vapidKeyFromDatabase) {
            if (vapidKeyFromDatabase === null) {
                return fcm_details_1.default.DEFAULT_PUBLIC_VAPID_KEY;
            }
            return vapidKeyFromDatabase;
        });
    };
    return SWController;
}(controller_interface_1.default));
exports.default = SWController;



},{"../models/errors":98,"../models/fcm-details":99,"../models/worker-page-message":104,"./controller-interface":90,"tslib":176}],92:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var controller_interface_1 = require("./controller-interface");
var errors_1 = require("../models/errors");
var worker_page_message_1 = require("../models/worker-page-message");
var default_sw_1 = require("../models/default-sw");
var notification_permission_1 = require("../models/notification-permission");
var fcm_details_1 = require("../models/fcm-details");
var base64_to_array_buffer_1 = require("../helpers/base64-to-array-buffer");
var util_1 = require("@firebase/util");
var WindowController = /** @class */ (function (_super) {
    tslib_1.__extends(WindowController, _super);
    /**
     * A service that provides a MessagingService instance.
     * @param {!firebase.app.App} app
     */
    function WindowController(app) {
        var _this = _super.call(this, app) || this;
        _this.messageObserver_ = null;
        _this.onMessage_ = util_1.createSubscribe(function (observer) {
            _this.messageObserver_ = observer;
        });
        _this.tokenRefreshObserver_ = null;
        _this.onTokenRefresh_ = util_1.createSubscribe(function (observer) {
            _this.tokenRefreshObserver_ = observer;
        });
        /**
         * @private
         * @type {ServiceWorkerRegistration}
         */
        _this.registrationToUse_;
        /**
         * @private
         * @type {Promise}
         */
        _this.manifestCheckPromise_;
        /**
         * @private
         * @type {firebase.Observer}
         */
        _this.messageObserver_ = null;
        /**
         * @private {!firebase.Subscribe} The subscribe function to the onMessage
         * observer.
         */
        _this.onMessage_ = util_1.createSubscribe(function (observer) {
            _this.messageObserver_ = observer;
        });
        /**
         * @private
         * @type {firebase.Observer}
         */
        _this.tokenRefreshObserver_ = null;
        _this.onTokenRefresh_ = util_1.createSubscribe(function (observer) {
            _this.tokenRefreshObserver_ = observer;
        });
        _this.setupSWMessageListener_();
        return _this;
    }
    /**
     * This method returns an FCM token if it can be generated.
     * The return promise will reject if the browser doesn't support
     * FCM, if permission is denied for notifications or it's not
     * possible to generate a token.
     * @export
     * @return {Promise<string> | Promise<null>} Returns a promise the
     * resolves to an FCM token or null if permission isn't granted.
     */
    WindowController.prototype.getToken = function () {
        var _this = this;
        // Check that the required API's are available
        if (!this.isSupported_()) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.UNSUPPORTED_BROWSER));
        }
        return this.manifestCheck_().then(function () {
            return _super.prototype.getToken.call(_this);
        });
    };
    /**
     * The method checks that a manifest is defined and has the correct GCM
     * sender ID.
     * @private
     * @return {Promise} Returns a promise that resolves if the manifest matches
     * our required sender ID
     */
    WindowController.prototype.manifestCheck_ = function () {
        var _this = this;
        if (this.manifestCheckPromise_) {
            return this.manifestCheckPromise_;
        }
        var manifestTag = document.querySelector('link[rel="manifest"]');
        if (!manifestTag) {
            this.manifestCheckPromise_ = Promise.resolve();
        }
        else {
            this.manifestCheckPromise_ = fetch(manifestTag.href)
                .then(function (response) {
                return response.json();
            })
                .catch(function () {
                // If the download or parsing fails allow check.
                // We only want to error if we KNOW that the gcm_sender_id is incorrect.
            })
                .then(function (manifestContent) {
                if (!manifestContent) {
                    return;
                }
                if (!manifestContent['gcm_sender_id']) {
                    return;
                }
                if (manifestContent['gcm_sender_id'] !== '103953800507') {
                    throw _this.errorFactory_.create(errors_1.default.codes.INCORRECT_GCM_SENDER_ID);
                }
            });
        }
        return this.manifestCheckPromise_;
    };
    /**
     * Request permission if it is not currently granted
     * @export
     * @returns {Promise} Resolves if the permission was granted, otherwise
     * rejects
     */
    WindowController.prototype.requestPermission = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (Notification.permission === notification_permission_1.default.granted) {
                    return [2 /*return*/];
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var managePermissionResult = function (result) {
                            if (result === notification_permission_1.default.granted) {
                                return resolve();
                            }
                            else if (result === notification_permission_1.default.denied) {
                                return reject(_this.errorFactory_.create(errors_1.default.codes.PERMISSION_BLOCKED));
                            }
                            else {
                                return reject(_this.errorFactory_.create(errors_1.default.codes.PERMISSION_DEFAULT));
                            }
                        };
                        // The Notification.requestPermission API was changed to
                        // return a promise so now have to handle both in case
                        // browsers stop support callbacks for promised version
                        var permissionPromise = Notification.requestPermission(managePermissionResult);
                        if (permissionPromise) {
                            // Prefer the promise version as it's the future API.
                            permissionPromise.then(managePermissionResult);
                        }
                    })];
            });
        });
    };
    /**
     * This method allows a developer to override the default service worker and
     * instead use a custom service worker.
     * @export
     * @param {!ServiceWorkerRegistration} registration The service worker
     * registration that should be used to receive the push messages.
     */
    WindowController.prototype.useServiceWorker = function (registration) {
        if (!(registration instanceof ServiceWorkerRegistration)) {
            throw this.errorFactory_.create(errors_1.default.codes.SW_REGISTRATION_EXPECTED);
        }
        if (typeof this.registrationToUse_ !== 'undefined') {
            throw this.errorFactory_.create(errors_1.default.codes.USE_SW_BEFORE_GET_TOKEN);
        }
        this.registrationToUse_ = registration;
    };
    /**
     * This method allows a developer to override the default vapid key
     * and instead use a custom VAPID public key.
     * @export
     * @param {!string} publicKey A URL safe base64 encoded string.
     */
    WindowController.prototype.usePublicVapidKey = function (publicKey) {
        if (typeof publicKey !== 'string') {
            throw this.errorFactory_.create(errors_1.default.codes.INVALID_PUBLIC_VAPID_KEY);
        }
        if (typeof this.publicVapidKeyToUse_ !== 'undefined') {
            throw this.errorFactory_.create(errors_1.default.codes.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);
        }
        var parsedKey = base64_to_array_buffer_1.default(publicKey);
        if (parsedKey.length !== 65) {
            throw this.errorFactory_.create(errors_1.default.codes.PUBLIC_KEY_DECRYPTION_FAILED);
        }
        this.publicVapidKeyToUse_ = parsedKey;
    };
    /**
     * @export
     * @param {!firebase.Observer|function(*)} nextOrObserver An observer object
     * or a function triggered on message.
     * @param {function(!Error)=} optError Optional A function triggered on
     * message error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    WindowController.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {
        return this.onMessage_(nextOrObserver, optError, optCompleted);
    };
    /**
     * @export
     * @param {!firebase.Observer|function()} nextOrObserver An observer object
     * or a function triggered on token refresh.
     * @param {function(!Error)=} optError Optional A function
     * triggered on token refresh error.
     * @param {function()=} optCompleted Optional function triggered when the
     * observer is removed.
     * @return {!function()} The unsubscribe function for the observer.
     */
    WindowController.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {
        return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);
    };
    /**
     * Given a registration, wait for the service worker it relates to
     * become activer
     * @private
     * @param  {ServiceWorkerRegistration} registration Registration to wait
     * for service worker to become active
     * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker
     * registration to become active
     */
    WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {
        var _this = this;
        var serviceWorker = registration.installing || registration.waiting || registration.active;
        return new Promise(function (resolve, reject) {
            if (!serviceWorker) {
                // This is a rare scenario but has occured in firefox
                reject(_this.errorFactory_.create(errors_1.default.codes.NO_SW_IN_REG));
                return;
            }
            // Because the Promise function is called on next tick there is a
            // small chance that the worker became active or redundant already.
            if (serviceWorker.state === 'activated') {
                resolve(registration);
                return;
            }
            if (serviceWorker.state === 'redundant') {
                reject(_this.errorFactory_.create(errors_1.default.codes.SW_REG_REDUNDANT));
                return;
            }
            var stateChangeListener = function () {
                if (serviceWorker.state === 'activated') {
                    resolve(registration);
                }
                else if (serviceWorker.state === 'redundant') {
                    reject(_this.errorFactory_.create(errors_1.default.codes.SW_REG_REDUNDANT));
                }
                else {
                    // Return early and wait to next state change
                    return;
                }
                serviceWorker.removeEventListener('statechange', stateChangeListener);
            };
            serviceWorker.addEventListener('statechange', stateChangeListener);
        });
    };
    /**
     * This will regiater the default service worker and return the registration
     * @private
     * @return {Promise<!ServiceWorkerRegistration>} The service worker
     * registration to be used for the push service.
     */
    WindowController.prototype.getSWRegistration_ = function () {
        var _this = this;
        if (this.registrationToUse_) {
            return this.waitForRegistrationToActivate_(this.registrationToUse_);
        }
        // Make the registration null so we know useServiceWorker will not
        // use a new service worker as registrationToUse_ is no longer undefined
        this.registrationToUse_ = null;
        return navigator.serviceWorker
            .register(default_sw_1.default.path, {
            scope: default_sw_1.default.scope
        })
            .catch(function (err) {
            throw _this.errorFactory_.create(errors_1.default.codes.FAILED_DEFAULT_REGISTRATION, {
                browserErrorMessage: err.message
            });
        })
            .then(function (registration) {
            return _this.waitForRegistrationToActivate_(registration).then(function () {
                _this.registrationToUse_ = registration;
                // We update after activation due to an issue with Firefox v49 where
                // a race condition occassionally causes the service work to not
                // install
                registration.update();
                return registration;
            });
        });
    };
    /**
     * This will return the default VAPID key or the uint8array version of the public VAPID key
     * provided by the developer.
     * @private
     */
    WindowController.prototype.getPublicVapidKey_ = function () {
        if (this.publicVapidKeyToUse_) {
            return Promise.resolve(this.publicVapidKeyToUse_);
        }
        return Promise.resolve(fcm_details_1.default.DEFAULT_PUBLIC_VAPID_KEY);
    };
    /**
     * Gets a PushSubscription for the current user.
     * @private
     * @param {ServiceWorkerRegistration} registration
     * @return {Promise<PushSubscription>}
     */
    WindowController.prototype.getPushSubscription_ = function (swRegistration, publicVapidKey) {
        // Check for existing subscription first
        var subscription;
        var fcmTokenDetails;
        return swRegistration.pushManager.getSubscription().then(function (subscription) {
            if (subscription) {
                return subscription;
            }
            return swRegistration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: publicVapidKey
            });
        });
    };
    /**
     * This method will set up a message listener to handle
     * events from the service worker that should trigger
     * events in the page.
     *
     * @private
     */
    WindowController.prototype.setupSWMessageListener_ = function () {
        var _this = this;
        if (!('serviceWorker' in navigator)) {
            return;
        }
        navigator.serviceWorker.addEventListener('message', function (event) {
            if (!event.data || !event.data[worker_page_message_1.default.PARAMS.TYPE_OF_MSG]) {
                // Not a message from FCM
                return;
            }
            var workerPageMessage = event.data;
            switch (workerPageMessage[worker_page_message_1.default.PARAMS.TYPE_OF_MSG]) {
                case worker_page_message_1.default.TYPES_OF_MSG.PUSH_MSG_RECEIVED:
                case worker_page_message_1.default.TYPES_OF_MSG.NOTIFICATION_CLICKED:
                    var pushMessage = workerPageMessage[worker_page_message_1.default.PARAMS.DATA];
                    if (_this.messageObserver_) {
                        _this.messageObserver_.next(pushMessage);
                    }
                    break;
                default:
                    // Noop.
                    break;
            }
        }, false);
    };
    /**
     * Checks to see if the required API's are valid or not.
     * @private
     * @return {boolean} Returns true if the desired APIs are available.
     */
    WindowController.prototype.isSupported_ = function () {
        return ('serviceWorker' in navigator &&
            'PushManager' in window &&
            'Notification' in window &&
            'fetch' in window &&
            ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&
            PushSubscription.prototype.hasOwnProperty('getKey'));
    };
    return WindowController;
}(controller_interface_1.default));
exports.default = WindowController;



},{"../helpers/base64-to-array-buffer":94,"../models/default-sw":97,"../models/errors":98,"../models/fcm-details":99,"../models/notification-permission":101,"../models/worker-page-message":104,"./controller-interface":90,"@firebase/util":142,"tslib":176}],93:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function toBase64(arrayBuffer) {
    var uint8Version = new Uint8Array(arrayBuffer);
    return window.btoa(String.fromCharCode.apply(null, uint8Version));
}
exports.default = (function (arrayBuffer) {
    var base64String = toBase64(arrayBuffer);
    return base64String
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
});



},{}],94:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (function (base64String) {
    var padding = '='.repeat((4 - base64String.length % 4) % 4);
    var base64 = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
});



},{}],95:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * There seems to have been a bug in the messaging SDK versions <= 4.9.x
 * where the IndexedDB model was using a database name of 'undefined'.
 *
 * In 4.10.x we changed the model implementation, but kept the database
 * name as it should have been. This however introduced an issue where
 * two tokens were pointing to the same underlying PushSubscription.
 *
 * This code will look for the undefined database and delete any of the
 * underlying tokens.
 */
var iid_model_1 = require("../models/iid-model");
var OLD_DB_NAME = 'undefined';
var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';
function handleDb(db) {
    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
        // We found a database with the name 'undefined', but our expected object
        // store isn't defined.
        return;
    }
    var transaction = db.transaction(OLD_OBJECT_STORE_NAME);
    var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);
    var iidModel = new iid_model_1.default();
    var openCursorRequest = objectStore.openCursor();
    openCursorRequest.onerror = function (event) {
        // NOOP - Nothing we can do.
        console.warn('Unable to cleanup old IDB.', event);
    };
    openCursorRequest.onsuccess = function () {
        var cursor = openCursorRequest.result;
        if (cursor) {
            // cursor.value contains the current record being iterated through
            // this is where you'd do something with the result
            var tokenDetails = cursor.value;
            iidModel.deleteToken(tokenDetails.fcmSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet);
            cursor.continue();
        }
        else {
            db.close();
            indexedDB.deleteDatabase(OLD_DB_NAME);
        }
    };
}
function cleanV1() {
    var request = indexedDB.open(OLD_DB_NAME);
    request.onerror = function (event) {
        // NOOP - Nothing we can do.
    };
    request.onsuccess = function (event) {
        var db = request.result;
        handleDb(db);
    };
}
exports.cleanV1 = cleanV1;



},{"../models/iid-model":100}],96:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var errors_1 = require("./errors");
var DBInterface = /** @class */ (function () {
    /**
     * @param {string} dbName
     * @param {number} dbVersion
     */
    function DBInterface(dbName, dbVersion) {
        this.errorFactory_ = new util_1.ErrorFactory('messaging', 'Messaging', errors_1.default.map);
        this.DB_NAME_ = dbName;
        this.dbVersion_ = dbVersion;
        this.openDbPromise_ = null;
        this.TRANSACTION_READ_WRITE = 'readwrite';
    }
    /**
     * Get the indexedDB as a promsie.
     * @protected
     * @return {!Promise<!IDBDatabase>} The IndexedDB database
     */
    DBInterface.prototype.openDatabase = function () {
        var _this = this;
        if (this.openDbPromise_) {
            return this.openDbPromise_;
        }
        this.openDbPromise_ = new Promise(function (resolve, reject) {
            var request = indexedDB.open(_this.DB_NAME_, _this.dbVersion_);
            request.onerror = function (event) {
                reject(event.target.error);
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onupgradeneeded = function (event) {
                try {
                    var db = event.target.result;
                    _this.onDBUpgrade(db, event);
                }
                catch (err) {
                    // close the database as it can't be used.
                    db.close();
                    reject(err);
                }
            };
        });
        return this.openDbPromise_;
    };
    /**
     * Close the currently open database.
     * @return {!Promise} Returns the result of the promise chain.
     */
    DBInterface.prototype.closeDatabase = function () {
        var _this = this;
        return Promise.resolve().then(function () {
            if (_this.openDbPromise_) {
                return _this.openDbPromise_.then(function (db) {
                    db.close();
                    _this.openDbPromise_ = null;
                });
            }
        });
    };
    /**
     * @protected
     * @param {!IDBDatabase} db
     */
    DBInterface.prototype.onDBUpgrade = function (db, event) {
        throw this.errorFactory_.create(errors_1.default.codes.SHOULD_BE_INHERITED);
    };
    return DBInterface;
}());
exports.default = DBInterface;



},{"./errors":98,"@firebase/util":142}],97:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    path: '/firebase-messaging-sw.js',
    scope: '/firebase-cloud-messaging-push-scope'
};



},{}],98:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var CODES = {
    AVAILABLE_IN_WINDOW: 'only-available-in-window',
    AVAILABLE_IN_SW: 'only-available-in-sw',
    SHOULD_BE_INHERITED: 'should-be-overriden',
    BAD_SENDER_ID: 'bad-sender-id',
    INCORRECT_GCM_SENDER_ID: 'incorrect-gcm-sender-id',
    PERMISSION_DEFAULT: 'permission-default',
    PERMISSION_BLOCKED: 'permission-blocked',
    UNSUPPORTED_BROWSER: 'unsupported-browser',
    NOTIFICATIONS_BLOCKED: 'notifications-blocked',
    FAILED_DEFAULT_REGISTRATION: 'failed-serviceworker-registration',
    SW_REGISTRATION_EXPECTED: 'sw-registration-expected',
    GET_SUBSCRIPTION_FAILED: 'get-subscription-failed',
    INVALID_SAVED_TOKEN: 'invalid-saved-token',
    SW_REG_REDUNDANT: 'sw-reg-redundant',
    TOKEN_SUBSCRIBE_FAILED: 'token-subscribe-failed',
    TOKEN_SUBSCRIBE_NO_TOKEN: 'token-subscribe-no-token',
    TOKEN_SUBSCRIBE_NO_PUSH_SET: 'token-subscribe-no-push-set',
    TOKEN_UNSUBSCRIBE_FAILED: 'token-unsubscribe-failed',
    TOKEN_UPDATE_FAILED: 'token-update-failed',
    TOKEN_UPDATE_NO_TOKEN: 'token-update-no-token',
    USE_SW_BEFORE_GET_TOKEN: 'use-sw-before-get-token',
    INVALID_DELETE_TOKEN: 'invalid-delete-token',
    DELETE_TOKEN_NOT_FOUND: 'delete-token-not-found',
    DELETE_SCOPE_NOT_FOUND: 'delete-scope-not-found',
    BG_HANDLER_FUNCTION_EXPECTED: 'bg-handler-function-expected',
    NO_WINDOW_CLIENT_TO_MSG: 'no-window-client-to-msg',
    UNABLE_TO_RESUBSCRIBE: 'unable-to-resubscribe',
    NO_FCM_TOKEN_FOR_RESUBSCRIBE: 'no-fcm-token-for-resubscribe',
    FAILED_TO_DELETE_TOKEN: 'failed-to-delete-token',
    NO_SW_IN_REG: 'no-sw-in-reg',
    BAD_SCOPE: 'bad-scope',
    BAD_VAPID_KEY: 'bad-vapid-key',
    BAD_SUBSCRIPTION: 'bad-subscription',
    BAD_TOKEN: 'bad-token',
    BAD_PUSH_SET: 'bad-push-set',
    FAILED_DELETE_VAPID_KEY: 'failed-delete-vapid-key',
    INVALID_PUBLIC_VAPID_KEY: 'invalid-public-vapid-key',
    USE_PUBLIC_KEY_BEFORE_GET_TOKEN: 'use-public-key-before-get-token',
    PUBLIC_KEY_DECRYPTION_FAILED: 'public-vapid-key-decryption-failed'
};
var ERROR_MAP = (_a = {},
    _a[CODES.AVAILABLE_IN_WINDOW] = 'This method is available in a Window context.',
    _a[CODES.AVAILABLE_IN_SW] = 'This method is available in a service worker ' + 'context.',
    _a[CODES.SHOULD_BE_INHERITED] = 'This method should be overriden by ' + 'extended classes.',
    _a[CODES.BAD_SENDER_ID] = "Please ensure that 'messagingSenderId' is set " +
        'correctly in the options passed into firebase.initializeApp().',
    _a[CODES.PERMISSION_DEFAULT] = 'The required permissions were not granted and ' + 'dismissed instead.',
    _a[CODES.PERMISSION_BLOCKED] = 'The required permissions were not granted and ' + 'blocked instead.',
    _a[CODES.UNSUPPORTED_BROWSER] = "This browser doesn't support the API's " +
        'required to use the firebase SDK.',
    _a[CODES.NOTIFICATIONS_BLOCKED] = 'Notifications have been blocked.',
    _a[CODES.FAILED_DEFAULT_REGISTRATION] = 'We are unable to register the ' +
        'default service worker. {$browserErrorMessage}',
    _a[CODES.SW_REGISTRATION_EXPECTED] = 'A service worker registration was the ' + 'expected input.',
    _a[CODES.GET_SUBSCRIPTION_FAILED] = 'There was an error when trying to get ' +
        'any existing Push Subscriptions.',
    _a[CODES.INVALID_SAVED_TOKEN] = 'Unable to access details of the saved token.',
    _a[CODES.SW_REG_REDUNDANT] = 'The service worker being used for push was made ' + 'redundant.',
    _a[CODES.TOKEN_SUBSCRIBE_FAILED] = 'A problem occured while subscribing the ' + 'user to FCM: {$message}',
    _a[CODES.TOKEN_SUBSCRIBE_NO_TOKEN] = 'FCM returned no token when subscribing ' + 'the user to push.',
    _a[CODES.TOKEN_SUBSCRIBE_NO_PUSH_SET] = 'FCM returned an invalid response ' + 'when getting an FCM token.',
    _a[CODES.TOKEN_UNSUBSCRIBE_FAILED] = 'A problem occured while unsubscribing the ' + 'user from FCM: {$message}',
    _a[CODES.TOKEN_UPDATE_FAILED] = 'A problem occured while updating the ' + 'user from FCM: {$message}',
    _a[CODES.TOKEN_UPDATE_NO_TOKEN] = 'FCM returned no token when updating ' + 'the user to push.',
    _a[CODES.USE_SW_BEFORE_GET_TOKEN] = 'You must call useServiceWorker() before ' +
        'calling getToken() to ensure your service worker is used.',
    _a[CODES.INVALID_DELETE_TOKEN] = 'You must pass a valid token into ' +
        'deleteToken(), i.e. the token from getToken().',
    _a[CODES.DELETE_TOKEN_NOT_FOUND] = 'The deletion attempt for token could not ' +
        'be performed as the token was not found.',
    _a[CODES.DELETE_SCOPE_NOT_FOUND] = 'The deletion attempt for service worker ' +
        'scope could not be performed as the scope was not found.',
    _a[CODES.BG_HANDLER_FUNCTION_EXPECTED] = 'The input to ' + 'setBackgroundMessageHandler() must be a function.',
    _a[CODES.NO_WINDOW_CLIENT_TO_MSG] = 'An attempt was made to message a ' + 'non-existant window client.',
    _a[CODES.UNABLE_TO_RESUBSCRIBE] = 'There was an error while re-subscribing ' +
        'the FCM token for push messaging. Will have to resubscribe the ' +
        'user on next visit. {$message}',
    _a[CODES.NO_FCM_TOKEN_FOR_RESUBSCRIBE] = 'Could not find an FCM token ' +
        'and as a result, unable to resubscribe. Will have to resubscribe the ' +
        'user on next visit.',
    _a[CODES.FAILED_TO_DELETE_TOKEN] = 'Unable to delete the currently saved token.',
    _a[CODES.NO_SW_IN_REG] = 'Even though the service worker registration was ' +
        'successful, there was a problem accessing the service worker itself.',
    _a[CODES.INCORRECT_GCM_SENDER_ID] = "Please change your web app manifest's " +
        "'gcm_sender_id' value to '103953800507' to use Firebase messaging.",
    _a[CODES.BAD_SCOPE] = 'The service worker scope must be a string with at ' +
        'least one character.',
    _a[CODES.BAD_VAPID_KEY] = 'The public VAPID key is not a Uint8Array with 65 bytes.',
    _a[CODES.BAD_SUBSCRIPTION] = 'The subscription must be a valid ' + 'PushSubscription.',
    _a[CODES.BAD_TOKEN] = 'The FCM Token used for storage / lookup was not ' +
        'a valid token string.',
    _a[CODES.BAD_PUSH_SET] = 'The FCM push set used for storage / lookup was not ' +
        'not a valid push set string.',
    _a[CODES.FAILED_DELETE_VAPID_KEY] = 'The VAPID key could not be deleted.',
    _a[CODES.INVALID_PUBLIC_VAPID_KEY] = 'The public VAPID key must be a string.',
    _a[CODES.PUBLIC_KEY_DECRYPTION_FAILED] = 'The public VAPID key did not equal ' + '65 bytes when decrypted.',
    _a);
exports.default = {
    codes: CODES,
    map: ERROR_MAP
};
var _a;



},{}],99:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_PUBLIC_VAPID_KEY = new Uint8Array([
    0x04,
    0x33,
    0x94,
    0xf7,
    0xdf,
    0xa1,
    0xeb,
    0xb1,
    0xdc,
    0x03,
    0xa2,
    0x5e,
    0x15,
    0x71,
    0xdb,
    0x48,
    0xd3,
    0x2e,
    0xed,
    0xed,
    0xb2,
    0x34,
    0xdb,
    0xb7,
    0x47,
    0x3a,
    0x0c,
    0x8f,
    0xc4,
    0xcc,
    0xe1,
    0x6f,
    0x3c,
    0x8c,
    0x84,
    0xdf,
    0xab,
    0xb6,
    0x66,
    0x3e,
    0xf2,
    0x0c,
    0xd4,
    0x8b,
    0xfe,
    0xe3,
    0xf9,
    0x76,
    0x2f,
    0x14,
    0x1c,
    0x63,
    0x08,
    0x6a,
    0x6f,
    0x2d,
    0xb1,
    0x1a,
    0x95,
    0xb0,
    0xce,
    0x37,
    0xc0,
    0x9c,
    0x6e
]);
var SUBSCRIPTION_DETAILS = {
    userVisibleOnly: true,
    applicationServerKey: DEFAULT_PUBLIC_VAPID_KEY
};
exports.default = {
    DEFAULT_PUBLIC_VAPID_KEY: DEFAULT_PUBLIC_VAPID_KEY,
    SUBSCRIPTION_DETAILS: SUBSCRIPTION_DETAILS,
    ENDPOINT: 'https://fcm.googleapis.com'
    // ENDPOINT: 'https://jmt17.google.com'
};



},{}],100:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@firebase/util");
var errors_1 = require("./errors");
var array_buffer_to_base64_1 = require("../helpers/array-buffer-to-base64");
var fcm_details_1 = require("./fcm-details");
var IIDModel = /** @class */ (function () {
    function IIDModel() {
        this.errorFactory_ = new util_1.ErrorFactory('messaging', 'Messaging', errors_1.default.map);
    }
    /**
     * Given a PushSubscription and messagingSenderId, get an FCM token.
     * @public
     * @param  {string} senderId The 'messagingSenderId' to tie the token to.
     * @param  {PushSubscription} subscription The PushSusbcription to "federate".
     * @param  {Uint8Array} publicVapidKey The public VAPID key.
     * @return {Promise<!Object>} Returns the FCM token to be used in place
     * of the PushSubscription.
     */
    IIDModel.prototype.getToken = function (senderId, subscription, publicVapidKey) {
        var _this = this;
        var p256dh = array_buffer_to_base64_1.default(subscription['getKey']('p256dh'));
        var auth = array_buffer_to_base64_1.default(subscription['getKey']('auth'));
        var fcmSubscribeBody = "authorized_entity=" + senderId + "&" +
            ("endpoint=" + subscription.endpoint + "&") +
            ("encryption_key=" + p256dh + "&") +
            ("encryption_auth=" + auth);
        if (publicVapidKey !== fcm_details_1.default.DEFAULT_PUBLIC_VAPID_KEY) {
            var applicationPubKey = array_buffer_to_base64_1.default(publicVapidKey);
            fcmSubscribeBody += "&application_pub_key=" + applicationPubKey;
        }
        var headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        var subscribeOptions = {
            method: 'POST',
            headers: headers,
            body: fcmSubscribeBody
        };
        return fetch(fcm_details_1.default.ENDPOINT + '/fcm/connect/subscribe', subscribeOptions)
            .then(function (response) { return response.json(); })
            .catch(function () {
            throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_SUBSCRIBE_FAILED);
        })
            .then(function (response) {
            var fcmTokenResponse = response;
            if (fcmTokenResponse['error']) {
                var message = fcmTokenResponse['error']['message'];
                throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_SUBSCRIBE_FAILED, {
                    message: message
                });
            }
            if (!fcmTokenResponse['token']) {
                throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_SUBSCRIBE_NO_TOKEN);
            }
            if (!fcmTokenResponse['pushSet']) {
                throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_SUBSCRIBE_NO_PUSH_SET);
            }
            return {
                token: fcmTokenResponse['token'],
                pushSet: fcmTokenResponse['pushSet']
            };
        });
    };
    /**
     * Update the underlying token details for fcmToken.
     */
    IIDModel.prototype.updateToken = function (senderId, fcmToken, fcmPushSet, subscription, publicVapidKey) {
        var _this = this;
        var p256dh = array_buffer_to_base64_1.default(subscription['getKey']('p256dh'));
        var auth = array_buffer_to_base64_1.default(subscription['getKey']('auth'));
        var fcmUpdateBody = "push_set=" + fcmPushSet + "&" +
            ("token=" + fcmToken + "&") +
            ("authorized_entity=" + senderId + "&") +
            ("endpoint=" + subscription.endpoint + "&") +
            ("encryption_key=" + p256dh + "&") +
            ("encryption_auth=" + auth);
        if (publicVapidKey !== fcm_details_1.default.DEFAULT_PUBLIC_VAPID_KEY) {
            var applicationPubKey = array_buffer_to_base64_1.default(publicVapidKey);
            fcmUpdateBody += "&application_pub_key=" + applicationPubKey;
        }
        var headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        var updateOptions = {
            method: 'POST',
            headers: headers,
            body: fcmUpdateBody
        };
        var updateFetchRes;
        return fetch(fcm_details_1.default.ENDPOINT + '/fcm/connect/subscribe', updateOptions)
            .then(function (fetchResponse) {
            updateFetchRes = fetchResponse;
            return fetchResponse.json();
        })
            .catch(function () {
            throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_UPDATE_FAILED);
        })
            .then(function (fcmTokenResponse) {
            if (!updateFetchRes.ok) {
                var message = fcmTokenResponse['error']['message'];
                throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_UPDATE_FAILED, {
                    message: message
                });
            }
            if (!fcmTokenResponse['token']) {
                throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_UPDATE_NO_TOKEN);
            }
            return fcmTokenResponse['token'];
        });
    };
    /**
     * Given a fcmToken, pushSet and messagingSenderId, delete an FCM token.
     */
    IIDModel.prototype.deleteToken = function (senderId, fcmToken, fcmPushSet) {
        var _this = this;
        var fcmUnsubscribeBody = "authorized_entity=" + senderId + "&" +
            ("token=" + fcmToken + "&") +
            ("pushSet=" + fcmPushSet);
        var headers = new Headers();
        headers.append('Content-Type', 'application/x-www-form-urlencoded');
        var unsubscribeOptions = {
            method: 'POST',
            headers: headers,
            body: fcmUnsubscribeBody
        };
        return fetch(fcm_details_1.default.ENDPOINT + '/fcm/connect/unsubscribe', unsubscribeOptions).then(function (fetchResponse) {
            if (!fetchResponse.ok) {
                return fetchResponse.json().then(function (fcmTokenResponse) {
                    if (fcmTokenResponse['error']) {
                        var message = fcmTokenResponse['error']['message'];
                        throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_UNSUBSCRIBE_FAILED, {
                            message: message
                        });
                    }
                }, function (err) {
                    throw _this.errorFactory_.create(errors_1.default.codes.TOKEN_UNSUBSCRIBE_FAILED);
                });
            }
        });
    };
    return IIDModel;
}());
exports.default = IIDModel;



},{"../helpers/array-buffer-to-base64":93,"./errors":98,"./fcm-details":99,"@firebase/util":142}],101:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    granted: 'granted',
    default: 'default',
    denied: 'denied'
};



},{}],102:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var db_interface_1 = require("./db-interface");
var errors_1 = require("./errors");
var array_buffer_to_base64_1 = require("../helpers/array-buffer-to-base64");
var clean_v1_undefined_1 = require("./clean-v1-undefined");
var FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';
var DB_NAME = 'fcm_token_details_db';
var DB_VERSION = 2;
/** @record */
function ValidateInput() { }
/** @type {string|undefined} */
ValidateInput.prototype.fcmToken;
/** @type {string|undefined} */
ValidateInput.prototype.swScope;
/** @type {string|undefined} */
ValidateInput.prototype.vapidKey;
/** @type {PushSubscription|undefined} */
ValidateInput.prototype.subscription;
/** @type {string|undefined} */
ValidateInput.prototype.fcmSenderId;
/** @type {string|undefined} */
ValidateInput.prototype.fcmPushSet;
var TokenDetailsModel = /** @class */ (function (_super) {
    tslib_1.__extends(TokenDetailsModel, _super);
    function TokenDetailsModel() {
        return _super.call(this, DB_NAME, DB_VERSION) || this;
    }
    TokenDetailsModel.prototype.onDBUpgrade = function (db, evt) {
        if (evt.oldVersion < 1) {
            // New IDB instance
            var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {
                keyPath: 'swScope'
            });
            // Make sure the sender ID can be searched
            objectStore.createIndex('fcmSenderId', 'fcmSenderId', {
                unique: false
            });
            objectStore.createIndex('fcmToken', 'fcmToken', {
                unique: true
            });
        }
        if (evt.oldVersion < 2) {
            // Prior to version 2, we were using either 'fcm_token_details_db'
            // or 'undefined' as the database name due to bug in the SDK
            // So remove the old tokens and databases.
            clean_v1_undefined_1.cleanV1();
        }
    };
    /**
     * This method takes an object and will check for known arguments and
     * validate the input.
     * @private
     * @param {!ValidateInput} input
     * @return {!Promise} Returns promise that resolves if input is valid,
     * rejects otherwise.
     */
    TokenDetailsModel.prototype.validateInputs_ = function (input) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (input.fcmToken) {
                    if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_TOKEN))];
                    }
                }
                if (input.swScope) {
                    if (typeof input.swScope !== 'string' || input.swScope.length === 0) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SCOPE))];
                    }
                }
                if (input.vapidKey) {
                    if (!(input.vapidKey instanceof Uint8Array) ||
                        input.vapidKey.length !== 65) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_VAPID_KEY))];
                    }
                }
                if (input.subscription) {
                    if (!(input.subscription instanceof PushSubscription)) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SUBSCRIPTION))];
                    }
                }
                if (input.fcmSenderId) {
                    if (typeof input.fcmSenderId !== 'string' ||
                        input.fcmSenderId.length === 0) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SENDER_ID))];
                    }
                }
                if (input.fcmPushSet) {
                    if (typeof input.fcmPushSet !== 'string' ||
                        input.fcmPushSet.length === 0) {
                        return [2 /*return*/, Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_PUSH_SET))];
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Given a token, this method will look up the details in indexedDB.
     * @param {string} fcmToken
     * @return {Promise<Object>} The details associated with that token.
     */
    TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {
        var _this = this;
        if (!fcmToken) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_TOKEN));
        }
        return this.validateInputs_({ fcmToken: fcmToken })
            .then(function () {
            return _this.openDatabase();
        })
            .then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var index = objectStore.index('fcmToken');
                var request = index.get(fcmToken);
                request.onerror = function (event) {
                    reject(event.target.error);
                };
                request.onsuccess = function (event) {
                    var result = event.target.result
                        ? event.target.result
                        : null;
                    resolve(result);
                };
            });
        });
    };
    /**
     * Given a service worker scope, this method will look up the details in
     * indexedDB.
     * @public
     * @param {string} swScope
     * @return {Promise<Object>} The details associated with that token.
     */
    TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {
        var _this = this;
        if (!swScope) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SCOPE));
        }
        return this.validateInputs_({ swScope: swScope })
            .then(function () {
            return _this.openDatabase();
        })
            .then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var scopeRequest = objectStore.get(swScope);
                scopeRequest.onerror = function (event) {
                    reject(event.target.error);
                };
                scopeRequest.onsuccess = function (event) {
                    var result = event.target.result
                        ? event.target.result
                        : null;
                    resolve(result);
                };
            });
        });
    };
    /**
     * Save the details for the fcm token for re-use at a later date.
     * @param {{swScope: !string, vapidKey: !string,
     * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,
     * fcmPushSet: !string}} input A plain js object containing args to save.
     * @return {Promise<void>}
     */
    TokenDetailsModel.prototype.saveTokenDetails = function (_a) {
        var _this = this;
        var swScope = _a.swScope, vapidKey = _a.vapidKey, subscription = _a.subscription, fcmSenderId = _a.fcmSenderId, fcmToken = _a.fcmToken, fcmPushSet = _a.fcmPushSet;
        if (!swScope) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SCOPE));
        }
        if (!vapidKey) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_VAPID_KEY));
        }
        if (!subscription) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SUBSCRIPTION));
        }
        if (!fcmSenderId) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SENDER_ID));
        }
        if (!fcmToken) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_TOKEN));
        }
        if (!fcmPushSet) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_PUSH_SET));
        }
        return this.validateInputs_({
            swScope: swScope,
            vapidKey: vapidKey,
            subscription: subscription,
            fcmSenderId: fcmSenderId,
            fcmToken: fcmToken,
            fcmPushSet: fcmPushSet
        })
            .then(function () {
            return _this.openDatabase();
        })
            .then(function (db) {
            /**
             * @dict
             */
            var details = {
                swScope: swScope,
                vapidKey: array_buffer_to_base64_1.default(vapidKey),
                endpoint: subscription.endpoint,
                auth: array_buffer_to_base64_1.default(subscription['getKey']('auth')),
                p256dh: array_buffer_to_base64_1.default(subscription['getKey']('p256dh')),
                fcmSenderId: fcmSenderId,
                fcmToken: fcmToken,
                fcmPushSet: fcmPushSet,
                createTime: Date.now()
            };
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                var request = objectStore.put(details);
                request.onerror = function (event) {
                    reject(event.target.error);
                };
                request.onsuccess = function (event) {
                    resolve();
                };
            });
        });
    };
    /**
     * This method deletes details of the current FCM token.
     * It's returning a promise in case we need to move to an async
     * method for deleting at a later date.
     * @return {Promise<Object>} Resolves once the FCM token details have been
     * deleted and returns the deleted details.
     */
    TokenDetailsModel.prototype.deleteToken = function (token) {
        var _this = this;
        if (typeof token !== 'string' || token.length === 0) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.INVALID_DELETE_TOKEN));
        }
        return this.getTokenDetailsFromToken(token).then(function (details) {
            if (!details) {
                throw _this.errorFactory_.create(errors_1.default.codes.DELETE_TOKEN_NOT_FOUND);
            }
            return _this.openDatabase().then(function (db) {
                return new Promise(function (resolve, reject) {
                    var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                    var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);
                    var request = objectStore.delete(details['swScope']);
                    request.onerror = function (event) {
                        reject(event.target.error);
                    };
                    request.onsuccess = function (event) {
                        if (event.target.result === 0) {
                            reject(_this.errorFactory_.create(errors_1.default.codes.FAILED_TO_DELETE_TOKEN));
                            return;
                        }
                        resolve(details);
                    };
                });
            });
        });
    };
    return TokenDetailsModel;
}(db_interface_1.default));
exports.default = TokenDetailsModel;



},{"../helpers/array-buffer-to-base64":93,"./clean-v1-undefined":95,"./db-interface":96,"./errors":98,"tslib":176}],103:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var db_interface_1 = require("./db-interface");
var errors_1 = require("./errors");
var FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';
var DB_NAME = 'fcm_vapid_details_db';
var DB_VERSION = 1;
var UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;
var VapidDetailsModel = /** @class */ (function (_super) {
    tslib_1.__extends(VapidDetailsModel, _super);
    function VapidDetailsModel() {
        return _super.call(this, DB_NAME, DB_VERSION) || this;
    }
    /**
     * @override
     * @param {IDBDatabase} db
     */
    VapidDetailsModel.prototype.onDBUpgrade = function (db) {
        db.createObjectStore(FCM_VAPID_OBJ_STORE, {
            keyPath: 'swScope'
        });
    };
    /**
     * Given a service worker scope, this method will look up the vapid key
     * in indexedDB.
     */
    VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {
        if (typeof swScope !== 'string' || swScope.length === 0) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SCOPE));
        }
        return this.openDatabase().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_VAPID_OBJ_STORE]);
                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                var scopeRequest = objectStore.get(swScope);
                scopeRequest.onerror = function () {
                    reject(scopeRequest.error);
                };
                scopeRequest.onsuccess = function () {
                    var result = scopeRequest.result;
                    var vapidKey = null;
                    if (result) {
                        vapidKey = result.vapidKey;
                    }
                    resolve(vapidKey);
                };
            });
        });
    };
    /**
     * Save a vapid key against a swScope for later date.
     */
    VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {
        var _this = this;
        if (typeof swScope !== 'string' || swScope.length === 0) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_SCOPE));
        }
        if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {
            return Promise.reject(this.errorFactory_.create(errors_1.default.codes.BAD_VAPID_KEY));
        }
        var details = {
            swScope: swScope,
            vapidKey: vapidKey
        };
        return this.openDatabase().then(function (db) {
            return new Promise(function (resolve, reject) {
                var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                var request = objectStore.put(details);
                request.onerror = function () {
                    reject(request.error);
                };
                request.onsuccess = function () {
                    resolve();
                };
            });
        });
    };
    /**
     * This method deletes details of the current FCM VAPID key for a SW scope.
     * Resolves once the scope/vapid details have been deleted and returns the
     * deleted vapid key.
     */
    VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {
        var _this = this;
        return this.getVapidFromSWScope(swScope).then(function (vapidKey) {
            if (!vapidKey) {
                throw _this.errorFactory_.create(errors_1.default.codes.DELETE_SCOPE_NOT_FOUND);
            }
            return _this.openDatabase().then(function (db) {
                return new Promise(function (resolve, reject) {
                    var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);
                    var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);
                    var request = objectStore.delete(swScope);
                    request.onerror = function () {
                        reject(request.error);
                    };
                    request.onsuccess = function () {
                        if (request.result === 0) {
                            reject(_this.errorFactory_.create(errors_1.default.codes.FAILED_DELETE_VAPID_KEY));
                            return;
                        }
                        resolve(vapidKey);
                    };
                });
            });
        });
    };
    return VapidDetailsModel;
}(db_interface_1.default));
exports.default = VapidDetailsModel;



},{"./db-interface":96,"./errors":98,"tslib":176}],104:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
// These fields are strings to prevent closure from thinking goog.getMsg
// should be used to initialise the values
var PARAMS = {
    TYPE_OF_MSG: 'firebase-messaging-msg-type',
    DATA: 'firebase-messaging-msg-data'
};
// This value isn't using the TYPE_OF_MSG short hand as closure
// expects the variable to be defined via goog.getMsg
var msgType = {
    PUSH_MSG_RECEIVED: 'push-msg-received',
    NOTIFICATION_CLICKED: 'notification-clicked'
};
var createNewMsg = function (msgType, msgData) {
    var message = (_a = {},
        _a[PARAMS.TYPE_OF_MSG] = msgType,
        _a[PARAMS.DATA] = msgData,
        _a);
    return message;
    var _a;
};
exports.default = {
    PARAMS: PARAMS,
    TYPES_OF_MSG: msgType,
    createNewMsg: createNewMsg
};



},{}],105:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("./src/polyfills/promise");
require("./src/shims/Array");
require("./src/shims/String");



},{"./src/polyfills/promise":106,"./src/shims/Array":107,"./src/shims/String":108}],106:[function(require,module,exports){
(function (global){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __global = (function () {
    if (typeof global !== 'undefined') {
        return global;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    throw new Error('unable to locate global object');
})();
// Polyfill Promise
if (typeof Promise === 'undefined') {
    // HACK: TS throws an error if I attempt to use 'dot-notation'
    __global['Promise'] = Promise = require('promise-polyfill');
}



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"promise-polyfill":170}],107:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is the Array.prototype.find polyfill from MDN
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * https://tc39.github.io/ecma262/#sec-array.prototype.find
 */
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        }
    });
}
/**
 * This is the Array.prototype.findIndex polyfill from MDN
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
 * https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
 */
if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return k.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return -1.
            return -1;
        }
    });
}



},{}],108:[function(require,module,exports){
/**
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This is the String.prototype.startsWith polyfill from MDN
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
 */
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (search, pos) {
        return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    };
}



},{}],109:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = require("@firebase/app");
var string_1 = require("./src/implementation/string");
var taskenums_1 = require("./src/implementation/taskenums");
var taskenums_2 = require("./src/implementation/taskenums");
var xhriopool_1 = require("./src/implementation/xhriopool");
var reference_1 = require("./src/reference");
var service_1 = require("./src/service");
/**
 * Type constant for Firebase Storage.
 */
var STORAGE_TYPE = 'storage';
function factory(app, unused, opt_url) {
    return new service_1.Service(app, new xhriopool_1.XhrIoPool(), opt_url);
}
function registerStorage(instance) {
    var namespaceExports = {
        // no-inline
        TaskState: taskenums_2.TaskState,
        TaskEvent: taskenums_1.TaskEvent,
        StringFormat: string_1.StringFormat,
        Storage: service_1.Service,
        Reference: reference_1.Reference
    };
    instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, 
    // Allow multiple storage instances per app.
    true);
}
exports.registerStorage = registerStorage;
registerStorage(app_1.default);



},{"./src/implementation/string":131,"./src/implementation/taskenums":132,"./src/implementation/xhriopool":137,"./src/reference":138,"./src/service":139,"@firebase/app":2}],110:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var errorsExports = require("./error");
var MetadataUtils = require("./metadata");
var type = require("./type");
/**
 * @param name Name of the function.
 * @param specs Argument specs.
 * @param passed The actual arguments passed to the function.
 * @throws {fbs.Error} If the arguments are invalid.
 */
function validate(name, specs, passed) {
    var minArgs = specs.length;
    var maxArgs = specs.length;
    for (var i = 0; i < specs.length; i++) {
        if (specs[i].optional) {
            minArgs = i;
            break;
        }
    }
    var validLength = minArgs <= passed.length && passed.length <= maxArgs;
    if (!validLength) {
        throw errorsExports.invalidArgumentCount(minArgs, maxArgs, name, passed.length);
    }
    for (var i = 0; i < passed.length; i++) {
        try {
            specs[i].validator(passed[i]);
        }
        catch (e) {
            if (e instanceof Error) {
                throw errorsExports.invalidArgument(i, name, e.message);
            }
            else {
                throw errorsExports.invalidArgument(i, name, e);
            }
        }
    }
}
exports.validate = validate;
/**
 * @struct
 */
var ArgSpec = /** @class */ (function () {
    function ArgSpec(validator, opt_optional) {
        var self = this;
        this.validator = function (p) {
            if (self.optional && !type.isJustDef(p)) {
                return;
            }
            validator(p);
        };
        this.optional = !!opt_optional;
    }
    return ArgSpec;
}());
exports.ArgSpec = ArgSpec;
function and_(v1, v2) {
    return function (p) {
        v1(p);
        v2(p);
    };
}
exports.and_ = and_;
function stringSpec(opt_validator, opt_optional) {
    function stringValidator(p) {
        if (!type.isString(p)) {
            throw 'Expected string.';
        }
    }
    var validator;
    if (opt_validator) {
        validator = and_(stringValidator, opt_validator);
    }
    else {
        validator = stringValidator;
    }
    return new ArgSpec(validator, opt_optional);
}
exports.stringSpec = stringSpec;
function uploadDataSpec() {
    function validator(p) {
        var valid = p instanceof Uint8Array ||
            p instanceof ArrayBuffer ||
            (type.isNativeBlobDefined() && p instanceof Blob);
        if (!valid) {
            throw 'Expected Blob or File.';
        }
    }
    return new ArgSpec(validator);
}
exports.uploadDataSpec = uploadDataSpec;
function metadataSpec(opt_optional) {
    return new ArgSpec(MetadataUtils.metadataValidator, opt_optional);
}
exports.metadataSpec = metadataSpec;
function nonNegativeNumberSpec() {
    function validator(p) {
        var valid = type.isNumber(p) && p >= 0;
        if (!valid) {
            throw 'Expected a number 0 or greater.';
        }
    }
    return new ArgSpec(validator);
}
exports.nonNegativeNumberSpec = nonNegativeNumberSpec;
function looseObjectSpec(opt_validator, opt_optional) {
    function validator(p) {
        var isLooseObject = p === null || (type.isDef(p) && p instanceof Object);
        if (!isLooseObject) {
            throw 'Expected an Object.';
        }
        if (opt_validator !== undefined && opt_validator !== null) {
            opt_validator(p);
        }
    }
    return new ArgSpec(validator, opt_optional);
}
exports.looseObjectSpec = looseObjectSpec;
function nullFunctionSpec(opt_optional) {
    function validator(p) {
        var valid = p === null || type.isFunction(p);
        if (!valid) {
            throw 'Expected a Function.';
        }
    }
    return new ArgSpec(validator, opt_optional);
}
exports.nullFunctionSpec = nullFunctionSpec;



},{"./error":117,"./metadata":122,"./type":133}],111:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns true if the object is contained in the array (compared with ===).
 * @template T
 */
function contains(array, elem) {
    return array.indexOf(elem) !== -1;
}
exports.contains = contains;
/**
 * Returns a shallow copy of the array or array-like object (e.g. arguments).
 * @template T
 */
function clone(arraylike) {
    return Array.prototype.slice.call(arraylike);
}
exports.clone = clone;
/**
 * Removes the given element from the given array, if it is contained.
 * Directly modifies the passed-in array.
 * @template T
 */
function remove(array, elem) {
    var i = array.indexOf(elem);
    if (i !== -1) {
        array.splice(i, 1);
    }
}
exports.remove = remove;



},{}],112:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Method for invoking a callback asynchronously.
 */
var promiseimpl = require("./promise_external");
/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */
function async(f) {
    return function () {
        var argsToForward = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argsToForward[_i] = arguments[_i];
        }
        promiseimpl.resolve(true).then(function () {
            f.apply(null, argsToForward);
        });
    };
}
exports.async = async;



},{"./promise_external":126}],113:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants = require("./constants");
var errorsExports = require("./error");
var failrequest_1 = require("./failrequest");
var location_1 = require("./location");
var promiseimpl = require("./promise_external");
var requestmap_1 = require("./requestmap");
var type = require("./type");
/**
 * @param app If null, getAuthToken always resolves with null.
 * @param service The storage service associated with this auth wrapper.
 *     Untyped to avoid circular type dependencies.
 * @struct
 */
var AuthWrapper = /** @class */ (function () {
    function AuthWrapper(app, maker, requestMaker, service, pool) {
        this.bucket_ = null;
        this.deleted_ = false;
        this.app_ = app;
        if (this.app_ !== null) {
            var options = this.app_.options;
            if (type.isDef(options)) {
                this.bucket_ = AuthWrapper.extractBucket_(options);
            }
        }
        this.storageRefMaker_ = maker;
        this.requestMaker_ = requestMaker;
        this.pool_ = pool;
        this.service_ = service;
        this.maxOperationRetryTime_ = constants.defaultMaxOperationRetryTime;
        this.maxUploadRetryTime_ = constants.defaultMaxUploadRetryTime;
        this.requestMap_ = new requestmap_1.RequestMap();
    }
    AuthWrapper.extractBucket_ = function (config) {
        var bucketString = config[constants.configOption] || null;
        if (bucketString == null) {
            return null;
        }
        var loc = location_1.Location.makeFromBucketSpec(bucketString);
        return loc.bucket;
    };
    AuthWrapper.prototype.getAuthToken = function () {
        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
        // (b/28673818).
        if (this.app_ !== null &&
            type.isDef(this.app_.INTERNAL) &&
            type.isDef(this.app_.INTERNAL.getToken)) {
            return this.app_.INTERNAL.getToken().then(function (response) {
                if (response !== null) {
                    return response.accessToken;
                }
                else {
                    return null;
                }
            }, function (_error) {
                return null;
            });
        }
        else {
            return promiseimpl.resolve(null);
        }
    };
    AuthWrapper.prototype.bucket = function () {
        if (this.deleted_) {
            throw errorsExports.appDeleted();
        }
        else {
            return this.bucket_;
        }
    };
    /**
     * The service associated with this auth wrapper. Untyped to avoid circular
     * type dependencies.
     */
    AuthWrapper.prototype.service = function () {
        return this.service_;
    };
    /**
     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
     * at the given Location.
     * @param loc The Location.
     * @return Actually a firebaseStorage.Reference, typing not allowed
     *     because of circular dependency problems.
     */
    AuthWrapper.prototype.makeStorageReference = function (loc) {
        return this.storageRefMaker_(this, loc);
    };
    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
        if (!this.deleted_) {
            var request = this.requestMaker_(requestInfo, authToken, this.pool_);
            this.requestMap_.addRequest(request);
            return request;
        }
        else {
            return new failrequest_1.FailRequest(errorsExports.appDeleted());
        }
    };
    /**
     * Stop running requests and prevent more from being created.
     */
    AuthWrapper.prototype.deleteApp = function () {
        this.deleted_ = true;
        this.app_ = null;
        this.requestMap_.clear();
    };
    AuthWrapper.prototype.maxUploadRetryTime = function () {
        return this.maxUploadRetryTime_;
    };
    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
        this.maxUploadRetryTime_ = time;
    };
    AuthWrapper.prototype.maxOperationRetryTime = function () {
        return this.maxOperationRetryTime_;
    };
    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
        this.maxOperationRetryTime_ = time;
    };
    return AuthWrapper;
}());
exports.AuthWrapper = AuthWrapper;



},{"./constants":116,"./error":117,"./failrequest":118,"./location":121,"./promise_external":126,"./requestmap":129,"./type":133}],114:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */
function start(f, callback, timeout) {
    // TODO(andysoto): make this code cleaner (probably refactor into an actual
    // type instead of a bunch of functions with state shared in the closure)
    var waitSeconds = 1;
    // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯
    var timeoutId = null;
    var hitTimeout = false;
    var cancelState = 0;
    function canceled() {
        return cancelState === 2;
    }
    var triggeredCallback = false;
    function triggerCallback() {
        if (!triggeredCallback) {
            triggeredCallback = true;
            callback.apply(null, arguments);
        }
    }
    function callWithDelay(millis) {
        timeoutId = setTimeout(function () {
            timeoutId = null;
            f(handler, canceled());
        }, millis);
    }
    function handler(success) {
        var var_args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            var_args[_i - 1] = arguments[_i];
        }
        if (triggeredCallback) {
            return;
        }
        if (success) {
            triggerCallback.apply(null, arguments);
            return;
        }
        var mustStop = canceled() || hitTimeout;
        if (mustStop) {
            triggerCallback.apply(null, arguments);
            return;
        }
        if (waitSeconds < 64) {
            /* TODO(andysoto): don't back off so quickly if we know we're offline. */
            waitSeconds *= 2;
        }
        var waitMillis;
        if (cancelState === 1) {
            cancelState = 2;
            waitMillis = 0;
        }
        else {
            waitMillis = (waitSeconds + Math.random()) * 1000;
        }
        callWithDelay(waitMillis);
    }
    var stopped = false;
    function stop(wasTimeout) {
        if (stopped) {
            return;
        }
        stopped = true;
        if (triggeredCallback) {
            return;
        }
        if (timeoutId !== null) {
            if (!wasTimeout) {
                cancelState = 2;
            }
            clearTimeout(timeoutId);
            callWithDelay(0);
        }
        else {
            if (!wasTimeout) {
                cancelState = 1;
            }
        }
    }
    callWithDelay(0);
    setTimeout(function () {
        hitTimeout = true;
        stop(true);
    }, timeout);
    return stop;
}
exports.start = start;
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */
function stop(id) {
    id(false);
}
exports.stop = stop;



},{}],115:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @file Provides a Blob-like wrapper for various binary types (including the
 * native Blob type). This makes it possible to upload types like ArrayBuffers,
 * making uploads possible in environments without the native Blob type.
 */
var fs = require("./fs");
var string = require("./string");
var string_1 = require("./string");
var type = require("./type");
/**
 * @param opt_elideCopy If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 */
var FbsBlob = /** @class */ (function () {
    function FbsBlob(data, opt_elideCopy) {
        var size = 0;
        var blobType = '';
        if (type.isNativeBlob(data)) {
            this.data_ = data;
            size = data.size;
            blobType = data.type;
        }
        else if (data instanceof ArrayBuffer) {
            if (opt_elideCopy) {
                this.data_ = new Uint8Array(data);
            }
            else {
                this.data_ = new Uint8Array(data.byteLength);
                this.data_.set(new Uint8Array(data));
            }
            size = this.data_.length;
        }
        else if (data instanceof Uint8Array) {
            if (opt_elideCopy) {
                this.data_ = data;
            }
            else {
                this.data_ = new Uint8Array(data.length);
                this.data_.set(data);
            }
            size = data.length;
        }
        this.size_ = size;
        this.type_ = blobType;
    }
    FbsBlob.prototype.size = function () {
        return this.size_;
    };
    FbsBlob.prototype.type = function () {
        return this.type_;
    };
    FbsBlob.prototype.slice = function (startByte, endByte) {
        if (type.isNativeBlob(this.data_)) {
            var realBlob = this.data_;
            var sliced = fs.sliceBlob(realBlob, startByte, endByte);
            if (sliced === null) {
                return null;
            }
            return new FbsBlob(sliced);
        }
        else {
            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
            return new FbsBlob(slice, true);
        }
    };
    FbsBlob.getBlob = function () {
        var var_args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            var_args[_i] = arguments[_i];
        }
        if (type.isNativeBlobDefined()) {
            var blobby = var_args.map(function (val) {
                if (val instanceof FbsBlob) {
                    return val.data_;
                }
                else {
                    return val;
                }
            });
            return new FbsBlob(fs.getBlob.apply(null, blobby));
        }
        else {
            var uint8Arrays = var_args.map(function (val) {
                if (type.isString(val)) {
                    return string.dataFromString(string_1.StringFormat.RAW, val).data;
                }
                else {
                    // Blobs don't exist, so this has to be a Uint8Array.
                    return val.data_;
                }
            });
            var finalLength_1 = 0;
            uint8Arrays.forEach(function (array) {
                finalLength_1 += array.byteLength;
            });
            var merged_1 = new Uint8Array(finalLength_1);
            var index_1 = 0;
            uint8Arrays.forEach(function (array) {
                for (var i = 0; i < array.length; i++) {
                    merged_1[index_1++] = array[i];
                }
            });
            return new FbsBlob(merged_1, true);
        }
    };
    FbsBlob.prototype.uploadData = function () {
        return this.data_;
    };
    return FbsBlob;
}());
exports.FbsBlob = FbsBlob;



},{"./fs":119,"./string":131,"./type":133}],116:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Constants used in the Firebase Storage library.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Domain and scheme for API calls.
 */
exports.domainBase = 'https://firebasestorage.googleapis.com';
/**
 * Domain and scheme for object downloads.
 */
exports.downloadBase = 'https://firebasestorage.googleapis.com';
/**
 * Base URL for non-upload calls to the API.
 */
exports.apiBaseUrl = '/v0';
/**
 * Base URL for upload calls to the API.
 */
exports.apiUploadBaseUrl = '/v0';
function setDomainBase(domainBase) {
    domainBase = domainBase;
}
exports.setDomainBase = setDomainBase;
exports.configOption = 'storageBucket';
/**
 * 1 minute
 */
exports.shortMaxOperationRetryTime = 1 * 60 * 1000;
/**
 * 2 minutes
 */
exports.defaultMaxOperationRetryTime = 2 * 60 * 1000;
/**
 * 10 minutes
 */
exports.defaultMaxUploadRetryTime = 10 * 60 * 100;
/**
 * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
 * enough for us to use it directly.
 */
exports.minSafeInteger = -9007199254740991;



},{}],117:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var constants_1 = require("./constants");
var FirebaseStorageError = /** @class */ (function () {
    function FirebaseStorageError(code, message) {
        this.code_ = prependCode(code);
        this.message_ = 'Firebase Storage: ' + message;
        this.serverResponse_ = null;
        this.name_ = 'FirebaseError';
    }
    FirebaseStorageError.prototype.codeProp = function () {
        return this.code;
    };
    FirebaseStorageError.prototype.codeEquals = function (code) {
        return prependCode(code) === this.codeProp();
    };
    FirebaseStorageError.prototype.serverResponseProp = function () {
        return this.serverResponse_;
    };
    FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
        this.serverResponse_ = serverResponse;
    };
    Object.defineProperty(FirebaseStorageError.prototype, "name", {
        get: function () {
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "code", {
        get: function () {
            return this.code_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "message", {
        get: function () {
            return this.message_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
        get: function () {
            return this.serverResponse_;
        },
        enumerable: true,
        configurable: true
    });
    return FirebaseStorageError;
}());
exports.FirebaseStorageError = FirebaseStorageError;
exports.errors = {};
exports.Code = {
    // Shared between all platforms
    UNKNOWN: 'unknown',
    OBJECT_NOT_FOUND: 'object-not-found',
    BUCKET_NOT_FOUND: 'bucket-not-found',
    PROJECT_NOT_FOUND: 'project-not-found',
    QUOTA_EXCEEDED: 'quota-exceeded',
    UNAUTHENTICATED: 'unauthenticated',
    UNAUTHORIZED: 'unauthorized',
    RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
    INVALID_CHECKSUM: 'invalid-checksum',
    CANCELED: 'canceled',
    // JS specific
    INVALID_EVENT_NAME: 'invalid-event-name',
    INVALID_URL: 'invalid-url',
    INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
    NO_DEFAULT_BUCKET: 'no-default-bucket',
    CANNOT_SLICE_BLOB: 'cannot-slice-blob',
    SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
    NO_DOWNLOAD_URL: 'no-download-url',
    INVALID_ARGUMENT: 'invalid-argument',
    INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
    APP_DELETED: 'app-deleted',
    INVALID_ROOT_OPERATION: 'invalid-root-operation',
    INVALID_FORMAT: 'invalid-format',
    INTERNAL_ERROR: 'internal-error'
};
function prependCode(code) {
    return 'storage/' + code;
}
exports.prependCode = prependCode;
function unknown() {
    var message = 'An unknown error occurred, please check the error payload for ' +
        'server response.';
    return new FirebaseStorageError(exports.Code.UNKNOWN, message);
}
exports.unknown = unknown;
function objectNotFound(path) {
    return new FirebaseStorageError(exports.Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
}
exports.objectNotFound = objectNotFound;
function bucketNotFound(bucket) {
    return new FirebaseStorageError(exports.Code.BUCKET_NOT_FOUND, "Bucket '" + bucket + "' does not exist.");
}
exports.bucketNotFound = bucketNotFound;
function projectNotFound(project) {
    return new FirebaseStorageError(exports.Code.PROJECT_NOT_FOUND, "Project '" + project + "' does not exist.");
}
exports.projectNotFound = projectNotFound;
function quotaExceeded(bucket) {
    return new FirebaseStorageError(exports.Code.QUOTA_EXCEEDED, "Quota for bucket '" +
        bucket +
        "' exceeded, please view quota on " +
        'https://firebase.google.com/pricing/.');
}
exports.quotaExceeded = quotaExceeded;
function unauthenticated() {
    var message = 'User is not authenticated, please authenticate using Firebase ' +
        'Authentication and try again.';
    return new FirebaseStorageError(exports.Code.UNAUTHENTICATED, message);
}
exports.unauthenticated = unauthenticated;
function unauthorized(path) {
    return new FirebaseStorageError(exports.Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
}
exports.unauthorized = unauthorized;
function retryLimitExceeded() {
    return new FirebaseStorageError(exports.Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
}
exports.retryLimitExceeded = retryLimitExceeded;
function invalidChecksum(path, checksum, calculated) {
    return new FirebaseStorageError(exports.Code.INVALID_CHECKSUM, "Uploaded/downloaded object '" +
        path +
        "' has checksum '" +
        checksum +
        "' which does not match '" +
        calculated +
        "'. Please retry the upload/download.");
}
exports.invalidChecksum = invalidChecksum;
function canceled() {
    return new FirebaseStorageError(exports.Code.CANCELED, 'User canceled the upload/download.');
}
exports.canceled = canceled;
function invalidEventName(name) {
    return new FirebaseStorageError(exports.Code.INVALID_EVENT_NAME, "Invalid event name '" + name + "'.");
}
exports.invalidEventName = invalidEventName;
function invalidUrl(url) {
    return new FirebaseStorageError(exports.Code.INVALID_URL, "Invalid URL '" + url + "'.");
}
exports.invalidUrl = invalidUrl;
function invalidDefaultBucket(bucket) {
    return new FirebaseStorageError(exports.Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
}
exports.invalidDefaultBucket = invalidDefaultBucket;
function noDefaultBucket() {
    return new FirebaseStorageError(exports.Code.NO_DEFAULT_BUCKET, 'No default bucket ' +
        "found. Did you set the '" +
        constants_1.configOption +
        "' property when initializing the app?");
}
exports.noDefaultBucket = noDefaultBucket;
function cannotSliceBlob() {
    return new FirebaseStorageError(exports.Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
}
exports.cannotSliceBlob = cannotSliceBlob;
function serverFileWrongSize() {
    return new FirebaseStorageError(exports.Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
}
exports.serverFileWrongSize = serverFileWrongSize;
function noDownloadURL() {
    return new FirebaseStorageError(exports.Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
}
exports.noDownloadURL = noDownloadURL;
function invalidArgument(index, fnName, message) {
    return new FirebaseStorageError(exports.Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
}
exports.invalidArgument = invalidArgument;
function invalidArgumentCount(argMin, argMax, fnName, real) {
    var countPart;
    var plural;
    if (argMin === argMax) {
        countPart = argMin;
        plural = argMin === 1 ? 'argument' : 'arguments';
    }
    else {
        countPart = 'between ' + argMin + ' and ' + argMax;
        plural = 'arguments';
    }
    return new FirebaseStorageError(exports.Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' +
        fnName +
        '`: Expected ' +
        countPart +
        ' ' +
        plural +
        ', received ' +
        real +
        '.');
}
exports.invalidArgumentCount = invalidArgumentCount;
function appDeleted() {
    return new FirebaseStorageError(exports.Code.APP_DELETED, 'The Firebase app was deleted.');
}
exports.appDeleted = appDeleted;
/**
 * @param name The name of the operation that was invalid.
 */
function invalidRootOperation(name) {
    return new FirebaseStorageError(exports.Code.INVALID_ROOT_OPERATION, "The operation '" +
        name +
        "' cannot be performed on a root reference, create a non-root " +
        "reference using child, such as .child('file.png').");
}
exports.invalidRootOperation = invalidRootOperation;
/**
 * @param format The format that was not valid.
 * @param message A message describing the format violation.
 */
function invalidFormat(format, message) {
    return new FirebaseStorageError(exports.Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
}
exports.invalidFormat = invalidFormat;
/**
 * @param message A message describing the internal error.
 */
function internalError(message) {
    throw new FirebaseStorageError(exports.Code.INTERNAL_ERROR, 'Internal error: ' + message);
}
exports.internalError = internalError;



},{"./constants":116}],118:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var promiseimpl = require("./promise_external");
/**
 * A request whose promise always fails.
 * @struct
 * @template T
 */
var FailRequest = /** @class */ (function () {
    function FailRequest(error) {
        this.promise_ = promiseimpl.reject(error);
    }
    /** @inheritDoc */
    FailRequest.prototype.getPromise = function () {
        return this.promise_;
    };
    /** @inheritDoc */
    FailRequest.prototype.cancel = function (appDelete) {
        if (appDelete === void 0) { appDelete = false; }
    };
    return FailRequest;
}());
exports.FailRequest = FailRequest;



},{"./promise_external":126}],119:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var type = require("./type");
function getBlobBuilder() {
    if (typeof BlobBuilder !== 'undefined') {
        return BlobBuilder;
    }
    else if (typeof WebKitBlobBuilder !== 'undefined') {
        return WebKitBlobBuilder;
    }
    else {
        return undefined;
    }
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param var_args The values that will make up the resulting blob.
 * @return The blob.
 */
function getBlob() {
    var var_args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        var_args[_i] = arguments[_i];
    }
    var BlobBuilder = getBlobBuilder();
    if (BlobBuilder !== undefined) {
        var bb = new BlobBuilder();
        for (var i = 0; i < var_args.length; i++) {
            bb.append(var_args[i]);
        }
        return bb.getBlob();
    }
    else {
        if (type.isNativeBlobDefined()) {
            return new Blob(var_args);
        }
        else {
            throw Error("This browser doesn't seem to support creating Blobs");
        }
    }
}
exports.getBlob = getBlob;
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */
function sliceBlob(blob, start, end) {
    if (blob.webkitSlice) {
        return blob.webkitSlice(start, end);
    }
    else if (blob.mozSlice) {
        return blob.mozSlice(start, end);
    }
    else if (blob.slice) {
        return blob.slice(start, end);
    }
    return null;
}
exports.sliceBlob = sliceBlob;



},{"./type":133}],120:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var type = require("./type");
/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */
function jsonObjectOrNull(s) {
    var obj;
    try {
        obj = JSON.parse(s);
    }
    catch (e) {
        return null;
    }
    if (type.isNonArrayObject(obj)) {
        return obj;
    }
    else {
        return null;
    }
}
exports.jsonObjectOrNull = jsonObjectOrNull;



},{"./type":133}],121:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Functionality related to the parsing/composition of bucket/
 * object location.
 */
var errorsExports = require("./error");
/**
 * @struct
 */
var Location = /** @class */ (function () {
    function Location(bucket, path) {
        this.bucket = bucket;
        this.path_ = path;
    }
    Object.defineProperty(Location.prototype, "path", {
        get: function () {
            return this.path_;
        },
        enumerable: true,
        configurable: true
    });
    Location.prototype.fullServerUrl = function () {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
    };
    Location.prototype.bucketOnlyServerUrl = function () {
        var encode = encodeURIComponent;
        return '/b/' + encode(this.bucket) + '/o';
    };
    Location.makeFromBucketSpec = function (bucketString) {
        var bucketLocation;
        try {
            bucketLocation = Location.makeFromUrl(bucketString);
        }
        catch (e) {
            // Not valid URL, use as-is. This lets you put bare bucket names in
            // config.
            return new Location(bucketString, '');
        }
        if (bucketLocation.path === '') {
            return bucketLocation;
        }
        else {
            throw errorsExports.invalidDefaultBucket(bucketString);
        }
    };
    Location.makeFromUrl = function (url) {
        var location = null;
        var bucketDomain = '([A-Za-z0-9.\\-]+)';
        function gsModify(loc) {
            if (loc.path.charAt(loc.path.length - 1) === '/') {
                loc.path_ = loc.path_.slice(0, -1);
            }
        }
        var gsPath = '(/(.*))?$';
        var path = '(/([^?#]*).*)?$';
        var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
        var gsIndices = { bucket: 1, path: 3 };
        function httpModify(loc) {
            loc.path_ = decodeURIComponent(loc.path);
        }
        var version = 'v[A-Za-z0-9_]+';
        var httpRegex = new RegExp('^https?://firebasestorage\\.googleapis\\.com/' +
            version +
            '/b/' +
            bucketDomain +
            '/o' +
            path, 'i');
        var httpIndices = { bucket: 1, path: 3 };
        var groups = [
            { regex: gsRegex, indices: gsIndices, postModify: gsModify },
            { regex: httpRegex, indices: httpIndices, postModify: httpModify }
        ];
        for (var i = 0; i < groups.length; i++) {
            var group = groups[i];
            var captures = group.regex.exec(url);
            if (captures) {
                var bucketValue = captures[group.indices.bucket];
                var pathValue = captures[group.indices.path];
                if (!pathValue) {
                    pathValue = '';
                }
                location = new Location(bucketValue, pathValue);
                group.postModify(location);
                break;
            }
        }
        if (location == null) {
            throw errorsExports.invalidUrl(url);
        }
        return location;
    };
    return Location;
}());
exports.Location = Location;



},{"./error":117}],122:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var json = require("./json");
var location_1 = require("./location");
var path = require("./path");
var type = require("./type");
var UrlUtils = require("./url");
function noXform_(metadata, value) {
    return value;
}
exports.noXform_ = noXform_;
/**
 * @struct
 */
var Mapping = /** @class */ (function () {
    function Mapping(server, opt_local, opt_writable, opt_xform) {
        this.server = server;
        this.local = opt_local || server;
        this.writable = !!opt_writable;
        this.xform = opt_xform || noXform_;
    }
    return Mapping;
}());
exports.Mapping = Mapping;
var mappings_ = null;
function xformPath(fullPath) {
    var valid = type.isString(fullPath);
    if (!valid || fullPath.length < 2) {
        return fullPath;
    }
    else {
        fullPath = fullPath;
        return path.lastComponent(fullPath);
    }
}
exports.xformPath = xformPath;
function getMappings() {
    if (mappings_) {
        return mappings_;
    }
    var mappings = [];
    mappings.push(new Mapping('bucket'));
    mappings.push(new Mapping('generation'));
    mappings.push(new Mapping('metageneration'));
    mappings.push(new Mapping('name', 'fullPath', true));
    function mappingsXformPath(metadata, fullPath) {
        return xformPath(fullPath);
    }
    var nameMapping = new Mapping('name');
    nameMapping.xform = mappingsXformPath;
    mappings.push(nameMapping);
    /**
     * Coerces the second param to a number, if it is defined.
     */
    function xformSize(metadata, size) {
        if (type.isDef(size)) {
            return +size;
        }
        else {
            return size;
        }
    }
    var sizeMapping = new Mapping('size');
    sizeMapping.xform = xformSize;
    mappings.push(sizeMapping);
    mappings.push(new Mapping('timeCreated'));
    mappings.push(new Mapping('updated'));
    mappings.push(new Mapping('md5Hash', null, true));
    mappings.push(new Mapping('cacheControl', null, true));
    mappings.push(new Mapping('contentDisposition', null, true));
    mappings.push(new Mapping('contentEncoding', null, true));
    mappings.push(new Mapping('contentLanguage', null, true));
    mappings.push(new Mapping('contentType', null, true));
    mappings.push(new Mapping('metadata', 'customMetadata', true));
    /**
     * Transforms a comma-separated string of tokens into a list of download
     * URLs.
     */
    function xformTokens(metadata, tokens) {
        var valid = type.isString(tokens) && tokens.length > 0;
        if (!valid) {
            // This can happen if objects are uploaded through GCS and retrieved
            // through list, so we don't want to throw an Error.
            return [];
        }
        var encode = encodeURIComponent;
        var tokensList = tokens.split(',');
        var urls = tokensList.map(function (token) {
            var bucket = metadata['bucket'];
            var path = metadata['fullPath'];
            var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
            var base = UrlUtils.makeDownloadUrl(urlPart);
            var queryString = UrlUtils.makeQueryString({
                alt: 'media',
                token: token
            });
            return base + queryString;
        });
        return urls;
    }
    mappings.push(new Mapping('downloadTokens', 'downloadURLs', false, xformTokens));
    mappings_ = mappings;
    return mappings_;
}
exports.getMappings = getMappings;
function addRef(metadata, authWrapper) {
    function generateRef() {
        var bucket = metadata['bucket'];
        var path = metadata['fullPath'];
        var loc = new location_1.Location(bucket, path);
        return authWrapper.makeStorageReference(loc);
    }
    Object.defineProperty(metadata, 'ref', { get: generateRef });
}
exports.addRef = addRef;
function fromResource(authWrapper, resource, mappings) {
    var metadata = {};
    metadata['type'] = 'file';
    var len = mappings.length;
    for (var i = 0; i < len; i++) {
        var mapping = mappings[i];
        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
    }
    addRef(metadata, authWrapper);
    return metadata;
}
exports.fromResource = fromResource;
function fromResourceString(authWrapper, resourceString, mappings) {
    var obj = json.jsonObjectOrNull(resourceString);
    if (obj === null) {
        return null;
    }
    var resource = obj;
    return fromResource(authWrapper, resource, mappings);
}
exports.fromResourceString = fromResourceString;
function toResourceString(metadata, mappings) {
    var resource = {};
    var len = mappings.length;
    for (var i = 0; i < len; i++) {
        var mapping = mappings[i];
        if (mapping.writable) {
            resource[mapping.server] = metadata[mapping.local];
        }
    }
    return JSON.stringify(resource);
}
exports.toResourceString = toResourceString;
function metadataValidator(p) {
    var validType = p && type.isObject(p);
    if (!validType) {
        throw 'Expected Metadata object.';
    }
    for (var key in p) {
        var val = p[key];
        if (key === 'customMetadata') {
            if (!type.isObject(val)) {
                throw 'Expected object for \'customMetadata\' mapping.';
            }
        }
        else {
            if (type.isNonNullObject(val)) {
                throw "Mapping for '" + key + "' cannot be an object.";
            }
        }
    }
}
exports.metadataValidator = metadataValidator;



},{"./json":120,"./location":121,"./path":125,"./type":133,"./url":134}],123:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Contains methods for working with objects.
 */
function contains(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
exports.contains = contains;
function forEach(obj, f) {
    for (var key in obj) {
        if (contains(obj, key)) {
            f(key, obj[key]);
        }
    }
}
exports.forEach = forEach;
function clone(obj) {
    if (obj == null) {
        return {};
    }
    var c = {};
    forEach(obj, function (key, val) {
        c[key] = val;
    });
    return c;
}
exports.clone = clone;



},{}],124:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var type = require("./type");
/**
 * @struct
 */
var Observer = /** @class */ (function () {
    function Observer(nextOrObserver, opt_error, opt_complete) {
        var asFunctions = type.isFunction(nextOrObserver) ||
            type.isDef(opt_error) ||
            type.isDef(opt_complete);
        if (asFunctions) {
            this.next = nextOrObserver;
            this.error = opt_error || null;
            this.complete = opt_complete || null;
        }
        else {
            var observer = nextOrObserver;
            this.next = observer.next || null;
            this.error = observer.error || null;
            this.complete = observer.complete || null;
        }
    }
    return Observer;
}());
exports.Observer = Observer;



},{"./type":133}],125:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Contains helper methods for manipulating paths.
 */
/**
 * @return Null if the path is already at the root.
 */
function parent(path) {
    if (path.length == 0) {
        return null;
    }
    var index = path.lastIndexOf('/');
    if (index === -1) {
        return '';
    }
    var newPath = path.slice(0, index);
    return newPath;
}
exports.parent = parent;
function child(path, childPath) {
    var canonicalChildPath = childPath
        .split('/')
        .filter(function (component) {
        return component.length > 0;
    })
        .join('/');
    if (path.length === 0) {
        return canonicalChildPath;
    }
    else {
        return path + '/' + canonicalChildPath;
    }
}
exports.child = child;
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */
function lastComponent(path) {
    var index = path.lastIndexOf('/', path.length - 2);
    if (index === -1) {
        return path;
    }
    else {
        return path.slice(index + 1);
    }
}
exports.lastComponent = lastComponent;



},{}],126:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Implements the promise abstraction interface for external
 * (public SDK) packaging, which just passes through to the firebase-app impl.
 */
/**
 * @template T
 * @param {function((function(T): void),
 *                  (function(!Error): void))} resolver
 */
function make(resolver) {
    return new Promise(resolver);
}
exports.make = make;
/**
 * @template T
 */
function resolve(value) {
    return Promise.resolve(value);
}
exports.resolve = resolve;
function reject(error) {
    return Promise.reject(error);
}
exports.reject = reject;



},{}],127:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Defines methods used to actually send HTTP requests from
 * abstract representations.
 */
var app_1 = require("@firebase/app");
var array = require("./array");
var backoff = require("./backoff");
var errorsExports = require("./error");
var object = require("./object");
var promiseimpl = require("./promise_external");
var type = require("./type");
var UrlUtils = require("./url");
var XhrIoExports = require("./xhrio");
/**
 * @struct
 * @template T
 */
var NetworkRequest = /** @class */ (function () {
    function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
        this.pendingXhr_ = null;
        this.backoffId_ = null;
        this.resolve_ = null;
        this.reject_ = null;
        this.canceled_ = false;
        this.appDelete_ = false;
        this.url_ = url;
        this.method_ = method;
        this.headers_ = headers;
        this.body_ = body;
        this.successCodes_ = successCodes.slice();
        this.additionalRetryCodes_ = additionalRetryCodes.slice();
        this.callback_ = callback;
        this.errorCallback_ = errorCallback;
        this.progressCallback_ = progressCallback;
        this.timeout_ = timeout;
        this.pool_ = pool;
        var self = this;
        this.promise_ = promiseimpl.make(function (resolve, reject) {
            self.resolve_ = resolve;
            self.reject_ = reject;
            self.start_();
        });
    }
    /**
     * Actually starts the retry loop.
     */
    NetworkRequest.prototype.start_ = function () {
        var self = this;
        function doTheRequest(backoffCallback, canceled) {
            if (canceled) {
                backoffCallback(false, new RequestEndStatus(false, null, true));
                return;
            }
            var xhr = self.pool_.createXhrIo();
            self.pendingXhr_ = xhr;
            function progressListener(progressEvent) {
                var loaded = progressEvent.loaded;
                var total = progressEvent.lengthComputable ? progressEvent.total : -1;
                if (self.progressCallback_ !== null) {
                    self.progressCallback_(loaded, total);
                }
            }
            if (self.progressCallback_ !== null) {
                xhr.addUploadProgressListener(progressListener);
            }
            xhr
                .send(self.url_, self.method_, self.body_, self.headers_)
                .then(function (xhr) {
                if (self.progressCallback_ !== null) {
                    xhr.removeUploadProgressListener(progressListener);
                }
                self.pendingXhr_ = null;
                xhr = xhr;
                var hitServer = xhr.getErrorCode() === XhrIoExports.ErrorCode.NO_ERROR;
                var status = xhr.getStatus();
                if (!hitServer || self.isRetryStatusCode_(status)) {
                    var wasCanceled = xhr.getErrorCode() === XhrIoExports.ErrorCode.ABORT;
                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
                    return;
                }
                var successCode = array.contains(self.successCodes_, status);
                backoffCallback(true, new RequestEndStatus(successCode, xhr));
            });
        }
        /**
         * @param requestWentThrough True if the request eventually went
         *     through, false if it hit the retry limit or was canceled.
         */
        function backoffDone(requestWentThrough, status) {
            var resolve = self.resolve_;
            var reject = self.reject_;
            var xhr = status.xhr;
            if (status.wasSuccessCode) {
                try {
                    var result = self.callback_(xhr, xhr.getResponseText());
                    if (type.isJustDef(result)) {
                        resolve(result);
                    }
                    else {
                        resolve();
                    }
                }
                catch (e) {
                    reject(e);
                }
            }
            else {
                if (xhr !== null) {
                    var err = errorsExports.unknown();
                    err.setServerResponseProp(xhr.getResponseText());
                    if (self.errorCallback_) {
                        reject(self.errorCallback_(xhr, err));
                    }
                    else {
                        reject(err);
                    }
                }
                else {
                    if (status.canceled) {
                        var err = self.appDelete_
                            ? errorsExports.appDeleted()
                            : errorsExports.canceled();
                        reject(err);
                    }
                    else {
                        var err = errorsExports.retryLimitExceeded();
                        reject(err);
                    }
                }
            }
        }
        if (this.canceled_) {
            backoffDone(false, new RequestEndStatus(false, null, true));
        }
        else {
            this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);
        }
    };
    /** @inheritDoc */
    NetworkRequest.prototype.getPromise = function () {
        return this.promise_;
    };
    /** @inheritDoc */
    NetworkRequest.prototype.cancel = function (appDelete) {
        this.canceled_ = true;
        this.appDelete_ = appDelete || false;
        if (this.backoffId_ !== null) {
            backoff.stop(this.backoffId_);
        }
        if (this.pendingXhr_ !== null) {
            this.pendingXhr_.abort();
        }
    };
    NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
        // The codes for which to retry came from this page:
        // https://cloud.google.com/storage/docs/exponential-backoff
        var isFiveHundredCode = status >= 500 && status < 600;
        var extraRetryCodes = [
            // Request Timeout: web server didn't receive full request in time.
            408,
            // Too Many Requests: you're getting rate-limited, basically.
            429
        ];
        var isExtraRetryCode = array.contains(extraRetryCodes, status);
        var isRequestSpecificRetryCode = array.contains(this.additionalRetryCodes_, status);
        return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
    };
    return NetworkRequest;
}());
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled Defaults to false.
 * @struct
 */
var RequestEndStatus = /** @class */ (function () {
    function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {
        this.wasSuccessCode = wasSuccessCode;
        this.xhr = xhr;
        this.canceled = !!opt_canceled;
    }
    return RequestEndStatus;
}());
exports.RequestEndStatus = RequestEndStatus;
function addAuthHeader_(headers, authToken) {
    if (authToken !== null && authToken.length > 0) {
        headers['Authorization'] = 'Firebase ' + authToken;
    }
}
exports.addAuthHeader_ = addAuthHeader_;
function addVersionHeader_(headers) {
    var number = typeof app_1.default !== 'undefined' ? app_1.default.SDK_VERSION : 'AppManager';
    headers['X-Firebase-Storage-Version'] = 'webjs/' + number;
}
exports.addVersionHeader_ = addVersionHeader_;
/**
 * @template T
 */
function makeRequest(requestInfo, authToken, pool) {
    var queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);
    var url = requestInfo.url + queryPart;
    var headers = object.clone(requestInfo.headers);
    addAuthHeader_(headers, authToken);
    addVersionHeader_(headers);
    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
exports.makeRequest = makeRequest;



},{"./array":111,"./backoff":114,"./error":117,"./object":123,"./promise_external":126,"./type":133,"./url":134,"./xhrio":135,"@firebase/app":2}],128:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RequestInfo = /** @class */ (function () {
    function RequestInfo(url, method, 
    /**
     * Returns the value with which to resolve the request's promise. Only called
     * if the request is successful. Throw from this function to reject the
     * returned Request's promise with the thrown error.
     * Note: The XhrIo passed to this function may be reused after this callback
     * returns. Do not keep a reference to it in any way.
     */
    handler, timeout) {
        this.url = url;
        this.method = method;
        this.handler = handler;
        this.timeout = timeout;
        this.urlParams = {};
        this.headers = {};
        this.body = null;
        this.errorHandler = null;
        /**
         * Called with the current number of bytes uploaded and total size (-1 if not
         * computable) of the request body (i.e. used to report upload progress).
         */
        this.progressCallback = null;
        this.successCodes = [200];
        this.additionalRetryCodes = [];
    }
    return RequestInfo;
}());
exports.RequestInfo = RequestInfo;



},{}],129:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var object = require("./object");
var constants = require("./constants");
/**
 * @struct
 */
var RequestMap = /** @class */ (function () {
    function RequestMap() {
        this.map_ = {};
        this.id_ = constants.minSafeInteger;
    }
    /**
     * Registers the given request with this map.
     * The request is unregistered when it completes.
     * @param r The request to register.
     */
    RequestMap.prototype.addRequest = function (r) {
        var id = this.id_;
        this.id_++;
        this.map_[id] = r;
        var self = this;
        function unmap() {
            delete self.map_[id];
        }
        r.getPromise().then(unmap, unmap);
    };
    /**
     * Cancels all registered requests.
     */
    RequestMap.prototype.clear = function () {
        object.forEach(this.map_, function (key, val) {
            if (val) {
                val.cancel(true);
            }
        });
        this.map_ = {};
    };
    return RequestMap;
}());
exports.RequestMap = RequestMap;



},{"./constants":116,"./object":123}],130:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var array = require("./array");
var blob_1 = require("./blob");
var errorsExports = require("./error");
var MetadataUtils = require("./metadata");
var object = require("./object");
var requestinfo_1 = require("./requestinfo");
var type = require("./type");
var UrlUtils = require("./url");
/**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */
function handlerCheck(cndn) {
    if (!cndn) {
        throw errorsExports.unknown();
    }
}
exports.handlerCheck = handlerCheck;
function metadataHandler(authWrapper, mappings) {
    function handler(xhr, text) {
        var metadata = MetadataUtils.fromResourceString(authWrapper, text, mappings);
        handlerCheck(metadata !== null);
        return metadata;
    }
    return handler;
}
exports.metadataHandler = metadataHandler;
function sharedErrorHandler(location) {
    function errorHandler(xhr, err) {
        var newErr;
        if (xhr.getStatus() === 401) {
            newErr = errorsExports.unauthenticated();
        }
        else {
            if (xhr.getStatus() === 402) {
                newErr = errorsExports.quotaExceeded(location.bucket);
            }
            else {
                if (xhr.getStatus() === 403) {
                    newErr = errorsExports.unauthorized(location.path);
                }
                else {
                    newErr = err;
                }
            }
        }
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
    }
    return errorHandler;
}
exports.sharedErrorHandler = sharedErrorHandler;
function objectErrorHandler(location) {
    var shared = sharedErrorHandler(location);
    function errorHandler(xhr, err) {
        var newErr = shared(xhr, err);
        if (xhr.getStatus() === 404) {
            newErr = errorsExports.objectNotFound(location.path);
        }
        newErr.setServerResponseProp(err.serverResponseProp());
        return newErr;
    }
    return errorHandler;
}
exports.objectErrorHandler = objectErrorHandler;
function getMetadata(authWrapper, location, mappings) {
    var urlPart = location.fullServerUrl();
    var url = UrlUtils.makeNormalUrl(urlPart);
    var method = 'GET';
    var timeout = authWrapper.maxOperationRetryTime();
    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
exports.getMetadata = getMetadata;
function updateMetadata(authWrapper, location, metadata, mappings) {
    var urlPart = location.fullServerUrl();
    var url = UrlUtils.makeNormalUrl(urlPart);
    var method = 'PATCH';
    var body = MetadataUtils.toResourceString(metadata, mappings);
    var headers = { 'Content-Type': 'application/json; charset=utf-8' };
    var timeout = authWrapper.maxOperationRetryTime();
    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
exports.updateMetadata = updateMetadata;
function deleteObject(authWrapper, location) {
    var urlPart = location.fullServerUrl();
    var url = UrlUtils.makeNormalUrl(urlPart);
    var method = 'DELETE';
    var timeout = authWrapper.maxOperationRetryTime();
    function handler(xhr, text) { }
    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
    requestInfo.successCodes = [200, 204];
    requestInfo.errorHandler = objectErrorHandler(location);
    return requestInfo;
}
exports.deleteObject = deleteObject;
function determineContentType_(metadata, blob) {
    return ((metadata && metadata['contentType']) ||
        (blob && blob.type()) ||
        'application/octet-stream');
}
exports.determineContentType_ = determineContentType_;
function metadataForUpload_(location, blob, opt_metadata) {
    var metadata = object.clone(opt_metadata);
    metadata['fullPath'] = location.path;
    metadata['size'] = blob.size();
    if (!metadata['contentType']) {
        metadata['contentType'] = determineContentType_(null, blob);
    }
    return metadata;
}
exports.metadataForUpload_ = metadataForUpload_;
function multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var headers = {
        'X-Goog-Upload-Protocol': 'multipart'
    };
    function genBoundary() {
        var str = '';
        for (var i = 0; i < 2; i++) {
            str =
                str +
                    Math.random()
                        .toString()
                        .slice(2);
        }
        return str;
    }
    var boundary = genBoundary();
    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
    var metadata = metadataForUpload_(location, blob, opt_metadata);
    var metadataString = MetadataUtils.toResourceString(metadata, mappings);
    var preBlobPart = '--' +
        boundary +
        '\r\n' +
        'Content-Type: application/json; charset=utf-8\r\n\r\n' +
        metadataString +
        '\r\n--' +
        boundary +
        '\r\n' +
        'Content-Type: ' +
        metadata['contentType'] +
        '\r\n\r\n';
    var postBlobPart = '\r\n--' + boundary + '--';
    var body = blob_1.FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
    if (body === null) {
        throw errorsExports.cannotSliceBlob();
    }
    var urlParams = { name: metadata['fullPath'] };
    var url = UrlUtils.makeUploadUrl(urlPart);
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
exports.multipartUpload = multipartUpload;
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 * @struct
 */
var ResumableUploadStatus = /** @class */ (function () {
    function ResumableUploadStatus(current, total, finalized, metadata) {
        this.current = current;
        this.total = total;
        this.finalized = !!finalized;
        this.metadata = metadata || null;
    }
    return ResumableUploadStatus;
}());
exports.ResumableUploadStatus = ResumableUploadStatus;
function checkResumeHeader_(xhr, opt_allowed) {
    var status;
    try {
        status = xhr.getResponseHeader('X-Goog-Upload-Status');
    }
    catch (e) {
        handlerCheck(false);
    }
    var allowed = opt_allowed || ['active'];
    handlerCheck(array.contains(allowed, status));
    return status;
}
exports.checkResumeHeader_ = checkResumeHeader_;
function createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {
    var urlPart = location.bucketOnlyServerUrl();
    var metadata = metadataForUpload_(location, blob, opt_metadata);
    var urlParams = { name: metadata['fullPath'] };
    var url = UrlUtils.makeUploadUrl(urlPart);
    var method = 'POST';
    var headers = {
        'X-Goog-Upload-Protocol': 'resumable',
        'X-Goog-Upload-Command': 'start',
        'X-Goog-Upload-Header-Content-Length': blob.size(),
        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],
        'Content-Type': 'application/json; charset=utf-8'
    };
    var body = MetadataUtils.toResourceString(metadata, mappings);
    var timeout = authWrapper.maxUploadRetryTime();
    function handler(xhr, text) {
        checkResumeHeader_(xhr);
        var url;
        try {
            url = xhr.getResponseHeader('X-Goog-Upload-URL');
        }
        catch (e) {
            handlerCheck(false);
        }
        handlerCheck(type.isString(url));
        return url;
    }
    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
    requestInfo.urlParams = urlParams;
    requestInfo.headers = headers;
    requestInfo.body = body;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
exports.createResumableUpload = createResumableUpload;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */
function getResumableUploadStatus(authWrapper, location, url, blob) {
    var headers = { 'X-Goog-Upload-Command': 'query' };
    function handler(xhr, text) {
        var status = checkResumeHeader_(xhr, ['active', 'final']);
        var sizeString;
        try {
            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
        }
        catch (e) {
            handlerCheck(false);
        }
        var size = parseInt(sizeString, 10);
        handlerCheck(!isNaN(size));
        return new ResumableUploadStatus(size, blob.size(), status === 'final');
    }
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
exports.getResumableUploadStatus = getResumableUploadStatus;
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */
exports.resumableUploadChunkSize = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param opt_status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */
function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {
    // TODO(andysoto): standardize on internal asserts
    // assert(!(opt_status && opt_status.finalized));
    var status = new ResumableUploadStatus(0, 0);
    if (opt_status) {
        status.current = opt_status.current;
        status.total = opt_status.total;
    }
    else {
        status.current = 0;
        status.total = blob.size();
    }
    if (blob.size() !== status.total) {
        throw errorsExports.serverFileWrongSize();
    }
    var bytesLeft = status.total - status.current;
    var bytesToUpload = bytesLeft;
    if (chunkSize > 0) {
        bytesToUpload = Math.min(bytesToUpload, chunkSize);
    }
    var startByte = status.current;
    var endByte = startByte + bytesToUpload;
    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
    var headers = {
        'X-Goog-Upload-Command': uploadCommand,
        'X-Goog-Upload-Offset': status.current
    };
    var body = blob.slice(startByte, endByte);
    if (body === null) {
        throw errorsExports.cannotSliceBlob();
    }
    function handler(xhr, text) {
        // TODO(andysoto): Verify the MD5 of each uploaded range:
        // the 'x-range-md5' header comes back with status code 308 responses.
        // We'll only be able to bail out though, because you can't re-upload a
        // range that you previously uploaded.
        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
        var newCurrent = status.current + bytesToUpload;
        var size = blob.size();
        var metadata;
        if (uploadStatus === 'final') {
            metadata = metadataHandler(authWrapper, mappings)(xhr, text);
        }
        else {
            metadata = null;
        }
        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
    }
    var method = 'POST';
    var timeout = authWrapper.maxUploadRetryTime();
    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);
    requestInfo.headers = headers;
    requestInfo.body = body.uploadData();
    requestInfo.progressCallback = opt_progressCallback || null;
    requestInfo.errorHandler = sharedErrorHandler(location);
    return requestInfo;
}
exports.continueResumableUpload = continueResumableUpload;



},{"./array":111,"./blob":115,"./error":117,"./metadata":122,"./object":123,"./requestinfo":128,"./type":133,"./url":134}],131:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var errorsExports = require("./error");
exports.StringFormat = {
    RAW: 'raw',
    BASE64: 'base64',
    BASE64URL: 'base64url',
    DATA_URL: 'data_url'
};
function formatValidator(stringFormat) {
    switch (stringFormat) {
        case exports.StringFormat.RAW:
        case exports.StringFormat.BASE64:
        case exports.StringFormat.BASE64URL:
        case exports.StringFormat.DATA_URL:
            return;
        default:
            throw 'Expected one of the event types: [' +
                exports.StringFormat.RAW +
                ', ' +
                exports.StringFormat.BASE64 +
                ', ' +
                exports.StringFormat.BASE64URL +
                ', ' +
                exports.StringFormat.DATA_URL +
                '].';
    }
}
exports.formatValidator = formatValidator;
/**
 * @struct
 */
var StringData = /** @class */ (function () {
    function StringData(data, opt_contentType) {
        this.data = data;
        this.contentType = opt_contentType || null;
    }
    return StringData;
}());
exports.StringData = StringData;
function dataFromString(format, string) {
    switch (format) {
        case exports.StringFormat.RAW:
            return new StringData(utf8Bytes_(string));
        case exports.StringFormat.BASE64:
        case exports.StringFormat.BASE64URL:
            return new StringData(base64Bytes_(format, string));
        case exports.StringFormat.DATA_URL:
            return new StringData(dataURLBytes_(string), dataURLContentType_(string));
    }
    // assert(false);
    throw errorsExports.unknown();
}
exports.dataFromString = dataFromString;
function utf8Bytes_(string) {
    var b = [];
    for (var i = 0; i < string.length; i++) {
        var c = string.charCodeAt(i);
        if (c <= 127) {
            b.push(c);
        }
        else {
            if (c <= 2047) {
                b.push(192 | (c >> 6), 128 | (c & 63));
            }
            else {
                if ((c & 64512) == 55296) {
                    // The start of a surrogate pair.
                    var valid = i < string.length - 1 &&
                        (string.charCodeAt(i + 1) & 64512) == 56320;
                    if (!valid) {
                        // The second surrogate wasn't there.
                        b.push(239, 191, 189);
                    }
                    else {
                        var hi = c;
                        var lo = string.charCodeAt(++i);
                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);
                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));
                    }
                }
                else {
                    if ((c & 64512) == 56320) {
                        // Invalid low surrogate.
                        b.push(239, 191, 189);
                    }
                    else {
                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));
                    }
                }
            }
        }
    }
    return new Uint8Array(b);
}
exports.utf8Bytes_ = utf8Bytes_;
function percentEncodedBytes_(string) {
    var decoded;
    try {
        decoded = decodeURIComponent(string);
    }
    catch (e) {
        throw errorsExports.invalidFormat(exports.StringFormat.DATA_URL, 'Malformed data URL.');
    }
    return utf8Bytes_(decoded);
}
exports.percentEncodedBytes_ = percentEncodedBytes_;
function base64Bytes_(format, string) {
    switch (format) {
        case exports.StringFormat.BASE64: {
            var hasMinus = string.indexOf('-') !== -1;
            var hasUnder = string.indexOf('_') !== -1;
            if (hasMinus || hasUnder) {
                var invalidChar = hasMinus ? '-' : '_';
                throw errorsExports.invalidFormat(format, "Invalid character '" +
                    invalidChar +
                    "' found: is it base64url encoded?");
            }
            break;
        }
        case exports.StringFormat.BASE64URL: {
            var hasPlus = string.indexOf('+') !== -1;
            var hasSlash = string.indexOf('/') !== -1;
            if (hasPlus || hasSlash) {
                var invalidChar = hasPlus ? '+' : '/';
                throw errorsExports.invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
            }
            string = string.replace(/-/g, '+').replace(/_/g, '/');
            break;
        }
    }
    var bytes;
    try {
        bytes = atob(string);
    }
    catch (e) {
        throw errorsExports.invalidFormat(format, 'Invalid character found');
    }
    var array = new Uint8Array(bytes.length);
    for (var i = 0; i < bytes.length; i++) {
        array[i] = bytes.charCodeAt(i);
    }
    return array;
}
exports.base64Bytes_ = base64Bytes_;
/**
 * @struct
 */
var DataURLParts = /** @class */ (function () {
    function DataURLParts(dataURL) {
        this.base64 = false;
        this.contentType = null;
        var matches = dataURL.match(/^data:([^,]+)?,/);
        if (matches === null) {
            throw errorsExports.invalidFormat(exports.StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
        }
        var middle = matches[1] || null;
        if (middle != null) {
            this.base64 = endsWith(middle, ';base64');
            this.contentType = this.base64
                ? middle.substring(0, middle.length - ';base64'.length)
                : middle;
        }
        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
    }
    return DataURLParts;
}());
function dataURLBytes_(string) {
    var parts = new DataURLParts(string);
    if (parts.base64) {
        return base64Bytes_(exports.StringFormat.BASE64, parts.rest);
    }
    else {
        return percentEncodedBytes_(parts.rest);
    }
}
exports.dataURLBytes_ = dataURLBytes_;
function dataURLContentType_(string) {
    var parts = new DataURLParts(string);
    return parts.contentType;
}
exports.dataURLContentType_ = dataURLContentType_;
function endsWith(s, end) {
    var longEnough = s.length >= end.length;
    if (!longEnough) {
        return false;
    }
    return s.substring(s.length - end.length) === end;
}



},{"./error":117}],132:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskEvent = {
    /** Triggered whenever the task changes or progress is updated. */
    STATE_CHANGED: 'state_changed'
};
exports.InternalTaskState = {
    RUNNING: 'running',
    PAUSING: 'pausing',
    PAUSED: 'paused',
    SUCCESS: 'success',
    CANCELING: 'canceling',
    CANCELED: 'canceled',
    ERROR: 'error'
};
exports.TaskState = {
    /** The task is currently transferring data. */
    RUNNING: 'running',
    /** The task was paused by the user. */
    PAUSED: 'paused',
    /** The task completed successfully. */
    SUCCESS: 'success',
    /** The task was canceled. */
    CANCELED: 'canceled',
    /** The task failed with an error. */
    ERROR: 'error'
};
function taskStateFromInternalTaskState(state) {
    switch (state) {
        case exports.InternalTaskState.RUNNING:
        case exports.InternalTaskState.PAUSING:
        case exports.InternalTaskState.CANCELING:
            return exports.TaskState.RUNNING;
        case exports.InternalTaskState.PAUSED:
            return exports.TaskState.PAUSED;
        case exports.InternalTaskState.SUCCESS:
            return exports.TaskState.SUCCESS;
        case exports.InternalTaskState.CANCELED:
            return exports.TaskState.CANCELED;
        case exports.InternalTaskState.ERROR:
            return exports.TaskState.ERROR;
        default:
            // TODO(andysoto): assert(false);
            return exports.TaskState.ERROR;
    }
}
exports.taskStateFromInternalTaskState = taskStateFromInternalTaskState;



},{}],133:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @return False if the object is undefined or null, true otherwise.
 */
function isDef(p) {
    return p != null;
}
exports.isDef = isDef;
function isJustDef(p) {
    return p !== void 0;
}
exports.isJustDef = isJustDef;
function isFunction(p) {
    return typeof p === 'function';
}
exports.isFunction = isFunction;
function isObject(p) {
    return typeof p === 'object';
}
exports.isObject = isObject;
function isNonNullObject(p) {
    return isObject(p) && p !== null;
}
exports.isNonNullObject = isNonNullObject;
function isNonArrayObject(p) {
    return isObject(p) && !Array.isArray(p);
}
exports.isNonArrayObject = isNonArrayObject;
function isString(p) {
    return typeof p === 'string' || p instanceof String;
}
exports.isString = isString;
function isNumber(p) {
    return typeof p === 'number' || p instanceof Number;
}
exports.isNumber = isNumber;
function isNativeBlob(p) {
    return isNativeBlobDefined() && p instanceof Blob;
}
exports.isNativeBlob = isNativeBlob;
function isNativeBlobDefined() {
    return typeof Blob !== 'undefined';
}
exports.isNativeBlobDefined = isNativeBlobDefined;



},{}],134:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Functions to create and manipulate URLs for the server API.
 */
var constants = require("./constants");
var object = require("./object");
function makeNormalUrl(urlPart) {
    return constants.domainBase + constants.apiBaseUrl + urlPart;
}
exports.makeNormalUrl = makeNormalUrl;
function makeDownloadUrl(urlPart) {
    return constants.downloadBase + constants.apiBaseUrl + urlPart;
}
exports.makeDownloadUrl = makeDownloadUrl;
function makeUploadUrl(urlPart) {
    return constants.domainBase + constants.apiUploadBaseUrl + urlPart;
}
exports.makeUploadUrl = makeUploadUrl;
function makeQueryString(params) {
    var encode = encodeURIComponent;
    var queryPart = '?';
    object.forEach(params, function (key, val) {
        var nextPart = encode(key) + '=' + encode(val);
        queryPart = queryPart + nextPart + '&';
    });
    // Chop off the extra '&' or '?' on the end
    queryPart = queryPart.slice(0, -1);
    return queryPart;
}
exports.makeQueryString = makeQueryString;



},{"./constants":116,"./object":123}],135:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @enum{number}
 */
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
    ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
    ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));



},{}],136:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var errorsExports = require("./error");
var object = require("./object");
var promiseimpl = require("./promise_external");
var type = require("./type");
var XhrIoExports = require("./xhrio");
/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */
var NetworkXhrIo = /** @class */ (function () {
    function NetworkXhrIo() {
        var _this = this;
        this.sent_ = false;
        this.xhr_ = new XMLHttpRequest();
        this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;
        this.sendPromise_ = promiseimpl.make(function (resolve, reject) {
            _this.xhr_.addEventListener('abort', function (event) {
                _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;
                resolve(_this);
            });
            _this.xhr_.addEventListener('error', function (event) {
                _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;
                resolve(_this);
            });
            _this.xhr_.addEventListener('load', function (event) {
                resolve(_this);
            });
        });
    }
    /**
     * @override
     */
    NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
        var _this = this;
        if (this.sent_) {
            throw errorsExports.internalError('cannot .send() more than once');
        }
        this.sent_ = true;
        this.xhr_.open(method, url, true);
        if (type.isDef(opt_headers)) {
            var headers = opt_headers;
            object.forEach(headers, function (key, val) {
                _this.xhr_.setRequestHeader(key, val.toString());
            });
        }
        if (type.isDef(opt_body)) {
            this.xhr_.send(opt_body);
        }
        else {
            this.xhr_.send();
        }
        return this.sendPromise_;
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getErrorCode = function () {
        if (!this.sent_) {
            throw errorsExports.internalError('cannot .getErrorCode() before sending');
        }
        return this.errorCode_;
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getStatus = function () {
        if (!this.sent_) {
            throw errorsExports.internalError('cannot .getStatus() before sending');
        }
        try {
            return this.xhr_.status;
        }
        catch (e) {
            return -1;
        }
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseText = function () {
        if (!this.sent_) {
            throw errorsExports.internalError('cannot .getResponseText() before sending');
        }
        return this.xhr_.responseText;
    };
    /**
     * Aborts the request.
     * @override
     */
    NetworkXhrIo.prototype.abort = function () {
        this.xhr_.abort();
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.getResponseHeader = function (header) {
        return this.xhr_.getResponseHeader(header);
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
        if (type.isDef(this.xhr_.upload)) {
            this.xhr_.upload.addEventListener('progress', listener);
        }
    };
    /**
     * @override
     */
    NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
        if (type.isDef(this.xhr_.upload)) {
            this.xhr_.upload.removeEventListener('progress', listener);
        }
    };
    return NetworkXhrIo;
}());
exports.NetworkXhrIo = NetworkXhrIo;



},{"./error":117,"./object":123,"./promise_external":126,"./type":133,"./xhrio":135}],137:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var xhrio_network_1 = require("./xhrio_network");
/**
 * Factory-like class for creating XhrIo instances.
 */
var XhrIoPool = /** @class */ (function () {
    function XhrIoPool() {
    }
    XhrIoPool.prototype.createXhrIo = function () {
        return new xhrio_network_1.NetworkXhrIo();
    };
    return XhrIoPool;
}());
exports.XhrIoPool = XhrIoPool;



},{"./xhrio_network":136}],138:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Defines the Firebase Storage Reference class.
 */
var args = require("./implementation/args");
var blob_1 = require("./implementation/blob");
var errorsExports = require("./implementation/error");
var location_1 = require("./implementation/location");
var metadata = require("./implementation/metadata");
var object = require("./implementation/object");
var path = require("./implementation/path");
var requests = require("./implementation/requests");
var fbsString = require("./implementation/string");
var string_1 = require("./implementation/string");
var type = require("./implementation/type");
var task_1 = require("./task");
/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @param location An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */
var Reference = /** @class */ (function () {
    function Reference(authWrapper, location) {
        this.authWrapper = authWrapper;
        if (location instanceof location_1.Location) {
            this.location = location;
        }
        else {
            this.location = location_1.Location.makeFromUrl(location);
        }
    }
    /**
     * @return The URL for the bucket and path this object references,
     *     in the form gs://<bucket>/<object-path>
     * @override
     */
    Reference.prototype.toString = function () {
        args.validate('toString', [], arguments);
        return 'gs://' + this.location.bucket + '/' + this.location.path;
    };
    Reference.prototype.newRef = function (authWrapper, location) {
        return new Reference(authWrapper, location);
    };
    Reference.prototype.mappings = function () {
        return metadata.getMappings();
    };
    /**
     * @return A reference to the object obtained by
     *     appending childPath, removing any duplicate, beginning, or trailing
     *     slashes.
     */
    Reference.prototype.child = function (childPath) {
        args.validate('child', [args.stringSpec()], arguments);
        var newPath = path.child(this.location.path, childPath);
        var location = new location_1.Location(this.location.bucket, newPath);
        return this.newRef(this.authWrapper, location);
    };
    Object.defineProperty(Reference.prototype, "parent", {
        /**
         * @return A reference to the parent of the
         *     current object, or null if the current object is the root.
         */
        get: function () {
            var newPath = path.parent(this.location.path);
            if (newPath === null) {
                return null;
            }
            var location = new location_1.Location(this.location.bucket, newPath);
            return this.newRef(this.authWrapper, location);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "root", {
        /**
         * @return An reference to the root of this
         *     object's bucket.
         */
        get: function () {
            var location = new location_1.Location(this.location.bucket, '');
            return this.newRef(this.authWrapper, location);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "bucket", {
        get: function () {
            return this.location.bucket;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "fullPath", {
        get: function () {
            return this.location.path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "name", {
        get: function () {
            return path.lastComponent(this.location.path);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reference.prototype, "storage", {
        get: function () {
            return this.authWrapper.service();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Uploads a blob to this object's location.
     * @param data The blob to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    Reference.prototype.put = function (data, metadata) {
        if (metadata === void 0) { metadata = null; }
        args.validate('put', [args.uploadDataSpec(), args.metadataSpec(true)], arguments);
        this.throwIfRoot_('put');
        return new task_1.UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_1.FbsBlob(data), metadata);
    };
    /**
     * Uploads a string to this object's location.
     * @param string The string to upload.
     * @param opt_format The format of the string to upload.
     * @return An UploadTask that lets you control and
     *     observe the upload.
     */
    Reference.prototype.putString = function (string, format, opt_metadata) {
        if (format === void 0) { format = string_1.StringFormat.RAW; }
        args.validate('putString', [
            args.stringSpec(),
            args.stringSpec(fbsString.formatValidator, true),
            args.metadataSpec(true)
        ], arguments);
        this.throwIfRoot_('putString');
        var data = fbsString.dataFromString(format, string);
        var metadata = object.clone(opt_metadata);
        if (!type.isDef(metadata['contentType']) && type.isDef(data.contentType)) {
            metadata['contentType'] = data.contentType;
        }
        return new task_1.UploadTask(this, this.authWrapper, this.location, this.mappings(), new blob_1.FbsBlob(data.data, true), metadata);
    };
    /**
     * Deletes the object at this location.
     * @return A promise that resolves if the deletion succeeds.
     */
    Reference.prototype.delete = function () {
        args.validate('delete', [], arguments);
        this.throwIfRoot_('delete');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = requests.deleteObject(self.authWrapper, self.location);
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     *     A promise that resolves with the metadata for this object. If this
     *     object doesn't exist or metadata cannot be retreived, the promise is
     *     rejected.
     */
    Reference.prototype.getMetadata = function () {
        args.validate('getMetadata', [], arguments);
        this.throwIfRoot_('getMetadata');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = requests.getMetadata(self.authWrapper, self.location, self.mappings());
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     * Updates the metadata for this object.
     * @param metadata The new metadata for the object.
     *     Only values that have been explicitly set will be changed. Explicitly
     *     setting a value to null will remove the metadata.
     * @return A promise that resolves
     *     with the new metadata for this object.
     *     @see firebaseStorage.Reference.prototype.getMetadata
     */
    Reference.prototype.updateMetadata = function (metadata) {
        args.validate('updateMetadata', [args.metadataSpec()], arguments);
        this.throwIfRoot_('updateMetadata');
        var self = this;
        return this.authWrapper.getAuthToken().then(function (authToken) {
            var requestInfo = requests.updateMetadata(self.authWrapper, self.location, metadata, self.mappings());
            return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
        });
    };
    /**
     * @return A promise that resolves with the download
     *     URL for this object.
     */
    Reference.prototype.getDownloadURL = function () {
        args.validate('getDownloadURL', [], arguments);
        this.throwIfRoot_('getDownloadURL');
        return this.getMetadata().then(function (metadata) {
            var url = metadata['downloadURLs'][0];
            if (type.isDef(url)) {
                return url;
            }
            else {
                throw errorsExports.noDownloadURL();
            }
        });
    };
    Reference.prototype.throwIfRoot_ = function (name) {
        if (this.location.path === '') {
            throw errorsExports.invalidRootOperation(name);
        }
    };
    return Reference;
}());
exports.Reference = Reference;



},{"./implementation/args":110,"./implementation/blob":115,"./implementation/error":117,"./implementation/location":121,"./implementation/metadata":122,"./implementation/object":123,"./implementation/path":125,"./implementation/requests":130,"./implementation/string":131,"./implementation/type":133,"./task":140}],139:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var args = require("./implementation/args");
var authwrapper_1 = require("./implementation/authwrapper");
var location_1 = require("./implementation/location");
var fbsPromiseImpl = require("./implementation/promise_external");
var RequestExports = require("./implementation/request");
var reference_1 = require("./reference");
/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 *
 * @struct
 */
var Service = /** @class */ (function () {
    function Service(app, pool, url) {
        this.bucket_ = null;
        function maker(authWrapper, loc) {
            return new reference_1.Reference(authWrapper, loc);
        }
        this.authWrapper_ = new authwrapper_1.AuthWrapper(app, maker, RequestExports.makeRequest, this, pool);
        this.app_ = app;
        if (url != null) {
            this.bucket_ = location_1.Location.makeFromBucketSpec(url);
        }
        else {
            var authWrapperBucket = this.authWrapper_.bucket();
            if (authWrapperBucket != null) {
                this.bucket_ = new location_1.Location(authWrapperBucket, '');
            }
        }
        this.internals_ = new ServiceInternals(this);
    }
    /**
     * Returns a firebaseStorage.Reference for the given path in the default
     * bucket.
     */
    Service.prototype.ref = function (path) {
        function validator(path) {
            if (/^[A-Za-z]+:\/\//.test(path)) {
                throw 'Expected child path but got a URL, use refFromURL instead.';
            }
        }
        args.validate('ref', [args.stringSpec(validator, true)], arguments);
        if (this.bucket_ == null) {
            throw new Error('No Storage Bucket defined in Firebase Options.');
        }
        var ref = new reference_1.Reference(this.authWrapper_, this.bucket_);
        if (path != null) {
            return ref.child(path);
        }
        else {
            return ref;
        }
    };
    /**
     * Returns a firebaseStorage.Reference object for the given absolute URL,
     * which must be a gs:// or http[s]:// URL.
     */
    Service.prototype.refFromURL = function (url) {
        function validator(p) {
            if (!/^[A-Za-z]+:\/\//.test(p)) {
                throw 'Expected full URL but got a child path, use ref instead.';
            }
            try {
                location_1.Location.makeFromUrl(p);
            }
            catch (e) {
                throw 'Expected valid full URL but got an invalid one.';
            }
        }
        args.validate('refFromURL', [args.stringSpec(validator, false)], arguments);
        return new reference_1.Reference(this.authWrapper_, url);
    };
    Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
        get: function () {
            return this.authWrapper_.maxUploadRetryTime();
        },
        enumerable: true,
        configurable: true
    });
    Service.prototype.setMaxUploadRetryTime = function (time) {
        args.validate('setMaxUploadRetryTime', [args.nonNegativeNumberSpec()], arguments);
        this.authWrapper_.setMaxUploadRetryTime(time);
    };
    Object.defineProperty(Service.prototype, "maxOperationRetryTime", {
        get: function () {
            return this.authWrapper_.maxOperationRetryTime();
        },
        enumerable: true,
        configurable: true
    });
    Service.prototype.setMaxOperationRetryTime = function (time) {
        args.validate('setMaxOperationRetryTime', [args.nonNegativeNumberSpec()], arguments);
        this.authWrapper_.setMaxOperationRetryTime(time);
    };
    Object.defineProperty(Service.prototype, "app", {
        get: function () {
            return this.app_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Service.prototype, "INTERNAL", {
        get: function () {
            return this.internals_;
        },
        enumerable: true,
        configurable: true
    });
    return Service;
}());
exports.Service = Service;
/**
 * @struct
 */
var ServiceInternals = /** @class */ (function () {
    function ServiceInternals(service) {
        this.service_ = service;
    }
    /**
     * Called when the associated app is deleted.
     * @see {!fbs.AuthWrapper.prototype.deleteApp}
     */
    ServiceInternals.prototype.delete = function () {
        this.service_.authWrapper_.deleteApp();
        return fbsPromiseImpl.resolve(undefined);
    };
    return ServiceInternals;
}());
exports.ServiceInternals = ServiceInternals;



},{"./implementation/args":110,"./implementation/authwrapper":113,"./implementation/location":121,"./implementation/promise_external":126,"./implementation/request":127,"./reference":138}],140:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Defines types for interacting with blob transfer tasks.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var taskenums_1 = require("./implementation/taskenums");
var observer_1 = require("./implementation/observer");
var taskenums_2 = require("./implementation/taskenums");
var tasksnapshot_1 = require("./tasksnapshot");
var fbsArgs = require("./implementation/args");
var fbsArray = require("./implementation/array");
var async_1 = require("./implementation/async");
var errors = require("./implementation/error");
var fbsPromiseimpl = require("./implementation/promise_external");
var fbsRequests = require("./implementation/requests");
var fbsTaskEnums = require("./implementation/taskenums");
var typeUtils = require("./implementation/type");
/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */
var UploadTask = /** @class */ (function () {
    /**
     * @param ref The firebaseStorage.Reference object this task came
     *     from, untyped to avoid cyclic dependencies.
     * @param blob The blob to upload.
     */
    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
        if (metadata === void 0) { metadata = null; }
        var _this = this;
        this.transferred_ = 0;
        this.needToFetchStatus_ = false;
        this.needToFetchMetadata_ = false;
        this.observers_ = [];
        this.error_ = null;
        this.uploadUrl_ = null;
        this.request_ = null;
        this.chunkMultiplier_ = 1;
        this.resolve_ = null;
        this.reject_ = null;
        this.ref_ = ref;
        this.authWrapper_ = authWrapper;
        this.location_ = location;
        this.blob_ = blob;
        this.metadata_ = metadata;
        this.mappings_ = mappings;
        this.resumable_ = this.shouldDoResumable_(this.blob_);
        this.state_ = taskenums_1.InternalTaskState.RUNNING;
        this.errorHandler_ = function (error) {
            _this.request_ = null;
            _this.chunkMultiplier_ = 1;
            if (error.codeEquals(errors.Code.CANCELED)) {
                _this.needToFetchStatus_ = true;
                _this.completeTransitions_();
            }
            else {
                _this.error_ = error;
                _this.transition_(taskenums_1.InternalTaskState.ERROR);
            }
        };
        this.metadataErrorHandler_ = function (error) {
            _this.request_ = null;
            if (error.codeEquals(errors.Code.CANCELED)) {
                _this.completeTransitions_();
            }
            else {
                _this.error_ = error;
                _this.transition_(taskenums_1.InternalTaskState.ERROR);
            }
        };
        this.promise_ = fbsPromiseimpl.make(function (resolve, reject) {
            _this.resolve_ = resolve;
            _this.reject_ = reject;
            _this.start_();
        });
        // Prevent uncaught rejections on the internal promise from bubbling out
        // to the top level with a dummy handler.
        this.promise_.then(null, function () { });
    }
    UploadTask.prototype.makeProgressCallback_ = function () {
        var _this = this;
        var sizeBefore = this.transferred_;
        return function (loaded, total) {
            _this.updateProgress_(sizeBefore + loaded);
        };
    };
    UploadTask.prototype.shouldDoResumable_ = function (blob) {
        return blob.size() > 256 * 1024;
    };
    UploadTask.prototype.start_ = function () {
        if (this.state_ !== taskenums_1.InternalTaskState.RUNNING) {
            // This can happen if someone pauses us in a resume callback, for example.
            return;
        }
        if (this.request_ !== null) {
            return;
        }
        if (this.resumable_) {
            if (this.uploadUrl_ === null) {
                this.createResumable_();
            }
            else {
                if (this.needToFetchStatus_) {
                    this.fetchStatus_();
                }
                else {
                    if (this.needToFetchMetadata_) {
                        // Happens if we miss the metadata on upload completion.
                        this.fetchMetadata_();
                    }
                    else {
                        this.continueUpload_();
                    }
                }
            }
        }
        else {
            this.oneShotUpload_();
        }
    };
    UploadTask.prototype.resolveToken_ = function (callback) {
        var _this = this;
        this.authWrapper_.getAuthToken().then(function (authToken) {
            switch (_this.state_) {
                case taskenums_1.InternalTaskState.RUNNING:
                    callback(authToken);
                    break;
                case taskenums_1.InternalTaskState.CANCELING:
                    _this.transition_(taskenums_1.InternalTaskState.CANCELED);
                    break;
                case taskenums_1.InternalTaskState.PAUSING:
                    _this.transition_(taskenums_1.InternalTaskState.PAUSED);
                    break;
                default:
            }
        });
    };
    // TODO(andysoto): assert false
    UploadTask.prototype.createResumable_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = fbsRequests.createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = createRequest;
            createRequest.getPromise().then(function (url) {
                _this.request_ = null;
                _this.uploadUrl_ = url;
                _this.needToFetchStatus_ = false;
                _this.completeTransitions_();
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.fetchStatus_ = function () {
        var _this = this;
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this.uploadUrl_;
        this.resolveToken_(function (authToken) {
            var requestInfo = fbsRequests.getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);
            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = statusRequest;
            statusRequest.getPromise().then(function (status) {
                status = status;
                _this.request_ = null;
                _this.updateProgress_(status.current);
                _this.needToFetchStatus_ = false;
                if (status.finalized) {
                    _this.needToFetchMetadata_ = true;
                }
                _this.completeTransitions_();
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.continueUpload_ = function () {
        var _this = this;
        var chunkSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;
        var status = new fbsRequests.ResumableUploadStatus(this.transferred_, this.blob_.size());
        // TODO(andysoto): assert(this.uploadUrl_ !== null);
        var url = this.uploadUrl_;
        this.resolveToken_(function (authToken) {
            var requestInfo;
            try {
                requestInfo = fbsRequests.continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
            }
            catch (e) {
                _this.error_ = e;
                _this.transition_(taskenums_1.InternalTaskState.ERROR);
                return;
            }
            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = uploadRequest;
            uploadRequest
                .getPromise()
                .then(function (newStatus) {
                _this.increaseMultiplier_();
                _this.request_ = null;
                _this.updateProgress_(newStatus.current);
                if (newStatus.finalized) {
                    _this.metadata_ = newStatus.metadata;
                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                }
                else {
                    _this.completeTransitions_();
                }
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.increaseMultiplier_ = function () {
        var currentSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;
        // Max chunk size is 32M.
        if (currentSize < 32 * 1024 * 1024) {
            this.chunkMultiplier_ *= 2;
        }
    };
    UploadTask.prototype.fetchMetadata_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = fbsRequests.getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);
            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = metadataRequest;
            metadataRequest.getPromise().then(function (metadata) {
                _this.request_ = null;
                _this.metadata_ = metadata;
                _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
            }, _this.metadataErrorHandler_);
        });
    };
    UploadTask.prototype.oneShotUpload_ = function () {
        var _this = this;
        this.resolveToken_(function (authToken) {
            var requestInfo = fbsRequests.multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);
            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);
            _this.request_ = multipartRequest;
            multipartRequest.getPromise().then(function (metadata) {
                _this.request_ = null;
                _this.metadata_ = metadata;
                _this.updateProgress_(_this.blob_.size());
                _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
            }, _this.errorHandler_);
        });
    };
    UploadTask.prototype.updateProgress_ = function (transferred) {
        var old = this.transferred_;
        this.transferred_ = transferred;
        // A progress update can make the "transferred" value smaller (e.g. a
        // partial upload not completed by server, after which the "transferred"
        // value may reset to the value at the beginning of the request).
        if (this.transferred_ !== old) {
            this.notifyObservers_();
        }
    };
    UploadTask.prototype.transition_ = function (state) {
        if (this.state_ === state) {
            return;
        }
        switch (state) {
            case taskenums_1.InternalTaskState.CANCELING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
                }
                break;
            case taskenums_1.InternalTaskState.PAUSING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING);
                this.state_ = state;
                if (this.request_ !== null) {
                    this.request_.cancel();
                }
                break;
            case taskenums_1.InternalTaskState.RUNNING:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.PAUSING);
                var wasPaused = this.state_ === taskenums_1.InternalTaskState.PAUSED;
                this.state_ = state;
                if (wasPaused) {
                    this.notifyObservers_();
                    this.start_();
                }
                break;
            case taskenums_1.InternalTaskState.PAUSED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case taskenums_1.InternalTaskState.CANCELED:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.PAUSED ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.error_ = errors.canceled();
                this.state_ = state;
                this.notifyObservers_();
                break;
            case taskenums_1.InternalTaskState.ERROR:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
            case taskenums_1.InternalTaskState.SUCCESS:
                // TODO(andysoto):
                // assert(this.state_ === InternalTaskState.RUNNING ||
                //        this.state_ === InternalTaskState.PAUSING ||
                //        this.state_ === InternalTaskState.CANCELING);
                this.state_ = state;
                this.notifyObservers_();
                break;
        }
    };
    UploadTask.prototype.completeTransitions_ = function () {
        switch (this.state_) {
            case taskenums_1.InternalTaskState.PAUSING:
                this.transition_(taskenums_1.InternalTaskState.PAUSED);
                break;
            case taskenums_1.InternalTaskState.CANCELING:
                this.transition_(taskenums_1.InternalTaskState.CANCELED);
                break;
            case taskenums_1.InternalTaskState.RUNNING:
                this.start_();
                break;
            default:
                // TODO(andysoto): assert(false);
                break;
        }
    };
    Object.defineProperty(UploadTask.prototype, "snapshot", {
        get: function () {
            var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);
            return new tasksnapshot_1.UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a callback for an event.
     * @param type The type of event to listen for.
     */
    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
        if (nextOrObserver === void 0) { nextOrObserver = undefined; }
        if (error === void 0) { error = undefined; }
        if (completed === void 0) { completed = undefined; }
        function typeValidator(_p) {
            if (type !== taskenums_2.TaskEvent.STATE_CHANGED) {
                throw "Expected one of the event types: [" + taskenums_2.TaskEvent.STATE_CHANGED + "].";
            }
        }
        var nextOrObserverMessage = 'Expected a function or an Object with one of ' +
            '`next`, `error`, `complete` properties.';
        var nextValidator = fbsArgs.nullFunctionSpec(true).validator;
        var observerValidator = fbsArgs.looseObjectSpec(null, true).validator;
        function nextOrObserverValidator(p) {
            try {
                nextValidator(p);
                return;
            }
            catch (e) { }
            try {
                observerValidator(p);
                var anyDefined = typeUtils.isJustDef(p['next']) ||
                    typeUtils.isJustDef(p['error']) ||
                    typeUtils.isJustDef(p['complete']);
                if (!anyDefined) {
                    throw '';
                }
                return;
            }
            catch (e) {
                throw nextOrObserverMessage;
            }
        }
        var specs = [
            fbsArgs.stringSpec(typeValidator),
            fbsArgs.looseObjectSpec(nextOrObserverValidator, true),
            fbsArgs.nullFunctionSpec(true),
            fbsArgs.nullFunctionSpec(true)
        ];
        fbsArgs.validate('on', specs, arguments);
        var self = this;
        function makeBinder(specs) {
            function binder(nextOrObserver, error, opt_complete) {
                if (specs !== null) {
                    fbsArgs.validate('on', specs, arguments);
                }
                var observer = new observer_1.Observer(nextOrObserver, error, completed);
                self.addObserver_(observer);
                return function () {
                    self.removeObserver_(observer);
                };
            }
            return binder;
        }
        function binderNextOrObserverValidator(p) {
            if (p === null) {
                throw nextOrObserverMessage;
            }
            nextOrObserverValidator(p);
        }
        var binderSpecs = [
            fbsArgs.looseObjectSpec(binderNextOrObserverValidator),
            fbsArgs.nullFunctionSpec(true),
            fbsArgs.nullFunctionSpec(true)
        ];
        var typeOnly = !(typeUtils.isJustDef(nextOrObserver) ||
            typeUtils.isJustDef(error) ||
            typeUtils.isJustDef(completed));
        if (typeOnly) {
            return makeBinder(binderSpecs);
        }
        else {
            return makeBinder(null)(nextOrObserver, error, completed);
        }
    };
    /**
     * This object behaves like a Promise, and resolves with its snapshot data
     * when the upload completes.
     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
     * @param onRejected The rejection callback.
     */
    UploadTask.prototype.then = function (onFulfilled, onRejected) {
        // These casts are needed so that TypeScript can infer the types of the
        // resulting Promise.
        return this.promise_.then(onFulfilled, onRejected);
    };
    /**
     * Equivalent to calling `then(null, onRejected)`.
     */
    UploadTask.prototype.catch = function (onRejected) {
        return this.then(null, onRejected);
    };
    /**
     * Adds the given observer.
     */
    UploadTask.prototype.addObserver_ = function (observer) {
        this.observers_.push(observer);
        this.notifyObserver_(observer);
    };
    /**
     * Removes the given observer.
     */
    UploadTask.prototype.removeObserver_ = function (observer) {
        fbsArray.remove(this.observers_, observer);
    };
    UploadTask.prototype.notifyObservers_ = function () {
        var _this = this;
        this.finishPromise_();
        var observers = fbsArray.clone(this.observers_);
        observers.forEach(function (observer) {
            _this.notifyObserver_(observer);
        });
    };
    UploadTask.prototype.finishPromise_ = function () {
        if (this.resolve_ !== null) {
            var triggered = true;
            switch (fbsTaskEnums.taskStateFromInternalTaskState(this.state_)) {
                case taskenums_2.TaskState.SUCCESS:
                    async_1.async(this.resolve_.bind(null, this.snapshot))();
                    break;
                case taskenums_2.TaskState.CANCELED:
                case taskenums_2.TaskState.ERROR:
                    var toCall = this.reject_;
                    async_1.async(toCall.bind(null, this.error_))();
                    break;
                default:
                    triggered = false;
                    break;
            }
            if (triggered) {
                this.resolve_ = null;
                this.reject_ = null;
            }
        }
    };
    UploadTask.prototype.notifyObserver_ = function (observer) {
        var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);
        switch (externalState) {
            case taskenums_2.TaskState.RUNNING:
            case taskenums_2.TaskState.PAUSED:
                if (observer.next !== null) {
                    async_1.async(observer.next.bind(observer, this.snapshot))();
                }
                break;
            case taskenums_2.TaskState.SUCCESS:
                if (observer.complete !== null) {
                    async_1.async(observer.complete.bind(observer))();
                }
                break;
            case taskenums_2.TaskState.CANCELED:
            case taskenums_2.TaskState.ERROR:
                if (observer.error !== null) {
                    async_1.async(observer.error.bind(observer, this.error_))();
                }
                break;
            default:
                // TODO(andysoto): assert(false);
                if (observer.error !== null) {
                    async_1.async(observer.error.bind(observer, this.error_))();
                }
        }
    };
    /**
     * Resumes a paused task. Has no effect on a currently running or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.resume = function () {
        fbsArgs.validate('resume', [], arguments);
        var valid = this.state_ === taskenums_1.InternalTaskState.PAUSED ||
            this.state_ === taskenums_1.InternalTaskState.PAUSING;
        if (valid) {
            this.transition_(taskenums_1.InternalTaskState.RUNNING);
        }
        return valid;
    };
    /**
     * Pauses a currently running task. Has no effect on a paused or failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.pause = function () {
        fbsArgs.validate('pause', [], arguments);
        var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING;
        if (valid) {
            this.transition_(taskenums_1.InternalTaskState.PAUSING);
        }
        return valid;
    };
    /**
     * Cancels a currently running or paused task. Has no effect on a complete or
     * failed task.
     * @return True if the operation took effect, false if ignored.
     */
    UploadTask.prototype.cancel = function () {
        fbsArgs.validate('cancel', [], arguments);
        var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING ||
            this.state_ === taskenums_1.InternalTaskState.PAUSING;
        if (valid) {
            this.transition_(taskenums_1.InternalTaskState.CANCELING);
        }
        return valid;
    };
    return UploadTask;
}());
exports.UploadTask = UploadTask;



},{"./implementation/args":110,"./implementation/array":111,"./implementation/async":112,"./implementation/error":117,"./implementation/observer":124,"./implementation/promise_external":126,"./implementation/requests":130,"./implementation/taskenums":132,"./implementation/type":133,"./tasksnapshot":141}],141:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UploadTaskSnapshot = /** @class */ (function () {
    function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
        this.bytesTransferred = bytesTransferred;
        this.totalBytes = totalBytes;
        this.state = state;
        this.metadata = metadata;
        this.task = task;
        this.ref = ref;
    }
    Object.defineProperty(UploadTaskSnapshot.prototype, "downloadURL", {
        get: function () {
            if (this.metadata !== null) {
                var urls = this.metadata['downloadURLs'];
                if (urls != null && urls[0] != null) {
                    return urls[0];
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    return UploadTaskSnapshot;
}());
exports.UploadTaskSnapshot = UploadTaskSnapshot;



},{}],142:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("./src/assert");
exports.assert = assert_1.assert;
exports.assertionError = assert_1.assertionError;
var crypt_1 = require("./src/crypt");
exports.base64 = crypt_1.base64;
exports.base64Decode = crypt_1.base64Decode;
exports.base64Encode = crypt_1.base64Encode;
var constants_1 = require("./src/constants");
exports.CONSTANTS = constants_1.CONSTANTS;
var deepCopy_1 = require("./src/deepCopy");
exports.deepCopy = deepCopy_1.deepCopy;
exports.deepExtend = deepCopy_1.deepExtend;
exports.patchProperty = deepCopy_1.patchProperty;
var deferred_1 = require("./src/deferred");
exports.Deferred = deferred_1.Deferred;
var environment_1 = require("./src/environment");
exports.getUA = environment_1.getUA;
exports.isMobileCordova = environment_1.isMobileCordova;
exports.isNodeSdk = environment_1.isNodeSdk;
exports.isReactNative = environment_1.isReactNative;
var errors_1 = require("./src/errors");
exports.ErrorFactory = errors_1.ErrorFactory;
exports.FirebaseError = errors_1.FirebaseError;
exports.patchCapture = errors_1.patchCapture;
var json_1 = require("./src/json");
exports.jsonEval = json_1.jsonEval;
exports.stringify = json_1.stringify;
var jwt_1 = require("./src/jwt");
exports.decode = jwt_1.decode;
exports.isAdmin = jwt_1.isAdmin;
exports.issuedAtTime = jwt_1.issuedAtTime;
exports.isValidFormat = jwt_1.isValidFormat;
exports.isValidTimestamp = jwt_1.isValidTimestamp;
var obj_1 = require("./src/obj");
exports.clone = obj_1.clone;
exports.contains = obj_1.contains;
exports.every = obj_1.every;
exports.extend = obj_1.extend;
exports.findKey = obj_1.findKey;
exports.findValue = obj_1.findValue;
exports.forEach = obj_1.forEach;
exports.getAnyKey = obj_1.getAnyKey;
exports.getCount = obj_1.getCount;
exports.getValues = obj_1.getValues;
exports.isEmpty = obj_1.isEmpty;
exports.isNonNullObject = obj_1.isNonNullObject;
exports.map = obj_1.map;
exports.safeGet = obj_1.safeGet;
var query_1 = require("./src/query");
exports.querystring = query_1.querystring;
exports.querystringDecode = query_1.querystringDecode;
var sha1_1 = require("./src/sha1");
exports.Sha1 = sha1_1.Sha1;
var subscribe_1 = require("./src/subscribe");
exports.async = subscribe_1.async;
exports.createSubscribe = subscribe_1.createSubscribe;
var validation_1 = require("./src/validation");
exports.errorPrefix = validation_1.errorPrefix;
exports.validateArgCount = validation_1.validateArgCount;
exports.validateCallback = validation_1.validateCallback;
exports.validateContextObject = validation_1.validateContextObject;
exports.validateNamespace = validation_1.validateNamespace;
var utf8_1 = require("./src/utf8");
exports.stringLength = utf8_1.stringLength;
exports.stringToByteArray = utf8_1.stringToByteArray;



},{"./src/assert":143,"./src/constants":144,"./src/crypt":145,"./src/deepCopy":146,"./src/deferred":147,"./src/environment":148,"./src/errors":149,"./src/json":151,"./src/jwt":152,"./src/obj":153,"./src/query":154,"./src/sha1":155,"./src/subscribe":156,"./src/utf8":157,"./src/validation":158}],143:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
/**
 * Throws an error if the provided assertion is falsy
 * @param {*} assertion The assertion to be tested for falsiness
 * @param {!string} message The message to display if the check fails
 */
exports.assert = function (assertion, message) {
    if (!assertion) {
        throw exports.assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 * @param {string} message
 * @return {!Error}
 */
exports.assertionError = function (message) {
    return new Error('Firebase Database (' +
        constants_1.CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};



},{"./constants":144}],144:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
exports.CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};



},{}],145:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var stringToByteArray = function (str) {
    // TODO(user): Use native implementations if/when available
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) == 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param {Array<number>} bytes Array of numbers representing characters.
 * @return {string} Stringification of the array.
 */
var byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [], pos = 0, c = 0;
    while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// Static lookup maps, lazily populated by init_()
exports.base64 = {
    /**
     * Maps bytes to characters.
     * @type {Object}
     * @private
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @type {Object}
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     * @type {string}
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     * @type {string}
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     * @type {string}
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     * @type {boolean}
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param {boolean=} opt_webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeByteArray: function (input, opt_webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        var byteToCharMap = opt_webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param {string} input A string to encode.
     * @param {boolean=} opt_webSafe If true, we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param {string} input to decode.
     * @param {boolean=} opt_webSafe True if we should use the
     *     alternative alphabet.
     * @return {string} string representing the decoded value.
     */
    decodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param {string} input Input to decode.
     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
     * @return {!Array<number>} bytes representing the decoded value.
     */
    decodeStringToByteArray: function (input, opt_webSafe) {
        this.init_();
        var charToByteMap = opt_webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length;) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 != 64) {
                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 != 64) {
                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_: function () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 * @param {!string} str
 * @return {!string}
 */
exports.base64Encode = function (str) {
    var utf8Bytes = stringToByteArray(str);
    return exports.base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param {string} str To be decoded
 * @return {?string} Decoded result, if possible
 */
exports.base64Decode = function (str) {
    try {
        return exports.base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};



},{}],146:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
exports.deepCopy = deepCopy;
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (var prop in source) {
        if (!source.hasOwnProperty(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
exports.deepExtend = deepExtend;
// TODO: Really needed (for JSCompiler type checking)?
function patchProperty(obj, prop, value) {
    obj[prop] = value;
}
exports.patchProperty = patchProperty;



},{}],147:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback
     * @return {!function(?(Error), ?=)}
     */
    Deferred.prototype.wrapCallback = function (callback) {
        var _this = this;
        return function (error, value) {
            if (error) {
                _this.reject(error);
            }
            else {
                _this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function () { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    };
    return Deferred;
}());
exports.Deferred = Deferred;



},{}],148:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return {string} user agent string
 */
exports.getUA = function () {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
};
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor
 * Cordova `onDeviceReady`, which would normally wait for a callback.
 *
 * @return {boolean} isMobileCordova
 */
exports.isMobileCordova = function () {
    return (typeof window !== 'undefined' &&
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(exports.getUA()));
};
/**
 * Detect React Native.
 *
 * @return {boolean} True if ReactNative environment is detected.
 */
exports.isReactNative = function () {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
};
/**
 * Detect Node.js.
 *
 * @return {boolean} True if Node.js environment is detected.
 */
exports.isNodeSdk = function () {
    return constants_1.CONSTANTS.NODE_CLIENT === true || constants_1.CONSTANTS.NODE_ADMIN === true;
};



},{"./constants":144}],149:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ERROR_NAME = 'FirebaseError';
var captureStackTrace = Error
    .captureStackTrace;
// Export for faking in tests
function patchCapture(captureFake) {
    var result = captureStackTrace;
    captureStackTrace = captureFake;
    return result;
}
exports.patchCapture = patchCapture;
var FirebaseError = /** @class */ (function () {
    function FirebaseError(code, message) {
        this.code = code;
        this.message = message;
        var stack;
        // We want the stack value, if implemented by Error
        if (captureStackTrace) {
            // Patches this.stack, omitted calls above ErrorFactory#create
            captureStackTrace(this, ErrorFactory.prototype.create);
        }
        else {
            var err_1 = Error.apply(this, arguments);
            this.name = ERROR_NAME;
            // Make non-enumerable getter for the property.
            Object.defineProperty(this, 'stack', {
                get: function () {
                    return err_1.stack;
                }
            });
        }
    }
    return FirebaseError;
}());
exports.FirebaseError = FirebaseError;
// Back-door inheritance
FirebaseError.prototype = Object.create(Error.prototype);
FirebaseError.prototype.constructor = FirebaseError;
FirebaseError.prototype.name = ERROR_NAME;
var ErrorFactory = /** @class */ (function () {
    function ErrorFactory(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
        // Matches {$name}, by default.
        this.pattern = /\{\$([^}]+)}/g;
        // empty
    }
    ErrorFactory.prototype.create = function (code, data) {
        if (data === undefined) {
            data = {};
        }
        var template = this.errors[code];
        var fullCode = this.service + '/' + code;
        var message;
        if (template === undefined) {
            message = 'Error';
        }
        else {
            message = template.replace(this.pattern, function (match, key) {
                var value = data[key];
                return value !== undefined ? value.toString() : '<' + key + '?>';
            });
        }
        // Service: Error message (service/code).
        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
        var err = new FirebaseError(fullCode, message);
        // Populate the Error object with message parts for programmatic
        // accesses (e.g., e.file).
        for (var prop in data) {
            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
                continue;
            }
            err[prop] = data[prop];
        }
        return err;
    };
    return ErrorFactory;
}());
exports.ErrorFactory = ErrorFactory;



},{}],150:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Abstract cryptographic hash interface.
 *
 * See Sha1 and Md5 for sample implementations.
 *
 */
/**
 * Create a cryptographic hash instance.
 *
 * @constructor
 * @struct
 */
var Hash = /** @class */ (function () {
    function Hash() {
        /**
         * The block size for the hasher.
         * @type {number}
         */
        this.blockSize = -1;
    }
    return Hash;
}());
exports.Hash = Hash;



},{}],151:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
exports.jsonEval = jsonEval;
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}
exports.stringify = stringify;



},{}],152:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var crypt_1 = require("./crypt");
var json_1 = require("./json");
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {{header: *, claims: *, data: *, signature: string}}
 */
exports.decode = function (token) {
    var header = {}, claims = {}, data = {}, signature = '';
    try {
        var parts = token.split('.');
        header = json_1.jsonEval(crypt_1.base64Decode(parts[0]) || '');
        claims = json_1.jsonEval(crypt_1.base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isValidTimestamp = function (token) {
    var claims = exports.decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (now && validSince && validUntil && now >= validSince && now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {?number}
 */
exports.issuedAtTime = function (token) {
    var claims = exports.decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty
 * signature.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isValidFormat = function (token) {
    var decoded = exports.decode(token), claims = decoded.claims;
    return (!!decoded.signature &&
        !!claims &&
        typeof claims === 'object' &&
        claims.hasOwnProperty('iat'));
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
exports.isAdmin = function (token) {
    var claims = exports.decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};



},{"./crypt":145,"./json":151}],153:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/
exports.contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
exports.safeGet = function (obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key))
        return obj[key];
    // else return undefined.
};
/**
 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
 *
 * @param {?Object.<K,V>} obj Object to enumerate.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
exports.forEach = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn(key, obj[key]);
        }
    }
};
/**
 * Copies all the (own) properties from one object to another.
 * @param {!Object} objTo
 * @param {!Object} objFrom
 * @return {!Object} objTo
 */
exports.extend = function (objTo, objFrom) {
    exports.forEach(objFrom, function (key, value) {
        objTo[key] = value;
    });
    return objTo;
};
/**
 * Returns a clone of the specified object.
 * @param {!Object} obj
 * @return {!Object} cloned obj.
 */
exports.clone = function (obj) {
    return exports.extend({}, obj);
};
/**
 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
 * for functions.
 *
 * @param obj {*} A potential object.
 * @returns {boolean} True if it's an object.
 */
exports.isNonNullObject = function (obj) {
    return typeof obj === 'object' && obj !== null;
};
exports.isEmpty = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.getCount = function (obj) {
    var rv = 0;
    for (var key in obj) {
        rv++;
    }
    return rv;
};
exports.map = function (obj, f, opt_obj) {
    var res = {};
    for (var key in obj) {
        res[key] = f.call(opt_obj, obj[key], key, obj);
    }
    return res;
};
exports.findKey = function (obj, fn, opt_this) {
    for (var key in obj) {
        if (fn.call(opt_this, obj[key], key, obj)) {
            return key;
        }
    }
    return undefined;
};
exports.findValue = function (obj, fn, opt_this) {
    var key = exports.findKey(obj, fn, opt_this);
    return key && obj[key];
};
exports.getAnyKey = function (obj) {
    for (var key in obj) {
        return key;
    }
};
exports.getValues = function (obj) {
    var res = [];
    var i = 0;
    for (var key in obj) {
        res[i++] = obj[key];
    }
    return res;
};
/**
 * Tests whether every key/value pair in an object pass the test implemented
 * by the provided function
 *
 * @param {?Object.<K,V>} obj Object to test.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
exports.every = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!fn(key, obj[key])) {
                return false;
            }
        }
    }
    return true;
};



},{}],154:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var obj_1 = require("./obj");
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
 * object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 *
 * @param {!Object} querystringParams
 * @return {string}
 */
exports.querystring = function (querystringParams) {
    var params = [];
    obj_1.forEach(querystringParams, function (key, value) {
        if (Array.isArray(value)) {
            value.forEach(function (arrayVal) {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    });
    return params.length ? '&' + params.join('&') : '';
};
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
 *
 * @param {string} querystring
 * @return {!Object}
 */
exports.querystringDecode = function (querystring) {
    var obj = {};
    var tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(function (token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
};



},{"./obj":153}],155:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hash_1 = require("./hash");
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @extends {Hash}
 * @final
 * @struct
 */
var Sha1 = /** @class */ (function (_super) {
    tslib_1.__extends(Sha1, _super);
    function Sha1() {
        var _this = _super.call(this) || this;
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @type {!Array<number>}
         * @private
         */
        _this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @type {!Array<number>}
         * @private
         */
        _this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @type {!Array<number>}
         * @private
         */
        _this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @type {!Array<number>}
         * @private
         */
        _this.pad_ = [];
        /**
         * @private {number}
         */
        _this.inbuf_ = 0;
        /**
         * @private {number}
         */
        _this.total_ = 0;
        _this.blockSize = 512 / 8;
        _this.pad_[0] = 128;
        for (var i = 1; i < _this.blockSize; ++i) {
            _this.pad_[i] = 0;
        }
        _this.reset();
        return _this;
    }
    Sha1.prototype.reset = function () {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.
     * @param {number=} opt_offset Offset of the block in the buffer.
     * @private
     */
    Sha1.prototype.compress_ = function (buf, opt_offset) {
        if (!opt_offset) {
            opt_offset = 0;
        }
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (var i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(opt_offset) << 24) |
                        (buf.charCodeAt(opt_offset + 1) << 16) |
                        (buf.charCodeAt(opt_offset + 2) << 8) |
                        buf.charCodeAt(opt_offset + 3);
                opt_offset += 4;
            }
        }
        else {
            for (var i = 0; i < 16; i++) {
                W[i] =
                    (buf[opt_offset] << 24) |
                        (buf[opt_offset + 1] << 16) |
                        (buf[opt_offset + 2] << 8) |
                        buf[opt_offset + 3];
                opt_offset += 4;
            }
        }
        // expand to 80 words
        for (var i = 16; i < 80; i++) {
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (var i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    };
    Sha1.prototype.update = function (bytes, opt_length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (opt_length === undefined) {
            opt_length = bytes.length;
        }
        var lengthMinusBlock = opt_length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < opt_length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf == 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < opt_length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < opt_length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += opt_length;
    };
    /** @override */
    Sha1.prototype.digest = function () {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (var i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
            for (var j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    };
    return Sha1;
}(hash_1.Hash));
exports.Sha1 = Sha1;



},{"./hash":150,"tslib":176}],156:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
exports.createSubscribe = createSubscribe;
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
var ObserverProxy = /** @class */ (function () {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function ObserverProxy(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(function () {
            executor(_this);
        })
            .catch(function (e) {
            _this.error(e);
        });
    }
    ObserverProxy.prototype.next = function (value) {
        this.forEachObserver(function (observer) {
            observer.next(value);
        });
    };
    ObserverProxy.prototype.error = function (error) {
        this.forEachObserver(function (observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy.prototype.complete = function () {
        this.forEachObserver(function (observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error: error,
                complete: complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop;
        }
        if (observer.error === undefined) {
            observer.error = noop;
        }
        if (observer.complete === undefined) {
            observer.complete = noop;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            this.task.then(function () {
                try {
                    if (_this.finalError) {
                        observer.error(_this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy.prototype.unsubscribeOne = function (i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    };
    ObserverProxy.prototype.forEachObserver = function (fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (var i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy.prototype.sendOne = function (i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        this.task.then(function () {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                try {
                    fn(_this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    };
    ObserverProxy.prototype.close = function (err) {
        var _this = this;
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        this.task.then(function () {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy;
}());
/** Turn synchronous function into one called asynchronously. */
function async(fn, onError) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        Promise.resolve(true)
            .then(function () {
            fn.apply(void 0, args);
        })
            .catch(function (error) {
            if (onError) {
                onError(error);
            }
        });
    };
}
exports.async = async;
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop() {
    // do nothing
}



},{}],157:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = require("./assert");
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
exports.stringToByteArray = function (str) {
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            var high = c - 0xd800; // the high 10 bits.
            i++;
            assert_1.assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
exports.stringLength = function (str) {
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};



},{"./assert":143}],158:[function(require,module,exports){
"use strict";
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param {!string} fnName The function name
 * @param {!number} minCount The minimum number of arguments to allow for the function call
 * @param {!number} maxCount The maximum number of argument to allow for the function call
 * @param {!number} argCount The actual number of arguments provided.
 */
exports.validateArgCount = function (fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        var error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param {!string} fnName The function name
 * @param {!number} argumentNumber The index of the argument
 * @param {boolean} optional Whether or not the argument is optional
 * @return {!string} The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch (argumentNumber) {
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
exports.errorPrefix = errorPrefix;
/**
 * @param {!string} fnName
 * @param {!number} argumentNumber
 * @param {!string} namespace
 * @param {boolean} optional
 */
function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace)
        return;
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid firebase namespace.');
    }
}
exports.validateNamespace = validateNamespace;
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback)
        return;
    if (typeof callback !== 'function')
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid function.');
}
exports.validateCallback = validateCallback;
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context)
        return;
    if (typeof context !== 'object' || context === null)
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid context object.');
}
exports.validateContextObject = validateContextObject;



},{}],159:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('@firebase/polyfill');
module.exports = require('@firebase/app').default;

},{"@firebase/app":2,"@firebase/polyfill":105}],160:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('@firebase/auth');

},{"@firebase/auth":4}],161:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = require('@firebase/database');

},{"@firebase/database":5}],162:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var firebase = require('./app');
require('./auth');
require('./database');
require('./messaging');
require('./storage');

module.exports = firebase;

},{"./app":159,"./auth":160,"./database":161,"./messaging":163,"./storage":164}],163:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('@firebase/messaging');

},{"@firebase/messaging":89}],164:[function(require,module,exports){
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('@firebase/storage');

},{"@firebase/storage":109}],165:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],166:[function(require,module,exports){
(function (global){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    iteratorSymbol = Symbol ? Symbol.iterator : undefined,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
}

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }
  if (iteratorSymbol && value[iteratorSymbol]) {
    return iteratorToArray(value[iteratorSymbol]());
  }
  var tag = getTag(value),
      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

  return func(value);
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object ? baseValues(object, keys(object)) : [];
}

module.exports = toArray;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],167:[function(require,module,exports){
module.exports = require('./lib/emoji');
},{"./lib/emoji":169}],168:[function(require,module,exports){
module.exports={"100":"💯","1234":"🔢","interrobang":"⁉️","tm":"™️","information_source":"ℹ️","left_right_arrow":"↔️","arrow_up_down":"↕️","arrow_upper_left":"↖️","arrow_upper_right":"↗️","arrow_lower_right":"↘️","arrow_lower_left":"↙️","keyboard":"⌨","sunny":"☀️","cloud":"☁️","umbrella":"☔️","showman":"☃","comet":"☄","ballot_box_with_check":"☑️","coffee":"☕️","shamrock":"☘","skull_and_crossbones":"☠","radioactive_sign":"☢","biohazard_sign":"☣","orthodox_cross":"☦","wheel_of_dharma":"☸","white_frowning_face":"☹","aries":"♈️","taurus":"♉️","sagittarius":"♐️","capricorn":"♑️","aquarius":"♒️","pisces":"♓️","spades":"♠️","clubs":"♣️","hearts":"♥️","diamonds":"♦️","hotsprings":"♨️","hammer_and_pick":"⚒","anchor":"⚓️","crossed_swords":"⚔","scales":"⚖","alembic":"⚗","gear":"⚙","scissors":"✂️","white_check_mark":"✅","airplane":"✈️","email":"✉️","envelope":"✉️","black_nib":"✒️","heavy_check_mark":"✔️","heavy_multiplication_x":"✖️","star_of_david":"✡","sparkles":"✨","eight_spoked_asterisk":"✳️","eight_pointed_black_star":"✴️","snowflake":"❄️","sparkle":"❇️","question":"❓","grey_question":"❔","grey_exclamation":"❕","exclamation":"❗️","heavy_exclamation_mark":"❗️","heavy_heart_exclamation_mark_ornament":"❣","heart":"❤️","heavy_plus_sign":"➕","heavy_minus_sign":"➖","heavy_division_sign":"➗","arrow_heading_up":"⤴️","arrow_heading_down":"⤵️","wavy_dash":"〰️","congratulations":"㊗️","secret":"㊙️","copyright":"©️","registered":"®️","bangbang":"‼️","leftwards_arrow_with_hook":"↩️","arrow_right_hook":"↪️","watch":"⌚️","hourglass":"⌛️","fast_forward":"⏩","rewind":"⏪","arrow_double_up":"⏫","arrow_double_down":"⏬","black_right_pointing_double_triangle_with_vertical_bar":"⏭","black_left_pointing_double_triangle_with_vertical_bar":"⏮","black_right_pointing_triangle_with_double_vertical_bar":"⏯","alarm_clock":"⏰","stopwatch":"⏱","timer_clock":"⏲","hourglass_flowing_sand":"⏳","double_vertical_bar":"⏸","black_square_for_stop":"⏹","black_circle_for_record":"⏺","m":"Ⓜ️","black_small_square":"▪️","white_small_square":"▫️","arrow_forward":"▶️","arrow_backward":"◀️","white_medium_square":"◻️","black_medium_square":"◼️","white_medium_small_square":"◽️","black_medium_small_square":"◾️","phone":"☎️","telephone":"☎️","point_up":"☝️","star_and_crescent":"☪","peace_symbol":"☮","yin_yang":"☯","relaxed":"☺️","gemini":"♊️","cancer":"♋️","leo":"♌️","virgo":"♍️","libra":"♎️","scorpius":"♏️","recycle":"♻️","wheelchair":"♿️","atom_symbol":"⚛","fleur_de_lis":"⚜","warning":"⚠️","zap":"⚡️","white_circle":"⚪️","black_circle":"⚫️","coffin":"⚰","funeral_urn":"⚱","soccer":"⚽️","baseball":"⚾️","snowman":"⛄️","partly_sunny":"⛅️","thunder_cloud_and_rain":"⛈","ophiuchus":"⛎","pick":"⛏","helmet_with_white_cross":"⛑","chains":"⛓","no_entry":"⛔️","shinto_shrine":"⛩","church":"⛪️","mountain":"⛰","umbrella_on_ground":"⛱","fountain":"⛲️","golf":"⛳️","ferry":"⛴","boat":"⛵️","sailboat":"⛵️","skier":"⛷","ice_skate":"⛸","person_with_ball":"⛹","tent":"⛺️","fuelpump":"⛽️","fist":"✊","hand":"✋","raised_hand":"✋","v":"✌️","writing_hand":"✍","pencil2":"✏️","latin_cross":"✝","x":"❌","negative_squared_cross_mark":"❎","arrow_right":"➡️","curly_loop":"➰","loop":"➿","arrow_left":"⬅️","arrow_up":"⬆️","arrow_down":"⬇️","black_large_square":"⬛️","white_large_square":"⬜️","star":"⭐️","o":"⭕️","part_alternation_mark":"〽️","mahjong":"🀄️","black_joker":"🃏","a":"🅰️","b":"🅱️","o2":"🅾️","parking":"🅿️","ab":"🆎","cl":"🆑","cool":"🆒","free":"🆓","id":"🆔","new":"🆕","ng":"🆖","ok":"🆗","sos":"🆘","up":"🆙","vs":"🆚","koko":"🈁","sa":"🈂️","u7121":"🈚️","u6307":"🈯️","u7981":"🈲","u7a7a":"🈳","u5408":"🈴","u6e80":"🈵","u6709":"🈶","u6708":"🈷️","u7533":"🈸","u5272":"🈹","u55b6":"🈺","ideograph_advantage":"🉐","accept":"🉑","cyclone":"🌀","foggy":"🌁","closed_umbrella":"🌂","night_with_stars":"🌃","sunrise_over_mountains":"🌄","sunrise":"🌅","city_sunset":"🌆","city_sunrise":"🌇","rainbow":"🌈","bridge_at_night":"🌉","ocean":"🌊","volcano":"🌋","milky_way":"🌌","earth_africa":"🌍","earth_americas":"🌎","earth_asia":"🌏","globe_with_meridians":"🌐","new_moon":"🌑","waxing_crescent_moon":"🌒","first_quarter_moon":"🌓","moon":"🌔","waxing_gibbous_moon":"🌔","full_moon":"🌕","waning_gibbous_moon":"🌖","last_quarter_moon":"🌗","waning_crescent_moon":"🌘","crescent_moon":"🌙","new_moon_with_face":"🌚","first_quarter_moon_with_face":"🌛","last_quarter_moon_with_face":"🌜","full_moon_with_face":"🌝","sun_with_face":"🌞","star2":"🌟","stars":"🌠","thermometer":"🌡","mostly_sunny":"🌤","sun_small_cloud":"🌤","barely_sunny":"🌥","sun_behind_cloud":"🌥","partly_sunny_rain":"🌦","sun_behind_rain_cloud":"🌦","rain_cloud":"🌧","snow_cloud":"🌨","lightning":"🌩","lightning_cloud":"🌩","tornado":"🌪","tornado_cloud":"🌪","fog":"🌫","wind_blowing_face":"🌬","hotdog":"🌭","taco":"🌮","burrito":"🌯","chestnut":"🌰","seedling":"🌱","evergreen_tree":"🌲","deciduous_tree":"🌳","palm_tree":"🌴","cactus":"🌵","hot_pepper":"🌶","tulip":"🌷","cherry_blossom":"🌸","rose":"🌹","hibiscus":"🌺","sunflower":"🌻","blossom":"🌼","corn":"🌽","ear_of_rice":"🌾","herb":"🌿","four_leaf_clover":"🍀","maple_leaf":"🍁","fallen_leaf":"🍂","leaves":"🍃","mushroom":"🍄","tomato":"🍅","eggplant":"🍆","grapes":"🍇","melon":"🍈","watermelon":"🍉","tangerine":"🍊","lemon":"🍋","banana":"🍌","pineapple":"🍍","apple":"🍎","green_apple":"🍏","pear":"🍐","peach":"🍑","cherries":"🍒","strawberry":"🍓","hamburger":"🍔","pizza":"🍕","meat_on_bone":"🍖","poultry_leg":"🍗","rice_cracker":"🍘","rice_ball":"🍙","rice":"🍚","curry":"🍛","ramen":"🍜","spaghetti":"🍝","bread":"🍞","fries":"🍟","sweet_potato":"🍠","dango":"🍡","oden":"🍢","sushi":"🍣","fried_shrimp":"🍤","fish_cake":"🍥","icecream":"🍦","shaved_ice":"🍧","ice_cream":"🍨","doughnut":"🍩","cookie":"🍪","chocolate_bar":"🍫","candy":"🍬","lollipop":"🍭","custard":"🍮","honey_pot":"🍯","cake":"🍰","bento":"🍱","stew":"🍲","egg":"🍳","fork_and_knife":"🍴","tea":"🍵","sake":"🍶","wine_glass":"🍷","cocktail":"🍸","tropical_drink":"🍹","beer":"🍺","beers":"🍻","baby_bottle":"🍼","knife_fork_plate":"🍽","champagne":"🍾","popcorn":"🍿","ribbon":"🎀","gift":"🎁","birthday":"🎂","jack_o_lantern":"🎃","christmas_tree":"🎄","santa":"🎅","fireworks":"🎆","sparkler":"🎇","balloon":"🎈","tada":"🎉","confetti_ball":"🎊","tanabata_tree":"🎋","crossed_flags":"🎌","bamboo":"🎍","dolls":"🎎","flags":"🎏","wind_chime":"🎐","rice_scene":"🎑","school_satchel":"🎒","mortar_board":"🎓","medal":"🎖","reminder_ribbon":"🎗","studio_microphone":"🎙","level_slider":"🎚","control_knobs":"🎛","film_frames":"🎞","admission_tickets":"🎟","carousel_horse":"🎠","ferris_wheel":"🎡","roller_coaster":"🎢","fishing_pole_and_fish":"🎣","microphone":"🎤","movie_camera":"🎥","cinema":"🎦","headphones":"🎧","art":"🎨","tophat":"🎩","circus_tent":"🎪","ticket":"🎫","clapper":"🎬","performing_arts":"🎭","video_game":"🎮","dart":"🎯","slot_machine":"🎰","8ball":"🎱","game_die":"🎲","bowling":"🎳","flower_playing_cards":"🎴","musical_note":"🎵","notes":"🎶","saxophone":"🎷","guitar":"🎸","musical_keyboard":"🎹","trumpet":"🎺","violin":"🎻","musical_score":"🎼","running_shirt_with_sash":"🎽","tennis":"🎾","ski":"🎿","basketball":"🏀","checkered_flag":"🏁","snowboarder":"🏂","runner":"🏃","running":"🏃","surfer":"🏄","sports_medal":"🏅","trophy":"🏆","horse_racing":"🏇","football":"🏈","rugby_football":"🏉","swimmer":"🏊","weight_lifter":"🏋","golfer":"🏌","racing_motorcycle":"🏍","racing_car":"🏎","cricket_bat_and_ball":"🏏","volleyball":"🏐","field_hockey_stick_and_ball":"🏑","ice_hockey_stick_and_puck":"🏒","table_tennis_paddle_and_ball":"🏓","snow_capped_mountain":"🏔","camping":"🏕","beach_with_umbrella":"🏖","building_construction":"🏗","house_buildings":"🏘","cityscape":"🏙","derelict_house_building":"🏚","classical_building":"🏛","desert":"🏜","desert_island":"🏝","national_park":"🏞","stadium":"🏟","house":"🏠","house_with_garden":"🏡","office":"🏢","post_office":"🏣","european_post_office":"🏤","hospital":"🏥","bank":"🏦","atm":"🏧","hotel":"🏨","love_hotel":"🏩","convenience_store":"🏪","school":"🏫","department_store":"🏬","factory":"🏭","izakaya_lantern":"🏮","lantern":"🏮","japanese_castle":"🏯","european_castle":"🏰","waving_white_flag":"🏳","waving_black_flag":"🏴","rosette":"🏵","label":"🏷","badminton_racquet_and_shuttlecock":"🏸","bow_and_arrow":"🏹","amphora":"🏺","skin-tone-2":"🏻","skin-tone-3":"🏼","skin-tone-4":"🏽","skin-tone-5":"🏾","skin-tone-6":"🏿","rat":"🐀","mouse2":"🐁","ox":"🐂","water_buffalo":"🐃","cow2":"🐄","tiger2":"🐅","leopard":"🐆","rabbit2":"🐇","cat2":"🐈","dragon":"🐉","crocodile":"🐊","whale2":"🐋","snail":"🐌","snake":"🐍","racehorse":"🐎","ram":"🐏","goat":"🐐","sheep":"🐑","monkey":"🐒","rooster":"🐓","chicken":"🐔","dog2":"🐕","pig2":"🐖","boar":"🐗","elephant":"🐘","octopus":"🐙","shell":"🐚","bug":"🐛","ant":"🐜","bee":"🐝","honeybee":"🐝","beetle":"🐞","fish":"🐟","tropical_fish":"🐠","blowfish":"🐡","turtle":"🐢","hatching_chick":"🐣","baby_chick":"🐤","hatched_chick":"🐥","bird":"🐦","penguin":"🐧","koala":"🐨","poodle":"🐩","dromedary_camel":"🐪","camel":"🐫","dolphin":"🐬","flipper":"🐬","mouse":"🐭","cow":"🐮","tiger":"🐯","rabbit":"🐰","cat":"🐱","dragon_face":"🐲","whale":"🐳","horse":"🐴","monkey_face":"🐵","dog":"🐶","pig":"🐷","frog":"🐸","hamster":"🐹","wolf":"🐺","bear":"🐻","panda_face":"🐼","pig_nose":"🐽","feet":"🐾","paw_prints":"🐾","chipmunk":"🐿","eyes":"👀","eye":"👁","ear":"👂","nose":"👃","lips":"👄","tongue":"👅","point_up_2":"👆","point_down":"👇","point_left":"👈","point_right":"👉","facepunch":"👊","punch":"👊","wave":"👋","ok_hand":"👌","+1":"👍","thumbsup":"👍","-1":"👎","thumbsdown":"👎","clap":"👏","open_hands":"👐","crown":"👑","womans_hat":"👒","eyeglasses":"👓","necktie":"👔","shirt":"👕","tshirt":"👕","jeans":"👖","dress":"👗","kimono":"👘","bikini":"👙","womans_clothes":"👚","purse":"👛","handbag":"👜","pouch":"👝","mans_shoe":"👞","shoe":"👞","athletic_shoe":"👟","high_heel":"👠","sandal":"👡","boot":"👢","footprints":"👣","bust_in_silhouette":"👤","busts_in_silhouette":"👥","boy":"👦","girl":"👧","man":"👨","woman":"👩","family":"👨‍👩‍👦","man-woman-boy":"👨‍👩‍👦","couple":"👫","man_and_woman_holding_hands":"👫","two_men_holding_hands":"👬","two_women_holding_hands":"👭","cop":"👮","dancers":"👯","bride_with_veil":"👰","person_with_blond_hair":"👱","man_with_gua_pi_mao":"👲","man_with_turban":"👳","older_man":"👴","older_woman":"👵","baby":"👶","construction_worker":"👷","princess":"👸","japanese_ogre":"👹","japanese_goblin":"👺","ghost":"👻","angel":"👼","alien":"👽","space_invader":"👾","imp":"👿","skull":"💀","information_desk_person":"💁","guardsman":"💂","dancer":"💃","lipstick":"💄","nail_care":"💅","massage":"💆","haircut":"💇","barber":"💈","syringe":"💉","pill":"💊","kiss":"💋","love_letter":"💌","ring":"💍","gem":"💎","couplekiss":"💏","bouquet":"💐","couple_with_heart":"💑","wedding":"💒","heartbeat":"💓","broken_heart":"💔","two_hearts":"💕","sparkling_heart":"💖","heartpulse":"💗","cupid":"💘","blue_heart":"💙","green_heart":"💚","yellow_heart":"💛","purple_heart":"💜","gift_heart":"💝","revolving_hearts":"💞","heart_decoration":"💟","diamond_shape_with_a_dot_inside":"💠","bulb":"💡","anger":"💢","bomb":"💣","zzz":"💤","boom":"💥","collision":"💥","sweat_drops":"💦","droplet":"💧","dash":"💨","hankey":"💩","poop":"💩","shit":"💩","muscle":"💪","dizzy":"💫","speech_balloon":"💬","thought_balloon":"💭","white_flower":"💮","moneybag":"💰","currency_exchange":"💱","heavy_dollar_sign":"💲","credit_card":"💳","yen":"💴","dollar":"💵","euro":"💶","pound":"💷","money_with_wings":"💸","chart":"💹","seat":"💺","computer":"💻","briefcase":"💼","minidisc":"💽","floppy_disk":"💾","cd":"💿","dvd":"📀","file_folder":"📁","open_file_folder":"📂","page_with_curl":"📃","page_facing_up":"📄","date":"📅","calendar":"📆","card_index":"📇","chart_with_upwards_trend":"📈","chart_with_downwards_trend":"📉","bar_chart":"📊","clipboard":"📋","pushpin":"📌","round_pushpin":"📍","paperclip":"📎","straight_ruler":"📏","triangular_ruler":"📐","bookmark_tabs":"📑","ledger":"📒","notebook":"📓","notebook_with_decorative_cover":"📔","closed_book":"📕","book":"📖","open_book":"📖","green_book":"📗","blue_book":"📘","orange_book":"📙","books":"📚","name_badge":"📛","scroll":"📜","memo":"📝","pencil":"📝","telephone_receiver":"📞","pager":"📟","fax":"📠","satellite":"🛰","loudspeaker":"📢","mega":"📣","outbox_tray":"📤","inbox_tray":"📥","package":"📦","e-mail":"📧","incoming_envelope":"📨","envelope_with_arrow":"📩","mailbox_closed":"📪","mailbox":"📫","mailbox_with_mail":"📬","mailbox_with_no_mail":"📭","postbox":"📮","postal_horn":"📯","newspaper":"📰","iphone":"📱","calling":"📲","vibration_mode":"📳","mobile_phone_off":"📴","no_mobile_phones":"📵","signal_strength":"📶","camera":"📷","camera_with_flash":"📸","video_camera":"📹","tv":"📺","radio":"📻","vhs":"📼","film_projector":"📽","prayer_beads":"📿","twisted_rightwards_arrows":"🔀","repeat":"🔁","repeat_one":"🔂","arrows_clockwise":"🔃","arrows_counterclockwise":"🔄","low_brightness":"🔅","high_brightness":"🔆","mute":"🔇","speaker":"🔈","sound":"🔉","loud_sound":"🔊","battery":"🔋","electric_plug":"🔌","mag":"🔍","mag_right":"🔎","lock_with_ink_pen":"🔏","closed_lock_with_key":"🔐","key":"🔑","lock":"🔒","unlock":"🔓","bell":"🔔","no_bell":"🔕","bookmark":"🔖","link":"🔗","radio_button":"🔘","back":"🔙","end":"🔚","on":"🔛","soon":"🔜","top":"🔝","underage":"🔞","keycap_ten":"🔟","capital_abcd":"🔠","abcd":"🔡","symbols":"🔣","abc":"🔤","fire":"🔥","flashlight":"🔦","wrench":"🔧","hammer":"🔨","nut_and_bolt":"🔩","hocho":"🔪","knife":"🔪","gun":"🔫","microscope":"🔬","telescope":"🔭","crystal_ball":"🔮","six_pointed_star":"🔯","beginner":"🔰","trident":"🔱","black_square_button":"🔲","white_square_button":"🔳","red_circle":"🔴","large_blue_circle":"🔵","large_orange_diamond":"🔶","large_blue_diamond":"🔷","small_orange_diamond":"🔸","small_blue_diamond":"🔹","small_red_triangle":"🔺","small_red_triangle_down":"🔻","arrow_up_small":"🔼","arrow_down_small":"🔽","om_symbol":"🕉","dove_of_peace":"🕊","kaaba":"🕋","mosque":"🕌","synagogue":"🕍","menorah_with_nine_branches":"🕎","clock1":"🕐","clock2":"🕑","clock3":"🕒","clock4":"🕓","clock5":"🕔","clock6":"🕕","clock7":"🕖","clock8":"🕗","clock9":"🕘","clock10":"🕙","clock11":"🕚","clock12":"🕛","clock130":"🕜","clock230":"🕝","clock330":"🕞","clock430":"🕟","clock530":"🕠","clock630":"🕡","clock730":"🕢","clock830":"🕣","clock930":"🕤","clock1030":"🕥","clock1130":"🕦","clock1230":"🕧","candle":"🕯","mantelpiece_clock":"🕰","hole":"🕳","man_in_business_suit_levitating":"🕴","sleuth_or_spy":"🕵","dark_sunglasses":"🕶","spider":"🕷","spider_web":"🕸","joystick":"🕹","linked_paperclips":"🖇","lower_left_ballpoint_pen":"🖊","lower_left_fountain_pen":"🖋","lower_left_paintbrush":"🖌","lower_left_crayon":"🖍","raised_hand_with_fingers_splayed":"🖐","middle_finger":"🖕","reversed_hand_with_middle_finger_extended":"🖕","spock-hand":"🖖","desktop_computer":"🖥","printer":"🖨","three_button_mouse":"🖱","trackball":"🖲","frame_with_picture":"🖼","card_index_dividers":"🗂","card_file_box":"🗃","file_cabinet":"🗄","wastebasket":"🗑","spiral_note_pad":"🗒","spiral_calendar_pad":"🗓","compression":"🗜","old_key":"🗝","rolled_up_newspaper":"🗞","dagger_knife":"🗡","speaking_head_in_silhouette":"🗣","left_speech_bubble":"🗨","right_anger_bubble":"🗯","ballot_box_with_ballot":"🗳","world_map":"🗺","mount_fuji":"🗻","tokyo_tower":"🗼","statue_of_liberty":"🗽","japan":"🗾","moyai":"🗿","grinning":"😀","grin":"😁","joy":"😂","smiley":"😃","smile":"😄","sweat_smile":"😅","laughing":"😆","satisfied":"😆","innocent":"😇","smiling_imp":"😈","wink":"😉","blush":"😊","yum":"😋","relieved":"😌","heart_eyes":"😍","sunglasses":"😎","smirk":"😏","neutral_face":"😐","expressionless":"😑","unamused":"😒","sweat":"😓","pensive":"😔","confused":"😕","confounded":"😖","kissing":"😗","kissing_heart":"😘","kissing_smiling_eyes":"😙","kissing_closed_eyes":"😚","stuck_out_tongue":"😛","stuck_out_tongue_winking_eye":"😜","stuck_out_tongue_closed_eyes":"😝","disappointed":"😞","worried":"😟","angry":"😠","rage":"😡","cry":"😢","persevere":"😣","triumph":"😤","disappointed_relieved":"😥","frowning":"😦","anguished":"😧","fearful":"😨","weary":"😩","sleepy":"😪","tired_face":"😫","grimacing":"😬","sob":"😭","open_mouth":"😮","hushed":"😯","cold_sweat":"😰","scream":"😱","astonished":"😲","flushed":"😳","sleeping":"😴","dizzy_face":"😵","no_mouth":"😶","mask":"😷","smile_cat":"😸","joy_cat":"😹","smiley_cat":"😺","heart_eyes_cat":"😻","smirk_cat":"😼","kissing_cat":"😽","pouting_cat":"😾","crying_cat_face":"😿","scream_cat":"🙀","slightly_frowning_face":"🙁","slightly_smiling_face":"🙂","upside_down_face":"🙃","face_with_rolling_eyes":"🙄","no_good":"🙅","ok_woman":"🙆","bow":"🙇","see_no_evil":"🙈","hear_no_evil":"🙉","speak_no_evil":"🙊","raising_hand":"🙋","raised_hands":"🙌","person_frowning":"🙍","person_with_pouting_face":"🙎","pray":"🙏","rocket":"🚀","helicopter":"🚁","steam_locomotive":"🚂","railway_car":"🚃","bullettrain_side":"🚄","bullettrain_front":"🚅","train2":"🚆","metro":"🚇","light_rail":"🚈","station":"🚉","tram":"🚊","train":"🚋","bus":"🚌","oncoming_bus":"🚍","trolleybus":"🚎","busstop":"🚏","minibus":"🚐","ambulance":"🚑","fire_engine":"🚒","police_car":"🚓","oncoming_police_car":"🚔","taxi":"🚕","oncoming_taxi":"🚖","car":"🚗","red_car":"🚗","oncoming_automobile":"🚘","blue_car":"🚙","truck":"🚚","articulated_lorry":"🚛","tractor":"🚜","monorail":"🚝","mountain_railway":"🚞","suspension_railway":"🚟","mountain_cableway":"🚠","aerial_tramway":"🚡","ship":"🚢","rowboat":"🚣","speedboat":"🚤","traffic_light":"🚥","vertical_traffic_light":"🚦","construction":"🚧","rotating_light":"🚨","triangular_flag_on_post":"🚩","door":"🚪","no_entry_sign":"🚫","smoking":"🚬","no_smoking":"🚭","put_litter_in_its_place":"🚮","do_not_litter":"🚯","potable_water":"🚰","non-potable_water":"🚱","bike":"🚲","no_bicycles":"🚳","bicyclist":"🚴","mountain_bicyclist":"🚵","walking":"🚶","no_pedestrians":"🚷","children_crossing":"🚸","mens":"🚹","womens":"🚺","restroom":"🚻","baby_symbol":"🚼","toilet":"🚽","wc":"🚾","shower":"🚿","bath":"🛀","bathtub":"🛁","passport_control":"🛂","customs":"🛃","baggage_claim":"🛄","left_luggage":"🛅","couch_and_lamp":"🛋","sleeping_accommodation":"🛌","shopping_bags":"🛍","bellhop_bell":"🛎","bed":"🛏","place_of_worship":"🛐","hammer_and_wrench":"🛠","shield":"🛡","oil_drum":"🛢","motorway":"🛣","railway_track":"🛤","motor_boat":"🛥","small_airplane":"🛩","airplane_departure":"🛫","airplane_arriving":"🛬","passenger_ship":"🛳","zipper_mouth_face":"🤐","money_mouth_face":"🤑","face_with_thermometer":"🤒","nerd_face":"🤓","thinking_face":"🤔","face_with_head_bandage":"🤕","robot_face":"🤖","hugging_face":"🤗","the_horns":"🤘","sign_of_the_horns":"🤘","crab":"🦀","lion_face":"🦁","scorpion":"🦂","turkey":"🦃","unicorn_face":"🦄","cheese_wedge":"🧀","hash":"#️⃣","keycap_star":"*⃣","zero":"0️⃣","one":"1️⃣","two":"2️⃣","three":"3️⃣","four":"4️⃣","five":"5️⃣","six":"6️⃣","seven":"7️⃣","eight":"8️⃣","nine":"9️⃣","flag-ac":"🇦🇨","flag-ad":"🇦🇩","flag-ae":"🇦🇪","flag-af":"🇦🇫","flag-ag":"🇦🇬","flag-ai":"🇦🇮","flag-al":"🇦🇱","flag-am":"🇦🇲","flag-ao":"🇦🇴","flag-aq":"🇦🇶","flag-ar":"🇦🇷","flag-as":"🇦🇸","flag-at":"🇦🇹","flag-au":"🇦🇺","flag-aw":"🇦🇼","flag-ax":"🇦🇽","flag-az":"🇦🇿","flag-ba":"🇧🇦","flag-bb":"🇧🇧","flag-bd":"🇧🇩","flag-be":"🇧🇪","flag-bf":"🇧🇫","flag-bg":"🇧🇬","flag-bh":"🇧🇭","flag-bi":"🇧🇮","flag-bj":"🇧🇯","flag-bl":"🇧🇱","flag-bm":"🇧🇲","flag-bn":"🇧🇳","flag-bo":"🇧🇴","flag-bq":"🇧🇶","flag-br":"🇧🇷","flag-bs":"🇧🇸","flag-bt":"🇧🇹","flag-bv":"🇧🇻","flag-bw":"🇧🇼","flag-by":"🇧🇾","flag-bz":"🇧🇿","flag-ca":"🇨🇦","flag-cc":"🇨🇨","flag-cd":"🇨🇩","flag-cf":"🇨🇫","flag-cg":"🇨🇬","flag-ch":"🇨🇭","flag-ci":"🇨🇮","flag-ck":"🇨🇰","flag-cl":"🇨🇱","flag-cm":"🇨🇲","flag-cn":"🇨🇳","cn":"🇨🇳","flag-co":"🇨🇴","flag-cp":"🇨🇵","flag-cr":"🇨🇷","flag-cu":"🇨🇺","flag-cv":"🇨🇻","flag-cw":"🇨🇼","flag-cx":"🇨🇽","flag-cy":"🇨🇾","flag-cz":"🇨🇿","flag-de":"🇩🇪","de":"🇩🇪","flag-dg":"🇩🇬","flag-dj":"🇩🇯","flag-dk":"🇩🇰","flag-dm":"🇩🇲","flag-do":"🇩🇴","flag-dz":"🇩🇿","flag-ea":"🇪🇦","flag-ec":"🇪🇨","flag-ee":"🇪🇪","flag-eg":"🇪🇬","flag-eh":"🇪🇭","flag-er":"🇪🇷","flag-es":"🇪🇸","es":"🇪🇸","flag-et":"🇪🇹","flag-eu":"🇪🇺","flag-fi":"🇫🇮","flag-fj":"🇫🇯","flag-fk":"🇫🇰","flag-fm":"🇫🇲","flag-fo":"🇫🇴","flag-fr":"🇫🇷","fr":"🇫🇷","flag-ga":"🇬🇦","flag-gb":"🇬🇧","gb":"🇬🇧","uk":"🇬🇧","flag-gd":"🇬🇩","flag-ge":"🇬🇪","flag-gf":"🇬🇫","flag-gg":"🇬🇬","flag-gh":"🇬🇭","flag-gi":"🇬🇮","flag-gl":"🇬🇱","flag-gm":"🇬🇲","flag-gn":"🇬🇳","flag-gp":"🇬🇵","flag-gq":"🇬🇶","flag-gr":"🇬🇷","flag-gs":"🇬🇸","flag-gt":"🇬🇹","flag-gu":"🇬🇺","flag-gw":"🇬🇼","flag-gy":"🇬🇾","flag-hk":"🇭🇰","flag-hm":"🇭🇲","flag-hn":"🇭🇳","flag-hr":"🇭🇷","flag-ht":"🇭🇹","flag-hu":"🇭🇺","flag-ic":"🇮🇨","flag-id":"🇮🇩","flag-ie":"🇮🇪","flag-il":"🇮🇱","flag-im":"🇮🇲","flag-in":"🇮🇳","flag-io":"🇮🇴","flag-iq":"🇮🇶","flag-ir":"🇮🇷","flag-is":"🇮🇸","flag-it":"🇮🇹","it":"🇮🇹","flag-je":"🇯🇪","flag-jm":"🇯🇲","flag-jo":"🇯🇴","flag-jp":"🇯🇵","jp":"🇯🇵","flag-ke":"🇰🇪","flag-kg":"🇰🇬","flag-kh":"🇰🇭","flag-ki":"🇰🇮","flag-km":"🇰🇲","flag-kn":"🇰🇳","flag-kp":"🇰🇵","flag-kr":"🇰🇷","kr":"🇰🇷","flag-kw":"🇰🇼","flag-ky":"🇰🇾","flag-kz":"🇰🇿","flag-la":"🇱🇦","flag-lb":"🇱🇧","flag-lc":"🇱🇨","flag-li":"🇱🇮","flag-lk":"🇱🇰","flag-lr":"🇱🇷","flag-ls":"🇱🇸","flag-lt":"🇱🇹","flag-lu":"🇱🇺","flag-lv":"🇱🇻","flag-ly":"🇱🇾","flag-ma":"🇲🇦","flag-mc":"🇲🇨","flag-md":"🇲🇩","flag-me":"🇲🇪","flag-mf":"🇲🇫","flag-mg":"🇲🇬","flag-mh":"🇲🇭","flag-mk":"🇲🇰","flag-ml":"🇲🇱","flag-mm":"🇲🇲","flag-mn":"🇲🇳","flag-mo":"🇲🇴","flag-mp":"🇲🇵","flag-mq":"🇲🇶","flag-mr":"🇲🇷","flag-ms":"🇲🇸","flag-mt":"🇲🇹","flag-mu":"🇲🇺","flag-mv":"🇲🇻","flag-mw":"🇲🇼","flag-mx":"🇲🇽","flag-my":"🇲🇾","flag-mz":"🇲🇿","flag-na":"🇳🇦","flag-nc":"🇳🇨","flag-ne":"🇳🇪","flag-nf":"🇳🇫","flag-ng":"🇳🇬","flag-ni":"🇳🇮","flag-nl":"🇳🇱","flag-no":"🇳🇴","flag-np":"🇳🇵","flag-nr":"🇳🇷","flag-nu":"🇳🇺","flag-nz":"🇳🇿","flag-om":"🇴🇲","flag-pa":"🇵🇦","flag-pe":"🇵🇪","flag-pf":"🇵🇫","flag-pg":"🇵🇬","flag-ph":"🇵🇭","flag-pk":"🇵🇰","flag-pl":"🇵🇱","flag-pm":"🇵🇲","flag-pn":"🇵🇳","flag-pr":"🇵🇷","flag-ps":"🇵🇸","flag-pt":"🇵🇹","flag-pw":"🇵🇼","flag-py":"🇵🇾","flag-qa":"🇶🇦","flag-re":"🇷🇪","flag-ro":"🇷🇴","flag-rs":"🇷🇸","flag-ru":"🇷🇺","ru":"🇷🇺","flag-rw":"🇷🇼","flag-sa":"🇸🇦","flag-sb":"🇸🇧","flag-sc":"🇸🇨","flag-sd":"🇸🇩","flag-se":"🇸🇪","flag-sg":"🇸🇬","flag-sh":"🇸🇭","flag-si":"🇸🇮","flag-sj":"🇸🇯","flag-sk":"🇸🇰","flag-sl":"🇸🇱","flag-sm":"🇸🇲","flag-sn":"🇸🇳","flag-so":"🇸🇴","flag-sr":"🇸🇷","flag-ss":"🇸🇸","flag-st":"🇸🇹","flag-sv":"🇸🇻","flag-sx":"🇸🇽","flag-sy":"🇸🇾","flag-sz":"🇸🇿","flag-ta":"🇹🇦","flag-tc":"🇹🇨","flag-td":"🇹🇩","flag-tf":"🇹🇫","flag-tg":"🇹🇬","flag-th":"🇹🇭","flag-tj":"🇹🇯","flag-tk":"🇹🇰","flag-tl":"🇹🇱","flag-tm":"🇹🇲","flag-tn":"🇹🇳","flag-to":"🇹🇴","flag-tr":"🇹🇷","flag-tt":"🇹🇹","flag-tv":"🇹🇻","flag-tw":"🇹🇼","flag-tz":"🇹🇿","flag-ua":"🇺🇦","flag-ug":"🇺🇬","flag-um":"🇺🇲","flag-us":"🇺🇸","us":"🇺🇸","flag-uy":"🇺🇾","flag-uz":"🇺🇿","flag-va":"🇻🇦","flag-vc":"🇻🇨","flag-ve":"🇻🇪","flag-vg":"🇻🇬","flag-vi":"🇻🇮","flag-vn":"🇻🇳","flag-vu":"🇻🇺","flag-wf":"🇼🇫","flag-ws":"🇼🇸","flag-xk":"🇽🇰","flag-ye":"🇾🇪","flag-yt":"🇾🇹","flag-za":"🇿🇦","flag-zm":"🇿🇲","flag-zw":"🇿🇼","man-man-boy":"👨‍👨‍👦","man-man-boy-boy":"👨‍👨‍👦‍👦","man-man-girl":"👨‍👨‍👧","man-man-girl-boy":"👨‍👨‍👧‍👦","man-man-girl-girl":"👨‍👨‍👧‍👧","man-woman-boy-boy":"👨‍👩‍👦‍👦","man-woman-girl":"👨‍👩‍👧","man-woman-girl-boy":"👨‍👩‍👧‍👦","man-woman-girl-girl":"👨‍👩‍👧‍👧","man-heart-man":"👨‍❤️‍👨","man-kiss-man":"👨‍❤️‍💋‍👨","woman-woman-boy":"👩‍👩‍👦","woman-woman-boy-boy":"👩‍👩‍👦‍👦","woman-woman-girl":"👩‍👩‍👧","woman-woman-girl-boy":"👩‍👩‍👧‍👦","woman-woman-girl-girl":"👩‍👩‍👧‍👧","woman-heart-woman":"👩‍❤️‍👩","woman-kiss-woman":"👩‍❤️‍💋‍👩"}
},{}],169:[function(require,module,exports){
/*jslint node: true*/
var toArray = require('lodash.toarray');
var emojiByName = require('./emoji.json');

"use strict";

/**
 * regex to parse emoji in a string - finds emoji, e.g. :coffee:
 */
var emojiNameRegex = /:([a-zA-Z0-9_\-\+]+):/g;

/**
 * regex to trim whitespace
 * use instead of String.prototype.trim() for IE8 supprt
 */
var trimSpaceRegex = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

/**
 * Removes colons on either side
 * of the string if present
 * @param  {string} str
 * @return {string}
 */
function stripColons (str) {
  var colonIndex = str.indexOf(':');
  if (colonIndex > -1) {
    // :emoji: (http://www.emoji-cheat-sheet.com/)
    if (colonIndex === str.length - 1) {
      str = str.substring(0, colonIndex);
      return stripColons(str);
    } else {
      str = str.substr(colonIndex + 1);
      return stripColons(str);
    }
  }

  return str;
}

/**
 * Adds colons to either side
 * of the string
 * @param {string} str
 * @return {string}
 */
function wrapColons (str) {
  return (typeof str === 'string' && str.length > 0) ? ':' + str + ':' : str;
}

/**
 * Ensure that the word is wrapped in colons
 * by only adding them, if they are not there.
 * @param {string} str
 * @return {string}
 */
function ensureColons (str) {
  return (typeof str === 'string' && str[0] !== ':') ? wrapColons(str) : str;
}

// Non spacing mark, some emoticons have them. It's the 'Variant Form',
// which provides more information so that emoticons can be rendered as
// more colorful graphics. FE0E is a unicode text version, where as FE0F
// should be rendered as a graphical version. The code gracefully degrades.
var NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;
var nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')

// Remove the non-spacing-mark from the code, never send a stripped version
// to the client, as it kills graphical emoticons.
function stripNSB (code) {
  return code.replace(nonSpacingRegex, '');
};

// Reversed hash table, where as emojiByName contains a { heart: '❤' }
// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized
// to the text version.
var emojiByCode = Object.keys(emojiByName).reduce(function(h,k) {
  h[stripNSB(emojiByName[k])] = k;
  return h;
}, {});

/**
 * Emoji namespace
 */
var Emoji = {
  emoji: emojiByName,
};

/**
 * get emoji code from name
 * @param  {string} emoji
 * @return {string}
 */
Emoji._get = function _get (emoji) {
  if (emojiByName.hasOwnProperty(emoji)) {
    return emojiByName[emoji];
  }

  return ensureColons(emoji);
};

/**
 * get emoji code from :emoji: string or name
 * @param  {string} emoji
 * @return {string}
 */
Emoji.get = function get (emoji) {
  emoji = stripColons(emoji);

  return Emoji._get(emoji);
};

/**
 * find the emoji by either code or name
 * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;
 * @return {object}
 */
Emoji.find = function find (nameOrCode) {
  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);
};

/**
 * find the emoji by name
 * @param {string} name The emoji to find either `coffee` or `:coffee:`;
 * @return {object}
 */
Emoji.findByName = function findByName (name) {
  var stripped = stripColons(name);
  var emoji = emojiByName[stripped];

  return emoji ? ({ emoji: emoji, key: stripped }) : undefined;
};

/**
 * find the emoji by code (emoji)
 * @param {string} code The emoji to find; for example `☕` or `☔`
 * @return {object}
 */
Emoji.findByCode = function findByCode (code) {
  var stripped = stripNSB(code);
  var name = emojiByCode[stripped];

  // lookup emoji to ensure the Variant Form is returned
  return name ? ({ emoji: emojiByName[name], key: name }) : undefined;
};


/**
 * Check if an emoji is known by this library
 * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;
 * @return {object}
 */
Emoji.hasEmoji = function hasEmoji (nameOrCode) {
  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);
};

/**
 * Check if an emoji with given name is known by this library
 * @param {string} name The emoji to validate either `coffee` or `:coffee:`;
 * @return {object}
 */
Emoji.hasEmojiByName = function hasEmojiByName (name) {
  var result = Emoji.findByName(name);
  return !!result && result.key === stripColons(name);
};

/**
 * Check if a given emoji is known by this library
 * @param {string} code The emoji to validate; for example `☕` or `☔`
 * @return {object}
 */
Emoji.hasEmojiByCode = function hasEmojiByCode (code) {
  var result = Emoji.findByCode(code);
  return !!result && stripNSB(result.emoji) === stripNSB(code);
};

/**
 * get emoji name from code
 * @param  {string} emoji
 * @param  {boolean} includeColons should the result include the ::
 * @return {string}
 */
Emoji.which = function which (emoji_code, includeColons) {
  var code = stripNSB(emoji_code);
  var word = emojiByCode[code];

  return includeColons ? wrapColons(word) : word;
};

/**
 * emojify a string (replace :emoji: with an emoji)
 * @param  {string} str
 * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)
 * @param  {function} format (wrap the returned emoji in a custom element)
 * @return {string}
 */
Emoji.emojify = function emojify (str, on_missing, format) {
  if (!str) return '';

  return str.split(emojiNameRegex) // parse emoji via regex
            .map(function parseEmoji(s, i) {
              // every second element is an emoji, e.g. "test :fast_forward:" -> [ "test ", "fast_forward" ]
              if (i % 2 === 0) return s;
              var emoji = Emoji._get(s);
              var isMissing = emoji.indexOf(':') > -1;

              if (isMissing && typeof on_missing === 'function') {
                return on_missing(s);
              }

              if (!isMissing && typeof format === 'function') {
                return format(emoji, s);
              }

              return emoji;
            })
            .join('') // convert back to string
  ;
};

/**
 * return a random emoji
 * @return {string}
 */
Emoji.random = function random () {
  var emojiKeys = Object.keys(emojiByName);
  var randomIndex = Math.floor(Math.random() * emojiKeys.length);
  var key = emojiKeys[randomIndex];
  var emoji = Emoji._get(key);
  return { key: key, emoji: emoji };
}

/**
 *  return an collection of potential emoji matches
 *  @param {string} str
 *  @return {Array.<Object>}
 */
Emoji.search = function search (str) {
  var emojiKeys = Object.keys(emojiByName);
  var matcher = stripColons(str)
  var matchingKeys = emojiKeys.filter(function(key) {
    return key.toString().indexOf(matcher) === 0;
  });
  return matchingKeys.map(function(key) {
    return {
      key: key,
      emoji: Emoji._get(key),
    };
  });
}

/**
 * unemojify a string (replace emoji with :emoji:)
 * @param  {string} str
 * @return {string}
 */
Emoji.unemojify = function unemojify (str) {
  if (!str) return '';
  var words = toArray(str);

  return words.map(function(word) {
    return Emoji.which(word, true) || word;
  }).join('');
};

/**
 * replace emojis with replacement value
 * @param {string} str
 * @param {function|string} the string or callback function to replace the emoji with
 * @param {boolean} should trailing whitespaces be cleaned? Defaults false
 * @return {string}
 */
Emoji.replace = function replace (str, replacement, cleanSpaces) {
  if (!str) return '';

  var replace = typeof replacement === 'function' ? replacement : function() { return replacement; };
  var words = toArray(str);

  var replaced = words.map(function(word, idx) {
    var emoji = Emoji.findByCode(word);
    
    if (emoji && cleanSpaces && words[idx + 1] === ' ') {
      words[idx + 1] = '';
    }

    return emoji ? replace(emoji) : word;
  }).join('');

  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;
};


/**
 * remove all emojis from a string
 * @param {string} str
 * @return {string}
 */
Emoji.strip = function strip (str) {
  return Emoji.replace(str, '', true);
};

module.exports = Emoji;

},{"./emoji.json":168,"lodash.toarray":166}],170:[function(require,module,exports){
'use strict';

// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;

function noop() {}

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function() {
    fn.apply(thisArg, arguments);
  };
}

function Promise(fn) {
  if (!(this instanceof Promise))
    throw new TypeError('Promises must be constructed via new');
  if (typeof fn !== 'function') throw new TypeError('not a function');
  this._state = 0;
  this._handled = false;
  this._value = undefined;
  this._deferreds = [];

  doResolve(fn, this);
}

function handle(self, deferred) {
  while (self._state === 3) {
    self = self._value;
  }
  if (self._state === 0) {
    self._deferreds.push(deferred);
    return;
  }
  self._handled = true;
  Promise._immediateFn(function() {
    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
      return;
    }
    var ret;
    try {
      ret = cb(self._value);
    } catch (e) {
      reject(deferred.promise, e);
      return;
    }
    resolve(deferred.promise, ret);
  });
}

function resolve(self, newValue) {
  try {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self)
      throw new TypeError('A promise cannot be resolved with itself.');
    if (
      newValue &&
      (typeof newValue === 'object' || typeof newValue === 'function')
    ) {
      var then = newValue.then;
      if (newValue instanceof Promise) {
        self._state = 3;
        self._value = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(bind(then, newValue), self);
        return;
      }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
  } catch (e) {
    reject(self, e);
  }
}

function reject(self, newValue) {
  self._state = 2;
  self._value = newValue;
  finale(self);
}

function finale(self) {
  if (self._state === 2 && self._deferreds.length === 0) {
    Promise._immediateFn(function() {
      if (!self._handled) {
        Promise._unhandledRejectionFn(self._value);
      }
    });
  }

  for (var i = 0, len = self._deferreds.length; i < len; i++) {
    handle(self, self._deferreds[i]);
  }
  self._deferreds = null;
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, self) {
  var done = false;
  try {
    fn(
      function(value) {
        if (done) return;
        done = true;
        resolve(self, value);
      },
      function(reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      }
    );
  } catch (ex) {
    if (done) return;
    done = true;
    reject(self, ex);
  }
}

Promise.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

Promise.prototype.then = function(onFulfilled, onRejected) {
  var prom = new this.constructor(noop);

  handle(this, new Handler(onFulfilled, onRejected, prom));
  return prom;
};

Promise.prototype['finally'] = function(callback) {
  var constructor = this.constructor;
  return this.then(
    function(value) {
      return constructor.resolve(callback()).then(function() {
        return value;
      });
    },
    function(reason) {
      return constructor.resolve(callback()).then(function() {
        return constructor.reject(reason);
      });
    }
  );
};

Promise.all = function(arr) {
  return new Promise(function(resolve, reject) {
    if (!arr || typeof arr.length === 'undefined')
      throw new TypeError('Promise.all accepts an array');
    var args = Array.prototype.slice.call(arr);
    if (args.length === 0) return resolve([]);
    var remaining = args.length;

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              reject
            );
            return;
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.resolve = function(value) {
  if (value && typeof value === 'object' && value.constructor === Promise) {
    return value;
  }

  return new Promise(function(resolve) {
    resolve(value);
  });
};

Promise.reject = function(value) {
  return new Promise(function(resolve, reject) {
    reject(value);
  });
};

Promise.race = function(values) {
  return new Promise(function(resolve, reject) {
    for (var i = 0, len = values.length; i < len; i++) {
      values[i].then(resolve, reject);
    }
  });
};

// Use polyfill for setImmediate for performance gains
Promise._immediateFn =
  (typeof setImmediate === 'function' &&
    function(fn) {
      setImmediate(fn);
    }) ||
  function(fn) {
    setTimeoutFunc(fn, 0);
  };

Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
  if (typeof console !== 'undefined' && console) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  }
};

module.exports = Promise;

},{}],171:[function(require,module,exports){
module.exports=[
"Aaren"
,
"Aarika"
,
"Abagael"
,
"Abagail"
,
"Abbe"
,
"Abbey"
,
"Abbi"
,
"Abbie"
,
"Abby"
,
"Abbye"
,
"Abigael"
,
"Abigail"
,
"Abigale"
,
"Abra"
,
"Ada"
,
"Adah"
,
"Adaline"
,
"Adan"
,
"Adara"
,
"Adda"
,
"Addi"
,
"Addia"
,
"Addie"
,
"Addy"
,
"Adel"
,
"Adela"
,
"Adelaida"
,
"Adelaide"
,
"Adele"
,
"Adelheid"
,
"Adelice"
,
"Adelina"
,
"Adelind"
,
"Adeline"
,
"Adella"
,
"Adelle"
,
"Adena"
,
"Adey"
,
"Adi"
,
"Adiana"
,
"Adina"
,
"Adora"
,
"Adore"
,
"Adoree"
,
"Adorne"
,
"Adrea"
,
"Adria"
,
"Adriaens"
,
"Adrian"
,
"Adriana"
,
"Adriane"
,
"Adrianna"
,
"Adrianne"
,
"Adriena"
,
"Adrienne"
,
"Aeriel"
,
"Aeriela"
,
"Aeriell"
,
"Afton"
,
"Ag"
,
"Agace"
,
"Agata"
,
"Agatha"
,
"Agathe"
,
"Aggi"
,
"Aggie"
,
"Aggy"
,
"Agna"
,
"Agnella"
,
"Agnes"
,
"Agnese"
,
"Agnesse"
,
"Agneta"
,
"Agnola"
,
"Agretha"
,
"Aida"
,
"Aidan"
,
"Aigneis"
,
"Aila"
,
"Aile"
,
"Ailee"
,
"Aileen"
,
"Ailene"
,
"Ailey"
,
"Aili"
,
"Ailina"
,
"Ailis"
,
"Ailsun"
,
"Ailyn"
,
"Aime"
,
"Aimee"
,
"Aimil"
,
"Aindrea"
,
"Ainslee"
,
"Ainsley"
,
"Ainslie"
,
"Ajay"
,
"Alaine"
,
"Alameda"
,
"Alana"
,
"Alanah"
,
"Alane"
,
"Alanna"
,
"Alayne"
,
"Alberta"
,
"Albertina"
,
"Albertine"
,
"Albina"
,
"Alecia"
,
"Aleda"
,
"Aleece"
,
"Aleen"
,
"Alejandra"
,
"Alejandrina"
,
"Alena"
,
"Alene"
,
"Alessandra"
,
"Aleta"
,
"Alethea"
,
"Alex"
,
"Alexa"
,
"Alexandra"
,
"Alexandrina"
,
"Alexi"
,
"Alexia"
,
"Alexina"
,
"Alexine"
,
"Alexis"
,
"Alfi"
,
"Alfie"
,
"Alfreda"
,
"Alfy"
,
"Ali"
,
"Alia"
,
"Alica"
,
"Alice"
,
"Alicea"
,
"Alicia"
,
"Alida"
,
"Alidia"
,
"Alie"
,
"Alika"
,
"Alikee"
,
"Alina"
,
"Aline"
,
"Alis"
,
"Alisa"
,
"Alisha"
,
"Alison"
,
"Alissa"
,
"Alisun"
,
"Alix"
,
"Aliza"
,
"Alla"
,
"Alleen"
,
"Allegra"
,
"Allene"
,
"Alli"
,
"Allianora"
,
"Allie"
,
"Allina"
,
"Allis"
,
"Allison"
,
"Allissa"
,
"Allix"
,
"Allsun"
,
"Allx"
,
"Ally"
,
"Allyce"
,
"Allyn"
,
"Allys"
,
"Allyson"
,
"Alma"
,
"Almeda"
,
"Almeria"
,
"Almeta"
,
"Almira"
,
"Almire"
,
"Aloise"
,
"Aloisia"
,
"Aloysia"
,
"Alta"
,
"Althea"
,
"Alvera"
,
"Alverta"
,
"Alvina"
,
"Alvinia"
,
"Alvira"
,
"Alyce"
,
"Alyda"
,
"Alys"
,
"Alysa"
,
"Alyse"
,
"Alysia"
,
"Alyson"
,
"Alyss"
,
"Alyssa"
,
"Amabel"
,
"Amabelle"
,
"Amalea"
,
"Amalee"
,
"Amaleta"
,
"Amalia"
,
"Amalie"
,
"Amalita"
,
"Amalle"
,
"Amanda"
,
"Amandi"
,
"Amandie"
,
"Amandy"
,
"Amara"
,
"Amargo"
,
"Amata"
,
"Amber"
,
"Amberly"
,
"Ambur"
,
"Ame"
,
"Amelia"
,
"Amelie"
,
"Amelina"
,
"Ameline"
,
"Amelita"
,
"Ami"
,
"Amie"
,
"Amii"
,
"Amil"
,
"Amitie"
,
"Amity"
,
"Ammamaria"
,
"Amy"
,
"Amye"
,
"Ana"
,
"Anabal"
,
"Anabel"
,
"Anabella"
,
"Anabelle"
,
"Analiese"
,
"Analise"
,
"Anallese"
,
"Anallise"
,
"Anastasia"
,
"Anastasie"
,
"Anastassia"
,
"Anatola"
,
"Andee"
,
"Andeee"
,
"Anderea"
,
"Andi"
,
"Andie"
,
"Andra"
,
"Andrea"
,
"Andreana"
,
"Andree"
,
"Andrei"
,
"Andria"
,
"Andriana"
,
"Andriette"
,
"Andromache"
,
"Andy"
,
"Anestassia"
,
"Anet"
,
"Anett"
,
"Anetta"
,
"Anette"
,
"Ange"
,
"Angel"
,
"Angela"
,
"Angele"
,
"Angelia"
,
"Angelica"
,
"Angelika"
,
"Angelina"
,
"Angeline"
,
"Angelique"
,
"Angelita"
,
"Angelle"
,
"Angie"
,
"Angil"
,
"Angy"
,
"Ania"
,
"Anica"
,
"Anissa"
,
"Anita"
,
"Anitra"
,
"Anjanette"
,
"Anjela"
,
"Ann"
,
"Ann-Marie"
,
"Anna"
,
"Anna-Diana"
,
"Anna-Diane"
,
"Anna-Maria"
,
"Annabal"
,
"Annabel"
,
"Annabela"
,
"Annabell"
,
"Annabella"
,
"Annabelle"
,
"Annadiana"
,
"Annadiane"
,
"Annalee"
,
"Annaliese"
,
"Annalise"
,
"Annamaria"
,
"Annamarie"
,
"Anne"
,
"Anne-Corinne"
,
"Anne-Marie"
,
"Annecorinne"
,
"Anneliese"
,
"Annelise"
,
"Annemarie"
,
"Annetta"
,
"Annette"
,
"Anni"
,
"Annice"
,
"Annie"
,
"Annis"
,
"Annissa"
,
"Annmaria"
,
"Annmarie"
,
"Annnora"
,
"Annora"
,
"Anny"
,
"Anselma"
,
"Ansley"
,
"Anstice"
,
"Anthe"
,
"Anthea"
,
"Anthia"
,
"Anthiathia"
,
"Antoinette"
,
"Antonella"
,
"Antonetta"
,
"Antonia"
,
"Antonie"
,
"Antonietta"
,
"Antonina"
,
"Anya"
,
"Appolonia"
,
"April"
,
"Aprilette"
,
"Ara"
,
"Arabel"
,
"Arabela"
,
"Arabele"
,
"Arabella"
,
"Arabelle"
,
"Arda"
,
"Ardath"
,
"Ardeen"
,
"Ardelia"
,
"Ardelis"
,
"Ardella"
,
"Ardelle"
,
"Arden"
,
"Ardene"
,
"Ardenia"
,
"Ardine"
,
"Ardis"
,
"Ardisj"
,
"Ardith"
,
"Ardra"
,
"Ardyce"
,
"Ardys"
,
"Ardyth"
,
"Aretha"
,
"Ariadne"
,
"Ariana"
,
"Aridatha"
,
"Ariel"
,
"Ariela"
,
"Ariella"
,
"Arielle"
,
"Arlana"
,
"Arlee"
,
"Arleen"
,
"Arlen"
,
"Arlena"
,
"Arlene"
,
"Arleta"
,
"Arlette"
,
"Arleyne"
,
"Arlie"
,
"Arliene"
,
"Arlina"
,
"Arlinda"
,
"Arline"
,
"Arluene"
,
"Arly"
,
"Arlyn"
,
"Arlyne"
,
"Aryn"
,
"Ashely"
,
"Ashia"
,
"Ashien"
,
"Ashil"
,
"Ashla"
,
"Ashlan"
,
"Ashlee"
,
"Ashleigh"
,
"Ashlen"
,
"Ashley"
,
"Ashli"
,
"Ashlie"
,
"Ashly"
,
"Asia"
,
"Astra"
,
"Astrid"
,
"Astrix"
,
"Atalanta"
,
"Athena"
,
"Athene"
,
"Atlanta"
,
"Atlante"
,
"Auberta"
,
"Aubine"
,
"Aubree"
,
"Aubrette"
,
"Aubrey"
,
"Aubrie"
,
"Aubry"
,
"Audi"
,
"Audie"
,
"Audra"
,
"Audre"
,
"Audrey"
,
"Audrie"
,
"Audry"
,
"Audrye"
,
"Audy"
,
"Augusta"
,
"Auguste"
,
"Augustina"
,
"Augustine"
,
"Aundrea"
,
"Aura"
,
"Aurea"
,
"Aurel"
,
"Aurelea"
,
"Aurelia"
,
"Aurelie"
,
"Auria"
,
"Aurie"
,
"Aurilia"
,
"Aurlie"
,
"Auroora"
,
"Aurora"
,
"Aurore"
,
"Austin"
,
"Austina"
,
"Austine"
,
"Ava"
,
"Aveline"
,
"Averil"
,
"Averyl"
,
"Avie"
,
"Avis"
,
"Aviva"
,
"Avivah"
,
"Avril"
,
"Avrit"
,
"Ayn"
,
"Bab"
,
"Babara"
,
"Babb"
,
"Babbette"
,
"Babbie"
,
"Babette"
,
"Babita"
,
"Babs"
,
"Bambi"
,
"Bambie"
,
"Bamby"
,
"Barb"
,
"Barbabra"
,
"Barbara"
,
"Barbara-Anne"
,
"Barbaraanne"
,
"Barbe"
,
"Barbee"
,
"Barbette"
,
"Barbey"
,
"Barbi"
,
"Barbie"
,
"Barbra"
,
"Barby"
,
"Bari"
,
"Barrie"
,
"Barry"
,
"Basia"
,
"Bathsheba"
,
"Batsheva"
,
"Bea"
,
"Beatrice"
,
"Beatrisa"
,
"Beatrix"
,
"Beatriz"
,
"Bebe"
,
"Becca"
,
"Becka"
,
"Becki"
,
"Beckie"
,
"Becky"
,
"Bee"
,
"Beilul"
,
"Beitris"
,
"Bekki"
,
"Bel"
,
"Belia"
,
"Belicia"
,
"Belinda"
,
"Belita"
,
"Bell"
,
"Bella"
,
"Bellanca"
,
"Belle"
,
"Bellina"
,
"Belva"
,
"Belvia"
,
"Bendite"
,
"Benedetta"
,
"Benedicta"
,
"Benedikta"
,
"Benetta"
,
"Benita"
,
"Benni"
,
"Bennie"
,
"Benny"
,
"Benoite"
,
"Berenice"
,
"Beret"
,
"Berget"
,
"Berna"
,
"Bernadene"
,
"Bernadette"
,
"Bernadina"
,
"Bernadine"
,
"Bernardina"
,
"Bernardine"
,
"Bernelle"
,
"Bernete"
,
"Bernetta"
,
"Bernette"
,
"Berni"
,
"Bernice"
,
"Bernie"
,
"Bernita"
,
"Berny"
,
"Berri"
,
"Berrie"
,
"Berry"
,
"Bert"
,
"Berta"
,
"Berte"
,
"Bertha"
,
"Berthe"
,
"Berti"
,
"Bertie"
,
"Bertina"
,
"Bertine"
,
"Berty"
,
"Beryl"
,
"Beryle"
,
"Bess"
,
"Bessie"
,
"Bessy"
,
"Beth"
,
"Bethanne"
,
"Bethany"
,
"Bethena"
,
"Bethina"
,
"Betsey"
,
"Betsy"
,
"Betta"
,
"Bette"
,
"Bette-Ann"
,
"Betteann"
,
"Betteanne"
,
"Betti"
,
"Bettina"
,
"Bettine"
,
"Betty"
,
"Bettye"
,
"Beulah"
,
"Bev"
,
"Beverie"
,
"Beverlee"
,
"Beverley"
,
"Beverlie"
,
"Beverly"
,
"Bevvy"
,
"Bianca"
,
"Bianka"
,
"Bibbie"
,
"Bibby"
,
"Bibbye"
,
"Bibi"
,
"Biddie"
,
"Biddy"
,
"Bidget"
,
"Bili"
,
"Bill"
,
"Billi"
,
"Billie"
,
"Billy"
,
"Billye"
,
"Binni"
,
"Binnie"
,
"Binny"
,
"Bird"
,
"Birdie"
,
"Birgit"
,
"Birgitta"
,
"Blair"
,
"Blaire"
,
"Blake"
,
"Blakelee"
,
"Blakeley"
,
"Blanca"
,
"Blanch"
,
"Blancha"
,
"Blanche"
,
"Blinni"
,
"Blinnie"
,
"Blinny"
,
"Bliss"
,
"Blisse"
,
"Blithe"
,
"Blondell"
,
"Blondelle"
,
"Blondie"
,
"Blondy"
,
"Blythe"
,
"Bobbe"
,
"Bobbee"
,
"Bobbette"
,
"Bobbi"
,
"Bobbie"
,
"Bobby"
,
"Bobbye"
,
"Bobette"
,
"Bobina"
,
"Bobine"
,
"Bobinette"
,
"Bonita"
,
"Bonnee"
,
"Bonni"
,
"Bonnibelle"
,
"Bonnie"
,
"Bonny"
,
"Brana"
,
"Brandais"
,
"Brande"
,
"Brandea"
,
"Brandi"
,
"Brandice"
,
"Brandie"
,
"Brandise"
,
"Brandy"
,
"Breanne"
,
"Brear"
,
"Bree"
,
"Breena"
,
"Bren"
,
"Brena"
,
"Brenda"
,
"Brenn"
,
"Brenna"
,
"Brett"
,
"Bria"
,
"Briana"
,
"Brianna"
,
"Brianne"
,
"Bride"
,
"Bridget"
,
"Bridgette"
,
"Bridie"
,
"Brier"
,
"Brietta"
,
"Brigid"
,
"Brigida"
,
"Brigit"
,
"Brigitta"
,
"Brigitte"
,
"Brina"
,
"Briney"
,
"Brinn"
,
"Brinna"
,
"Briny"
,
"Brit"
,
"Brita"
,
"Britney"
,
"Britni"
,
"Britt"
,
"Britta"
,
"Brittan"
,
"Brittaney"
,
"Brittani"
,
"Brittany"
,
"Britte"
,
"Britteny"
,
"Brittne"
,
"Brittney"
,
"Brittni"
,
"Brook"
,
"Brooke"
,
"Brooks"
,
"Brunhilda"
,
"Brunhilde"
,
"Bryana"
,
"Bryn"
,
"Bryna"
,
"Brynn"
,
"Brynna"
,
"Brynne"
,
"Buffy"
,
"Bunni"
,
"Bunnie"
,
"Bunny"
,
"Cacilia"
,
"Cacilie"
,
"Cahra"
,
"Cairistiona"
,
"Caitlin"
,
"Caitrin"
,
"Cal"
,
"Calida"
,
"Calla"
,
"Calley"
,
"Calli"
,
"Callida"
,
"Callie"
,
"Cally"
,
"Calypso"
,
"Cam"
,
"Camala"
,
"Camel"
,
"Camella"
,
"Camellia"
,
"Cami"
,
"Camila"
,
"Camile"
,
"Camilla"
,
"Camille"
,
"Cammi"
,
"Cammie"
,
"Cammy"
,
"Candace"
,
"Candi"
,
"Candice"
,
"Candida"
,
"Candide"
,
"Candie"
,
"Candis"
,
"Candra"
,
"Candy"
,
"Caprice"
,
"Cara"
,
"Caralie"
,
"Caren"
,
"Carena"
,
"Caresa"
,
"Caressa"
,
"Caresse"
,
"Carey"
,
"Cari"
,
"Caria"
,
"Carie"
,
"Caril"
,
"Carilyn"
,
"Carin"
,
"Carina"
,
"Carine"
,
"Cariotta"
,
"Carissa"
,
"Carita"
,
"Caritta"
,
"Carla"
,
"Carlee"
,
"Carleen"
,
"Carlen"
,
"Carlene"
,
"Carley"
,
"Carlie"
,
"Carlin"
,
"Carlina"
,
"Carline"
,
"Carlita"
,
"Carlota"
,
"Carlotta"
,
"Carly"
,
"Carlye"
,
"Carlyn"
,
"Carlynn"
,
"Carlynne"
,
"Carma"
,
"Carmel"
,
"Carmela"
,
"Carmelia"
,
"Carmelina"
,
"Carmelita"
,
"Carmella"
,
"Carmelle"
,
"Carmen"
,
"Carmencita"
,
"Carmina"
,
"Carmine"
,
"Carmita"
,
"Carmon"
,
"Caro"
,
"Carol"
,
"Carol-Jean"
,
"Carola"
,
"Carolan"
,
"Carolann"
,
"Carole"
,
"Carolee"
,
"Carolin"
,
"Carolina"
,
"Caroline"
,
"Caroljean"
,
"Carolyn"
,
"Carolyne"
,
"Carolynn"
,
"Caron"
,
"Carree"
,
"Carri"
,
"Carrie"
,
"Carrissa"
,
"Carroll"
,
"Carry"
,
"Cary"
,
"Caryl"
,
"Caryn"
,
"Casandra"
,
"Casey"
,
"Casi"
,
"Casie"
,
"Cass"
,
"Cassandra"
,
"Cassandre"
,
"Cassandry"
,
"Cassaundra"
,
"Cassey"
,
"Cassi"
,
"Cassie"
,
"Cassondra"
,
"Cassy"
,
"Catarina"
,
"Cate"
,
"Caterina"
,
"Catha"
,
"Catharina"
,
"Catharine"
,
"Cathe"
,
"Cathee"
,
"Catherin"
,
"Catherina"
,
"Catherine"
,
"Cathi"
,
"Cathie"
,
"Cathleen"
,
"Cathlene"
,
"Cathrin"
,
"Cathrine"
,
"Cathryn"
,
"Cathy"
,
"Cathyleen"
,
"Cati"
,
"Catie"
,
"Catina"
,
"Catlaina"
,
"Catlee"
,
"Catlin"
,
"Catrina"
,
"Catriona"
,
"Caty"
,
"Caye"
,
"Cayla"
,
"Cecelia"
,
"Cecil"
,
"Cecile"
,
"Ceciley"
,
"Cecilia"
,
"Cecilla"
,
"Cecily"
,
"Ceil"
,
"Cele"
,
"Celene"
,
"Celesta"
,
"Celeste"
,
"Celestia"
,
"Celestina"
,
"Celestine"
,
"Celestyn"
,
"Celestyna"
,
"Celia"
,
"Celie"
,
"Celina"
,
"Celinda"
,
"Celine"
,
"Celinka"
,
"Celisse"
,
"Celka"
,
"Celle"
,
"Cesya"
,
"Chad"
,
"Chanda"
,
"Chandal"
,
"Chandra"
,
"Channa"
,
"Chantal"
,
"Chantalle"
,
"Charil"
,
"Charin"
,
"Charis"
,
"Charissa"
,
"Charisse"
,
"Charita"
,
"Charity"
,
"Charla"
,
"Charlean"
,
"Charleen"
,
"Charlena"
,
"Charlene"
,
"Charline"
,
"Charlot"
,
"Charlotta"
,
"Charlotte"
,
"Charmain"
,
"Charmaine"
,
"Charmane"
,
"Charmian"
,
"Charmine"
,
"Charmion"
,
"Charo"
,
"Charyl"
,
"Chastity"
,
"Chelsae"
,
"Chelsea"
,
"Chelsey"
,
"Chelsie"
,
"Chelsy"
,
"Cher"
,
"Chere"
,
"Cherey"
,
"Cheri"
,
"Cherianne"
,
"Cherice"
,
"Cherida"
,
"Cherie"
,
"Cherilyn"
,
"Cherilynn"
,
"Cherin"
,
"Cherise"
,
"Cherish"
,
"Cherlyn"
,
"Cherri"
,
"Cherrita"
,
"Cherry"
,
"Chery"
,
"Cherye"
,
"Cheryl"
,
"Cheslie"
,
"Chiarra"
,
"Chickie"
,
"Chicky"
,
"Chiquia"
,
"Chiquita"
,
"Chlo"
,
"Chloe"
,
"Chloette"
,
"Chloris"
,
"Chris"
,
"Chrissie"
,
"Chrissy"
,
"Christa"
,
"Christabel"
,
"Christabella"
,
"Christal"
,
"Christalle"
,
"Christan"
,
"Christean"
,
"Christel"
,
"Christen"
,
"Christi"
,
"Christian"
,
"Christiana"
,
"Christiane"
,
"Christie"
,
"Christin"
,
"Christina"
,
"Christine"
,
"Christy"
,
"Christye"
,
"Christyna"
,
"Chrysa"
,
"Chrysler"
,
"Chrystal"
,
"Chryste"
,
"Chrystel"
,
"Cicely"
,
"Cicily"
,
"Ciel"
,
"Cilka"
,
"Cinda"
,
"Cindee"
,
"Cindelyn"
,
"Cinderella"
,
"Cindi"
,
"Cindie"
,
"Cindra"
,
"Cindy"
,
"Cinnamon"
,
"Cissiee"
,
"Cissy"
,
"Clair"
,
"Claire"
,
"Clara"
,
"Clarabelle"
,
"Clare"
,
"Claresta"
,
"Clareta"
,
"Claretta"
,
"Clarette"
,
"Clarey"
,
"Clari"
,
"Claribel"
,
"Clarice"
,
"Clarie"
,
"Clarinda"
,
"Clarine"
,
"Clarissa"
,
"Clarisse"
,
"Clarita"
,
"Clary"
,
"Claude"
,
"Claudelle"
,
"Claudetta"
,
"Claudette"
,
"Claudia"
,
"Claudie"
,
"Claudina"
,
"Claudine"
,
"Clea"
,
"Clem"
,
"Clemence"
,
"Clementia"
,
"Clementina"
,
"Clementine"
,
"Clemmie"
,
"Clemmy"
,
"Cleo"
,
"Cleopatra"
,
"Clerissa"
,
"Clio"
,
"Clo"
,
"Cloe"
,
"Cloris"
,
"Clotilda"
,
"Clovis"
,
"Codee"
,
"Codi"
,
"Codie"
,
"Cody"
,
"Coleen"
,
"Colene"
,
"Coletta"
,
"Colette"
,
"Colleen"
,
"Collen"
,
"Collete"
,
"Collette"
,
"Collie"
,
"Colline"
,
"Colly"
,
"Con"
,
"Concettina"
,
"Conchita"
,
"Concordia"
,
"Conni"
,
"Connie"
,
"Conny"
,
"Consolata"
,
"Constance"
,
"Constancia"
,
"Constancy"
,
"Constanta"
,
"Constantia"
,
"Constantina"
,
"Constantine"
,
"Consuela"
,
"Consuelo"
,
"Cookie"
,
"Cora"
,
"Corabel"
,
"Corabella"
,
"Corabelle"
,
"Coral"
,
"Coralie"
,
"Coraline"
,
"Coralyn"
,
"Cordelia"
,
"Cordelie"
,
"Cordey"
,
"Cordi"
,
"Cordie"
,
"Cordula"
,
"Cordy"
,
"Coreen"
,
"Corella"
,
"Corenda"
,
"Corene"
,
"Coretta"
,
"Corette"
,
"Corey"
,
"Cori"
,
"Corie"
,
"Corilla"
,
"Corina"
,
"Corine"
,
"Corinna"
,
"Corinne"
,
"Coriss"
,
"Corissa"
,
"Corliss"
,
"Corly"
,
"Cornela"
,
"Cornelia"
,
"Cornelle"
,
"Cornie"
,
"Corny"
,
"Correna"
,
"Correy"
,
"Corri"
,
"Corrianne"
,
"Corrie"
,
"Corrina"
,
"Corrine"
,
"Corrinne"
,
"Corry"
,
"Cortney"
,
"Cory"
,
"Cosetta"
,
"Cosette"
,
"Costanza"
,
"Courtenay"
,
"Courtnay"
,
"Courtney"
,
"Crin"
,
"Cris"
,
"Crissie"
,
"Crissy"
,
"Crista"
,
"Cristabel"
,
"Cristal"
,
"Cristen"
,
"Cristi"
,
"Cristie"
,
"Cristin"
,
"Cristina"
,
"Cristine"
,
"Cristionna"
,
"Cristy"
,
"Crysta"
,
"Crystal"
,
"Crystie"
,
"Cthrine"
,
"Cyb"
,
"Cybil"
,
"Cybill"
,
"Cymbre"
,
"Cynde"
,
"Cyndi"
,
"Cyndia"
,
"Cyndie"
,
"Cyndy"
,
"Cynthea"
,
"Cynthia"
,
"Cynthie"
,
"Cynthy"
,
"Dacey"
,
"Dacia"
,
"Dacie"
,
"Dacy"
,
"Dael"
,
"Daffi"
,
"Daffie"
,
"Daffy"
,
"Dagmar"
,
"Dahlia"
,
"Daile"
,
"Daisey"
,
"Daisi"
,
"Daisie"
,
"Daisy"
,
"Dale"
,
"Dalenna"
,
"Dalia"
,
"Dalila"
,
"Dallas"
,
"Daloris"
,
"Damara"
,
"Damaris"
,
"Damita"
,
"Dana"
,
"Danell"
,
"Danella"
,
"Danette"
,
"Dani"
,
"Dania"
,
"Danica"
,
"Danice"
,
"Daniela"
,
"Daniele"
,
"Daniella"
,
"Danielle"
,
"Danika"
,
"Danila"
,
"Danit"
,
"Danita"
,
"Danna"
,
"Danni"
,
"Dannie"
,
"Danny"
,
"Dannye"
,
"Danya"
,
"Danyelle"
,
"Danyette"
,
"Daphene"
,
"Daphna"
,
"Daphne"
,
"Dara"
,
"Darb"
,
"Darbie"
,
"Darby"
,
"Darcee"
,
"Darcey"
,
"Darci"
,
"Darcie"
,
"Darcy"
,
"Darda"
,
"Dareen"
,
"Darell"
,
"Darelle"
,
"Dari"
,
"Daria"
,
"Darice"
,
"Darla"
,
"Darleen"
,
"Darlene"
,
"Darline"
,
"Darlleen"
,
"Daron"
,
"Darrelle"
,
"Darryl"
,
"Darsey"
,
"Darsie"
,
"Darya"
,
"Daryl"
,
"Daryn"
,
"Dasha"
,
"Dasi"
,
"Dasie"
,
"Dasya"
,
"Datha"
,
"Daune"
,
"Daveen"
,
"Daveta"
,
"Davida"
,
"Davina"
,
"Davine"
,
"Davita"
,
"Dawn"
,
"Dawna"
,
"Dayle"
,
"Dayna"
,
"Ddene"
,
"De"
,
"Deana"
,
"Deane"
,
"Deanna"
,
"Deanne"
,
"Deb"
,
"Debbi"
,
"Debbie"
,
"Debby"
,
"Debee"
,
"Debera"
,
"Debi"
,
"Debor"
,
"Debora"
,
"Deborah"
,
"Debra"
,
"Dede"
,
"Dedie"
,
"Dedra"
,
"Dee"
,
"Dee Dee"
,
"Deeann"
,
"Deeanne"
,
"Deedee"
,
"Deena"
,
"Deerdre"
,
"Deeyn"
,
"Dehlia"
,
"Deidre"
,
"Deina"
,
"Deirdre"
,
"Del"
,
"Dela"
,
"Delcina"
,
"Delcine"
,
"Delia"
,
"Delila"
,
"Delilah"
,
"Delinda"
,
"Dell"
,
"Della"
,
"Delly"
,
"Delora"
,
"Delores"
,
"Deloria"
,
"Deloris"
,
"Delphine"
,
"Delphinia"
,
"Demeter"
,
"Demetra"
,
"Demetria"
,
"Demetris"
,
"Dena"
,
"Deni"
,
"Denice"
,
"Denise"
,
"Denna"
,
"Denni"
,
"Dennie"
,
"Denny"
,
"Deny"
,
"Denys"
,
"Denyse"
,
"Deonne"
,
"Desdemona"
,
"Desirae"
,
"Desiree"
,
"Desiri"
,
"Deva"
,
"Devan"
,
"Devi"
,
"Devin"
,
"Devina"
,
"Devinne"
,
"Devon"
,
"Devondra"
,
"Devonna"
,
"Devonne"
,
"Devora"
,
"Di"
,
"Diahann"
,
"Dian"
,
"Diana"
,
"Diandra"
,
"Diane"
,
"Diane-Marie"
,
"Dianemarie"
,
"Diann"
,
"Dianna"
,
"Dianne"
,
"Diannne"
,
"Didi"
,
"Dido"
,
"Diena"
,
"Dierdre"
,
"Dina"
,
"Dinah"
,
"Dinnie"
,
"Dinny"
,
"Dion"
,
"Dione"
,
"Dionis"
,
"Dionne"
,
"Dita"
,
"Dix"
,
"Dixie"
,
"Dniren"
,
"Dode"
,
"Dodi"
,
"Dodie"
,
"Dody"
,
"Doe"
,
"Doll"
,
"Dolley"
,
"Dolli"
,
"Dollie"
,
"Dolly"
,
"Dolores"
,
"Dolorita"
,
"Doloritas"
,
"Domeniga"
,
"Dominga"
,
"Domini"
,
"Dominica"
,
"Dominique"
,
"Dona"
,
"Donella"
,
"Donelle"
,
"Donetta"
,
"Donia"
,
"Donica"
,
"Donielle"
,
"Donna"
,
"Donnamarie"
,
"Donni"
,
"Donnie"
,
"Donny"
,
"Dora"
,
"Doralia"
,
"Doralin"
,
"Doralyn"
,
"Doralynn"
,
"Doralynne"
,
"Dore"
,
"Doreen"
,
"Dorelia"
,
"Dorella"
,
"Dorelle"
,
"Dorena"
,
"Dorene"
,
"Doretta"
,
"Dorette"
,
"Dorey"
,
"Dori"
,
"Doria"
,
"Dorian"
,
"Dorice"
,
"Dorie"
,
"Dorine"
,
"Doris"
,
"Dorisa"
,
"Dorise"
,
"Dorita"
,
"Doro"
,
"Dorolice"
,
"Dorolisa"
,
"Dorotea"
,
"Doroteya"
,
"Dorothea"
,
"Dorothee"
,
"Dorothy"
,
"Dorree"
,
"Dorri"
,
"Dorrie"
,
"Dorris"
,
"Dorry"
,
"Dorthea"
,
"Dorthy"
,
"Dory"
,
"Dosi"
,
"Dot"
,
"Doti"
,
"Dotti"
,
"Dottie"
,
"Dotty"
,
"Dre"
,
"Dreddy"
,
"Dredi"
,
"Drona"
,
"Dru"
,
"Druci"
,
"Drucie"
,
"Drucill"
,
"Drucy"
,
"Drusi"
,
"Drusie"
,
"Drusilla"
,
"Drusy"
,
"Dulce"
,
"Dulcea"
,
"Dulci"
,
"Dulcia"
,
"Dulciana"
,
"Dulcie"
,
"Dulcine"
,
"Dulcinea"
,
"Dulcy"
,
"Dulsea"
,
"Dusty"
,
"Dyan"
,
"Dyana"
,
"Dyane"
,
"Dyann"
,
"Dyanna"
,
"Dyanne"
,
"Dyna"
,
"Dynah"
,
"Eachelle"
,
"Eada"
,
"Eadie"
,
"Eadith"
,
"Ealasaid"
,
"Eartha"
,
"Easter"
,
"Eba"
,
"Ebba"
,
"Ebonee"
,
"Ebony"
,
"Eda"
,
"Eddi"
,
"Eddie"
,
"Eddy"
,
"Ede"
,
"Edee"
,
"Edeline"
,
"Eden"
,
"Edi"
,
"Edie"
,
"Edin"
,
"Edita"
,
"Edith"
,
"Editha"
,
"Edithe"
,
"Ediva"
,
"Edna"
,
"Edwina"
,
"Edy"
,
"Edyth"
,
"Edythe"
,
"Effie"
,
"Eileen"
,
"Eilis"
,
"Eimile"
,
"Eirena"
,
"Ekaterina"
,
"Elaina"
,
"Elaine"
,
"Elana"
,
"Elane"
,
"Elayne"
,
"Elberta"
,
"Elbertina"
,
"Elbertine"
,
"Eleanor"
,
"Eleanora"
,
"Eleanore"
,
"Electra"
,
"Eleen"
,
"Elena"
,
"Elene"
,
"Eleni"
,
"Elenore"
,
"Eleonora"
,
"Eleonore"
,
"Elfie"
,
"Elfreda"
,
"Elfrida"
,
"Elfrieda"
,
"Elga"
,
"Elianora"
,
"Elianore"
,
"Elicia"
,
"Elie"
,
"Elinor"
,
"Elinore"
,
"Elisa"
,
"Elisabet"
,
"Elisabeth"
,
"Elisabetta"
,
"Elise"
,
"Elisha"
,
"Elissa"
,
"Elita"
,
"Eliza"
,
"Elizabet"
,
"Elizabeth"
,
"Elka"
,
"Elke"
,
"Ella"
,
"Elladine"
,
"Elle"
,
"Ellen"
,
"Ellene"
,
"Ellette"
,
"Elli"
,
"Ellie"
,
"Ellissa"
,
"Elly"
,
"Ellyn"
,
"Ellynn"
,
"Elmira"
,
"Elna"
,
"Elnora"
,
"Elnore"
,
"Eloisa"
,
"Eloise"
,
"Elonore"
,
"Elora"
,
"Elsa"
,
"Elsbeth"
,
"Else"
,
"Elset"
,
"Elsey"
,
"Elsi"
,
"Elsie"
,
"Elsinore"
,
"Elspeth"
,
"Elsy"
,
"Elva"
,
"Elvera"
,
"Elvina"
,
"Elvira"
,
"Elwira"
,
"Elyn"
,
"Elyse"
,
"Elysee"
,
"Elysha"
,
"Elysia"
,
"Elyssa"
,
"Em"
,
"Ema"
,
"Emalee"
,
"Emalia"
,
"Emelda"
,
"Emelia"
,
"Emelina"
,
"Emeline"
,
"Emelita"
,
"Emelyne"
,
"Emera"
,
"Emilee"
,
"Emili"
,
"Emilia"
,
"Emilie"
,
"Emiline"
,
"Emily"
,
"Emlyn"
,
"Emlynn"
,
"Emlynne"
,
"Emma"
,
"Emmalee"
,
"Emmaline"
,
"Emmalyn"
,
"Emmalynn"
,
"Emmalynne"
,
"Emmeline"
,
"Emmey"
,
"Emmi"
,
"Emmie"
,
"Emmy"
,
"Emmye"
,
"Emogene"
,
"Emyle"
,
"Emylee"
,
"Engracia"
,
"Enid"
,
"Enrica"
,
"Enrichetta"
,
"Enrika"
,
"Enriqueta"
,
"Eolanda"
,
"Eolande"
,
"Eran"
,
"Erda"
,
"Erena"
,
"Erica"
,
"Ericha"
,
"Ericka"
,
"Erika"
,
"Erin"
,
"Erina"
,
"Erinn"
,
"Erinna"
,
"Erma"
,
"Ermengarde"
,
"Ermentrude"
,
"Ermina"
,
"Erminia"
,
"Erminie"
,
"Erna"
,
"Ernaline"
,
"Ernesta"
,
"Ernestine"
,
"Ertha"
,
"Eryn"
,
"Esma"
,
"Esmaria"
,
"Esme"
,
"Esmeralda"
,
"Essa"
,
"Essie"
,
"Essy"
,
"Esta"
,
"Estel"
,
"Estele"
,
"Estell"
,
"Estella"
,
"Estelle"
,
"Ester"
,
"Esther"
,
"Estrella"
,
"Estrellita"
,
"Ethel"
,
"Ethelda"
,
"Ethelin"
,
"Ethelind"
,
"Etheline"
,
"Ethelyn"
,
"Ethyl"
,
"Etta"
,
"Etti"
,
"Ettie"
,
"Etty"
,
"Eudora"
,
"Eugenia"
,
"Eugenie"
,
"Eugine"
,
"Eula"
,
"Eulalie"
,
"Eunice"
,
"Euphemia"
,
"Eustacia"
,
"Eva"
,
"Evaleen"
,
"Evangelia"
,
"Evangelin"
,
"Evangelina"
,
"Evangeline"
,
"Evania"
,
"Evanne"
,
"Eve"
,
"Eveleen"
,
"Evelina"
,
"Eveline"
,
"Evelyn"
,
"Evey"
,
"Evie"
,
"Evita"
,
"Evonne"
,
"Evvie"
,
"Evvy"
,
"Evy"
,
"Eyde"
,
"Eydie"
,
"Ezmeralda"
,
"Fae"
,
"Faina"
,
"Faith"
,
"Fallon"
,
"Fan"
,
"Fanchette"
,
"Fanchon"
,
"Fancie"
,
"Fancy"
,
"Fanechka"
,
"Fania"
,
"Fanni"
,
"Fannie"
,
"Fanny"
,
"Fanya"
,
"Fara"
,
"Farah"
,
"Farand"
,
"Farica"
,
"Farra"
,
"Farrah"
,
"Farrand"
,
"Faun"
,
"Faunie"
,
"Faustina"
,
"Faustine"
,
"Fawn"
,
"Fawne"
,
"Fawnia"
,
"Fay"
,
"Faydra"
,
"Faye"
,
"Fayette"
,
"Fayina"
,
"Fayre"
,
"Fayth"
,
"Faythe"
,
"Federica"
,
"Fedora"
,
"Felecia"
,
"Felicdad"
,
"Felice"
,
"Felicia"
,
"Felicity"
,
"Felicle"
,
"Felipa"
,
"Felisha"
,
"Felita"
,
"Feliza"
,
"Fenelia"
,
"Feodora"
,
"Ferdinanda"
,
"Ferdinande"
,
"Fern"
,
"Fernanda"
,
"Fernande"
,
"Fernandina"
,
"Ferne"
,
"Fey"
,
"Fiann"
,
"Fianna"
,
"Fidela"
,
"Fidelia"
,
"Fidelity"
,
"Fifi"
,
"Fifine"
,
"Filia"
,
"Filide"
,
"Filippa"
,
"Fina"
,
"Fiona"
,
"Fionna"
,
"Fionnula"
,
"Fiorenze"
,
"Fleur"
,
"Fleurette"
,
"Flo"
,
"Flor"
,
"Flora"
,
"Florance"
,
"Flore"
,
"Florella"
,
"Florence"
,
"Florencia"
,
"Florentia"
,
"Florenza"
,
"Florette"
,
"Flori"
,
"Floria"
,
"Florida"
,
"Florie"
,
"Florina"
,
"Florinda"
,
"Floris"
,
"Florri"
,
"Florrie"
,
"Florry"
,
"Flory"
,
"Flossi"
,
"Flossie"
,
"Flossy"
,
"Flss"
,
"Fran"
,
"Francene"
,
"Frances"
,
"Francesca"
,
"Francine"
,
"Francisca"
,
"Franciska"
,
"Francoise"
,
"Francyne"
,
"Frank"
,
"Frankie"
,
"Franky"
,
"Franni"
,
"Frannie"
,
"Franny"
,
"Frayda"
,
"Fred"
,
"Freda"
,
"Freddi"
,
"Freddie"
,
"Freddy"
,
"Fredelia"
,
"Frederica"
,
"Fredericka"
,
"Frederique"
,
"Fredi"
,
"Fredia"
,
"Fredra"
,
"Fredrika"
,
"Freida"
,
"Frieda"
,
"Friederike"
,
"Fulvia"
,
"Gabbey"
,
"Gabbi"
,
"Gabbie"
,
"Gabey"
,
"Gabi"
,
"Gabie"
,
"Gabriel"
,
"Gabriela"
,
"Gabriell"
,
"Gabriella"
,
"Gabrielle"
,
"Gabriellia"
,
"Gabrila"
,
"Gaby"
,
"Gae"
,
"Gael"
,
"Gail"
,
"Gale"
,
"Gale"
,
"Galina"
,
"Garland"
,
"Garnet"
,
"Garnette"
,
"Gates"
,
"Gavra"
,
"Gavrielle"
,
"Gay"
,
"Gaye"
,
"Gayel"
,
"Gayla"
,
"Gayle"
,
"Gayleen"
,
"Gaylene"
,
"Gaynor"
,
"Gelya"
,
"Gena"
,
"Gene"
,
"Geneva"
,
"Genevieve"
,
"Genevra"
,
"Genia"
,
"Genna"
,
"Genni"
,
"Gennie"
,
"Gennifer"
,
"Genny"
,
"Genovera"
,
"Genvieve"
,
"George"
,
"Georgeanna"
,
"Georgeanne"
,
"Georgena"
,
"Georgeta"
,
"Georgetta"
,
"Georgette"
,
"Georgia"
,
"Georgiana"
,
"Georgianna"
,
"Georgianne"
,
"Georgie"
,
"Georgina"
,
"Georgine"
,
"Geralda"
,
"Geraldine"
,
"Gerda"
,
"Gerhardine"
,
"Geri"
,
"Gerianna"
,
"Gerianne"
,
"Gerladina"
,
"Germain"
,
"Germaine"
,
"Germana"
,
"Gerri"
,
"Gerrie"
,
"Gerrilee"
,
"Gerry"
,
"Gert"
,
"Gerta"
,
"Gerti"
,
"Gertie"
,
"Gertrud"
,
"Gertruda"
,
"Gertrude"
,
"Gertrudis"
,
"Gerty"
,
"Giacinta"
,
"Giana"
,
"Gianina"
,
"Gianna"
,
"Gigi"
,
"Gilberta"
,
"Gilberte"
,
"Gilbertina"
,
"Gilbertine"
,
"Gilda"
,
"Gilemette"
,
"Gill"
,
"Gillan"
,
"Gilli"
,
"Gillian"
,
"Gillie"
,
"Gilligan"
,
"Gilly"
,
"Gina"
,
"Ginelle"
,
"Ginevra"
,
"Ginger"
,
"Ginni"
,
"Ginnie"
,
"Ginnifer"
,
"Ginny"
,
"Giorgia"
,
"Giovanna"
,
"Gipsy"
,
"Giralda"
,
"Gisela"
,
"Gisele"
,
"Gisella"
,
"Giselle"
,
"Giuditta"
,
"Giulia"
,
"Giulietta"
,
"Giustina"
,
"Gizela"
,
"Glad"
,
"Gladi"
,
"Gladys"
,
"Gleda"
,
"Glen"
,
"Glenda"
,
"Glenine"
,
"Glenn"
,
"Glenna"
,
"Glennie"
,
"Glennis"
,
"Glori"
,
"Gloria"
,
"Gloriana"
,
"Gloriane"
,
"Glory"
,
"Glyn"
,
"Glynda"
,
"Glynis"
,
"Glynnis"
,
"Gnni"
,
"Godiva"
,
"Golda"
,
"Goldarina"
,
"Goldi"
,
"Goldia"
,
"Goldie"
,
"Goldina"
,
"Goldy"
,
"Grace"
,
"Gracia"
,
"Gracie"
,
"Grata"
,
"Gratia"
,
"Gratiana"
,
"Gray"
,
"Grayce"
,
"Grazia"
,
"Greer"
,
"Greta"
,
"Gretal"
,
"Gretchen"
,
"Grete"
,
"Gretel"
,
"Grethel"
,
"Gretna"
,
"Gretta"
,
"Grier"
,
"Griselda"
,
"Grissel"
,
"Guendolen"
,
"Guenevere"
,
"Guenna"
,
"Guglielma"
,
"Gui"
,
"Guillema"
,
"Guillemette"
,
"Guinevere"
,
"Guinna"
,
"Gunilla"
,
"Gus"
,
"Gusella"
,
"Gussi"
,
"Gussie"
,
"Gussy"
,
"Gusta"
,
"Gusti"
,
"Gustie"
,
"Gusty"
,
"Gwen"
,
"Gwendolen"
,
"Gwendolin"
,
"Gwendolyn"
,
"Gweneth"
,
"Gwenette"
,
"Gwenneth"
,
"Gwenni"
,
"Gwennie"
,
"Gwenny"
,
"Gwenora"
,
"Gwenore"
,
"Gwyn"
,
"Gwyneth"
,
"Gwynne"
,
"Gypsy"
,
"Hadria"
,
"Hailee"
,
"Haily"
,
"Haleigh"
,
"Halette"
,
"Haley"
,
"Hali"
,
"Halie"
,
"Halimeda"
,
"Halley"
,
"Halli"
,
"Hallie"
,
"Hally"
,
"Hana"
,
"Hanna"
,
"Hannah"
,
"Hanni"
,
"Hannie"
,
"Hannis"
,
"Hanny"
,
"Happy"
,
"Harlene"
,
"Harley"
,
"Harli"
,
"Harlie"
,
"Harmonia"
,
"Harmonie"
,
"Harmony"
,
"Harri"
,
"Harrie"
,
"Harriet"
,
"Harriett"
,
"Harrietta"
,
"Harriette"
,
"Harriot"
,
"Harriott"
,
"Hatti"
,
"Hattie"
,
"Hatty"
,
"Hayley"
,
"Hazel"
,
"Heath"
,
"Heather"
,
"Heda"
,
"Hedda"
,
"Heddi"
,
"Heddie"
,
"Hedi"
,
"Hedvig"
,
"Hedvige"
,
"Hedwig"
,
"Hedwiga"
,
"Hedy"
,
"Heida"
,
"Heidi"
,
"Heidie"
,
"Helaina"
,
"Helaine"
,
"Helen"
,
"Helen-Elizabeth"
,
"Helena"
,
"Helene"
,
"Helenka"
,
"Helga"
,
"Helge"
,
"Helli"
,
"Heloise"
,
"Helsa"
,
"Helyn"
,
"Hendrika"
,
"Henka"
,
"Henrie"
,
"Henrieta"
,
"Henrietta"
,
"Henriette"
,
"Henryetta"
,
"Hephzibah"
,
"Hermia"
,
"Hermina"
,
"Hermine"
,
"Herminia"
,
"Hermione"
,
"Herta"
,
"Hertha"
,
"Hester"
,
"Hesther"
,
"Hestia"
,
"Hetti"
,
"Hettie"
,
"Hetty"
,
"Hilary"
,
"Hilda"
,
"Hildagard"
,
"Hildagarde"
,
"Hilde"
,
"Hildegaard"
,
"Hildegarde"
,
"Hildy"
,
"Hillary"
,
"Hilliary"
,
"Hinda"
,
"Holli"
,
"Hollie"
,
"Holly"
,
"Holly-Anne"
,
"Hollyanne"
,
"Honey"
,
"Honor"
,
"Honoria"
,
"Hope"
,
"Horatia"
,
"Hortense"
,
"Hortensia"
,
"Hulda"
,
"Hyacinth"
,
"Hyacintha"
,
"Hyacinthe"
,
"Hyacinthia"
,
"Hyacinthie"
,
"Hynda"
,
"Ianthe"
,
"Ibbie"
,
"Ibby"
,
"Ida"
,
"Idalia"
,
"Idalina"
,
"Idaline"
,
"Idell"
,
"Idelle"
,
"Idette"
,
"Ileana"
,
"Ileane"
,
"Ilene"
,
"Ilise"
,
"Ilka"
,
"Illa"
,
"Ilsa"
,
"Ilse"
,
"Ilysa"
,
"Ilyse"
,
"Ilyssa"
,
"Imelda"
,
"Imogen"
,
"Imogene"
,
"Imojean"
,
"Ina"
,
"Indira"
,
"Ines"
,
"Inesita"
,
"Inessa"
,
"Inez"
,
"Inga"
,
"Ingaberg"
,
"Ingaborg"
,
"Inge"
,
"Ingeberg"
,
"Ingeborg"
,
"Inger"
,
"Ingrid"
,
"Ingunna"
,
"Inna"
,
"Iolande"
,
"Iolanthe"
,
"Iona"
,
"Iormina"
,
"Ira"
,
"Irena"
,
"Irene"
,
"Irina"
,
"Iris"
,
"Irita"
,
"Irma"
,
"Isa"
,
"Isabel"
,
"Isabelita"
,
"Isabella"
,
"Isabelle"
,
"Isadora"
,
"Isahella"
,
"Iseabal"
,
"Isidora"
,
"Isis"
,
"Isobel"
,
"Issi"
,
"Issie"
,
"Issy"
,
"Ivett"
,
"Ivette"
,
"Ivie"
,
"Ivonne"
,
"Ivory"
,
"Ivy"
,
"Izabel"
,
"Jacenta"
,
"Jacinda"
,
"Jacinta"
,
"Jacintha"
,
"Jacinthe"
,
"Jackelyn"
,
"Jacki"
,
"Jackie"
,
"Jacklin"
,
"Jacklyn"
,
"Jackquelin"
,
"Jackqueline"
,
"Jacky"
,
"Jaclin"
,
"Jaclyn"
,
"Jacquelin"
,
"Jacqueline"
,
"Jacquelyn"
,
"Jacquelynn"
,
"Jacquenetta"
,
"Jacquenette"
,
"Jacquetta"
,
"Jacquette"
,
"Jacqui"
,
"Jacquie"
,
"Jacynth"
,
"Jada"
,
"Jade"
,
"Jaime"
,
"Jaimie"
,
"Jaine"
,
"Jami"
,
"Jamie"
,
"Jamima"
,
"Jammie"
,
"Jan"
,
"Jana"
,
"Janaya"
,
"Janaye"
,
"Jandy"
,
"Jane"
,
"Janean"
,
"Janeczka"
,
"Janeen"
,
"Janel"
,
"Janela"
,
"Janella"
,
"Janelle"
,
"Janene"
,
"Janenna"
,
"Janessa"
,
"Janet"
,
"Janeta"
,
"Janetta"
,
"Janette"
,
"Janeva"
,
"Janey"
,
"Jania"
,
"Janice"
,
"Janie"
,
"Janifer"
,
"Janina"
,
"Janine"
,
"Janis"
,
"Janith"
,
"Janka"
,
"Janna"
,
"Jannel"
,
"Jannelle"
,
"Janot"
,
"Jany"
,
"Jaquelin"
,
"Jaquelyn"
,
"Jaquenetta"
,
"Jaquenette"
,
"Jaquith"
,
"Jasmin"
,
"Jasmina"
,
"Jasmine"
,
"Jayme"
,
"Jaymee"
,
"Jayne"
,
"Jaynell"
,
"Jazmin"
,
"Jean"
,
"Jeana"
,
"Jeane"
,
"Jeanelle"
,
"Jeanette"
,
"Jeanie"
,
"Jeanine"
,
"Jeanna"
,
"Jeanne"
,
"Jeannette"
,
"Jeannie"
,
"Jeannine"
,
"Jehanna"
,
"Jelene"
,
"Jemie"
,
"Jemima"
,
"Jemimah"
,
"Jemmie"
,
"Jemmy"
,
"Jen"
,
"Jena"
,
"Jenda"
,
"Jenelle"
,
"Jeni"
,
"Jenica"
,
"Jeniece"
,
"Jenifer"
,
"Jeniffer"
,
"Jenilee"
,
"Jenine"
,
"Jenn"
,
"Jenna"
,
"Jennee"
,
"Jennette"
,
"Jenni"
,
"Jennica"
,
"Jennie"
,
"Jennifer"
,
"Jennilee"
,
"Jennine"
,
"Jenny"
,
"Jeralee"
,
"Jere"
,
"Jeri"
,
"Jermaine"
,
"Jerrie"
,
"Jerrilee"
,
"Jerrilyn"
,
"Jerrine"
,
"Jerry"
,
"Jerrylee"
,
"Jess"
,
"Jessa"
,
"Jessalin"
,
"Jessalyn"
,
"Jessamine"
,
"Jessamyn"
,
"Jesse"
,
"Jesselyn"
,
"Jessi"
,
"Jessica"
,
"Jessie"
,
"Jessika"
,
"Jessy"
,
"Jewel"
,
"Jewell"
,
"Jewelle"
,
"Jill"
,
"Jillana"
,
"Jillane"
,
"Jillayne"
,
"Jilleen"
,
"Jillene"
,
"Jilli"
,
"Jillian"
,
"Jillie"
,
"Jilly"
,
"Jinny"
,
"Jo"
,
"Jo Ann"
,
"Jo-Ann"
,
"Jo-Anne"
,
"Joan"
,
"Joana"
,
"Joane"
,
"Joanie"
,
"Joann"
,
"Joanna"
,
"Joanne"
,
"Joannes"
,
"Jobey"
,
"Jobi"
,
"Jobie"
,
"Jobina"
,
"Joby"
,
"Jobye"
,
"Jobyna"
,
"Jocelin"
,
"Joceline"
,
"Jocelyn"
,
"Jocelyne"
,
"Jodee"
,
"Jodi"
,
"Jodie"
,
"Jody"
,
"Joeann"
,
"Joela"
,
"Joelie"
,
"Joell"
,
"Joella"
,
"Joelle"
,
"Joellen"
,
"Joelly"
,
"Joellyn"
,
"Joelynn"
,
"Joete"
,
"Joey"
,
"Johanna"
,
"Johannah"
,
"Johna"
,
"Johnath"
,
"Johnette"
,
"Johnna"
,
"Joice"
,
"Jojo"
,
"Jolee"
,
"Joleen"
,
"Jolene"
,
"Joletta"
,
"Joli"
,
"Jolie"
,
"Joline"
,
"Joly"
,
"Jolyn"
,
"Jolynn"
,
"Jonell"
,
"Joni"
,
"Jonie"
,
"Jonis"
,
"Jordain"
,
"Jordan"
,
"Jordana"
,
"Jordanna"
,
"Jorey"
,
"Jori"
,
"Jorie"
,
"Jorrie"
,
"Jorry"
,
"Joscelin"
,
"Josee"
,
"Josefa"
,
"Josefina"
,
"Josepha"
,
"Josephina"
,
"Josephine"
,
"Josey"
,
"Josi"
,
"Josie"
,
"Josselyn"
,
"Josy"
,
"Jourdan"
,
"Joy"
,
"Joya"
,
"Joyan"
,
"Joyann"
,
"Joyce"
,
"Joycelin"
,
"Joye"
,
"Jsandye"
,
"Juana"
,
"Juanita"
,
"Judi"
,
"Judie"
,
"Judith"
,
"Juditha"
,
"Judy"
,
"Judye"
,
"Juieta"
,
"Julee"
,
"Juli"
,
"Julia"
,
"Juliana"
,
"Juliane"
,
"Juliann"
,
"Julianna"
,
"Julianne"
,
"Julie"
,
"Julienne"
,
"Juliet"
,
"Julieta"
,
"Julietta"
,
"Juliette"
,
"Julina"
,
"Juline"
,
"Julissa"
,
"Julita"
,
"June"
,
"Junette"
,
"Junia"
,
"Junie"
,
"Junina"
,
"Justina"
,
"Justine"
,
"Justinn"
,
"Jyoti"
,
"Kacey"
,
"Kacie"
,
"Kacy"
,
"Kaela"
,
"Kai"
,
"Kaia"
,
"Kaila"
,
"Kaile"
,
"Kailey"
,
"Kaitlin"
,
"Kaitlyn"
,
"Kaitlynn"
,
"Kaja"
,
"Kakalina"
,
"Kala"
,
"Kaleena"
,
"Kali"
,
"Kalie"
,
"Kalila"
,
"Kalina"
,
"Kalinda"
,
"Kalindi"
,
"Kalli"
,
"Kally"
,
"Kameko"
,
"Kamila"
,
"Kamilah"
,
"Kamillah"
,
"Kandace"
,
"Kandy"
,
"Kania"
,
"Kanya"
,
"Kara"
,
"Kara-Lynn"
,
"Karalee"
,
"Karalynn"
,
"Kare"
,
"Karee"
,
"Karel"
,
"Karen"
,
"Karena"
,
"Kari"
,
"Karia"
,
"Karie"
,
"Karil"
,
"Karilynn"
,
"Karin"
,
"Karina"
,
"Karine"
,
"Kariotta"
,
"Karisa"
,
"Karissa"
,
"Karita"
,
"Karla"
,
"Karlee"
,
"Karleen"
,
"Karlen"
,
"Karlene"
,
"Karlie"
,
"Karlotta"
,
"Karlotte"
,
"Karly"
,
"Karlyn"
,
"Karmen"
,
"Karna"
,
"Karol"
,
"Karola"
,
"Karole"
,
"Karolina"
,
"Karoline"
,
"Karoly"
,
"Karon"
,
"Karrah"
,
"Karrie"
,
"Karry"
,
"Kary"
,
"Karyl"
,
"Karylin"
,
"Karyn"
,
"Kasey"
,
"Kass"
,
"Kassandra"
,
"Kassey"
,
"Kassi"
,
"Kassia"
,
"Kassie"
,
"Kat"
,
"Kata"
,
"Katalin"
,
"Kate"
,
"Katee"
,
"Katerina"
,
"Katerine"
,
"Katey"
,
"Kath"
,
"Katha"
,
"Katharina"
,
"Katharine"
,
"Katharyn"
,
"Kathe"
,
"Katherina"
,
"Katherine"
,
"Katheryn"
,
"Kathi"
,
"Kathie"
,
"Kathleen"
,
"Kathlin"
,
"Kathrine"
,
"Kathryn"
,
"Kathryne"
,
"Kathy"
,
"Kathye"
,
"Kati"
,
"Katie"
,
"Katina"
,
"Katine"
,
"Katinka"
,
"Katleen"
,
"Katlin"
,
"Katrina"
,
"Katrine"
,
"Katrinka"
,
"Katti"
,
"Kattie"
,
"Katuscha"
,
"Katusha"
,
"Katy"
,
"Katya"
,
"Kay"
,
"Kaycee"
,
"Kaye"
,
"Kayla"
,
"Kayle"
,
"Kaylee"
,
"Kayley"
,
"Kaylil"
,
"Kaylyn"
,
"Keeley"
,
"Keelia"
,
"Keely"
,
"Kelcey"
,
"Kelci"
,
"Kelcie"
,
"Kelcy"
,
"Kelila"
,
"Kellen"
,
"Kelley"
,
"Kelli"
,
"Kellia"
,
"Kellie"
,
"Kellina"
,
"Kellsie"
,
"Kelly"
,
"Kellyann"
,
"Kelsey"
,
"Kelsi"
,
"Kelsy"
,
"Kendra"
,
"Kendre"
,
"Kenna"
,
"Keri"
,
"Keriann"
,
"Kerianne"
,
"Kerri"
,
"Kerrie"
,
"Kerrill"
,
"Kerrin"
,
"Kerry"
,
"Kerstin"
,
"Kesley"
,
"Keslie"
,
"Kessia"
,
"Kessiah"
,
"Ketti"
,
"Kettie"
,
"Ketty"
,
"Kevina"
,
"Kevyn"
,
"Ki"
,
"Kiah"
,
"Kial"
,
"Kiele"
,
"Kiersten"
,
"Kikelia"
,
"Kiley"
,
"Kim"
,
"Kimberlee"
,
"Kimberley"
,
"Kimberli"
,
"Kimberly"
,
"Kimberlyn"
,
"Kimbra"
,
"Kimmi"
,
"Kimmie"
,
"Kimmy"
,
"Kinna"
,
"Kip"
,
"Kipp"
,
"Kippie"
,
"Kippy"
,
"Kira"
,
"Kirbee"
,
"Kirbie"
,
"Kirby"
,
"Kiri"
,
"Kirsten"
,
"Kirsteni"
,
"Kirsti"
,
"Kirstin"
,
"Kirstyn"
,
"Kissee"
,
"Kissiah"
,
"Kissie"
,
"Kit"
,
"Kitti"
,
"Kittie"
,
"Kitty"
,
"Kizzee"
,
"Kizzie"
,
"Klara"
,
"Klarika"
,
"Klarrisa"
,
"Konstance"
,
"Konstanze"
,
"Koo"
,
"Kora"
,
"Koral"
,
"Koralle"
,
"Kordula"
,
"Kore"
,
"Korella"
,
"Koren"
,
"Koressa"
,
"Kori"
,
"Korie"
,
"Korney"
,
"Korrie"
,
"Korry"
,
"Kris"
,
"Krissie"
,
"Krissy"
,
"Krista"
,
"Kristal"
,
"Kristan"
,
"Kriste"
,
"Kristel"
,
"Kristen"
,
"Kristi"
,
"Kristien"
,
"Kristin"
,
"Kristina"
,
"Kristine"
,
"Kristy"
,
"Kristyn"
,
"Krysta"
,
"Krystal"
,
"Krystalle"
,
"Krystle"
,
"Krystyna"
,
"Kyla"
,
"Kyle"
,
"Kylen"
,
"Kylie"
,
"Kylila"
,
"Kylynn"
,
"Kym"
,
"Kynthia"
,
"Kyrstin"
,
"La Verne"
,
"Lacee"
,
"Lacey"
,
"Lacie"
,
"Lacy"
,
"Ladonna"
,
"Laetitia"
,
"Laina"
,
"Lainey"
,
"Lana"
,
"Lanae"
,
"Lane"
,
"Lanette"
,
"Laney"
,
"Lani"
,
"Lanie"
,
"Lanita"
,
"Lanna"
,
"Lanni"
,
"Lanny"
,
"Lara"
,
"Laraine"
,
"Lari"
,
"Larina"
,
"Larine"
,
"Larisa"
,
"Larissa"
,
"Lark"
,
"Laryssa"
,
"Latashia"
,
"Latia"
,
"Latisha"
,
"Latrena"
,
"Latrina"
,
"Laura"
,
"Lauraine"
,
"Laural"
,
"Lauralee"
,
"Laure"
,
"Lauree"
,
"Laureen"
,
"Laurel"
,
"Laurella"
,
"Lauren"
,
"Laurena"
,
"Laurene"
,
"Lauretta"
,
"Laurette"
,
"Lauri"
,
"Laurianne"
,
"Laurice"
,
"Laurie"
,
"Lauryn"
,
"Lavena"
,
"Laverna"
,
"Laverne"
,
"Lavina"
,
"Lavinia"
,
"Lavinie"
,
"Layla"
,
"Layne"
,
"Layney"
,
"Lea"
,
"Leah"
,
"Leandra"
,
"Leann"
,
"Leanna"
,
"Leanor"
,
"Leanora"
,
"Lebbie"
,
"Leda"
,
"Lee"
,
"Leeann"
,
"Leeanne"
,
"Leela"
,
"Leelah"
,
"Leena"
,
"Leesa"
,
"Leese"
,
"Legra"
,
"Leia"
,
"Leigh"
,
"Leigha"
,
"Leila"
,
"Leilah"
,
"Leisha"
,
"Lela"
,
"Lelah"
,
"Leland"
,
"Lelia"
,
"Lena"
,
"Lenee"
,
"Lenette"
,
"Lenka"
,
"Lenna"
,
"Lenora"
,
"Lenore"
,
"Leodora"
,
"Leoine"
,
"Leola"
,
"Leoline"
,
"Leona"
,
"Leonanie"
,
"Leone"
,
"Leonelle"
,
"Leonie"
,
"Leonora"
,
"Leonore"
,
"Leontine"
,
"Leontyne"
,
"Leora"
,
"Leshia"
,
"Lesley"
,
"Lesli"
,
"Leslie"
,
"Lesly"
,
"Lesya"
,
"Leta"
,
"Lethia"
,
"Leticia"
,
"Letisha"
,
"Letitia"
,
"Letizia"
,
"Letta"
,
"Letti"
,
"Lettie"
,
"Letty"
,
"Lexi"
,
"Lexie"
,
"Lexine"
,
"Lexis"
,
"Lexy"
,
"Leyla"
,
"Lezlie"
,
"Lia"
,
"Lian"
,
"Liana"
,
"Liane"
,
"Lianna"
,
"Lianne"
,
"Lib"
,
"Libbey"
,
"Libbi"
,
"Libbie"
,
"Libby"
,
"Licha"
,
"Lida"
,
"Lidia"
,
"Liesa"
,
"Lil"
,
"Lila"
,
"Lilah"
,
"Lilas"
,
"Lilia"
,
"Lilian"
,
"Liliane"
,
"Lilias"
,
"Lilith"
,
"Lilla"
,
"Lilli"
,
"Lillian"
,
"Lillis"
,
"Lilllie"
,
"Lilly"
,
"Lily"
,
"Lilyan"
,
"Lin"
,
"Lina"
,
"Lind"
,
"Linda"
,
"Lindi"
,
"Lindie"
,
"Lindsay"
,
"Lindsey"
,
"Lindsy"
,
"Lindy"
,
"Linea"
,
"Linell"
,
"Linet"
,
"Linette"
,
"Linn"
,
"Linnea"
,
"Linnell"
,
"Linnet"
,
"Linnie"
,
"Linzy"
,
"Lira"
,
"Lisa"
,
"Lisabeth"
,
"Lisbeth"
,
"Lise"
,
"Lisetta"
,
"Lisette"
,
"Lisha"
,
"Lishe"
,
"Lissa"
,
"Lissi"
,
"Lissie"
,
"Lissy"
,
"Lita"
,
"Liuka"
,
"Liv"
,
"Liva"
,
"Livia"
,
"Livvie"
,
"Livvy"
,
"Livvyy"
,
"Livy"
,
"Liz"
,
"Liza"
,
"Lizabeth"
,
"Lizbeth"
,
"Lizette"
,
"Lizzie"
,
"Lizzy"
,
"Loella"
,
"Lois"
,
"Loise"
,
"Lola"
,
"Loleta"
,
"Lolita"
,
"Lolly"
,
"Lona"
,
"Lonee"
,
"Loni"
,
"Lonna"
,
"Lonni"
,
"Lonnie"
,
"Lora"
,
"Lorain"
,
"Loraine"
,
"Loralee"
,
"Loralie"
,
"Loralyn"
,
"Loree"
,
"Loreen"
,
"Lorelei"
,
"Lorelle"
,
"Loren"
,
"Lorena"
,
"Lorene"
,
"Lorenza"
,
"Loretta"
,
"Lorette"
,
"Lori"
,
"Loria"
,
"Lorianna"
,
"Lorianne"
,
"Lorie"
,
"Lorilee"
,
"Lorilyn"
,
"Lorinda"
,
"Lorine"
,
"Lorita"
,
"Lorna"
,
"Lorne"
,
"Lorraine"
,
"Lorrayne"
,
"Lorri"
,
"Lorrie"
,
"Lorrin"
,
"Lorry"
,
"Lory"
,
"Lotta"
,
"Lotte"
,
"Lotti"
,
"Lottie"
,
"Lotty"
,
"Lou"
,
"Louella"
,
"Louisa"
,
"Louise"
,
"Louisette"
,
"Loutitia"
,
"Lu"
,
"Luce"
,
"Luci"
,
"Lucia"
,
"Luciana"
,
"Lucie"
,
"Lucienne"
,
"Lucila"
,
"Lucilia"
,
"Lucille"
,
"Lucina"
,
"Lucinda"
,
"Lucine"
,
"Lucita"
,
"Lucky"
,
"Lucretia"
,
"Lucy"
,
"Ludovika"
,
"Luella"
,
"Luelle"
,
"Luisa"
,
"Luise"
,
"Lula"
,
"Lulita"
,
"Lulu"
,
"Lura"
,
"Lurette"
,
"Lurleen"
,
"Lurlene"
,
"Lurline"
,
"Lusa"
,
"Luz"
,
"Lyda"
,
"Lydia"
,
"Lydie"
,
"Lyn"
,
"Lynda"
,
"Lynde"
,
"Lyndel"
,
"Lyndell"
,
"Lyndsay"
,
"Lyndsey"
,
"Lyndsie"
,
"Lyndy"
,
"Lynea"
,
"Lynelle"
,
"Lynett"
,
"Lynette"
,
"Lynn"
,
"Lynna"
,
"Lynne"
,
"Lynnea"
,
"Lynnell"
,
"Lynnelle"
,
"Lynnet"
,
"Lynnett"
,
"Lynnette"
,
"Lynsey"
,
"Lyssa"
,
"Mab"
,
"Mabel"
,
"Mabelle"
,
"Mable"
,
"Mada"
,
"Madalena"
,
"Madalyn"
,
"Maddalena"
,
"Maddi"
,
"Maddie"
,
"Maddy"
,
"Madel"
,
"Madelaine"
,
"Madeleine"
,
"Madelena"
,
"Madelene"
,
"Madelin"
,
"Madelina"
,
"Madeline"
,
"Madella"
,
"Madelle"
,
"Madelon"
,
"Madelyn"
,
"Madge"
,
"Madlen"
,
"Madlin"
,
"Madonna"
,
"Mady"
,
"Mae"
,
"Maegan"
,
"Mag"
,
"Magda"
,
"Magdaia"
,
"Magdalen"
,
"Magdalena"
,
"Magdalene"
,
"Maggee"
,
"Maggi"
,
"Maggie"
,
"Maggy"
,
"Mahala"
,
"Mahalia"
,
"Maia"
,
"Maible"
,
"Maiga"
,
"Maighdiln"
,
"Mair"
,
"Maire"
,
"Maisey"
,
"Maisie"
,
"Maitilde"
,
"Mala"
,
"Malanie"
,
"Malena"
,
"Malia"
,
"Malina"
,
"Malinda"
,
"Malinde"
,
"Malissa"
,
"Malissia"
,
"Mallissa"
,
"Mallorie"
,
"Mallory"
,
"Malorie"
,
"Malory"
,
"Malva"
,
"Malvina"
,
"Malynda"
,
"Mame"
,
"Mamie"
,
"Manda"
,
"Mandi"
,
"Mandie"
,
"Mandy"
,
"Manon"
,
"Manya"
,
"Mara"
,
"Marabel"
,
"Marcela"
,
"Marcelia"
,
"Marcella"
,
"Marcelle"
,
"Marcellina"
,
"Marcelline"
,
"Marchelle"
,
"Marci"
,
"Marcia"
,
"Marcie"
,
"Marcile"
,
"Marcille"
,
"Marcy"
,
"Mareah"
,
"Maren"
,
"Marena"
,
"Maressa"
,
"Marga"
,
"Margalit"
,
"Margalo"
,
"Margaret"
,
"Margareta"
,
"Margarete"
,
"Margaretha"
,
"Margarethe"
,
"Margaretta"
,
"Margarette"
,
"Margarita"
,
"Margaux"
,
"Marge"
,
"Margeaux"
,
"Margery"
,
"Marget"
,
"Margette"
,
"Margi"
,
"Margie"
,
"Margit"
,
"Margo"
,
"Margot"
,
"Margret"
,
"Marguerite"
,
"Margy"
,
"Mari"
,
"Maria"
,
"Mariam"
,
"Marian"
,
"Mariana"
,
"Mariann"
,
"Marianna"
,
"Marianne"
,
"Maribel"
,
"Maribelle"
,
"Maribeth"
,
"Marice"
,
"Maridel"
,
"Marie"
,
"Marie-Ann"
,
"Marie-Jeanne"
,
"Marieann"
,
"Mariejeanne"
,
"Mariel"
,
"Mariele"
,
"Marielle"
,
"Mariellen"
,
"Marietta"
,
"Mariette"
,
"Marigold"
,
"Marijo"
,
"Marika"
,
"Marilee"
,
"Marilin"
,
"Marillin"
,
"Marilyn"
,
"Marin"
,
"Marina"
,
"Marinna"
,
"Marion"
,
"Mariquilla"
,
"Maris"
,
"Marisa"
,
"Mariska"
,
"Marissa"
,
"Marita"
,
"Maritsa"
,
"Mariya"
,
"Marj"
,
"Marja"
,
"Marje"
,
"Marji"
,
"Marjie"
,
"Marjorie"
,
"Marjory"
,
"Marjy"
,
"Marketa"
,
"Marla"
,
"Marlane"
,
"Marleah"
,
"Marlee"
,
"Marleen"
,
"Marlena"
,
"Marlene"
,
"Marley"
,
"Marlie"
,
"Marline"
,
"Marlo"
,
"Marlyn"
,
"Marna"
,
"Marne"
,
"Marney"
,
"Marni"
,
"Marnia"
,
"Marnie"
,
"Marquita"
,
"Marrilee"
,
"Marris"
,
"Marrissa"
,
"Marsha"
,
"Marsiella"
,
"Marta"
,
"Martelle"
,
"Martguerita"
,
"Martha"
,
"Marthe"
,
"Marthena"
,
"Marti"
,
"Martica"
,
"Martie"
,
"Martina"
,
"Martita"
,
"Marty"
,
"Martynne"
,
"Mary"
,
"Marya"
,
"Maryann"
,
"Maryanna"
,
"Maryanne"
,
"Marybelle"
,
"Marybeth"
,
"Maryellen"
,
"Maryjane"
,
"Maryjo"
,
"Maryl"
,
"Marylee"
,
"Marylin"
,
"Marylinda"
,
"Marylou"
,
"Marylynne"
,
"Maryrose"
,
"Marys"
,
"Marysa"
,
"Masha"
,
"Matelda"
,
"Mathilda"
,
"Mathilde"
,
"Matilda"
,
"Matilde"
,
"Matti"
,
"Mattie"
,
"Matty"
,
"Maud"
,
"Maude"
,
"Maudie"
,
"Maura"
,
"Maure"
,
"Maureen"
,
"Maureene"
,
"Maurene"
,
"Maurine"
,
"Maurise"
,
"Maurita"
,
"Maurizia"
,
"Mavis"
,
"Mavra"
,
"Max"
,
"Maxi"
,
"Maxie"
,
"Maxine"
,
"Maxy"
,
"May"
,
"Maybelle"
,
"Maye"
,
"Mead"
,
"Meade"
,
"Meagan"
,
"Meaghan"
,
"Meara"
,
"Mechelle"
,
"Meg"
,
"Megan"
,
"Megen"
,
"Meggi"
,
"Meggie"
,
"Meggy"
,
"Meghan"
,
"Meghann"
,
"Mehetabel"
,
"Mei"
,
"Mel"
,
"Mela"
,
"Melamie"
,
"Melania"
,
"Melanie"
,
"Melantha"
,
"Melany"
,
"Melba"
,
"Melesa"
,
"Melessa"
,
"Melicent"
,
"Melina"
,
"Melinda"
,
"Melinde"
,
"Melisa"
,
"Melisande"
,
"Melisandra"
,
"Melisenda"
,
"Melisent"
,
"Melissa"
,
"Melisse"
,
"Melita"
,
"Melitta"
,
"Mella"
,
"Melli"
,
"Mellicent"
,
"Mellie"
,
"Mellisa"
,
"Mellisent"
,
"Melloney"
,
"Melly"
,
"Melodee"
,
"Melodie"
,
"Melody"
,
"Melonie"
,
"Melony"
,
"Melosa"
,
"Melva"
,
"Mercedes"
,
"Merci"
,
"Mercie"
,
"Mercy"
,
"Meredith"
,
"Meredithe"
,
"Meridel"
,
"Meridith"
,
"Meriel"
,
"Merilee"
,
"Merilyn"
,
"Meris"
,
"Merissa"
,
"Merl"
,
"Merla"
,
"Merle"
,
"Merlina"
,
"Merline"
,
"Merna"
,
"Merola"
,
"Merralee"
,
"Merridie"
,
"Merrie"
,
"Merrielle"
,
"Merrile"
,
"Merrilee"
,
"Merrili"
,
"Merrill"
,
"Merrily"
,
"Merry"
,
"Mersey"
,
"Meryl"
,
"Meta"
,
"Mia"
,
"Micaela"
,
"Michaela"
,
"Michaelina"
,
"Michaeline"
,
"Michaella"
,
"Michal"
,
"Michel"
,
"Michele"
,
"Michelina"
,
"Micheline"
,
"Michell"
,
"Michelle"
,
"Micki"
,
"Mickie"
,
"Micky"
,
"Midge"
,
"Mignon"
,
"Mignonne"
,
"Miguela"
,
"Miguelita"
,
"Mikaela"
,
"Mil"
,
"Mildred"
,
"Mildrid"
,
"Milena"
,
"Milicent"
,
"Milissent"
,
"Milka"
,
"Milli"
,
"Millicent"
,
"Millie"
,
"Millisent"
,
"Milly"
,
"Milzie"
,
"Mimi"
,
"Min"
,
"Mina"
,
"Minda"
,
"Mindy"
,
"Minerva"
,
"Minetta"
,
"Minette"
,
"Minna"
,
"Minnaminnie"
,
"Minne"
,
"Minni"
,
"Minnie"
,
"Minnnie"
,
"Minny"
,
"Minta"
,
"Miof Mela"
,
"Miquela"
,
"Mira"
,
"Mirabel"
,
"Mirabella"
,
"Mirabelle"
,
"Miran"
,
"Miranda"
,
"Mireielle"
,
"Mireille"
,
"Mirella"
,
"Mirelle"
,
"Miriam"
,
"Mirilla"
,
"Mirna"
,
"Misha"
,
"Missie"
,
"Missy"
,
"Misti"
,
"Misty"
,
"Mitzi"
,
"Modesta"
,
"Modestia"
,
"Modestine"
,
"Modesty"
,
"Moina"
,
"Moira"
,
"Moll"
,
"Mollee"
,
"Molli"
,
"Mollie"
,
"Molly"
,
"Mommy"
,
"Mona"
,
"Monah"
,
"Monica"
,
"Monika"
,
"Monique"
,
"Mora"
,
"Moreen"
,
"Morena"
,
"Morgan"
,
"Morgana"
,
"Morganica"
,
"Morganne"
,
"Morgen"
,
"Moria"
,
"Morissa"
,
"Morna"
,
"Moselle"
,
"Moyna"
,
"Moyra"
,
"Mozelle"
,
"Muffin"
,
"Mufi"
,
"Mufinella"
,
"Muire"
,
"Mureil"
,
"Murial"
,
"Muriel"
,
"Murielle"
,
"Myra"
,
"Myrah"
,
"Myranda"
,
"Myriam"
,
"Myrilla"
,
"Myrle"
,
"Myrlene"
,
"Myrna"
,
"Myrta"
,
"Myrtia"
,
"Myrtice"
,
"Myrtie"
,
"Myrtle"
,
"Nada"
,
"Nadean"
,
"Nadeen"
,
"Nadia"
,
"Nadine"
,
"Nadiya"
,
"Nady"
,
"Nadya"
,
"Nalani"
,
"Nan"
,
"Nana"
,
"Nananne"
,
"Nance"
,
"Nancee"
,
"Nancey"
,
"Nanci"
,
"Nancie"
,
"Nancy"
,
"Nanete"
,
"Nanette"
,
"Nani"
,
"Nanice"
,
"Nanine"
,
"Nannette"
,
"Nanni"
,
"Nannie"
,
"Nanny"
,
"Nanon"
,
"Naoma"
,
"Naomi"
,
"Nara"
,
"Nari"
,
"Nariko"
,
"Nat"
,
"Nata"
,
"Natala"
,
"Natalee"
,
"Natalie"
,
"Natalina"
,
"Nataline"
,
"Natalya"
,
"Natasha"
,
"Natassia"
,
"Nathalia"
,
"Nathalie"
,
"Natividad"
,
"Natka"
,
"Natty"
,
"Neala"
,
"Neda"
,
"Nedda"
,
"Nedi"
,
"Neely"
,
"Neila"
,
"Neile"
,
"Neilla"
,
"Neille"
,
"Nelia"
,
"Nelie"
,
"Nell"
,
"Nelle"
,
"Nelli"
,
"Nellie"
,
"Nelly"
,
"Nerissa"
,
"Nerita"
,
"Nert"
,
"Nerta"
,
"Nerte"
,
"Nerti"
,
"Nertie"
,
"Nerty"
,
"Nessa"
,
"Nessi"
,
"Nessie"
,
"Nessy"
,
"Nesta"
,
"Netta"
,
"Netti"
,
"Nettie"
,
"Nettle"
,
"Netty"
,
"Nevsa"
,
"Neysa"
,
"Nichol"
,
"Nichole"
,
"Nicholle"
,
"Nicki"
,
"Nickie"
,
"Nicky"
,
"Nicol"
,
"Nicola"
,
"Nicole"
,
"Nicolea"
,
"Nicolette"
,
"Nicoli"
,
"Nicolina"
,
"Nicoline"
,
"Nicolle"
,
"Nikaniki"
,
"Nike"
,
"Niki"
,
"Nikki"
,
"Nikkie"
,
"Nikoletta"
,
"Nikolia"
,
"Nina"
,
"Ninetta"
,
"Ninette"
,
"Ninnetta"
,
"Ninnette"
,
"Ninon"
,
"Nissa"
,
"Nisse"
,
"Nissie"
,
"Nissy"
,
"Nita"
,
"Nixie"
,
"Noami"
,
"Noel"
,
"Noelani"
,
"Noell"
,
"Noella"
,
"Noelle"
,
"Noellyn"
,
"Noelyn"
,
"Noemi"
,
"Nola"
,
"Nolana"
,
"Nolie"
,
"Nollie"
,
"Nomi"
,
"Nona"
,
"Nonah"
,
"Noni"
,
"Nonie"
,
"Nonna"
,
"Nonnah"
,
"Nora"
,
"Norah"
,
"Norean"
,
"Noreen"
,
"Norene"
,
"Norina"
,
"Norine"
,
"Norma"
,
"Norri"
,
"Norrie"
,
"Norry"
,
"Novelia"
,
"Nydia"
,
"Nyssa"
,
"Octavia"
,
"Odele"
,
"Odelia"
,
"Odelinda"
,
"Odella"
,
"Odelle"
,
"Odessa"
,
"Odetta"
,
"Odette"
,
"Odilia"
,
"Odille"
,
"Ofelia"
,
"Ofella"
,
"Ofilia"
,
"Ola"
,
"Olenka"
,
"Olga"
,
"Olia"
,
"Olimpia"
,
"Olive"
,
"Olivette"
,
"Olivia"
,
"Olivie"
,
"Oliy"
,
"Ollie"
,
"Olly"
,
"Olva"
,
"Olwen"
,
"Olympe"
,
"Olympia"
,
"Olympie"
,
"Ondrea"
,
"Oneida"
,
"Onida"
,
"Oona"
,
"Opal"
,
"Opalina"
,
"Opaline"
,
"Ophelia"
,
"Ophelie"
,
"Ora"
,
"Oralee"
,
"Oralia"
,
"Oralie"
,
"Oralla"
,
"Oralle"
,
"Orel"
,
"Orelee"
,
"Orelia"
,
"Orelie"
,
"Orella"
,
"Orelle"
,
"Oriana"
,
"Orly"
,
"Orsa"
,
"Orsola"
,
"Ortensia"
,
"Otha"
,
"Othelia"
,
"Othella"
,
"Othilia"
,
"Othilie"
,
"Ottilie"
,
"Page"
,
"Paige"
,
"Paloma"
,
"Pam"
,
"Pamela"
,
"Pamelina"
,
"Pamella"
,
"Pammi"
,
"Pammie"
,
"Pammy"
,
"Pandora"
,
"Pansie"
,
"Pansy"
,
"Paola"
,
"Paolina"
,
"Papagena"
,
"Pat"
,
"Patience"
,
"Patrica"
,
"Patrice"
,
"Patricia"
,
"Patrizia"
,
"Patsy"
,
"Patti"
,
"Pattie"
,
"Patty"
,
"Paula"
,
"Paule"
,
"Pauletta"
,
"Paulette"
,
"Pauli"
,
"Paulie"
,
"Paulina"
,
"Pauline"
,
"Paulita"
,
"Pauly"
,
"Pavia"
,
"Pavla"
,
"Pearl"
,
"Pearla"
,
"Pearle"
,
"Pearline"
,
"Peg"
,
"Pegeen"
,
"Peggi"
,
"Peggie"
,
"Peggy"
,
"Pen"
,
"Penelopa"
,
"Penelope"
,
"Penni"
,
"Pennie"
,
"Penny"
,
"Pepi"
,
"Pepita"
,
"Peri"
,
"Peria"
,
"Perl"
,
"Perla"
,
"Perle"
,
"Perri"
,
"Perrine"
,
"Perry"
,
"Persis"
,
"Pet"
,
"Peta"
,
"Petra"
,
"Petrina"
,
"Petronella"
,
"Petronia"
,
"Petronilla"
,
"Petronille"
,
"Petunia"
,
"Phaedra"
,
"Phaidra"
,
"Phebe"
,
"Phedra"
,
"Phelia"
,
"Phil"
,
"Philipa"
,
"Philippa"
,
"Philippe"
,
"Philippine"
,
"Philis"
,
"Phillida"
,
"Phillie"
,
"Phillis"
,
"Philly"
,
"Philomena"
,
"Phoebe"
,
"Phylis"
,
"Phyllida"
,
"Phyllis"
,
"Phyllys"
,
"Phylys"
,
"Pia"
,
"Pier"
,
"Pierette"
,
"Pierrette"
,
"Pietra"
,
"Piper"
,
"Pippa"
,
"Pippy"
,
"Polly"
,
"Pollyanna"
,
"Pooh"
,
"Poppy"
,
"Portia"
,
"Pris"
,
"Prisca"
,
"Priscella"
,
"Priscilla"
,
"Prissie"
,
"Pru"
,
"Prudence"
,
"Prudi"
,
"Prudy"
,
"Prue"
,
"Queenie"
,
"Quentin"
,
"Querida"
,
"Quinn"
,
"Quinta"
,
"Quintana"
,
"Quintilla"
,
"Quintina"
,
"Rachael"
,
"Rachel"
,
"Rachele"
,
"Rachelle"
,
"Rae"
,
"Raeann"
,
"Raf"
,
"Rafa"
,
"Rafaela"
,
"Rafaelia"
,
"Rafaelita"
,
"Rahal"
,
"Rahel"
,
"Raina"
,
"Raine"
,
"Rakel"
,
"Ralina"
,
"Ramona"
,
"Ramonda"
,
"Rana"
,
"Randa"
,
"Randee"
,
"Randene"
,
"Randi"
,
"Randie"
,
"Randy"
,
"Ranee"
,
"Rani"
,
"Rania"
,
"Ranice"
,
"Ranique"
,
"Ranna"
,
"Raphaela"
,
"Raquel"
,
"Raquela"
,
"Rasia"
,
"Rasla"
,
"Raven"
,
"Ray"
,
"Raychel"
,
"Raye"
,
"Rayna"
,
"Raynell"
,
"Rayshell"
,
"Rea"
,
"Reba"
,
"Rebbecca"
,
"Rebe"
,
"Rebeca"
,
"Rebecca"
,
"Rebecka"
,
"Rebeka"
,
"Rebekah"
,
"Rebekkah"
,
"Ree"
,
"Reeba"
,
"Reena"
,
"Reeta"
,
"Reeva"
,
"Regan"
,
"Reggi"
,
"Reggie"
,
"Regina"
,
"Regine"
,
"Reiko"
,
"Reina"
,
"Reine"
,
"Remy"
,
"Rena"
,
"Renae"
,
"Renata"
,
"Renate"
,
"Rene"
,
"Renee"
,
"Renell"
,
"Renelle"
,
"Renie"
,
"Rennie"
,
"Reta"
,
"Retha"
,
"Revkah"
,
"Rey"
,
"Reyna"
,
"Rhea"
,
"Rheba"
,
"Rheta"
,
"Rhetta"
,
"Rhiamon"
,
"Rhianna"
,
"Rhianon"
,
"Rhoda"
,
"Rhodia"
,
"Rhodie"
,
"Rhody"
,
"Rhona"
,
"Rhonda"
,
"Riane"
,
"Riannon"
,
"Rianon"
,
"Rica"
,
"Ricca"
,
"Rici"
,
"Ricki"
,
"Rickie"
,
"Ricky"
,
"Riki"
,
"Rikki"
,
"Rina"
,
"Risa"
,
"Rita"
,
"Riva"
,
"Rivalee"
,
"Rivi"
,
"Rivkah"
,
"Rivy"
,
"Roana"
,
"Roanna"
,
"Roanne"
,
"Robbi"
,
"Robbie"
,
"Robbin"
,
"Robby"
,
"Robbyn"
,
"Robena"
,
"Robenia"
,
"Roberta"
,
"Robin"
,
"Robina"
,
"Robinet"
,
"Robinett"
,
"Robinetta"
,
"Robinette"
,
"Robinia"
,
"Roby"
,
"Robyn"
,
"Roch"
,
"Rochell"
,
"Rochella"
,
"Rochelle"
,
"Rochette"
,
"Roda"
,
"Rodi"
,
"Rodie"
,
"Rodina"
,
"Rois"
,
"Romola"
,
"Romona"
,
"Romonda"
,
"Romy"
,
"Rona"
,
"Ronalda"
,
"Ronda"
,
"Ronica"
,
"Ronna"
,
"Ronni"
,
"Ronnica"
,
"Ronnie"
,
"Ronny"
,
"Roobbie"
,
"Rora"
,
"Rori"
,
"Rorie"
,
"Rory"
,
"Ros"
,
"Rosa"
,
"Rosabel"
,
"Rosabella"
,
"Rosabelle"
,
"Rosaleen"
,
"Rosalia"
,
"Rosalie"
,
"Rosalind"
,
"Rosalinda"
,
"Rosalinde"
,
"Rosaline"
,
"Rosalyn"
,
"Rosalynd"
,
"Rosamond"
,
"Rosamund"
,
"Rosana"
,
"Rosanna"
,
"Rosanne"
,
"Rose"
,
"Roseann"
,
"Roseanna"
,
"Roseanne"
,
"Roselia"
,
"Roselin"
,
"Roseline"
,
"Rosella"
,
"Roselle"
,
"Rosemaria"
,
"Rosemarie"
,
"Rosemary"
,
"Rosemonde"
,
"Rosene"
,
"Rosetta"
,
"Rosette"
,
"Roshelle"
,
"Rosie"
,
"Rosina"
,
"Rosita"
,
"Roslyn"
,
"Rosmunda"
,
"Rosy"
,
"Row"
,
"Rowe"
,
"Rowena"
,
"Roxana"
,
"Roxane"
,
"Roxanna"
,
"Roxanne"
,
"Roxi"
,
"Roxie"
,
"Roxine"
,
"Roxy"
,
"Roz"
,
"Rozalie"
,
"Rozalin"
,
"Rozamond"
,
"Rozanna"
,
"Rozanne"
,
"Roze"
,
"Rozele"
,
"Rozella"
,
"Rozelle"
,
"Rozina"
,
"Rubetta"
,
"Rubi"
,
"Rubia"
,
"Rubie"
,
"Rubina"
,
"Ruby"
,
"Ruperta"
,
"Ruth"
,
"Ruthann"
,
"Ruthanne"
,
"Ruthe"
,
"Ruthi"
,
"Ruthie"
,
"Ruthy"
,
"Ryann"
,
"Rycca"
,
"Saba"
,
"Sabina"
,
"Sabine"
,
"Sabra"
,
"Sabrina"
,
"Sacha"
,
"Sada"
,
"Sadella"
,
"Sadie"
,
"Sadye"
,
"Saidee"
,
"Sal"
,
"Salaidh"
,
"Sallee"
,
"Salli"
,
"Sallie"
,
"Sally"
,
"Sallyann"
,
"Sallyanne"
,
"Saloma"
,
"Salome"
,
"Salomi"
,
"Sam"
,
"Samantha"
,
"Samara"
,
"Samaria"
,
"Sammy"
,
"Sande"
,
"Sandi"
,
"Sandie"
,
"Sandra"
,
"Sandy"
,
"Sandye"
,
"Sapphira"
,
"Sapphire"
,
"Sara"
,
"Sara-Ann"
,
"Saraann"
,
"Sarah"
,
"Sarajane"
,
"Saree"
,
"Sarena"
,
"Sarene"
,
"Sarette"
,
"Sari"
,
"Sarina"
,
"Sarine"
,
"Sarita"
,
"Sascha"
,
"Sasha"
,
"Sashenka"
,
"Saudra"
,
"Saundra"
,
"Savina"
,
"Sayre"
,
"Scarlet"
,
"Scarlett"
,
"Sean"
,
"Seana"
,
"Seka"
,
"Sela"
,
"Selena"
,
"Selene"
,
"Selestina"
,
"Selia"
,
"Selie"
,
"Selina"
,
"Selinda"
,
"Seline"
,
"Sella"
,
"Selle"
,
"Selma"
,
"Sena"
,
"Sephira"
,
"Serena"
,
"Serene"
,
"Shae"
,
"Shaina"
,
"Shaine"
,
"Shalna"
,
"Shalne"
,
"Shana"
,
"Shanda"
,
"Shandee"
,
"Shandeigh"
,
"Shandie"
,
"Shandra"
,
"Shandy"
,
"Shane"
,
"Shani"
,
"Shanie"
,
"Shanna"
,
"Shannah"
,
"Shannen"
,
"Shannon"
,
"Shanon"
,
"Shanta"
,
"Shantee"
,
"Shara"
,
"Sharai"
,
"Shari"
,
"Sharia"
,
"Sharity"
,
"Sharl"
,
"Sharla"
,
"Sharleen"
,
"Sharlene"
,
"Sharline"
,
"Sharon"
,
"Sharona"
,
"Sharron"
,
"Sharyl"
,
"Shaun"
,
"Shauna"
,
"Shawn"
,
"Shawna"
,
"Shawnee"
,
"Shay"
,
"Shayla"
,
"Shaylah"
,
"Shaylyn"
,
"Shaylynn"
,
"Shayna"
,
"Shayne"
,
"Shea"
,
"Sheba"
,
"Sheela"
,
"Sheelagh"
,
"Sheelah"
,
"Sheena"
,
"Sheeree"
,
"Sheila"
,
"Sheila-Kathryn"
,
"Sheilah"
,
"Shel"
,
"Shela"
,
"Shelagh"
,
"Shelba"
,
"Shelbi"
,
"Shelby"
,
"Shelia"
,
"Shell"
,
"Shelley"
,
"Shelli"
,
"Shellie"
,
"Shelly"
,
"Shena"
,
"Sher"
,
"Sheree"
,
"Sheri"
,
"Sherie"
,
"Sherill"
,
"Sherilyn"
,
"Sherline"
,
"Sherri"
,
"Sherrie"
,
"Sherry"
,
"Sherye"
,
"Sheryl"
,
"Shina"
,
"Shir"
,
"Shirl"
,
"Shirlee"
,
"Shirleen"
,
"Shirlene"
,
"Shirley"
,
"Shirline"
,
"Shoshana"
,
"Shoshanna"
,
"Siana"
,
"Sianna"
,
"Sib"
,
"Sibbie"
,
"Sibby"
,
"Sibeal"
,
"Sibel"
,
"Sibella"
,
"Sibelle"
,
"Sibilla"
,
"Sibley"
,
"Sibyl"
,
"Sibylla"
,
"Sibylle"
,
"Sidoney"
,
"Sidonia"
,
"Sidonnie"
,
"Sigrid"
,
"Sile"
,
"Sileas"
,
"Silva"
,
"Silvana"
,
"Silvia"
,
"Silvie"
,
"Simona"
,
"Simone"
,
"Simonette"
,
"Simonne"
,
"Sindee"
,
"Siobhan"
,
"Sioux"
,
"Siouxie"
,
"Sisely"
,
"Sisile"
,
"Sissie"
,
"Sissy"
,
"Siusan"
,
"Sofia"
,
"Sofie"
,
"Sondra"
,
"Sonia"
,
"Sonja"
,
"Sonni"
,
"Sonnie"
,
"Sonnnie"
,
"Sonny"
,
"Sonya"
,
"Sophey"
,
"Sophi"
,
"Sophia"
,
"Sophie"
,
"Sophronia"
,
"Sorcha"
,
"Sosanna"
,
"Stace"
,
"Stacee"
,
"Stacey"
,
"Staci"
,
"Stacia"
,
"Stacie"
,
"Stacy"
,
"Stafani"
,
"Star"
,
"Starla"
,
"Starlene"
,
"Starlin"
,
"Starr"
,
"Stefa"
,
"Stefania"
,
"Stefanie"
,
"Steffane"
,
"Steffi"
,
"Steffie"
,
"Stella"
,
"Stepha"
,
"Stephana"
,
"Stephani"
,
"Stephanie"
,
"Stephannie"
,
"Stephenie"
,
"Stephi"
,
"Stephie"
,
"Stephine"
,
"Stesha"
,
"Stevana"
,
"Stevena"
,
"Stoddard"
,
"Storm"
,
"Stormi"
,
"Stormie"
,
"Stormy"
,
"Sue"
,
"Suellen"
,
"Sukey"
,
"Suki"
,
"Sula"
,
"Sunny"
,
"Sunshine"
,
"Susan"
,
"Susana"
,
"Susanetta"
,
"Susann"
,
"Susanna"
,
"Susannah"
,
"Susanne"
,
"Susette"
,
"Susi"
,
"Susie"
,
"Susy"
,
"Suzann"
,
"Suzanna"
,
"Suzanne"
,
"Suzette"
,
"Suzi"
,
"Suzie"
,
"Suzy"
,
"Sybil"
,
"Sybila"
,
"Sybilla"
,
"Sybille"
,
"Sybyl"
,
"Sydel"
,
"Sydelle"
,
"Sydney"
,
"Sylvia"
,
"Tabatha"
,
"Tabbatha"
,
"Tabbi"
,
"Tabbie"
,
"Tabbitha"
,
"Tabby"
,
"Tabina"
,
"Tabitha"
,
"Taffy"
,
"Talia"
,
"Tallia"
,
"Tallie"
,
"Tallou"
,
"Tallulah"
,
"Tally"
,
"Talya"
,
"Talyah"
,
"Tamar"
,
"Tamara"
,
"Tamarah"
,
"Tamarra"
,
"Tamera"
,
"Tami"
,
"Tamiko"
,
"Tamma"
,
"Tammara"
,
"Tammi"
,
"Tammie"
,
"Tammy"
,
"Tamqrah"
,
"Tamra"
,
"Tana"
,
"Tandi"
,
"Tandie"
,
"Tandy"
,
"Tanhya"
,
"Tani"
,
"Tania"
,
"Tanitansy"
,
"Tansy"
,
"Tanya"
,
"Tara"
,
"Tarah"
,
"Tarra"
,
"Tarrah"
,
"Taryn"
,
"Tasha"
,
"Tasia"
,
"Tate"
,
"Tatiana"
,
"Tatiania"
,
"Tatum"
,
"Tawnya"
,
"Tawsha"
,
"Ted"
,
"Tedda"
,
"Teddi"
,
"Teddie"
,
"Teddy"
,
"Tedi"
,
"Tedra"
,
"Teena"
,
"TEirtza"
,
"Teodora"
,
"Tera"
,
"Teresa"
,
"Terese"
,
"Teresina"
,
"Teresita"
,
"Teressa"
,
"Teri"
,
"Teriann"
,
"Terra"
,
"Terri"
,
"Terrie"
,
"Terrijo"
,
"Terry"
,
"Terrye"
,
"Tersina"
,
"Terza"
,
"Tess"
,
"Tessa"
,
"Tessi"
,
"Tessie"
,
"Tessy"
,
"Thalia"
,
"Thea"
,
"Theadora"
,
"Theda"
,
"Thekla"
,
"Thelma"
,
"Theo"
,
"Theodora"
,
"Theodosia"
,
"Theresa"
,
"Therese"
,
"Theresina"
,
"Theresita"
,
"Theressa"
,
"Therine"
,
"Thia"
,
"Thomasa"
,
"Thomasin"
,
"Thomasina"
,
"Thomasine"
,
"Tiena"
,
"Tierney"
,
"Tiertza"
,
"Tiff"
,
"Tiffani"
,
"Tiffanie"
,
"Tiffany"
,
"Tiffi"
,
"Tiffie"
,
"Tiffy"
,
"Tilda"
,
"Tildi"
,
"Tildie"
,
"Tildy"
,
"Tillie"
,
"Tilly"
,
"Tim"
,
"Timi"
,
"Timmi"
,
"Timmie"
,
"Timmy"
,
"Timothea"
,
"Tina"
,
"Tine"
,
"Tiphani"
,
"Tiphanie"
,
"Tiphany"
,
"Tish"
,
"Tisha"
,
"Tobe"
,
"Tobey"
,
"Tobi"
,
"Toby"
,
"Tobye"
,
"Toinette"
,
"Toma"
,
"Tomasina"
,
"Tomasine"
,
"Tomi"
,
"Tommi"
,
"Tommie"
,
"Tommy"
,
"Toni"
,
"Tonia"
,
"Tonie"
,
"Tony"
,
"Tonya"
,
"Tonye"
,
"Tootsie"
,
"Torey"
,
"Tori"
,
"Torie"
,
"Torrie"
,
"Tory"
,
"Tova"
,
"Tove"
,
"Tracee"
,
"Tracey"
,
"Traci"
,
"Tracie"
,
"Tracy"
,
"Trenna"
,
"Tresa"
,
"Trescha"
,
"Tressa"
,
"Tricia"
,
"Trina"
,
"Trish"
,
"Trisha"
,
"Trista"
,
"Trix"
,
"Trixi"
,
"Trixie"
,
"Trixy"
,
"Truda"
,
"Trude"
,
"Trudey"
,
"Trudi"
,
"Trudie"
,
"Trudy"
,
"Trula"
,
"Tuesday"
,
"Twila"
,
"Twyla"
,
"Tybi"
,
"Tybie"
,
"Tyne"
,
"Ula"
,
"Ulla"
,
"Ulrica"
,
"Ulrika"
,
"Ulrikaumeko"
,
"Ulrike"
,
"Umeko"
,
"Una"
,
"Ursa"
,
"Ursala"
,
"Ursola"
,
"Ursula"
,
"Ursulina"
,
"Ursuline"
,
"Uta"
,
"Val"
,
"Valaree"
,
"Valaria"
,
"Vale"
,
"Valeda"
,
"Valencia"
,
"Valene"
,
"Valenka"
,
"Valentia"
,
"Valentina"
,
"Valentine"
,
"Valera"
,
"Valeria"
,
"Valerie"
,
"Valery"
,
"Valerye"
,
"Valida"
,
"Valina"
,
"Valli"
,
"Vallie"
,
"Vally"
,
"Valma"
,
"Valry"
,
"Van"
,
"Vanda"
,
"Vanessa"
,
"Vania"
,
"Vanna"
,
"Vanni"
,
"Vannie"
,
"Vanny"
,
"Vanya"
,
"Veda"
,
"Velma"
,
"Velvet"
,
"Venita"
,
"Venus"
,
"Vera"
,
"Veradis"
,
"Vere"
,
"Verena"
,
"Verene"
,
"Veriee"
,
"Verile"
,
"Verina"
,
"Verine"
,
"Verla"
,
"Verna"
,
"Vernice"
,
"Veronica"
,
"Veronika"
,
"Veronike"
,
"Veronique"
,
"Vevay"
,
"Vi"
,
"Vicki"
,
"Vickie"
,
"Vicky"
,
"Victoria"
,
"Vida"
,
"Viki"
,
"Vikki"
,
"Vikky"
,
"Vilhelmina"
,
"Vilma"
,
"Vin"
,
"Vina"
,
"Vinita"
,
"Vinni"
,
"Vinnie"
,
"Vinny"
,
"Viola"
,
"Violante"
,
"Viole"
,
"Violet"
,
"Violetta"
,
"Violette"
,
"Virgie"
,
"Virgina"
,
"Virginia"
,
"Virginie"
,
"Vita"
,
"Vitia"
,
"Vitoria"
,
"Vittoria"
,
"Viv"
,
"Viva"
,
"Vivi"
,
"Vivia"
,
"Vivian"
,
"Viviana"
,
"Vivianna"
,
"Vivianne"
,
"Vivie"
,
"Vivien"
,
"Viviene"
,
"Vivienne"
,
"Viviyan"
,
"Vivyan"
,
"Vivyanne"
,
"Vonni"
,
"Vonnie"
,
"Vonny"
,
"Vyky"
,
"Wallie"
,
"Wallis"
,
"Walliw"
,
"Wally"
,
"Waly"
,
"Wanda"
,
"Wandie"
,
"Wandis"
,
"Waneta"
,
"Wanids"
,
"Wenda"
,
"Wendeline"
,
"Wendi"
,
"Wendie"
,
"Wendy"
,
"Wendye"
,
"Wenona"
,
"Wenonah"
,
"Whitney"
,
"Wileen"
,
"Wilhelmina"
,
"Wilhelmine"
,
"Wilie"
,
"Willa"
,
"Willabella"
,
"Willamina"
,
"Willetta"
,
"Willette"
,
"Willi"
,
"Willie"
,
"Willow"
,
"Willy"
,
"Willyt"
,
"Wilma"
,
"Wilmette"
,
"Wilona"
,
"Wilone"
,
"Wilow"
,
"Windy"
,
"Wini"
,
"Winifred"
,
"Winna"
,
"Winnah"
,
"Winne"
,
"Winni"
,
"Winnie"
,
"Winnifred"
,
"Winny"
,
"Winona"
,
"Winonah"
,
"Wren"
,
"Wrennie"
,
"Wylma"
,
"Wynn"
,
"Wynne"
,
"Wynnie"
,
"Wynny"
,
"Xaviera"
,
"Xena"
,
"Xenia"
,
"Xylia"
,
"Xylina"
,
"Yalonda"
,
"Yasmeen"
,
"Yasmin"
,
"Yelena"
,
"Yetta"
,
"Yettie"
,
"Yetty"
,
"Yevette"
,
"Ynes"
,
"Ynez"
,
"Yoko"
,
"Yolanda"
,
"Yolande"
,
"Yolane"
,
"Yolanthe"
,
"Yoshi"
,
"Yoshiko"
,
"Yovonnda"
,
"Ysabel"
,
"Yvette"
,
"Yvonne"
,
"Zabrina"
,
"Zahara"
,
"Zandra"
,
"Zaneta"
,
"Zara"
,
"Zarah"
,
"Zaria"
,
"Zarla"
,
"Zea"
,
"Zelda"
,
"Zelma"
,
"Zena"
,
"Zenia"
,
"Zia"
,
"Zilvia"
,
"Zita"
,
"Zitella"
,
"Zoe"
,
"Zola"
,
"Zonda"
,
"Zondra"
,
"Zonnya"
,
"Zora"
,
"Zorah"
,
"Zorana"
,
"Zorina"
,
"Zorine"
,
"Zsa Zsa"
,
"Zsazsa"
,
"Zulema"
,
"Zuzana"
]

},{}],172:[function(require,module,exports){
(function (process){

var names = require('./names.json')
var first = require('./first-names.json')
var middle = require('./middle-names.json')
var place = require('./places.json')

function r(names) {
  return function () {
    return names[~~(Math.random()*names.length)]
  }
}

var random = module.exports = function () {
  return random.first() + ' ' +random.last()
}

random.first   = r(first)
random.last    = r(names)
random.middle  = r(middle)
random.place   = r(place)

if(!module.parent) {
  var l = process.argv[2] || 10
  while (l--)
    console.log(random.first(), '.', random.middle(), '.', random.last()
    , ',', random.place())
}
  

}).call(this,require('_process'))
},{"./first-names.json":171,"./middle-names.json":173,"./names.json":174,"./places.json":175,"_process":180}],173:[function(require,module,exports){
module.exports=[
"Aaron"
,
"Ab"
,
"Abba"
,
"Abbe"
,
"Abbey"
,
"Abbie"
,
"Abbot"
,
"Abbott"
,
"Abby"
,
"Abdel"
,
"Abdul"
,
"Abe"
,
"Abel"
,
"Abelard"
,
"Abeu"
,
"Abey"
,
"Abie"
,
"Abner"
,
"Abraham"
,
"Abrahan"
,
"Abram"
,
"Abramo"
,
"Abran"
,
"Ad"
,
"Adair"
,
"Adam"
,
"Adamo"
,
"Adams"
,
"Adan"
,
"Addie"
,
"Addison"
,
"Addy"
,
"Ade"
,
"Adelbert"
,
"Adham"
,
"Adlai"
,
"Adler"
,
"Ado"
,
"Adolf"
,
"Adolph"
,
"Adolphe"
,
"Adolpho"
,
"Adolphus"
,
"Adrian"
,
"Adriano"
,
"Adrien"
,
"Agosto"
,
"Aguie"
,
"Aguistin"
,
"Aguste"
,
"Agustin"
,
"Aharon"
,
"Ahmad"
,
"Ahmed"
,
"Ailbert"
,
"Akim"
,
"Aksel"
,
"Al"
,
"Alain"
,
"Alair"
,
"Alan"
,
"Aland"
,
"Alano"
,
"Alanson"
,
"Alard"
,
"Alaric"
,
"Alasdair"
,
"Alastair"
,
"Alasteir"
,
"Alaster"
,
"Alberik"
,
"Albert"
,
"Alberto"
,
"Albie"
,
"Albrecht"
,
"Alden"
,
"Aldin"
,
"Aldis"
,
"Aldo"
,
"Aldon"
,
"Aldous"
,
"Aldric"
,
"Aldrich"
,
"Aldridge"
,
"Aldus"
,
"Aldwin"
,
"Alec"
,
"Alejandro"
,
"Alejoa"
,
"Aleksandr"
,
"Alessandro"
,
"Alex"
,
"Alexander"
,
"Alexandr"
,
"Alexandre"
,
"Alexandro"
,
"Alexandros"
,
"Alexei"
,
"Alexio"
,
"Alexis"
,
"Alf"
,
"Alfie"
,
"Alfons"
,
"Alfonse"
,
"Alfonso"
,
"Alford"
,
"Alfred"
,
"Alfredo"
,
"Alfy"
,
"Algernon"
,
"Ali"
,
"Alic"
,
"Alick"
,
"Alisander"
,
"Alistair"
,
"Alister"
,
"Alix"
,
"Allan"
,
"Allard"
,
"Allayne"
,
"Allen"
,
"Alley"
,
"Alleyn"
,
"Allie"
,
"Allin"
,
"Allister"
,
"Allistir"
,
"Allyn"
,
"Aloin"
,
"Alon"
,
"Alonso"
,
"Alonzo"
,
"Aloysius"
,
"Alphard"
,
"Alphonse"
,
"Alphonso"
,
"Alric"
,
"Aluin"
,
"Aluino"
,
"Alva"
,
"Alvan"
,
"Alvie"
,
"Alvin"
,
"Alvis"
,
"Alvy"
,
"Alwin"
,
"Alwyn"
,
"Alyosha"
,
"Amble"
,
"Ambros"
,
"Ambrose"
,
"Ambrosi"
,
"Ambrosio"
,
"Ambrosius"
,
"Amby"
,
"Amerigo"
,
"Amery"
,
"Amory"
,
"Amos"
,
"Anatol"
,
"Anatole"
,
"Anatollo"
,
"Ancell"
,
"Anders"
,
"Anderson"
,
"Andie"
,
"Andonis"
,
"Andras"
,
"Andre"
,
"Andrea"
,
"Andreas"
,
"Andrej"
,
"Andres"
,
"Andrew"
,
"Andrey"
,
"Andris"
,
"Andros"
,
"Andrus"
,
"Andy"
,
"Ange"
,
"Angel"
,
"Angeli"
,
"Angelico"
,
"Angelo"
,
"Angie"
,
"Angus"
,
"Ansel"
,
"Ansell"
,
"Anselm"
,
"Anson"
,
"Anthony"
,
"Antin"
,
"Antoine"
,
"Anton"
,
"Antone"
,
"Antoni"
,
"Antonin"
,
"Antonino"
,
"Antonio"
,
"Antonius"
,
"Antons"
,
"Antony"
,
"Any"
,
"Ara"
,
"Araldo"
,
"Arch"
,
"Archaimbaud"
,
"Archambault"
,
"Archer"
,
"Archibald"
,
"Archibaldo"
,
"Archibold"
,
"Archie"
,
"Archy"
,
"Arel"
,
"Ari"
,
"Arie"
,
"Ariel"
,
"Arin"
,
"Ario"
,
"Aristotle"
,
"Arlan"
,
"Arlen"
,
"Arley"
,
"Arlin"
,
"Arman"
,
"Armand"
,
"Armando"
,
"Armin"
,
"Armstrong"
,
"Arnaldo"
,
"Arne"
,
"Arney"
,
"Arni"
,
"Arnie"
,
"Arnold"
,
"Arnoldo"
,
"Arnuad"
,
"Arny"
,
"Aron"
,
"Arri"
,
"Arron"
,
"Art"
,
"Artair"
,
"Arte"
,
"Artemas"
,
"Artemis"
,
"Artemus"
,
"Arther"
,
"Arthur"
,
"Artie"
,
"Artur"
,
"Arturo"
,
"Artus"
,
"Arty"
,
"Arv"
,
"Arvie"
,
"Arvin"
,
"Arvy"
,
"Asa"
,
"Ase"
,
"Ash"
,
"Ashbey"
,
"Ashby"
,
"Asher"
,
"Ashley"
,
"Ashlin"
,
"Ashton"
,
"Aube"
,
"Auberon"
,
"Aubert"
,
"Aubrey"
,
"Augie"
,
"August"
,
"Augustin"
,
"Augustine"
,
"Augusto"
,
"Augustus"
,
"Augy"
,
"Aurthur"
,
"Austen"
,
"Austin"
,
"Ave"
,
"Averell"
,
"Averil"
,
"Averill"
,
"Avery"
,
"Avictor"
,
"Avigdor"
,
"Avram"
,
"Avrom"
,
"Ax"
,
"Axe"
,
"Axel"
,
"Aylmar"
,
"Aylmer"
,
"Aymer"
,
"Bail"
,
"Bailey"
,
"Bailie"
,
"Baillie"
,
"Baily"
,
"Baird"
,
"Bald"
,
"Balduin"
,
"Baldwin"
,
"Bale"
,
"Ban"
,
"Bancroft"
,
"Bank"
,
"Banky"
,
"Bar"
,
"Barbabas"
,
"Barclay"
,
"Bard"
,
"Barde"
,
"Barn"
,
"Barnabas"
,
"Barnabe"
,
"Barnaby"
,
"Barnard"
,
"Barnebas"
,
"Barnett"
,
"Barney"
,
"Barnie"
,
"Barny"
,
"Baron"
,
"Barr"
,
"Barret"
,
"Barrett"
,
"Barri"
,
"Barrie"
,
"Barris"
,
"Barron"
,
"Barry"
,
"Bart"
,
"Bartel"
,
"Barth"
,
"Barthel"
,
"Bartholemy"
,
"Bartholomeo"
,
"Bartholomeus"
,
"Bartholomew"
,
"Bartie"
,
"Bartlet"
,
"Bartlett"
,
"Bartolemo"
,
"Bartolomeo"
,
"Barton"
,
"Bartram"
,
"Barty"
,
"Bary"
,
"Baryram"
,
"Base"
,
"Basil"
,
"Basile"
,
"Basilio"
,
"Basilius"
,
"Bastian"
,
"Bastien"
,
"Bat"
,
"Batholomew"
,
"Baudoin"
,
"Bax"
,
"Baxie"
,
"Baxter"
,
"Baxy"
,
"Bay"
,
"Bayard"
,
"Beale"
,
"Bealle"
,
"Bear"
,
"Bearnard"
,
"Beau"
,
"Beaufort"
,
"Beauregard"
,
"Beck"
,
"Beltran"
,
"Ben"
,
"Bendick"
,
"Bendicty"
,
"Bendix"
,
"Benedetto"
,
"Benedick"
,
"Benedict"
,
"Benedicto"
,
"Benedikt"
,
"Bengt"
,
"Beniamino"
,
"Benito"
,
"Benjamen"
,
"Benjamin"
,
"Benji"
,
"Benjie"
,
"Benjy"
,
"Benn"
,
"Bennett"
,
"Bennie"
,
"Benny"
,
"Benoit"
,
"Benson"
,
"Bent"
,
"Bentlee"
,
"Bentley"
,
"Benton"
,
"Benyamin"
,
"Ber"
,
"Berk"
,
"Berke"
,
"Berkeley"
,
"Berkie"
,
"Berkley"
,
"Berkly"
,
"Berky"
,
"Bern"
,
"Bernard"
,
"Bernardo"
,
"Bernarr"
,
"Berne"
,
"Bernhard"
,
"Bernie"
,
"Berny"
,
"Bert"
,
"Berti"
,
"Bertie"
,
"Berton"
,
"Bertram"
,
"Bertrand"
,
"Bertrando"
,
"Berty"
,
"Bev"
,
"Bevan"
,
"Bevin"
,
"Bevon"
,
"Bil"
,
"Bill"
,
"Billie"
,
"Billy"
,
"Bing"
,
"Bink"
,
"Binky"
,
"Birch"
,
"Birk"
,
"Biron"
,
"Bjorn"
,
"Blaine"
,
"Blair"
,
"Blake"
,
"Blane"
,
"Blayne"
,
"Bo"
,
"Bob"
,
"Bobbie"
,
"Bobby"
,
"Bogart"
,
"Bogey"
,
"Boigie"
,
"Bond"
,
"Bondie"
,
"Bondon"
,
"Bondy"
,
"Bone"
,
"Boniface"
,
"Boone"
,
"Boonie"
,
"Boony"
,
"Boot"
,
"Boote"
,
"Booth"
,
"Boothe"
,
"Bord"
,
"Borden"
,
"Bordie"
,
"Bordy"
,
"Borg"
,
"Boris"
,
"Bourke"
,
"Bowie"
,
"Boy"
,
"Boyce"
,
"Boycey"
,
"Boycie"
,
"Boyd"
,
"Brad"
,
"Bradan"
,
"Brade"
,
"Braden"
,
"Bradford"
,
"Bradley"
,
"Bradly"
,
"Bradney"
,
"Brady"
,
"Bram"
,
"Bran"
,
"Brand"
,
"Branden"
,
"Brander"
,
"Brandon"
,
"Brandtr"
,
"Brandy"
,
"Brandyn"
,
"Brannon"
,
"Brant"
,
"Brantley"
,
"Bren"
,
"Brendan"
,
"Brenden"
,
"Brendin"
,
"Brendis"
,
"Brendon"
,
"Brennan"
,
"Brennen"
,
"Brent"
,
"Bret"
,
"Brett"
,
"Brew"
,
"Brewer"
,
"Brewster"
,
"Brian"
,
"Briano"
,
"Briant"
,
"Brice"
,
"Brien"
,
"Brig"
,
"Brigg"
,
"Briggs"
,
"Brigham"
,
"Brion"
,
"Brit"
,
"Britt"
,
"Brnaba"
,
"Brnaby"
,
"Brock"
,
"Brockie"
,
"Brocky"
,
"Brod"
,
"Broddie"
,
"Broddy"
,
"Broderic"
,
"Broderick"
,
"Brodie"
,
"Brody"
,
"Brok"
,
"Bron"
,
"Bronnie"
,
"Bronny"
,
"Bronson"
,
"Brook"
,
"Brooke"
,
"Brooks"
,
"Brose"
,
"Bruce"
,
"Brucie"
,
"Bruis"
,
"Bruno"
,
"Bryan"
,
"Bryant"
,
"Bryanty"
,
"Bryce"
,
"Bryn"
,
"Bryon"
,
"Buck"
,
"Buckie"
,
"Bucky"
,
"Bud"
,
"Budd"
,
"Buddie"
,
"Buddy"
,
"Buiron"
,
"Burch"
,
"Burg"
,
"Burgess"
,
"Burk"
,
"Burke"
,
"Burl"
,
"Burlie"
,
"Burnaby"
,
"Burnard"
,
"Burr"
,
"Burt"
,
"Burtie"
,
"Burton"
,
"Burty"
,
"Butch"
,
"Byram"
,
"Byran"
,
"Byrann"
,
"Byrle"
,
"Byrom"
,
"Byron"
,
"Cad"
,
"Caddric"
,
"Caesar"
,
"Cal"
,
"Caldwell"
,
"Cale"
,
"Caleb"
,
"Calhoun"
,
"Callean"
,
"Calv"
,
"Calvin"
,
"Cam"
,
"Cameron"
,
"Camey"
,
"Cammy"
,
"Car"
,
"Carce"
,
"Care"
,
"Carey"
,
"Carl"
,
"Carleton"
,
"Carlie"
,
"Carlin"
,
"Carling"
,
"Carlo"
,
"Carlos"
,
"Carly"
,
"Carlyle"
,
"Carmine"
,
"Carney"
,
"Carny"
,
"Carolus"
,
"Carr"
,
"Carrol"
,
"Carroll"
,
"Carson"
,
"Cart"
,
"Carter"
,
"Carver"
,
"Cary"
,
"Caryl"
,
"Casar"
,
"Case"
,
"Casey"
,
"Cash"
,
"Caspar"
,
"Casper"
,
"Cass"
,
"Cassie"
,
"Cassius"
,
"Caz"
,
"Cazzie"
,
"Cchaddie"
,
"Cece"
,
"Cecil"
,
"Cecilio"
,
"Cecilius"
,
"Ced"
,
"Cedric"
,
"Cello"
,
"Cesar"
,
"Cesare"
,
"Cesaro"
,
"Chad"
,
"Chadd"
,
"Chaddie"
,
"Chaddy"
,
"Chadwick"
,
"Chaim"
,
"Chalmers"
,
"Chan"
,
"Chance"
,
"Chancey"
,
"Chandler"
,
"Chane"
,
"Chariot"
,
"Charles"
,
"Charley"
,
"Charlie"
,
"Charlton"
,
"Chas"
,
"Chase"
,
"Chaunce"
,
"Chauncey"
,
"Che"
,
"Chen"
,
"Ches"
,
"Chester"
,
"Cheston"
,
"Chet"
,
"Chev"
,
"Chevalier"
,
"Chevy"
,
"Chic"
,
"Chick"
,
"Chickie"
,
"Chicky"
,
"Chico"
,
"Chilton"
,
"Chip"
,
"Chris"
,
"Chrisse"
,
"Chrissie"
,
"Chrissy"
,
"Christian"
,
"Christiano"
,
"Christie"
,
"Christoffer"
,
"Christoforo"
,
"Christoper"
,
"Christoph"
,
"Christophe"
,
"Christopher"
,
"Christophorus"
,
"Christos"
,
"Christy"
,
"Chrisy"
,
"Chrotoem"
,
"Chucho"
,
"Chuck"
,
"Cirillo"
,
"Cirilo"
,
"Ciro"
,
"Claiborn"
,
"Claiborne"
,
"Clair"
,
"Claire"
,
"Clarance"
,
"Clare"
,
"Clarence"
,
"Clark"
,
"Clarke"
,
"Claudell"
,
"Claudian"
,
"Claudianus"
,
"Claudio"
,
"Claudius"
,
"Claus"
,
"Clay"
,
"Clayborn"
,
"Clayborne"
,
"Claybourne"
,
"Clayson"
,
"Clayton"
,
"Cleavland"
,
"Clem"
,
"Clemens"
,
"Clement"
,
"Clemente"
,
"Clementius"
,
"Clemmie"
,
"Clemmy"
,
"Cleon"
,
"Clerc"
,
"Cletis"
,
"Cletus"
,
"Cleve"
,
"Cleveland"
,
"Clevey"
,
"Clevie"
,
"Cliff"
,
"Clifford"
,
"Clim"
,
"Clint"
,
"Clive"
,
"Cly"
,
"Clyde"
,
"Clyve"
,
"Clywd"
,
"Cob"
,
"Cobb"
,
"Cobbie"
,
"Cobby"
,
"Codi"
,
"Codie"
,
"Cody"
,
"Cointon"
,
"Colan"
,
"Colas"
,
"Colby"
,
"Cole"
,
"Coleman"
,
"Colet"
,
"Colin"
,
"Collin"
,
"Colman"
,
"Colver"
,
"Con"
,
"Conan"
,
"Conant"
,
"Conn"
,
"Conney"
,
"Connie"
,
"Connor"
,
"Conny"
,
"Conrad"
,
"Conrade"
,
"Conrado"
,
"Conroy"
,
"Consalve"
,
"Constantin"
,
"Constantine"
,
"Constantino"
,
"Conway"
,
"Coop"
,
"Cooper"
,
"Corbet"
,
"Corbett"
,
"Corbie"
,
"Corbin"
,
"Corby"
,
"Cord"
,
"Cordell"
,
"Cordie"
,
"Cordy"
,
"Corey"
,
"Cori"
,
"Cornall"
,
"Cornelius"
,
"Cornell"
,
"Corney"
,
"Cornie"
,
"Corny"
,
"Correy"
,
"Corrie"
,
"Cort"
,
"Cortie"
,
"Corty"
,
"Cory"
,
"Cos"
,
"Cosimo"
,
"Cosme"
,
"Cosmo"
,
"Costa"
,
"Court"
,
"Courtnay"
,
"Courtney"
,
"Cozmo"
,
"Craggie"
,
"Craggy"
,
"Craig"
,
"Crawford"
,
"Creigh"
,
"Creight"
,
"Creighton"
,
"Crichton"
,
"Cris"
,
"Cristian"
,
"Cristiano"
,
"Cristobal"
,
"Crosby"
,
"Cross"
,
"Cull"
,
"Cullan"
,
"Cullen"
,
"Culley"
,
"Cullie"
,
"Cullin"
,
"Cully"
,
"Culver"
,
"Curcio"
,
"Curr"
,
"Curran"
,
"Currey"
,
"Currie"
,
"Curry"
,
"Curt"
,
"Curtice"
,
"Curtis"
,
"Cy"
,
"Cyril"
,
"Cyrill"
,
"Cyrille"
,
"Cyrillus"
,
"Cyrus"
,
"D'Arcy"
,
"Dael"
,
"Dag"
,
"Dagny"
,
"Dal"
,
"Dale"
,
"Dalis"
,
"Dall"
,
"Dallas"
,
"Dalli"
,
"Dallis"
,
"Dallon"
,
"Dalston"
,
"Dalt"
,
"Dalton"
,
"Dame"
,
"Damian"
,
"Damiano"
,
"Damien"
,
"Damon"
,
"Dan"
,
"Dana"
,
"Dane"
,
"Dani"
,
"Danie"
,
"Daniel"
,
"Dannel"
,
"Dannie"
,
"Danny"
,
"Dante"
,
"Danya"
,
"Dar"
,
"Darb"
,
"Darbee"
,
"Darby"
,
"Darcy"
,
"Dare"
,
"Daren"
,
"Darill"
,
"Darin"
,
"Dario"
,
"Darius"
,
"Darn"
,
"Darnall"
,
"Darnell"
,
"Daron"
,
"Darrel"
,
"Darrell"
,
"Darren"
,
"Darrick"
,
"Darrin"
,
"Darryl"
,
"Darwin"
,
"Daryl"
,
"Daryle"
,
"Dav"
,
"Dave"
,
"Daven"
,
"Davey"
,
"David"
,
"Davidde"
,
"Davide"
,
"Davidson"
,
"Davie"
,
"Davin"
,
"Davis"
,
"Davon"
,
"Davy"
,
"De Witt"
,
"Dean"
,
"Deane"
,
"Decca"
,
"Deck"
,
"Del"
,
"Delainey"
,
"Delaney"
,
"Delano"
,
"Delbert"
,
"Dell"
,
"Delmar"
,
"Delmer"
,
"Delmor"
,
"Delmore"
,
"Demetre"
,
"Demetri"
,
"Demetris"
,
"Demetrius"
,
"Demott"
,
"Den"
,
"Dene"
,
"Denis"
,
"Dennet"
,
"Denney"
,
"Dennie"
,
"Dennis"
,
"Dennison"
,
"Denny"
,
"Denver"
,
"Denys"
,
"Der"
,
"Derby"
,
"Derek"
,
"Derick"
,
"Derk"
,
"Dermot"
,
"Derrek"
,
"Derrick"
,
"Derrik"
,
"Derril"
,
"Derron"
,
"Derry"
,
"Derward"
,
"Derwin"
,
"Des"
,
"Desi"
,
"Desmond"
,
"Desmund"
,
"Dev"
,
"Devin"
,
"Devland"
,
"Devlen"
,
"Devlin"
,
"Devy"
,
"Dew"
,
"Dewain"
,
"Dewey"
,
"Dewie"
,
"Dewitt"
,
"Dex"
,
"Dexter"
,
"Diarmid"
,
"Dick"
,
"Dickie"
,
"Dicky"
,
"Diego"
,
"Dieter"
,
"Dietrich"
,
"Dilan"
,
"Dill"
,
"Dillie"
,
"Dillon"
,
"Dilly"
,
"Dimitri"
,
"Dimitry"
,
"Dino"
,
"Dion"
,
"Dionisio"
,
"Dionysus"
,
"Dirk"
,
"Dmitri"
,
"Dolf"
,
"Dolph"
,
"Dom"
,
"Domenic"
,
"Domenico"
,
"Domingo"
,
"Dominic"
,
"Dominick"
,
"Dominik"
,
"Dominique"
,
"Don"
,
"Donal"
,
"Donall"
,
"Donalt"
,
"Donaugh"
,
"Donavon"
,
"Donn"
,
"Donnell"
,
"Donnie"
,
"Donny"
,
"Donovan"
,
"Dore"
,
"Dorey"
,
"Dorian"
,
"Dorie"
,
"Dory"
,
"Doug"
,
"Dougie"
,
"Douglas"
,
"Douglass"
,
"Dougy"
,
"Dov"
,
"Doy"
,
"Doyle"
,
"Drake"
,
"Drew"
,
"Dru"
,
"Drud"
,
"Drugi"
,
"Duane"
,
"Dud"
,
"Dudley"
,
"Duff"
,
"Duffie"
,
"Duffy"
,
"Dugald"
,
"Duke"
,
"Dukey"
,
"Dukie"
,
"Duky"
,
"Dun"
,
"Dunc"
,
"Duncan"
,
"Dunn"
,
"Dunstan"
,
"Dur"
,
"Durand"
,
"Durant"
,
"Durante"
,
"Durward"
,
"Dwain"
,
"Dwayne"
,
"Dwight"
,
"Dylan"
,
"Eadmund"
,
"Eal"
,
"Eamon"
,
"Earl"
,
"Earle"
,
"Earlie"
,
"Early"
,
"Earvin"
,
"Eb"
,
"Eben"
,
"Ebeneser"
,
"Ebenezer"
,
"Eberhard"
,
"Eberto"
,
"Ed"
,
"Edan"
,
"Edd"
,
"Eddie"
,
"Eddy"
,
"Edgar"
,
"Edgard"
,
"Edgardo"
,
"Edik"
,
"Edlin"
,
"Edmon"
,
"Edmund"
,
"Edouard"
,
"Edsel"
,
"Eduard"
,
"Eduardo"
,
"Eduino"
,
"Edvard"
,
"Edward"
,
"Edwin"
,
"Efrem"
,
"Efren"
,
"Egan"
,
"Egbert"
,
"Egon"
,
"Egor"
,
"El"
,
"Elbert"
,
"Elden"
,
"Eldin"
,
"Eldon"
,
"Eldredge"
,
"Eldridge"
,
"Eli"
,
"Elia"
,
"Elias"
,
"Elihu"
,
"Elijah"
,
"Eliot"
,
"Elisha"
,
"Ellary"
,
"Ellerey"
,
"Ellery"
,
"Elliot"
,
"Elliott"
,
"Ellis"
,
"Ellswerth"
,
"Ellsworth"
,
"Ellwood"
,
"Elmer"
,
"Elmo"
,
"Elmore"
,
"Elnar"
,
"Elroy"
,
"Elston"
,
"Elsworth"
,
"Elton"
,
"Elvin"
,
"Elvis"
,
"Elvyn"
,
"Elwin"
,
"Elwood"
,
"Elwyn"
,
"Ely"
,
"Em"
,
"Emanuel"
,
"Emanuele"
,
"Emelen"
,
"Emerson"
,
"Emery"
,
"Emile"
,
"Emilio"
,
"Emlen"
,
"Emlyn"
,
"Emmanuel"
,
"Emmerich"
,
"Emmery"
,
"Emmet"
,
"Emmett"
,
"Emmit"
,
"Emmott"
,
"Emmy"
,
"Emory"
,
"Engelbert"
,
"Englebert"
,
"Ennis"
,
"Enoch"
,
"Enos"
,
"Enrico"
,
"Enrique"
,
"Ephraim"
,
"Ephrayim"
,
"Ephrem"
,
"Erasmus"
,
"Erastus"
,
"Erek"
,
"Erhard"
,
"Erhart"
,
"Eric"
,
"Erich"
,
"Erick"
,
"Erie"
,
"Erik"
,
"Erin"
,
"Erl"
,
"Ermanno"
,
"Ermin"
,
"Ernest"
,
"Ernesto"
,
"Ernestus"
,
"Ernie"
,
"Ernst"
,
"Erny"
,
"Errick"
,
"Errol"
,
"Erroll"
,
"Erskine"
,
"Erv"
,
"ErvIn"
,
"Erwin"
,
"Esdras"
,
"Esme"
,
"Esra"
,
"Esteban"
,
"Estevan"
,
"Etan"
,
"Ethan"
,
"Ethe"
,
"Ethelbert"
,
"Ethelred"
,
"Etienne"
,
"Ettore"
,
"Euell"
,
"Eugen"
,
"Eugene"
,
"Eugenio"
,
"Eugenius"
,
"Eustace"
,
"Ev"
,
"Evan"
,
"Evelin"
,
"Evelyn"
,
"Even"
,
"Everard"
,
"Evered"
,
"Everett"
,
"Evin"
,
"Evyn"
,
"Ewan"
,
"Eward"
,
"Ewart"
,
"Ewell"
,
"Ewen"
,
"Ezechiel"
,
"Ezekiel"
,
"Ezequiel"
,
"Eziechiele"
,
"Ezra"
,
"Ezri"
,
"Fabe"
,
"Faber"
,
"Fabian"
,
"Fabiano"
,
"Fabien"
,
"Fabio"
,
"Fair"
,
"Fairfax"
,
"Fairleigh"
,
"Fairlie"
,
"Falito"
,
"Falkner"
,
"Far"
,
"Farlay"
,
"Farlee"
,
"Farleigh"
,
"Farley"
,
"Farlie"
,
"Farly"
,
"Farr"
,
"Farrel"
,
"Farrell"
,
"Farris"
,
"Faulkner"
,
"Fax"
,
"Federico"
,
"Fee"
,
"Felic"
,
"Felice"
,
"Felicio"
,
"Felike"
,
"Feliks"
,
"Felipe"
,
"Felix"
,
"Felizio"
,
"Feodor"
,
"Ferd"
,
"Ferdie"
,
"Ferdinand"
,
"Ferdy"
,
"Fergus"
,
"Ferguson"
,
"Fernando"
,
"Ferrel"
,
"Ferrell"
,
"Ferris"
,
"Fidel"
,
"Fidelio"
,
"Fidole"
,
"Field"
,
"Fielding"
,
"Fields"
,
"Filbert"
,
"Filberte"
,
"Filberto"
,
"Filip"
,
"Filippo"
,
"Filmer"
,
"Filmore"
,
"Fin"
,
"Findlay"
,
"Findley"
,
"Finlay"
,
"Finley"
,
"Finn"
,
"Fitz"
,
"Fitzgerald"
,
"Flem"
,
"Fleming"
,
"Flemming"
,
"Fletch"
,
"Fletcher"
,
"Flin"
,
"Flinn"
,
"Flint"
,
"Florian"
,
"Flory"
,
"Floyd"
,
"Flynn"
,
"Fons"
,
"Fonsie"
,
"Fonz"
,
"Fonzie"
,
"Forbes"
,
"Ford"
,
"Forest"
,
"Forester"
,
"Forrest"
,
"Forrester"
,
"Forster"
,
"Foss"
,
"Foster"
,
"Fowler"
,
"Fran"
,
"Francesco"
,
"Franchot"
,
"Francis"
,
"Francisco"
,
"Franciskus"
,
"Francklin"
,
"Francklyn"
,
"Francois"
,
"Frank"
,
"Frankie"
,
"Franklin"
,
"Franklyn"
,
"Franky"
,
"Frannie"
,
"Franny"
,
"Frans"
,
"Fransisco"
,
"Frants"
,
"Franz"
,
"Franzen"
,
"Frasco"
,
"Fraser"
,
"Frasier"
,
"Frasquito"
,
"Fraze"
,
"Frazer"
,
"Frazier"
,
"Fred"
,
"Freddie"
,
"Freddy"
,
"Fredek"
,
"Frederic"
,
"Frederich"
,
"Frederick"
,
"Frederico"
,
"Frederigo"
,
"Frederik"
,
"Fredric"
,
"Fredrick"
,
"Free"
,
"Freedman"
,
"Freeland"
,
"Freeman"
,
"Freemon"
,
"Fremont"
,
"Friedrich"
,
"Friedrick"
,
"Fritz"
,
"Fulton"
,
"Gabbie"
,
"Gabby"
,
"Gabe"
,
"Gabi"
,
"Gabie"
,
"Gabriel"
,
"Gabriele"
,
"Gabriello"
,
"Gaby"
,
"Gael"
,
"Gaelan"
,
"Gage"
,
"Gail"
,
"Gaile"
,
"Gal"
,
"Gale"
,
"Galen"
,
"Gallagher"
,
"Gallard"
,
"Galvan"
,
"Galven"
,
"Galvin"
,
"Gamaliel"
,
"Gan"
,
"Gannie"
,
"Gannon"
,
"Ganny"
,
"Gar"
,
"Garald"
,
"Gard"
,
"Gardener"
,
"Gardie"
,
"Gardiner"
,
"Gardner"
,
"Gardy"
,
"Gare"
,
"Garek"
,
"Gareth"
,
"Garey"
,
"Garfield"
,
"Garik"
,
"Garner"
,
"Garold"
,
"Garrard"
,
"Garrek"
,
"Garret"
,
"Garreth"
,
"Garrett"
,
"Garrick"
,
"Garrik"
,
"Garrot"
,
"Garrott"
,
"Garry"
,
"Garth"
,
"Garv"
,
"Garvey"
,
"Garvin"
,
"Garvy"
,
"Garwin"
,
"Garwood"
,
"Gary"
,
"Gaspar"
,
"Gaspard"
,
"Gasparo"
,
"Gasper"
,
"Gaston"
,
"Gaultiero"
,
"Gauthier"
,
"Gav"
,
"Gavan"
,
"Gaven"
,
"Gavin"
,
"Gawain"
,
"Gawen"
,
"Gay"
,
"Gayelord"
,
"Gayle"
,
"Gayler"
,
"Gaylor"
,
"Gaylord"
,
"Gearalt"
,
"Gearard"
,
"Gene"
,
"Geno"
,
"Geoff"
,
"Geoffrey"
,
"Geoffry"
,
"Georas"
,
"Geordie"
,
"Georg"
,
"George"
,
"Georges"
,
"Georgi"
,
"Georgie"
,
"Georgy"
,
"Gerald"
,
"Gerard"
,
"Gerardo"
,
"Gerek"
,
"Gerhard"
,
"Gerhardt"
,
"Geri"
,
"Gerick"
,
"Gerik"
,
"Germain"
,
"Germaine"
,
"Germayne"
,
"Gerome"
,
"Gerrard"
,
"Gerri"
,
"Gerrie"
,
"Gerry"
,
"Gery"
,
"Gherardo"
,
"Giacobo"
,
"Giacomo"
,
"Giacopo"
,
"Gian"
,
"Gianni"
,
"Giavani"
,
"Gib"
,
"Gibb"
,
"Gibbie"
,
"Gibby"
,
"Gideon"
,
"Giff"
,
"Giffard"
,
"Giffer"
,
"Giffie"
,
"Gifford"
,
"Giffy"
,
"Gil"
,
"Gilbert"
,
"Gilberto"
,
"Gilburt"
,
"Giles"
,
"Gill"
,
"Gilles"
,
"Ginger"
,
"Gino"
,
"Giordano"
,
"Giorgi"
,
"Giorgio"
,
"Giovanni"
,
"Giraldo"
,
"Giraud"
,
"Giselbert"
,
"Giulio"
,
"Giuseppe"
,
"Giustino"
,
"Giusto"
,
"Glen"
,
"Glenden"
,
"Glendon"
,
"Glenn"
,
"Glyn"
,
"Glynn"
,
"Godard"
,
"Godart"
,
"Goddard"
,
"Goddart"
,
"Godfree"
,
"Godfrey"
,
"Godfry"
,
"Godwin"
,
"Gonzales"
,
"Gonzalo"
,
"Goober"
,
"Goran"
,
"Goraud"
,
"Gordan"
,
"Gorden"
,
"Gordie"
,
"Gordon"
,
"Gordy"
,
"Gothart"
,
"Gottfried"
,
"Grace"
,
"Gradeigh"
,
"Gradey"
,
"Grady"
,
"Graehme"
,
"Graeme"
,
"Graham"
,
"Graig"
,
"Gram"
,
"Gran"
,
"Grange"
,
"Granger"
,
"Grannie"
,
"Granny"
,
"Grant"
,
"Grantham"
,
"Granthem"
,
"Grantley"
,
"Granville"
,
"Gray"
,
"Greg"
,
"Gregg"
,
"Greggory"
,
"Gregoire"
,
"Gregoor"
,
"Gregor"
,
"Gregorio"
,
"Gregorius"
,
"Gregory"
,
"Grenville"
,
"Griff"
,
"Griffie"
,
"Griffin"
,
"Griffith"
,
"Griffy"
,
"Gris"
,
"Griswold"
,
"Griz"
,
"Grove"
,
"Grover"
,
"Gualterio"
,
"Guglielmo"
,
"Guido"
,
"Guilbert"
,
"Guillaume"
,
"Guillermo"
,
"Gun"
,
"Gunar"
,
"Gunner"
,
"Guntar"
,
"Gunter"
,
"Gunther"
,
"Gus"
,
"Guss"
,
"Gustaf"
,
"Gustav"
,
"Gustave"
,
"Gustavo"
,
"Gustavus"
,
"Guthrey"
,
"Guthrie"
,
"Guthry"
,
"Guy"
,
"Had"
,
"Hadlee"
,
"Hadleigh"
,
"Hadley"
,
"Hadrian"
,
"Hagan"
,
"Hagen"
,
"Hailey"
,
"Haily"
,
"Hakeem"
,
"Hakim"
,
"Hal"
,
"Hale"
,
"Haleigh"
,
"Haley"
,
"Hall"
,
"Hallsy"
,
"Halsey"
,
"Halsy"
,
"Ham"
,
"Hamel"
,
"Hamid"
,
"Hamil"
,
"Hamilton"
,
"Hamish"
,
"Hamlen"
,
"Hamlin"
,
"Hammad"
,
"Hamnet"
,
"Hanan"
,
"Hank"
,
"Hans"
,
"Hansiain"
,
"Hanson"
,
"Harald"
,
"Harbert"
,
"Harcourt"
,
"Hardy"
,
"Harlan"
,
"Harland"
,
"Harlen"
,
"Harley"
,
"Harlin"
,
"Harman"
,
"Harmon"
,
"Harold"
,
"Haroun"
,
"Harp"
,
"Harper"
,
"Harris"
,
"Harrison"
,
"Harry"
,
"Hart"
,
"Hartley"
,
"Hartwell"
,
"Harv"
,
"Harvey"
,
"Harwell"
,
"Harwilll"
,
"Hasheem"
,
"Hashim"
,
"Haskel"
,
"Haskell"
,
"Haslett"
,
"Hastie"
,
"Hastings"
,
"Hasty"
,
"Haven"
,
"Hayden"
,
"Haydon"
,
"Hayes"
,
"Hayward"
,
"Haywood"
,
"Hayyim"
,
"Haze"
,
"Hazel"
,
"Hazlett"
,
"Heall"
,
"Heath"
,
"Hebert"
,
"Hector"
,
"Heindrick"
,
"Heinrick"
,
"Heinrik"
,
"Henderson"
,
"Hendrick"
,
"Hendrik"
,
"Henri"
,
"Henrik"
,
"Henry"
,
"Herb"
,
"Herbert"
,
"Herbie"
,
"Herby"
,
"Herc"
,
"Hercule"
,
"Hercules"
,
"Herculie"
,
"Heriberto"
,
"Herman"
,
"Hermann"
,
"Hermie"
,
"Hermon"
,
"Hermy"
,
"Hernando"
,
"Herold"
,
"Herrick"
,
"Hersch"
,
"Herschel"
,
"Hersh"
,
"Hershel"
,
"Herve"
,
"Hervey"
,
"Hew"
,
"Hewe"
,
"Hewet"
,
"Hewett"
,
"Hewie"
,
"Hewitt"
,
"Heywood"
,
"Hi"
,
"Hieronymus"
,
"Hilario"
,
"Hilarius"
,
"Hilary"
,
"Hill"
,
"Hillard"
,
"Hillary"
,
"Hillel"
,
"Hillery"
,
"Hilliard"
,
"Hillie"
,
"Hillier"
,
"Hilly"
,
"Hillyer"
,
"Hilton"
,
"Hinze"
,
"Hiram"
,
"Hirsch"
,
"Hobard"
,
"Hobart"
,
"Hobey"
,
"Hobie"
,
"Hodge"
,
"Hoebart"
,
"Hogan"
,
"Holden"
,
"Hollis"
,
"Holly"
,
"Holmes"
,
"Holt"
,
"Homer"
,
"Homere"
,
"Homerus"
,
"Horace"
,
"Horacio"
,
"Horatio"
,
"Horatius"
,
"Horst"
,
"Hort"
,
"Horten"
,
"Horton"
,
"Howard"
,
"Howey"
,
"Howie"
,
"Hoyt"
,
"Hube"
,
"Hubert"
,
"Huberto"
,
"Hubey"
,
"Hubie"
,
"Huey"
,
"Hugh"
,
"Hughie"
,
"Hugibert"
,
"Hugo"
,
"Hugues"
,
"Humbert"
,
"Humberto"
,
"Humfrey"
,
"Humfrid"
,
"Humfried"
,
"Humphrey"
,
"Hunfredo"
,
"Hunt"
,
"Hunter"
,
"Huntington"
,
"Huntlee"
,
"Huntley"
,
"Hurlee"
,
"Hurleigh"
,
"Hurley"
,
"Husain"
,
"Husein"
,
"Hussein"
,
"Hy"
,
"Hyatt"
,
"Hyman"
,
"Hymie"
,
"Iago"
,
"Iain"
,
"Ian"
,
"Ibrahim"
,
"Ichabod"
,
"Iggie"
,
"Iggy"
,
"Ignace"
,
"Ignacio"
,
"Ignacius"
,
"Ignatius"
,
"Ignaz"
,
"Ignazio"
,
"Igor"
,
"Ike"
,
"Ikey"
,
"Ilaire"
,
"Ilario"
,
"Immanuel"
,
"Ingamar"
,
"Ingar"
,
"Ingelbert"
,
"Ingemar"
,
"Inger"
,
"Inglebert"
,
"Inglis"
,
"Ingmar"
,
"Ingra"
,
"Ingram"
,
"Ingrim"
,
"Inigo"
,
"Inness"
,
"Innis"
,
"Iorgo"
,
"Iorgos"
,
"Iosep"
,
"Ira"
,
"Irv"
,
"Irvin"
,
"Irvine"
,
"Irving"
,
"Irwin"
,
"Irwinn"
,
"Isa"
,
"Isaac"
,
"Isaak"
,
"Isac"
,
"Isacco"
,
"Isador"
,
"Isadore"
,
"Isaiah"
,
"Isak"
,
"Isiahi"
,
"Isidor"
,
"Isidore"
,
"Isidoro"
,
"Isidro"
,
"Israel"
,
"Issiah"
,
"Itch"
,
"Ivan"
,
"Ivar"
,
"Ive"
,
"Iver"
,
"Ives"
,
"Ivor"
,
"Izaak"
,
"Izak"
,
"Izzy"
,
"Jabez"
,
"Jack"
,
"Jackie"
,
"Jackson"
,
"Jacky"
,
"Jacob"
,
"Jacobo"
,
"Jacques"
,
"Jae"
,
"Jaime"
,
"Jaimie"
,
"Jake"
,
"Jakie"
,
"Jakob"
,
"Jamaal"
,
"Jamal"
,
"James"
,
"Jameson"
,
"Jamesy"
,
"Jamey"
,
"Jamie"
,
"Jamil"
,
"Jamill"
,
"Jamison"
,
"Jammal"
,
"Jan"
,
"Janek"
,
"Janos"
,
"Jarad"
,
"Jard"
,
"Jareb"
,
"Jared"
,
"Jarib"
,
"Jarid"
,
"Jarrad"
,
"Jarred"
,
"Jarret"
,
"Jarrett"
,
"Jarrid"
,
"Jarrod"
,
"Jarvis"
,
"Jase"
,
"Jasen"
,
"Jason"
,
"Jasper"
,
"Jasun"
,
"Javier"
,
"Jay"
,
"Jaye"
,
"Jayme"
,
"Jaymie"
,
"Jayson"
,
"Jdavie"
,
"Jean"
,
"Jecho"
,
"Jed"
,
"Jedd"
,
"Jeddy"
,
"Jedediah"
,
"Jedidiah"
,
"Jeff"
,
"Jefferey"
,
"Jefferson"
,
"Jeffie"
,
"Jeffrey"
,
"Jeffry"
,
"Jeffy"
,
"Jehu"
,
"Jeno"
,
"Jens"
,
"Jephthah"
,
"Jerad"
,
"Jerald"
,
"Jeramey"
,
"Jeramie"
,
"Jere"
,
"Jereme"
,
"Jeremiah"
,
"Jeremias"
,
"Jeremie"
,
"Jeremy"
,
"Jermain"
,
"Jermaine"
,
"Jermayne"
,
"Jerome"
,
"Jeromy"
,
"Jerri"
,
"Jerrie"
,
"Jerrold"
,
"Jerrome"
,
"Jerry"
,
"Jervis"
,
"Jess"
,
"Jesse"
,
"Jessee"
,
"Jessey"
,
"Jessie"
,
"Jesus"
,
"Jeth"
,
"Jethro"
,
"Jim"
,
"Jimmie"
,
"Jimmy"
,
"Jo"
,
"Joachim"
,
"Joaquin"
,
"Job"
,
"Jock"
,
"Jocko"
,
"Jodi"
,
"Jodie"
,
"Jody"
,
"Joe"
,
"Joel"
,
"Joey"
,
"Johan"
,
"Johann"
,
"Johannes"
,
"John"
,
"Johnathan"
,
"Johnathon"
,
"Johnnie"
,
"Johnny"
,
"Johny"
,
"Jon"
,
"Jonah"
,
"Jonas"
,
"Jonathan"
,
"Jonathon"
,
"Jone"
,
"Jordan"
,
"Jordon"
,
"Jorgan"
,
"Jorge"
,
"Jory"
,
"Jose"
,
"Joseito"
,
"Joseph"
,
"Josh"
,
"Joshia"
,
"Joshua"
,
"Joshuah"
,
"Josiah"
,
"Josias"
,
"Jourdain"
,
"Jozef"
,
"Juan"
,
"Jud"
,
"Judah"
,
"Judas"
,
"Judd"
,
"Jude"
,
"Judon"
,
"Jule"
,
"Jules"
,
"Julian"
,
"Julie"
,
"Julio"
,
"Julius"
,
"Justen"
,
"Justin"
,
"Justinian"
,
"Justino"
,
"Justis"
,
"Justus"
,
"Kahaleel"
,
"Kahlil"
,
"Kain"
,
"Kaine"
,
"Kaiser"
,
"Kale"
,
"Kaleb"
,
"Kalil"
,
"Kalle"
,
"Kalvin"
,
"Kane"
,
"Kareem"
,
"Karel"
,
"Karim"
,
"Karl"
,
"Karlan"
,
"Karlens"
,
"Karlik"
,
"Karlis"
,
"Karney"
,
"Karoly"
,
"Kaspar"
,
"Kasper"
,
"Kayne"
,
"Kean"
,
"Keane"
,
"Kearney"
,
"Keary"
,
"Keefe"
,
"Keefer"
,
"Keelby"
,
"Keen"
,
"Keenan"
,
"Keene"
,
"Keir"
,
"Keith"
,
"Kelbee"
,
"Kelby"
,
"Kele"
,
"Kellby"
,
"Kellen"
,
"Kelley"
,
"Kelly"
,
"Kelsey"
,
"Kelvin"
,
"Kelwin"
,
"Ken"
,
"Kendal"
,
"Kendall"
,
"Kendell"
,
"Kendrick"
,
"Kendricks"
,
"Kenn"
,
"Kennan"
,
"Kennedy"
,
"Kenneth"
,
"Kennett"
,
"Kennie"
,
"Kennith"
,
"Kenny"
,
"Kenon"
,
"Kent"
,
"Kenton"
,
"Kenyon"
,
"Ker"
,
"Kerby"
,
"Kerk"
,
"Kermie"
,
"Kermit"
,
"Kermy"
,
"Kerr"
,
"Kerry"
,
"Kerwin"
,
"Kerwinn"
,
"Kev"
,
"Kevan"
,
"Keven"
,
"Kevin"
,
"Kevon"
,
"Khalil"
,
"Kiel"
,
"Kienan"
,
"Kile"
,
"Kiley"
,
"Kilian"
,
"Killian"
,
"Killie"
,
"Killy"
,
"Kim"
,
"Kimball"
,
"Kimbell"
,
"Kimble"
,
"Kin"
,
"Kincaid"
,
"King"
,
"Kingsley"
,
"Kingsly"
,
"Kingston"
,
"Kinnie"
,
"Kinny"
,
"Kinsley"
,
"Kip"
,
"Kipp"
,
"Kippar"
,
"Kipper"
,
"Kippie"
,
"Kippy"
,
"Kirby"
,
"Kirk"
,
"Kit"
,
"Klaus"
,
"Klemens"
,
"Klement"
,
"Kleon"
,
"Kliment"
,
"Knox"
,
"Koenraad"
,
"Konrad"
,
"Konstantin"
,
"Konstantine"
,
"Korey"
,
"Kort"
,
"Kory"
,
"Kris"
,
"Krisha"
,
"Krishna"
,
"Krishnah"
,
"Krispin"
,
"Kristian"
,
"Kristo"
,
"Kristofer"
,
"Kristoffer"
,
"Kristofor"
,
"Kristoforo"
,
"Kristopher"
,
"Kristos"
,
"Kurt"
,
"Kurtis"
,
"Ky"
,
"Kyle"
,
"Kylie"
,
"Laird"
,
"Lalo"
,
"Lamar"
,
"Lambert"
,
"Lammond"
,
"Lamond"
,
"Lamont"
,
"Lance"
,
"Lancelot"
,
"Land"
,
"Lane"
,
"Laney"
,
"Langsdon"
,
"Langston"
,
"Lanie"
,
"Lannie"
,
"Lanny"
,
"Larry"
,
"Lars"
,
"Laughton"
,
"Launce"
,
"Lauren"
,
"Laurence"
,
"Laurens"
,
"Laurent"
,
"Laurie"
,
"Lauritz"
,
"Law"
,
"Lawrence"
,
"Lawry"
,
"Lawton"
,
"Lay"
,
"Layton"
,
"Lazar"
,
"Lazare"
,
"Lazaro"
,
"Lazarus"
,
"Lee"
,
"Leeland"
,
"Lefty"
,
"Leicester"
,
"Leif"
,
"Leigh"
,
"Leighton"
,
"Lek"
,
"Leland"
,
"Lem"
,
"Lemar"
,
"Lemmie"
,
"Lemmy"
,
"Lemuel"
,
"Lenard"
,
"Lenci"
,
"Lennard"
,
"Lennie"
,
"Leo"
,
"Leon"
,
"Leonard"
,
"Leonardo"
,
"Leonerd"
,
"Leonhard"
,
"Leonid"
,
"Leonidas"
,
"Leopold"
,
"Leroi"
,
"Leroy"
,
"Les"
,
"Lesley"
,
"Leslie"
,
"Lester"
,
"Leupold"
,
"Lev"
,
"Levey"
,
"Levi"
,
"Levin"
,
"Levon"
,
"Levy"
,
"Lew"
,
"Lewes"
,
"Lewie"
,
"Lewiss"
,
"Lezley"
,
"Liam"
,
"Lief"
,
"Lin"
,
"Linc"
,
"Lincoln"
,
"Lind"
,
"Lindon"
,
"Lindsay"
,
"Lindsey"
,
"Lindy"
,
"Link"
,
"Linn"
,
"Linoel"
,
"Linus"
,
"Lion"
,
"Lionel"
,
"Lionello"
,
"Lisle"
,
"Llewellyn"
,
"Lloyd"
,
"Llywellyn"
,
"Lock"
,
"Locke"
,
"Lockwood"
,
"Lodovico"
,
"Logan"
,
"Lombard"
,
"Lon"
,
"Lonnard"
,
"Lonnie"
,
"Lonny"
,
"Lorant"
,
"Loren"
,
"Lorens"
,
"Lorenzo"
,
"Lorin"
,
"Lorne"
,
"Lorrie"
,
"Lorry"
,
"Lothaire"
,
"Lothario"
,
"Lou"
,
"Louie"
,
"Louis"
,
"Lovell"
,
"Lowe"
,
"Lowell"
,
"Lowrance"
,
"Loy"
,
"Loydie"
,
"Luca"
,
"Lucais"
,
"Lucas"
,
"Luce"
,
"Lucho"
,
"Lucian"
,
"Luciano"
,
"Lucias"
,
"Lucien"
,
"Lucio"
,
"Lucius"
,
"Ludovico"
,
"Ludvig"
,
"Ludwig"
,
"Luigi"
,
"Luis"
,
"Lukas"
,
"Luke"
,
"Lutero"
,
"Luther"
,
"Ly"
,
"Lydon"
,
"Lyell"
,
"Lyle"
,
"Lyman"
,
"Lyn"
,
"Lynn"
,
"Lyon"
,
"Mac"
,
"Mace"
,
"Mack"
,
"Mackenzie"
,
"Maddie"
,
"Maddy"
,
"Madison"
,
"Magnum"
,
"Mahmoud"
,
"Mahmud"
,
"Maison"
,
"Maje"
,
"Major"
,
"Mal"
,
"Malachi"
,
"Malchy"
,
"Malcolm"
,
"Mallory"
,
"Malvin"
,
"Man"
,
"Mandel"
,
"Manfred"
,
"Mannie"
,
"Manny"
,
"Mano"
,
"Manolo"
,
"Manuel"
,
"Mar"
,
"Marc"
,
"Marcel"
,
"Marcello"
,
"Marcellus"
,
"Marcelo"
,
"Marchall"
,
"Marco"
,
"Marcos"
,
"Marcus"
,
"Marijn"
,
"Mario"
,
"Marion"
,
"Marius"
,
"Mark"
,
"Markos"
,
"Markus"
,
"Marlin"
,
"Marlo"
,
"Marlon"
,
"Marlow"
,
"Marlowe"
,
"Marmaduke"
,
"Marsh"
,
"Marshal"
,
"Marshall"
,
"Mart"
,
"Martainn"
,
"Marten"
,
"Martie"
,
"Martin"
,
"Martino"
,
"Marty"
,
"Martyn"
,
"Marv"
,
"Marve"
,
"Marven"
,
"Marvin"
,
"Marwin"
,
"Mason"
,
"Massimiliano"
,
"Massimo"
,
"Mata"
,
"Mateo"
,
"Mathe"
,
"Mathew"
,
"Mathian"
,
"Mathias"
,
"Matias"
,
"Matt"
,
"Matteo"
,
"Matthaeus"
,
"Mattheus"
,
"Matthew"
,
"Matthias"
,
"Matthieu"
,
"Matthiew"
,
"Matthus"
,
"Mattias"
,
"Mattie"
,
"Matty"
,
"Maurice"
,
"Mauricio"
,
"Maurie"
,
"Maurise"
,
"Maurits"
,
"Maurizio"
,
"Maury"
,
"Max"
,
"Maxie"
,
"Maxim"
,
"Maximilian"
,
"Maximilianus"
,
"Maximilien"
,
"Maximo"
,
"Maxwell"
,
"Maxy"
,
"Mayer"
,
"Maynard"
,
"Mayne"
,
"Maynord"
,
"Mayor"
,
"Mead"
,
"Meade"
,
"Meier"
,
"Meir"
,
"Mel"
,
"Melvin"
,
"Melvyn"
,
"Menard"
,
"Mendel"
,
"Mendie"
,
"Mendy"
,
"Meredeth"
,
"Meredith"
,
"Merell"
,
"Merill"
,
"Merle"
,
"Merrel"
,
"Merrick"
,
"Merrill"
,
"Merry"
,
"Merv"
,
"Mervin"
,
"Merwin"
,
"Merwyn"
,
"Meryl"
,
"Meyer"
,
"Mic"
,
"Micah"
,
"Michael"
,
"Michail"
,
"Michal"
,
"Michale"
,
"Micheal"
,
"Micheil"
,
"Michel"
,
"Michele"
,
"Mick"
,
"Mickey"
,
"Mickie"
,
"Micky"
,
"Miguel"
,
"Mikael"
,
"Mike"
,
"Mikel"
,
"Mikey"
,
"Mikkel"
,
"Mikol"
,
"Mile"
,
"Miles"
,
"Mill"
,
"Millard"
,
"Miller"
,
"Milo"
,
"Milt"
,
"Miltie"
,
"Milton"
,
"Milty"
,
"Miner"
,
"Minor"
,
"Mischa"
,
"Mitch"
,
"Mitchael"
,
"Mitchel"
,
"Mitchell"
,
"Moe"
,
"Mohammed"
,
"Mohandas"
,
"Mohandis"
,
"Moise"
,
"Moises"
,
"Moishe"
,
"Monro"
,
"Monroe"
,
"Montague"
,
"Monte"
,
"Montgomery"
,
"Monti"
,
"Monty"
,
"Moore"
,
"Mord"
,
"Mordecai"
,
"Mordy"
,
"Morey"
,
"Morgan"
,
"Morgen"
,
"Morgun"
,
"Morie"
,
"Moritz"
,
"Morlee"
,
"Morley"
,
"Morly"
,
"Morrie"
,
"Morris"
,
"Morry"
,
"Morse"
,
"Mort"
,
"Morten"
,
"Mortie"
,
"Mortimer"
,
"Morton"
,
"Morty"
,
"Mose"
,
"Moses"
,
"Moshe"
,
"Moss"
,
"Mozes"
,
"Muffin"
,
"Muhammad"
,
"Munmro"
,
"Munroe"
,
"Murdoch"
,
"Murdock"
,
"Murray"
,
"Murry"
,
"Murvyn"
,
"My"
,
"Myca"
,
"Mycah"
,
"Mychal"
,
"Myer"
,
"Myles"
,
"Mylo"
,
"Myron"
,
"Myrvyn"
,
"Myrwyn"
,
"Nahum"
,
"Nap"
,
"Napoleon"
,
"Nappie"
,
"Nappy"
,
"Nat"
,
"Natal"
,
"Natale"
,
"Nataniel"
,
"Nate"
,
"Nathan"
,
"Nathanael"
,
"Nathanial"
,
"Nathaniel"
,
"Nathanil"
,
"Natty"
,
"Neal"
,
"Neale"
,
"Neall"
,
"Nealon"
,
"Nealson"
,
"Nealy"
,
"Ned"
,
"Neddie"
,
"Neddy"
,
"Neel"
,
"Nefen"
,
"Nehemiah"
,
"Neil"
,
"Neill"
,
"Neils"
,
"Nels"
,
"Nelson"
,
"Nero"
,
"Neron"
,
"Nester"
,
"Nestor"
,
"Nev"
,
"Nevil"
,
"Nevile"
,
"Neville"
,
"Nevin"
,
"Nevins"
,
"Newton"
,
"Nial"
,
"Niall"
,
"Niccolo"
,
"Nicholas"
,
"Nichole"
,
"Nichols"
,
"Nick"
,
"Nickey"
,
"Nickie"
,
"Nicko"
,
"Nickola"
,
"Nickolai"
,
"Nickolas"
,
"Nickolaus"
,
"Nicky"
,
"Nico"
,
"Nicol"
,
"Nicola"
,
"Nicolai"
,
"Nicolais"
,
"Nicolas"
,
"Nicolis"
,
"Niel"
,
"Niels"
,
"Nigel"
,
"Niki"
,
"Nikita"
,
"Nikki"
,
"Niko"
,
"Nikola"
,
"Nikolai"
,
"Nikolaos"
,
"Nikolas"
,
"Nikolaus"
,
"Nikolos"
,
"Nikos"
,
"Nil"
,
"Niles"
,
"Nils"
,
"Nilson"
,
"Niven"
,
"Noach"
,
"Noah"
,
"Noak"
,
"Noam"
,
"Nobe"
,
"Nobie"
,
"Noble"
,
"Noby"
,
"Noe"
,
"Noel"
,
"Nolan"
,
"Noland"
,
"Noll"
,
"Nollie"
,
"Nolly"
,
"Norbert"
,
"Norbie"
,
"Norby"
,
"Norman"
,
"Normand"
,
"Normie"
,
"Normy"
,
"Norrie"
,
"Norris"
,
"Norry"
,
"North"
,
"Northrop"
,
"Northrup"
,
"Norton"
,
"Nowell"
,
"Nye"
,
"Oates"
,
"Obadiah"
,
"Obadias"
,
"Obed"
,
"Obediah"
,
"Oberon"
,
"Obidiah"
,
"Obie"
,
"Oby"
,
"Octavius"
,
"Ode"
,
"Odell"
,
"Odey"
,
"Odie"
,
"Odo"
,
"Ody"
,
"Ogdan"
,
"Ogden"
,
"Ogdon"
,
"Olag"
,
"Olav"
,
"Ole"
,
"Olenolin"
,
"Olin"
,
"Oliver"
,
"Olivero"
,
"Olivier"
,
"Oliviero"
,
"Ollie"
,
"Olly"
,
"Olvan"
,
"Omar"
,
"Omero"
,
"Onfre"
,
"Onfroi"
,
"Onofredo"
,
"Oran"
,
"Orazio"
,
"Orbadiah"
,
"Oren"
,
"Orin"
,
"Orion"
,
"Orlan"
,
"Orland"
,
"Orlando"
,
"Orran"
,
"Orren"
,
"Orrin"
,
"Orson"
,
"Orton"
,
"Orv"
,
"Orville"
,
"Osbert"
,
"Osborn"
,
"Osborne"
,
"Osbourn"
,
"Osbourne"
,
"Osgood"
,
"Osmond"
,
"Osmund"
,
"Ossie"
,
"Oswald"
,
"Oswell"
,
"Otes"
,
"Othello"
,
"Otho"
,
"Otis"
,
"Otto"
,
"Owen"
,
"Ozzie"
,
"Ozzy"
,
"Pablo"
,
"Pace"
,
"Packston"
,
"Paco"
,
"Pacorro"
,
"Paddie"
,
"Paddy"
,
"Padget"
,
"Padgett"
,
"Padraic"
,
"Padraig"
,
"Padriac"
,
"Page"
,
"Paige"
,
"Pail"
,
"Pall"
,
"Palm"
,
"Palmer"
,
"Panchito"
,
"Pancho"
,
"Paolo"
,
"Papageno"
,
"Paquito"
,
"Park"
,
"Parke"
,
"Parker"
,
"Parnell"
,
"Parrnell"
,
"Parry"
,
"Parsifal"
,
"Pascal"
,
"Pascale"
,
"Pasquale"
,
"Pat"
,
"Pate"
,
"Paten"
,
"Patin"
,
"Paton"
,
"Patric"
,
"Patrice"
,
"Patricio"
,
"Patrick"
,
"Patrizio"
,
"Patrizius"
,
"Patsy"
,
"Patten"
,
"Pattie"
,
"Pattin"
,
"Patton"
,
"Patty"
,
"Paul"
,
"Paulie"
,
"Paulo"
,
"Pauly"
,
"Pavel"
,
"Pavlov"
,
"Paxon"
,
"Paxton"
,
"Payton"
,
"Peadar"
,
"Pearce"
,
"Pebrook"
,
"Peder"
,
"Pedro"
,
"Peirce"
,
"Pembroke"
,
"Pen"
,
"Penn"
,
"Pennie"
,
"Penny"
,
"Penrod"
,
"Pepe"
,
"Pepillo"
,
"Pepito"
,
"Perceval"
,
"Percival"
,
"Percy"
,
"Perice"
,
"Perkin"
,
"Pernell"
,
"Perren"
,
"Perry"
,
"Pete"
,
"Peter"
,
"Peterus"
,
"Petey"
,
"Petr"
,
"Peyter"
,
"Peyton"
,
"Phil"
,
"Philbert"
,
"Philip"
,
"Phillip"
,
"Phillipe"
,
"Phillipp"
,
"Phineas"
,
"Phip"
,
"Pierce"
,
"Pierre"
,
"Pierson"
,
"Pieter"
,
"Pietrek"
,
"Pietro"
,
"Piggy"
,
"Pincas"
,
"Pinchas"
,
"Pincus"
,
"Piotr"
,
"Pip"
,
"Pippo"
,
"Pooh"
,
"Port"
,
"Porter"
,
"Portie"
,
"Porty"
,
"Poul"
,
"Powell"
,
"Pren"
,
"Prent"
,
"Prentice"
,
"Prentiss"
,
"Prescott"
,
"Preston"
,
"Price"
,
"Prince"
,
"Prinz"
,
"Pryce"
,
"Puff"
,
"Purcell"
,
"Putnam"
,
"Putnem"
,
"Pyotr"
,
"Quent"
,
"Quentin"
,
"Quill"
,
"Quillan"
,
"Quincey"
,
"Quincy"
,
"Quinlan"
,
"Quinn"
,
"Quint"
,
"Quintin"
,
"Quinton"
,
"Quintus"
,
"Rab"
,
"Rabbi"
,
"Rabi"
,
"Rad"
,
"Radcliffe"
,
"Raddie"
,
"Raddy"
,
"Rafael"
,
"Rafaellle"
,
"Rafaello"
,
"Rafe"
,
"Raff"
,
"Raffaello"
,
"Raffarty"
,
"Rafferty"
,
"Rafi"
,
"Ragnar"
,
"Raimondo"
,
"Raimund"
,
"Raimundo"
,
"Rainer"
,
"Raleigh"
,
"Ralf"
,
"Ralph"
,
"Ram"
,
"Ramon"
,
"Ramsay"
,
"Ramsey"
,
"Rance"
,
"Rancell"
,
"Rand"
,
"Randal"
,
"Randall"
,
"Randell"
,
"Randi"
,
"Randie"
,
"Randolf"
,
"Randolph"
,
"Randy"
,
"Ransell"
,
"Ransom"
,
"Raoul"
,
"Raphael"
,
"Raul"
,
"Ravi"
,
"Ravid"
,
"Raviv"
,
"Rawley"
,
"Ray"
,
"Raymond"
,
"Raymund"
,
"Raynard"
,
"Rayner"
,
"Raynor"
,
"Read"
,
"Reade"
,
"Reagan"
,
"Reagen"
,
"Reamonn"
,
"Red"
,
"Redd"
,
"Redford"
,
"Reece"
,
"Reed"
,
"Rees"
,
"Reese"
,
"Reg"
,
"Regan"
,
"Regen"
,
"Reggie"
,
"Reggis"
,
"Reggy"
,
"Reginald"
,
"Reginauld"
,
"Reid"
,
"Reidar"
,
"Reider"
,
"Reilly"
,
"Reinald"
,
"Reinaldo"
,
"Reinaldos"
,
"Reinhard"
,
"Reinhold"
,
"Reinold"
,
"Reinwald"
,
"Rem"
,
"Remington"
,
"Remus"
,
"Renado"
,
"Renaldo"
,
"Renard"
,
"Renato"
,
"Renaud"
,
"Renault"
,
"Rene"
,
"Reube"
,
"Reuben"
,
"Reuven"
,
"Rex"
,
"Rey"
,
"Reynard"
,
"Reynold"
,
"Reynolds"
,
"Rhett"
,
"Rhys"
,
"Ric"
,
"Ricard"
,
"Ricardo"
,
"Riccardo"
,
"Rice"
,
"Rich"
,
"Richard"
,
"Richardo"
,
"Richart"
,
"Richie"
,
"Richmond"
,
"Richmound"
,
"Richy"
,
"Rick"
,
"Rickard"
,
"Rickert"
,
"Rickey"
,
"Ricki"
,
"Rickie"
,
"Ricky"
,
"Ricoriki"
,
"Rik"
,
"Rikki"
,
"Riley"
,
"Rinaldo"
,
"Ring"
,
"Ringo"
,
"Riobard"
,
"Riordan"
,
"Rip"
,
"Ripley"
,
"Ritchie"
,
"Roarke"
,
"Rob"
,
"Robb"
,
"Robbert"
,
"Robbie"
,
"Robby"
,
"Robers"
,
"Robert"
,
"Roberto"
,
"Robin"
,
"Robinet"
,
"Robinson"
,
"Rochester"
,
"Rock"
,
"Rockey"
,
"Rockie"
,
"Rockwell"
,
"Rocky"
,
"Rod"
,
"Rodd"
,
"Roddie"
,
"Roddy"
,
"Roderic"
,
"Roderich"
,
"Roderick"
,
"Roderigo"
,
"Rodge"
,
"Rodger"
,
"Rodney"
,
"Rodolfo"
,
"Rodolph"
,
"Rodolphe"
,
"Rodrick"
,
"Rodrigo"
,
"Rodrique"
,
"Rog"
,
"Roger"
,
"Rogerio"
,
"Rogers"
,
"Roi"
,
"Roland"
,
"Rolando"
,
"Roldan"
,
"Roley"
,
"Rolf"
,
"Rolfe"
,
"Rolland"
,
"Rollie"
,
"Rollin"
,
"Rollins"
,
"Rollo"
,
"Rolph"
,
"Roma"
,
"Romain"
,
"Roman"
,
"Romeo"
,
"Ron"
,
"Ronald"
,
"Ronnie"
,
"Ronny"
,
"Rooney"
,
"Roosevelt"
,
"Rorke"
,
"Rory"
,
"Rosco"
,
"Roscoe"
,
"Ross"
,
"Rossie"
,
"Rossy"
,
"Roth"
,
"Rourke"
,
"Rouvin"
,
"Rowan"
,
"Rowen"
,
"Rowland"
,
"Rowney"
,
"Roy"
,
"Royal"
,
"Royall"
,
"Royce"
,
"Rriocard"
,
"Rube"
,
"Ruben"
,
"Rubin"
,
"Ruby"
,
"Rudd"
,
"Ruddie"
,
"Ruddy"
,
"Rudie"
,
"Rudiger"
,
"Rudolf"
,
"Rudolfo"
,
"Rudolph"
,
"Rudy"
,
"Rudyard"
,
"Rufe"
,
"Rufus"
,
"Ruggiero"
,
"Rupert"
,
"Ruperto"
,
"Ruprecht"
,
"Rurik"
,
"Russ"
,
"Russell"
,
"Rustie"
,
"Rustin"
,
"Rusty"
,
"Rutger"
,
"Rutherford"
,
"Rutledge"
,
"Rutter"
,
"Ruttger"
,
"Ruy"
,
"Ryan"
,
"Ryley"
,
"Ryon"
,
"Ryun"
,
"Sal"
,
"Saleem"
,
"Salem"
,
"Salim"
,
"Salmon"
,
"Salomo"
,
"Salomon"
,
"Salomone"
,
"Salvador"
,
"Salvatore"
,
"Salvidor"
,
"Sam"
,
"Sammie"
,
"Sammy"
,
"Sampson"
,
"Samson"
,
"Samuel"
,
"Samuele"
,
"Sancho"
,
"Sander"
,
"Sanders"
,
"Sanderson"
,
"Sandor"
,
"Sandro"
,
"Sandy"
,
"Sanford"
,
"Sanson"
,
"Sansone"
,
"Sarge"
,
"Sargent"
,
"Sascha"
,
"Sasha"
,
"Saul"
,
"Sauncho"
,
"Saunder"
,
"Saunders"
,
"Saunderson"
,
"Saundra"
,
"Sauveur"
,
"Saw"
,
"Sawyer"
,
"Sawyere"
,
"Sax"
,
"Saxe"
,
"Saxon"
,
"Say"
,
"Sayer"
,
"Sayers"
,
"Sayre"
,
"Sayres"
,
"Scarface"
,
"Schuyler"
,
"Scot"
,
"Scott"
,
"Scotti"
,
"Scottie"
,
"Scotty"
,
"Seamus"
,
"Sean"
,
"Sebastian"
,
"Sebastiano"
,
"Sebastien"
,
"See"
,
"Selby"
,
"Selig"
,
"Serge"
,
"Sergeant"
,
"Sergei"
,
"Sergent"
,
"Sergio"
,
"Seth"
,
"Seumas"
,
"Seward"
,
"Seymour"
,
"Shadow"
,
"Shae"
,
"Shaine"
,
"Shalom"
,
"Shamus"
,
"Shanan"
,
"Shane"
,
"Shannan"
,
"Shannon"
,
"Shaughn"
,
"Shaun"
,
"Shaw"
,
"Shawn"
,
"Shay"
,
"Shayne"
,
"Shea"
,
"Sheff"
,
"Sheffie"
,
"Sheffield"
,
"Sheffy"
,
"Shelby"
,
"Shelden"
,
"Shell"
,
"Shelley"
,
"Shelton"
,
"Shem"
,
"Shep"
,
"Shepard"
,
"Shepherd"
,
"Sheppard"
,
"Shepperd"
,
"Sheridan"
,
"Sherlock"
,
"Sherlocke"
,
"Sherm"
,
"Sherman"
,
"Shermie"
,
"Shermy"
,
"Sherwin"
,
"Sherwood"
,
"Sherwynd"
,
"Sholom"
,
"Shurlock"
,
"Shurlocke"
,
"Shurwood"
,
"Si"
,
"Sibyl"
,
"Sid"
,
"Sidnee"
,
"Sidney"
,
"Siegfried"
,
"Siffre"
,
"Sig"
,
"Sigfrid"
,
"Sigfried"
,
"Sigismond"
,
"Sigismondo"
,
"Sigismund"
,
"Sigismundo"
,
"Sigmund"
,
"Sigvard"
,
"Silas"
,
"Silvain"
,
"Silvan"
,
"Silvano"
,
"Silvanus"
,
"Silvester"
,
"Silvio"
,
"Sim"
,
"Simeon"
,
"Simmonds"
,
"Simon"
,
"Simone"
,
"Sinclair"
,
"Sinclare"
,
"Siward"
,
"Skell"
,
"Skelly"
,
"Skip"
,
"Skipp"
,
"Skipper"
,
"Skippie"
,
"Skippy"
,
"Skipton"
,
"Sky"
,
"Skye"
,
"Skylar"
,
"Skyler"
,
"Slade"
,
"Sloan"
,
"Sloane"
,
"Sly"
,
"Smith"
,
"Smitty"
,
"Sol"
,
"Sollie"
,
"Solly"
,
"Solomon"
,
"Somerset"
,
"Son"
,
"Sonnie"
,
"Sonny"
,
"Spence"
,
"Spencer"
,
"Spense"
,
"Spenser"
,
"Spike"
,
"Stacee"
,
"Stacy"
,
"Staffard"
,
"Stafford"
,
"Staford"
,
"Stan"
,
"Standford"
,
"Stanfield"
,
"Stanford"
,
"Stanislas"
,
"Stanislaus"
,
"Stanislaw"
,
"Stanleigh"
,
"Stanley"
,
"Stanly"
,
"Stanton"
,
"Stanwood"
,
"Stavro"
,
"Stavros"
,
"Stearn"
,
"Stearne"
,
"Stefan"
,
"Stefano"
,
"Steffen"
,
"Stephan"
,
"Stephanus"
,
"Stephen"
,
"Sterling"
,
"Stern"
,
"Sterne"
,
"Steve"
,
"Steven"
,
"Stevie"
,
"Stevy"
,
"Steward"
,
"Stewart"
,
"Stillman"
,
"Stillmann"
,
"Stinky"
,
"Stirling"
,
"Stu"
,
"Stuart"
,
"Sullivan"
,
"Sully"
,
"Sumner"
,
"Sunny"
,
"Sutherlan"
,
"Sutherland"
,
"Sutton"
,
"Sven"
,
"Svend"
,
"Swen"
,
"Syd"
,
"Sydney"
,
"Sylas"
,
"Sylvan"
,
"Sylvester"
,
"Syman"
,
"Symon"
,
"Tab"
,
"Tabb"
,
"Tabbie"
,
"Tabby"
,
"Taber"
,
"Tabor"
,
"Tad"
,
"Tadd"
,
"Taddeo"
,
"Taddeusz"
,
"Tadeas"
,
"Tadeo"
,
"Tades"
,
"Tadio"
,
"Tailor"
,
"Tait"
,
"Taite"
,
"Talbert"
,
"Talbot"
,
"Tallie"
,
"Tally"
,
"Tam"
,
"Tamas"
,
"Tammie"
,
"Tammy"
,
"Tan"
,
"Tann"
,
"Tanner"
,
"Tanney"
,
"Tannie"
,
"Tanny"
,
"Tarrance"
,
"Tate"
,
"Taylor"
,
"Teador"
,
"Ted"
,
"Tedd"
,
"Teddie"
,
"Teddy"
,
"Tedie"
,
"Tedman"
,
"Tedmund"
,
"Temp"
,
"Temple"
,
"Templeton"
,
"Teodoor"
,
"Teodor"
,
"Teodorico"
,
"Teodoro"
,
"Terence"
,
"Terencio"
,
"Terrance"
,
"Terrel"
,
"Terrell"
,
"Terrence"
,
"Terri"
,
"Terrill"
,
"Terry"
,
"Thacher"
,
"Thaddeus"
,
"Thaddus"
,
"Thadeus"
,
"Thain"
,
"Thaine"
,
"Thane"
,
"Thatch"
,
"Thatcher"
,
"Thaxter"
,
"Thayne"
,
"Thebault"
,
"Thedric"
,
"Thedrick"
,
"Theo"
,
"Theobald"
,
"Theodor"
,
"Theodore"
,
"Theodoric"
,
"Thibaud"
,
"Thibaut"
,
"Thom"
,
"Thoma"
,
"Thomas"
,
"Thor"
,
"Thorin"
,
"Thorn"
,
"Thorndike"
,
"Thornie"
,
"Thornton"
,
"Thorny"
,
"Thorpe"
,
"Thorstein"
,
"Thorsten"
,
"Thorvald"
,
"Thurstan"
,
"Thurston"
,
"Tibold"
,
"Tiebold"
,
"Tiebout"
,
"Tiler"
,
"Tim"
,
"Timmie"
,
"Timmy"
,
"Timofei"
,
"Timoteo"
,
"Timothee"
,
"Timotheus"
,
"Timothy"
,
"Tirrell"
,
"Tito"
,
"Titos"
,
"Titus"
,
"Tobe"
,
"Tobiah"
,
"Tobias"
,
"Tobie"
,
"Tobin"
,
"Tobit"
,
"Toby"
,
"Tod"
,
"Todd"
,
"Toddie"
,
"Toddy"
,
"Toiboid"
,
"Tom"
,
"Tomas"
,
"Tomaso"
,
"Tome"
,
"Tomkin"
,
"Tomlin"
,
"Tommie"
,
"Tommy"
,
"Tonnie"
,
"Tony"
,
"Tore"
,
"Torey"
,
"Torin"
,
"Torr"
,
"Torrance"
,
"Torre"
,
"Torrence"
,
"Torrey"
,
"Torrin"
,
"Torry"
,
"Town"
,
"Towney"
,
"Townie"
,
"Townsend"
,
"Towny"
,
"Trace"
,
"Tracey"
,
"Tracie"
,
"Tracy"
,
"Traver"
,
"Travers"
,
"Travis"
,
"Travus"
,
"Trefor"
,
"Tremain"
,
"Tremaine"
,
"Tremayne"
,
"Trent"
,
"Trenton"
,
"Trev"
,
"Trevar"
,
"Trever"
,
"Trevor"
,
"Trey"
,
"Trip"
,
"Tripp"
,
"Tris"
,
"Tristam"
,
"Tristan"
,
"Troy"
,
"Trstram"
,
"Trueman"
,
"Trumaine"
,
"Truman"
,
"Trumann"
,
"Tuck"
,
"Tucker"
,
"Tuckie"
,
"Tucky"
,
"Tudor"
,
"Tull"
,
"Tulley"
,
"Tully"
,
"Turner"
,
"Ty"
,
"Tybalt"
,
"Tye"
,
"Tyler"
,
"Tymon"
,
"Tymothy"
,
"Tynan"
,
"Tyrone"
,
"Tyrus"
,
"Tyson"
,
"Udale"
,
"Udall"
,
"Udell"
,
"Ugo"
,
"Ulberto"
,
"Ulick"
,
"Ulises"
,
"Ulric"
,
"Ulrich"
,
"Ulrick"
,
"Ulysses"
,
"Umberto"
,
"Upton"
,
"Urbain"
,
"Urban"
,
"Urbano"
,
"Urbanus"
,
"Uri"
,
"Uriah"
,
"Uriel"
,
"Urson"
,
"Vachel"
,
"Vaclav"
,
"Vail"
,
"Val"
,
"Valdemar"
,
"Vale"
,
"Valentijn"
,
"Valentin"
,
"Valentine"
,
"Valentino"
,
"Valle"
,
"Van"
,
"Vance"
,
"Vanya"
,
"Vasili"
,
"Vasilis"
,
"Vasily"
,
"Vassili"
,
"Vassily"
,
"Vaughan"
,
"Vaughn"
,
"Verge"
,
"Vergil"
,
"Vern"
,
"Verne"
,
"Vernen"
,
"Verney"
,
"Vernon"
,
"Vernor"
,
"Vic"
,
"Vick"
,
"Victoir"
,
"Victor"
,
"Vidovic"
,
"Vidovik"
,
"Vin"
,
"Vince"
,
"Vincent"
,
"Vincents"
,
"Vincenty"
,
"Vincenz"
,
"Vinnie"
,
"Vinny"
,
"Vinson"
,
"Virge"
,
"Virgie"
,
"Virgil"
,
"Virgilio"
,
"Vite"
,
"Vito"
,
"Vittorio"
,
"Vlad"
,
"Vladamir"
,
"Vladimir"
,
"Von"
,
"Wade"
,
"Wadsworth"
,
"Wain"
,
"Wainwright"
,
"Wait"
,
"Waite"
,
"Waiter"
,
"Wake"
,
"Wakefield"
,
"Wald"
,
"Waldemar"
,
"Walden"
,
"Waldo"
,
"Waldon"
,
"Walker"
,
"Wallace"
,
"Wallache"
,
"Wallas"
,
"Wallie"
,
"Wallis"
,
"Wally"
,
"Walsh"
,
"Walt"
,
"Walther"
,
"Walton"
,
"Wang"
,
"Ward"
,
"Warde"
,
"Warden"
,
"Ware"
,
"Waring"
,
"Warner"
,
"Warren"
,
"Wash"
,
"Washington"
,
"Wat"
,
"Waverley"
,
"Waverly"
,
"Way"
,
"Waylan"
,
"Wayland"
,
"Waylen"
,
"Waylin"
,
"Waylon"
,
"Wayne"
,
"Web"
,
"Webb"
,
"Weber"
,
"Webster"
,
"Weidar"
,
"Weider"
,
"Welbie"
,
"Welby"
,
"Welch"
,
"Wells"
,
"Welsh"
,
"Wendall"
,
"Wendel"
,
"Wendell"
,
"Werner"
,
"Wernher"
,
"Wes"
,
"Wesley"
,
"West"
,
"Westbrook"
,
"Westbrooke"
,
"Westleigh"
,
"Westley"
,
"Weston"
,
"Weylin"
,
"Wheeler"
,
"Whit"
,
"Whitaker"
,
"Whitby"
,
"Whitman"
,
"Whitney"
,
"Whittaker"
,
"Wiatt"
,
"Wilbert"
,
"Wilbur"
,
"Wilburt"
,
"Wilden"
,
"Wildon"
,
"Wilek"
,
"Wiley"
,
"Wilfred"
,
"Wilfrid"
,
"Wilhelm"
,
"Will"
,
"Willard"
,
"Willdon"
,
"Willem"
,
"Willey"
,
"Willi"
,
"William"
,
"Willie"
,
"Willis"
,
"Willy"
,
"Wilmar"
,
"Wilmer"
,
"Wilt"
,
"Wilton"
,
"Win"
,
"Windham"
,
"Winfield"
,
"Winfred"
,
"Winifield"
,
"Winn"
,
"Winnie"
,
"Winny"
,
"Winslow"
,
"Winston"
,
"Winthrop"
,
"Wit"
,
"Wittie"
,
"Witty"
,
"Wolf"
,
"Wolfgang"
,
"Wolfie"
,
"Wolfy"
,
"Wood"
,
"Woodie"
,
"Woodman"
,
"Woodrow"
,
"Woody"
,
"Worden"
,
"Worth"
,
"Worthington"
,
"Worthy"
,
"Wright"
,
"Wyatan"
,
"Wyatt"
,
"Wye"
,
"Wylie"
,
"Wyn"
,
"Wyndham"
,
"Wynn"
,
"Xavier"
,
"Xenos"
,
"Xerxes"
,
"Xever"
,
"Ximenes"
,
"Ximenez"
,
"Xymenes"
,
"Yale"
,
"Yanaton"
,
"Yance"
,
"Yancey"
,
"Yancy"
,
"Yank"
,
"Yankee"
,
"Yard"
,
"Yardley"
,
"Yehudi"
,
"Yehudit"
,
"Yorgo"
,
"Yorgos"
,
"York"
,
"Yorke"
,
"Yorker"
,
"Yul"
,
"Yule"
,
"Yulma"
,
"Yuma"
,
"Yuri"
,
"Yurik"
,
"Yves"
,
"Yvon"
,
"Yvor"
,
"Zaccaria"
,
"Zach"
,
"Zacharia"
,
"Zachariah"
,
"Zacharias"
,
"Zacharie"
,
"Zachary"
,
"Zacherie"
,
"Zachery"
,
"Zack"
,
"Zackariah"
,
"Zak"
,
"Zane"
,
"Zared"
,
"Zeb"
,
"Zebadiah"
,
"Zebedee"
,
"Zebulen"
,
"Zebulon"
,
"Zechariah"
,
"Zed"
,
"Zedekiah"
,
"Zeke"
,
"Zelig"
,
"Zerk"
,
"Zollie"
,
"Zolly"
]

},{}],174:[function(require,module,exports){
module.exports=[
"Aaberg"
,
"Aalst"
,
"Aara"
,
"Aaren"
,
"Aarika"
,
"Aaron"
,
"Aaronson"
,
"Ab"
,
"Aba"
,
"Abad"
,
"Abagael"
,
"Abagail"
,
"Abana"
,
"Abate"
,
"Abba"
,
"Abbate"
,
"Abbe"
,
"Abbey"
,
"Abbi"
,
"Abbie"
,
"Abbot"
,
"Abbotsen"
,
"Abbotson"
,
"Abbotsun"
,
"Abbott"
,
"Abbottson"
,
"Abby"
,
"Abbye"
,
"Abdel"
,
"Abdella"
,
"Abdu"
,
"Abdul"
,
"Abdulla"
,
"Abe"
,
"Abebi"
,
"Abel"
,
"Abelard"
,
"Abell"
,
"Abercromby"
,
"Abernathy"
,
"Abernon"
,
"Abert"
,
"Abeu"
,
"Abey"
,
"Abie"
,
"Abigael"
,
"Abigail"
,
"Abigale"
,
"Abijah"
,
"Abisha"
,
"Abisia"
,
"Abixah"
,
"Abner"
,
"Aborn"
,
"Abott"
,
"Abra"
,
"Abraham"
,
"Abrahams"
,
"Abrahamsen"
,
"Abrahan"
,
"Abram"
,
"Abramo"
,
"Abrams"
,
"Abramson"
,
"Abran"
,
"Abroms"
,
"Absa"
,
"Absalom"
,
"Abshier"
,
"Acacia"
,
"Acalia"
,
"Accalia"
,
"Ace"
,
"Acey"
,
"Acherman"
,
"Achilles"
,
"Achorn"
,
"Acie"
,
"Acima"
,
"Acker"
,
"Ackerley"
,
"Ackerman"
,
"Ackler"
,
"Ackley"
,
"Acquah"
,
"Acus"
,
"Ad"
,
"Ada"
,
"Adabel"
,
"Adabelle"
,
"Adachi"
,
"Adah"
,
"Adaha"
,
"Adai"
,
"Adaiha"
,
"Adair"
,
"Adal"
,
"Adala"
,
"Adalai"
,
"Adalard"
,
"Adalbert"
,
"Adalheid"
,
"Adali"
,
"Adalia"
,
"Adaliah"
,
"Adalie"
,
"Adaline"
,
"Adall"
,
"Adallard"
,
"Adam"
,
"Adama"
,
"Adamec"
,
"Adamek"
,
"Adamik"
,
"Adamina"
,
"Adaminah"
,
"Adamis"
,
"Adamo"
,
"Adamok"
,
"Adams"
,
"Adamsen"
,
"Adamski"
,
"Adamson"
,
"Adamsun"
,
"Adan"
,
"Adao"
,
"Adar"
,
"Adara"
,
"Adaurd"
,
"Aday"
,
"Adda"
,
"Addam"
,
"Addi"
,
"Addia"
,
"Addie"
,
"Addiego"
,
"Addiel"
,
"Addis"
,
"Addison"
,
"Addy"
,
"Ade"
,
"Adebayo"
,
"Adel"
,
"Adela"
,
"Adelaida"
,
"Adelaide"
,
"Adelaja"
,
"Adelbert"
,
"Adele"
,
"Adelheid"
,
"Adelia"
,
"Adelice"
,
"Adelina"
,
"Adelind"
,
"Adeline"
,
"Adella"
,
"Adelle"
,
"Adelpho"
,
"Adelric"
,
"Adena"
,
"Ader"
,
"Adest"
,
"Adey"
,
"Adham"
,
"Adhamh"
,
"Adhern"
,
"Adi"
,
"Adiana"
,
"Adiel"
,
"Adiell"
,
"Adigun"
,
"Adila"
,
"Adim"
,
"Adin"
,
"Adina"
,
"Adine"
,
"Adis"
,
"Adkins"
,
"Adlai"
,
"Adlar"
,
"Adlare"
,
"Adlay"
,
"Adlee"
,
"Adlei"
,
"Adler"
,
"Adley"
,
"Adna"
,
"Adnah"
,
"Adne"
,
"Adnopoz"
,
"Ado"
,
"Adolf"
,
"Adolfo"
,
"Adolph"
,
"Adolphe"
,
"Adolpho"
,
"Adolphus"
,
"Adon"
,
"Adonis"
,
"Adora"
,
"Adore"
,
"Adoree"
,
"Adorl"
,
"Adorne"
,
"Adrea"
,
"Adrell"
,
"Adria"
,
"Adriaens"
,
"Adrial"
,
"Adrian"
,
"Adriana"
,
"Adriane"
,
"Adrianna"
,
"Adrianne"
,
"Adriano"
,
"Adriel"
,
"Adriell"
,
"Adrien"
,
"Adriena"
,
"Adriene"
,
"Adrienne"
,
"Adur"
,
"Aekerly"
,
"Aelber"
,
"Aenea"
,
"Aeneas"
,
"Aeneus"
,
"Aeniah"
,
"Aenneea"
,
"Aeriel"
,
"Aeriela"
,
"Aeriell"
,
"Affer"
,
"Affra"
,
"Affrica"
,
"Afra"
,
"Africa"
,
"Africah"
,
"Afrika"
,
"Afrikah"
,
"Afton"
,
"Ag"
,
"Agace"
,
"Agamemnon"
,
"Agan"
,
"Agata"
,
"Agate"
,
"Agatha"
,
"Agathe"
,
"Agathy"
,
"Agbogla"
,
"Agee"
,
"Aggappe"
,
"Aggappera"
,
"Aggappora"
,
"Aggarwal"
,
"Aggi"
,
"Aggie"
,
"Aggri"
,
"Aggy"
,
"Agle"
,
"Agler"
,
"Agna"
,
"Agnella"
,
"Agnes"
,
"Agnese"
,
"Agnesse"
,
"Agneta"
,
"Agnew"
,
"Agnola"
,
"Agostino"
,
"Agosto"
,
"Agretha"
,
"Agripina"
,
"Agrippina"
,
"Aguayo"
,
"Agueda"
,
"Aguie"
,
"Aguste"
,
"Agustin"
,
"Ahab"
,
"Aharon"
,
"Ahasuerus"
,
"Ahders"
,
"Ahearn"
,
"Ahern"
,
"Ahl"
,
"Ahlgren"
,
"Ahmad"
,
"Ahmar"
,
"Ahmed"
,
"Ahola"
,
"Aholah"
,
"Aholla"
,
"Ahoufe"
,
"Ahouh"
,
"Ahrendt"
,
"Ahrens"
,
"Ahron"
,
"Aia"
,
"Aida"
,
"Aidan"
,
"Aiden"
,
"Aiello"
,
"Aigneis"
,
"Aiken"
,
"Aila"
,
"Ailbert"
,
"Aile"
,
"Ailee"
,
"Aileen"
,
"Ailene"
,
"Ailey"
,
"Aili"
,
"Ailin"
,
"Ailina"
,
"Ailis"
,
"Ailsa"
,
"Ailssa"
,
"Ailsun"
,
"Ailyn"
,
"Aime"
,
"Aimee"
,
"Aimil"
,
"Aimo"
,
"Aindrea"
,
"Ainslee"
,
"Ainsley"
,
"Ainslie"
,
"Ainsworth"
,
"Airel"
,
"Aires"
,
"Airla"
,
"Airlee"
,
"Airlia"
,
"Airliah"
,
"Airlie"
,
"Aisha"
,
"Ajani"
,
"Ajax"
,
"Ajay"
,
"Ajit"
,
"Akanke"
,
"Akel"
,
"Akela"
,
"Aker"
,
"Akerboom"
,
"Akerley"
,
"Akers"
,
"Akeyla"
,
"Akeylah"
,
"Akili"
,
"Akim"
,
"Akin"
,
"Akins"
,
"Akira"
,
"Aklog"
,
"Aksel"
,
"Aksoyn"
,
"Al"
,
"Alabaster"
,
"Alage"
,
"Alain"
,
"Alaine"
,
"Alair"
,
"Alake"
,
"Alameda"
,
"Alan"
,
"Alana"
,
"Alanah"
,
"Aland"
,
"Alane"
,
"Alanna"
,
"Alano"
,
"Alansen"
,
"Alanson"
,
"Alard"
,
"Alaric"
,
"Alarice"
,
"Alarick"
,
"Alarise"
,
"Alasdair"
,
"Alastair"
,
"Alasteir"
,
"Alaster"
,
"Alatea"
,
"Alathia"
,
"Alayne"
,
"Alba"
,
"Alban"
,
"Albarran"
,
"Albemarle"
,
"Alben"
,
"Alber"
,
"Alberic"
,
"Alberik"
,
"Albers"
,
"Albert"
,
"Alberta"
,
"Albertina"
,
"Albertine"
,
"Alberto"
,
"Albertson"
,
"Albie"
,
"Albin"
,
"Albina"
,
"Albion"
,
"Alboran"
,
"Albrecht"
,
"Albric"
,
"Albright"
,
"Albur"
,
"Alburg"
,
"Alburga"
,
"Alby"
,
"Alcina"
,
"Alcine"
,
"Alcinia"
,
"Alcock"
,
"Alcot"
,
"Alcott"
,
"Alcus"
,
"Alda"
,
"Aldarcie"
,
"Aldarcy"
,
"Aldas"
,
"Alded"
,
"Alden"
,
"Aldercy"
,
"Alderman"
,
"Alderson"
,
"Aldin"
,
"Aldis"
,
"Aldo"
,
"Aldon"
,
"Aldora"
,
"Aldos"
,
"Aldous"
,
"Aldred"
,
"Aldredge"
,
"Aldric"
,
"Aldrich"
,
"Aldridge"
,
"Alduino"
,
"Aldus"
,
"Aldwin"
,
"Aldwon"
,
"Alec"
,
"Alecia"
,
"Aleck"
,
"Aleda"
,
"Aleece"
,
"Aleedis"
,
"Aleen"
,
"Aleetha"
,
"Alegre"
,
"Alejandra"
,
"Alejandrina"
,
"Alejandro"
,
"Alejo"
,
"Alejoa"
,
"Alek"
,
"Aleksandr"
,
"Alena"
,
"Alene"
,
"Alenson"
,
"Aleras"
,
"Aleris"
,
"Aleron"
,
"Alesandrini"
,
"Alessandra"
,
"Alessandro"
,
"Aleta"
,
"Aletha"
,
"Alethea"
,
"Alethia"
,
"Aletta"
,
"Alex"
,
"Alexa"
,
"Alexander"
,
"Alexandr"
,
"Alexandra"
,
"Alexandre"
,
"Alexandria"
,
"Alexandrina"
,
"Alexandro"
,
"Alexandros"
,
"Alexei"
,
"Alexi"
,
"Alexia"
,
"Alexina"
,
"Alexine"
,
"Alexio"
,
"Alexis"
,
"Aley"
,
"Aleydis"
,
"Alf"
,
"Alfeus"
,
"Alfi"
,
"Alfie"
,
"Alfons"
,
"Alfonse"
,
"Alfonso"
,
"Alfonzo"
,
"Alford"
,
"Alfred"
,
"Alfreda"
,
"Alfredo"
,
"Alfy"
,
"Algar"
,
"Alger"
,
"Algernon"
,
"Algie"
,
"Alguire"
,
"Algy"
,
"Ali"
,
"Alia"
,
"Aliber"
,
"Alic"
,
"Alica"
,
"Alice"
,
"Alicea"
,
"Alicia"
,
"Alick"
,
"Alida"
,
"Alidia"
,
"Alidis"
,
"Alidus"
,
"Alie"
,
"Alika"
,
"Alikee"
,
"Alina"
,
"Aline"
,
"Alinna"
,
"Alis"
,
"Alisa"
,
"Alisan"
,
"Alisander"
,
"Alisen"
,
"Alisha"
,
"Alisia"
,
"Alison"
,
"Alissa"
,
"Alistair"
,
"Alister"
,
"Alisun"
,
"Alita"
,
"Alitha"
,
"Alithea"
,
"Alithia"
,
"Alitta"
,
"Alius"
,
"Alix"
,
"Aliza"
,
"Alla"
,
"Allain"
,
"Allan"
,
"Allana"
,
"Allanson"
,
"Allard"
,
"Allare"
,
"Allayne"
,
"Allbee"
,
"Allcot"
,
"Alleen"
,
"Allegra"
,
"Allen"
,
"Allene"
,
"Alleras"
,
"Allerie"
,
"Alleris"
,
"Allerus"
,
"Alley"
,
"Alleyn"
,
"Alleyne"
,
"Alli"
,
"Allianora"
,
"Alliber"
,
"Allie"
,
"Allin"
,
"Allina"
,
"Allis"
,
"Allisan"
,
"Allison"
,
"Allissa"
,
"Allista"
,
"Allister"
,
"Allistir"
,
"Allix"
,
"Allmon"
,
"Allred"
,
"Allrud"
,
"Allsopp"
,
"Allsun"
,
"Allveta"
,
"Allwein"
,
"Allx"
,
"Ally"
,
"Allyce"
,
"Allyn"
,
"Allys"
,
"Allyson"
,
"Alma"
,
"Almallah"
,
"Almeda"
,
"Almeeta"
,
"Almeida"
,
"Almena"
,
"Almeria"
,
"Almeta"
,
"Almira"
,
"Almire"
,
"Almita"
,
"Almond"
,
"Almund"
,
"Alo"
,
"Alodee"
,
"Alodi"
,
"Alodie"
,
"Aloin"
,
"Aloise"
,
"Aloisia"
,
"Aloisius"
,
"Aloke"
,
"Alon"
,
"Alonso"
,
"Alonzo"
,
"Aloysia"
,
"Aloysius"
,
"Alper"
,
"Alpers"
,
"Alpert"
,
"Alphard"
,
"Alpheus"
,
"Alphonsa"
,
"Alphonse"
,
"Alphonsine"
,
"Alphonso"
,
"AlrZc"
,
"Alric"
,
"Alrich"
,
"Alrick"
,
"Alroi"
,
"Alroy"
,
"Also"
,
"Alston"
,
"Alsworth"
,
"Alta"
,
"Altaf"
,
"Alten"
,
"Althea"
,
"Althee"
,
"Altheta"
,
"Altis"
,
"Altman"
,
"Alton"
,
"Aluin"
,
"Aluino"
,
"Alurd"
,
"Alurta"
,
"Alva"
,
"Alvan"
,
"Alvar"
,
"Alvarez"
,
"Alver"
,
"Alvera"
,
"Alverson"
,
"Alverta"
,
"Alves"
,
"Alveta"
,
"Alviani"
,
"Alvie"
,
"Alvin"
,
"Alvina"
,
"Alvinia"
,
"Alvira"
,
"Alvis"
,
"Alvita"
,
"Alvord"
,
"Alvy"
,
"Alwin"
,
"Alwitt"
,
"Alwyn"
,
"Alyce"
,
"Alyda"
,
"Alyose"
,
"Alyosha"
,
"Alys"
,
"Alysa"
,
"Alyse"
,
"Alysia"
,
"Alyson"
,
"Alysoun"
,
"Alyss"
,
"Alyssa"
,
"Alyworth"
,
"Ama"
,
"Amabel"
,
"Amabelle"
,
"Amabil"
,
"Amadas"
,
"Amadeo"
,
"Amadeus"
,
"Amadis"
,
"Amado"
,
"Amador"
,
"Amadus"
,
"Amal"
,
"Amalbena"
,
"Amalberga"
,
"Amalbergas"
,
"Amalburga"
,
"Amalea"
,
"Amalee"
,
"Amaleta"
,
"Amalia"
,
"Amalie"
,
"Amalita"
,
"Amalle"
,
"Aman"
,
"Amand"
,
"Amanda"
,
"Amandi"
,
"Amandie"
,
"Amando"
,
"Amandy"
,
"Amann"
,
"Amar"
,
"Amara"
,
"Amaral"
,
"Amaras"
,
"Amarette"
,
"Amargo"
,
"Amari"
,
"Amarillas"
,
"Amarillis"
,
"Amaris"
,
"Amary"
,
"Amaryl"
,
"Amaryllis"
,
"Amasa"
,
"Amata"
,
"Amathist"
,
"Amathiste"
,
"Amati"
,
"Amato"
,
"Amatruda"
,
"Amaty"
,
"Amber"
,
"Amberly"
,
"Ambert"
,
"Ambie"
,
"Amble"
,
"Ambler"
,
"Ambrogino"
,
"Ambrogio"
,
"Ambros"
,
"Ambrosane"
,
"Ambrose"
,
"Ambrosi"
,
"Ambrosia"
,
"Ambrosine"
,
"Ambrosio"
,
"Ambrosius"
,
"Ambur"
,
"Amby"
,
"Ame"
,
"Amedeo"
,
"Amelia"
,
"Amelie"
,
"Amelina"
,
"Ameline"
,
"Amelita"
,
"Amena"
,
"Amend"
,
"Amerigo"
,
"Amero"
,
"Amersham"
,
"Amery"
,
"Ames"
,
"Amethist"
,
"Amethyst"
,
"Ami"
,
"Amias"
,
"Amice"
,
"Amick"
,
"Amie"
,
"Amiel"
,
"Amieva"
,
"Amii"
,
"Amil"
,
"Amin"
,
"Aminta"
,
"Amir"
,
"Amitie"
,
"Amity"
,
"Amling"
,
"Ammadas"
,
"Ammadis"
,
"Ammamaria"
,
"Ammann"
,
"Ammon"
,
"Amoakuh"
,
"Amor"
,
"Amora"
,
"Amoreta"
,
"Amorete"
,
"Amorette"
,
"Amorita"
,
"Amoritta"
,
"Amory"
,
"Amos"
,
"Amr"
,
"Amrita"
,
"Amsden"
,
"Amund"
,
"Amy"
,
"Amyas"
,
"Amye"
,
"Am�lie"
,
"An"
,
"Ana"
,
"Anabal"
,
"Anabel"
,
"Anabella"
,
"Anabelle"
,
"Anagnos"
,
"Analiese"
,
"Analise"
,
"Anallese"
,
"Anallise"
,
"Anana"
,
"Ananna"
,
"Anastas"
,
"Anastase"
,
"Anastasia"
,
"Anastasie"
,
"Anastasio"
,
"Anastasius"
,
"Anastassia"
,
"Anastatius"
,
"Anastice"
,
"Anastos"
,
"Anatol"
,
"Anatola"
,
"Anatole"
,
"Anatolio"
,
"Anatollo"
,
"Ancalin"
,
"Ancel"
,
"Ancelin"
,
"Anceline"
,
"Ancell"
,
"Anchie"
,
"Ancier"
,
"Ancilin"
,
"Andee"
,
"Andeee"
,
"Andel"
,
"Ander"
,
"Anderea"
,
"Anderegg"
,
"Anderer"
,
"Anders"
,
"Andersen"
,
"Anderson"
,
"Andert"
,
"Andi"
,
"Andie"
,
"Andonis"
,
"Andra"
,
"Andrade"
,
"Andras"
,
"Andre"
,
"Andrea"
,
"Andreana"
,
"Andreas"
,
"Andree"
,
"Andrei"
,
"Andrej"
,
"Andrel"
,
"Andres"
,
"Andrew"
,
"Andrews"
,
"Andrey"
,
"Andri"
,
"Andria"
,
"Andriana"
,
"Andrien"
,
"Andriette"
,
"Andris"
,
"Andromache"
,
"Andromada"
,
"Andromeda"
,
"Andromede"
,
"Andros"
,
"Androw"
,
"Andrus"
,
"Andryc"
,
"Andy"
,
"Anestassia"
,
"Anet"
,
"Anett"
,
"Anetta"
,
"Anette"
,
"Aney"
,
"Angadreme"
,
"Angadresma"
,
"Ange"
,
"Angel"
,
"Angela"
,
"Angele"
,
"Angeli"
,
"Angelia"
,
"Angelica"
,
"Angelico"
,
"Angelika"
,
"Angelina"
,
"Angeline"
,
"Angelique"
,
"Angelis"
,
"Angelita"
,
"Angell"
,
"Angelle"
,
"Angelo"
,
"Angi"
,
"Angie"
,
"Angil"
,
"Angle"
,
"Anglim"
,
"Anglo"
,
"Angrist"
,
"Angus"
,
"Angy"
,
"Anh"
,
"Ania"
,
"Aniakudo"
,
"Anica"
,
"Aniela"
,
"Anil"
,
"Anis"
,
"Anissa"
,
"Anita"
,
"Anitra"
,
"Aniweta"
,
"Anjali"
,
"Anjanette"
,
"Anjela"
,
"Ankeny"
,
"Ankney"
,
"Ann"
,
"Ann-Marie"
,
"Anna"
,
"Anna-Diana"
,
"Anna-Diane"
,
"Anna-Maria"
,
"Annabal"
,
"Annabel"
,
"Annabela"
,
"Annabell"
,
"Annabella"
,
"Annabelle"
,
"Annadiana"
,
"Annadiane"
,
"Annalee"
,
"Annaliese"
,
"Annalise"
,
"Annamaria"
,
"Annamarie"
,
"Anne"
,
"Anne-Corinne"
,
"Anne-Marie"
,
"Annecorinne"
,
"Anneliese"
,
"Annelise"
,
"Annemarie"
,
"Annetta"
,
"Annette"
,
"Anni"
,
"Annia"
,
"Annice"
,
"Annie"
,
"Anniken"
,
"Annis"
,
"Annissa"
,
"Annmaria"
,
"Annmarie"
,
"Annnora"
,
"Annora"
,
"Annorah"
,
"Annunciata"
,
"Anny"
,
"Anora"
,
"Anse"
,
"Ansel"
,
"Ansela"
,
"Ansell"
,
"Anselm"
,
"Anselma"
,
"Anselme"
,
"Anselmi"
,
"Anselmo"
,
"Ansilma"
,
"Ansilme"
,
"Ansley"
,
"Anson"
,
"Anstice"
,
"Anstus"
,
"Antebi"
,
"Anthe"
,
"Anthea"
,
"Anthia"
,
"Anthiathia"
,
"Anthony"
,
"Antin"
,
"Antipas"
,
"Antipus"
,
"Antoine"
,
"Antoinetta"
,
"Antoinette"
,
"Anton"
,
"Antone"
,
"Antonella"
,
"Antonetta"
,
"Antoni"
,
"Antonia"
,
"Antonie"
,
"Antonietta"
,
"Antonin"
,
"Antonina"
,
"Antonino"
,
"Antonio"
,
"Antonius"
,
"Antons"
,
"Antony"
,
"Antrim"
,
"Anurag"
,
"Anuska"
,
"Any"
,
"Anya"
,
"Anyah"
,
"Anzovin"
,
"Apfel"
,
"Apfelstadt"
,
"Apgar"
,
"Aphra"
,
"Aphrodite"
,
"Apicella"
,
"Apollo"
,
"Apollus"
,
"Apostles"
,
"Appel"
,
"Apple"
,
"Appleby"
,
"Appledorf"
,
"Applegate"
,
"Appleton"
,
"Appolonia"
,
"Apps"
,
"April"
,
"Aprile"
,
"Aprilette"
,
"Apthorp"
,
"Apul"
,
"Ara"
,
"Arabeila"
,
"Arabel"
,
"Arabela"
,
"Arabele"
,
"Arabella"
,
"Arabelle"
,
"Arad"
,
"Arakawa"
,
"Araldo"
,
"Aramanta"
,
"Aramen"
,
"Aramenta"
,
"Araminta"
,
"Aran"
,
"Arand"
,
"Arathorn"
,
"Arbe"
,
"Arber"
,
"Arbuckle"
,
"Arch"
,
"Archaimbaud"
,
"Archambault"
,
"Archangel"
,
"Archer"
,
"Archibald"
,
"Archibaldo"
,
"Archibold"
,
"Archie"
,
"Archle"
,
"Archy"
,
"Ard"
,
"Arda"
,
"Ardath"
,
"Arde"
,
"Ardeen"
,
"Ardeha"
,
"Ardehs"
,
"Ardel"
,
"Ardelia"
,
"Ardelis"
,
"Ardell"
,
"Ardella"
,
"Ardelle"
,
"Arden"
,
"Ardene"
,
"Ardenia"
,
"Ardeth"
,
"Ardie"
,
"Ardin"
,
"Ardine"
,
"Ardis"
,
"Ardisj"
,
"Ardith"
,
"Ardme"
,
"Ardolino"
,
"Ardra"
,
"Ardrey"
,
"Ardussi"
,
"Ardy"
,
"Ardyce"
,
"Ardys"
,
"Ardyth"
,
"Arel"
,
"Arela"
,
"Arella"
,
"Arelus"
,
"Aret"
,
"Areta"
,
"Aretha"
,
"Aretina"
,
"Aretta"
,
"Arette"
,
"Arezzini"
,
"Argent"
,
"Argile"
,
"Argus"
,
"Argyle"
,
"Argyres"
,
"Arhna"
,
"Ari"
,
"Aria"
,
"Ariadne"
,
"Ariana"
,
"Ariane"
,
"Arianie"
,
"Arianna"
,
"Arianne"
,
"Aribold"
,
"Aric"
,
"Arica"
,
"Arick"
,
"Aridatha"
,
"Arie"
,
"Ariel"
,
"Ariela"
,
"Ariella"
,
"Arielle"
,
"Ariew"
,
"Arin"
,
"Ario"
,
"Arissa"
,
"Aristotle"
,
"Arita"
,
"Arjan"
,
"Arjun"
,
"Ark"
,
"Arlan"
,
"Arlana"
,
"Arlee"
,
"Arleen"
,
"Arlen"
,
"Arlena"
,
"Arlene"
,
"Arleta"
,
"Arlette"
,
"Arley"
,
"Arleyne"
,
"Arlie"
,
"Arliene"
,
"Arlin"
,
"Arlina"
,
"Arlinda"
,
"Arline"
,
"Arlo"
,
"Arlon"
,
"Arluene"
,
"Arly"
,
"Arlyn"
,
"Arlyne"
,
"Arlynne"
,
"Armalda"
,
"Armalla"
,
"Armallas"
,
"Arman"
,
"Armand"
,
"Armanda"
,
"Armando"
,
"Armbrecht"
,
"Armbruster"
,
"Armelda"
,
"Armil"
,
"Armilda"
,
"Armilla"
,
"Armillas"
,
"Armillda"
,
"Armillia"
,
"Armin"
,
"Armington"
,
"Armitage"
,
"Armond"
,
"Armstrong"
,
"Armyn"
,
"Arnaldo"
,
"Arnaud"
,
"Arndt"
,
"Arne"
,
"Arnelle"
,
"Arney"
,
"Arni"
,
"Arnie"
,
"Arno"
,
"Arnold"
,
"Arnoldo"
,
"Arnon"
,
"Arnst"
,
"Arnuad"
,
"Arnulfo"
,
"Arny"
,
"Arola"
,
"Aron"
,
"Arondel"
,
"Arondell"
,
"Aronoff"
,
"Aronow"
,
"Aronson"
,
"Arquit"
,
"Arratoon"
,
"Arri"
,
"Arria"
,
"Arrio"
,
"Arron"
,
"Arst"
,
"Art"
,
"Arta"
,
"Artair"
,
"Artamas"
,
"Arte"
,
"Artema"
,
"Artemas"
,
"Artemis"
,
"Artemisa"
,
"Artemisia"
,
"Artemus"
,
"Arther"
,
"Arthur"
,
"Artie"
,
"Artima"
,
"Artimas"
,
"Artina"
,
"Artur"
,
"Arturo"
,
"Artus"
,
"Arty"
,
"Aruabea"
,
"Arun"
,
"Arundel"
,
"Arundell"
,
"Arv"
,
"Arva"
,
"Arvad"
,
"Arvell"
,
"Arvid"
,
"Arvie"
,
"Arvin"
,
"Arvind"
,
"Arvo"
,
"Arvonio"
,
"Arvy"
,
"Ary"
,
"Aryn"
,
"As"
,
"Asa"
,
"Asabi"
,
"Asante"
,
"Asaph"
,
"Asare"
,
"Aschim"
,
"Ase"
,
"Asel"
,
"Ash"
,
"Asha"
,
"Ashbaugh"
,
"Ashbey"
,
"Ashby"
,
"Ashelman"
,
"Ashely"
,
"Asher"
,
"Ashford"
,
"Ashia"
,
"Ashien"
,
"Ashil"
,
"Ashjian"
,
"Ashla"
,
"Ashlan"
,
"Ashlee"
,
"Ashleigh"
,
"Ashlen"
,
"Ashley"
,
"Ashli"
,
"Ashlie"
,
"Ashlin"
,
"Ashling"
,
"Ashly"
,
"Ashman"
,
"Ashmead"
,
"Ashok"
,
"Ashraf"
,
"Ashti"
,
"Ashton"
,
"Ashwell"
,
"Ashwin"
,
"Asia"
,
"Askari"
,
"Askwith"
,
"Aslam"
,
"Asp"
,
"Aspa"
,
"Aspasia"
,
"Aspia"
,
"Asquith"
,
"Assisi"
,
"Asta"
,
"Astera"
,
"Asteria"
,
"Astor"
,
"Astra"
,
"Astraea"
,
"Astrahan"
,
"Astrea"
,
"Astred"
,
"Astri"
,
"Astrid"
,
"Astrix"
,
"Astto"
,
"Asuncion"
,
"Atal"
,
"Atalanta"
,
"Atalante"
,
"Atalanti"
,
"Atalaya"
,
"Atalayah"
,
"Atalee"
,
"Ataliah"
,
"Atalie"
,
"Atalya"
,
"Atcliffe"
,
"Athal"
,
"Athalee"
,
"Athalia"
,
"Athalie"
,
"Athalla"
,
"Athallia"
,
"Athelstan"
,
"Athena"
,
"Athene"
,
"Athenian"
,
"Athey"
,
"Athiste"
,
"Atiana"
,
"Atkins"
,
"Atkinson"
,
"Atlanta"
,
"Atlante"
,
"Atlas"
,
"Atlee"
,
"Atonsah"
,
"Atrice"
,
"Atronna"
,
"Attah"
,
"Attalanta"
,
"Attalie"
,
"Attenborough"
,
"Attenweiler"
,
"Atterbury"
,
"Atthia"
,
"Attlee"
,
"Attwood"
,
"Atul"
,
"Atwater"
,
"Atwekk"
,
"Atwood"
,
"Atworth"
,
"Au"
,
"Aubarta"
,
"Aube"
,
"Auberbach"
,
"Auberon"
,
"Aubert"
,
"Auberta"
,
"Aubigny"
,
"Aubin"
,
"Aubine"
,
"Aubree"
,
"Aubreir"
,
"Aubrette"
,
"Aubrey"
,
"Aubrie"
,
"Aubry"
,
"Auburn"
,
"Auburta"
,
"Aubyn"
,
"Audette"
,
"Audi"
,
"Audie"
,
"Audley"
,
"Audly"
,
"Audra"
,
"Audras"
,
"Audre"
,
"Audres"
,
"Audrey"
,
"Audri"
,
"Audrie"
,
"Audris"
,
"Audrit"
,
"Audry"
,
"Audrye"
,
"Audsley"
,
"Audun"
,
"Audwen"
,
"Audwin"
,
"Audy"
,
"Auerbach"
,
"Aufmann"
,
"Augie"
,
"August"
,
"Augusta"
,
"Auguste"
,
"Augustin"
,
"Augustina"
,
"Augustine"
,
"Augusto"
,
"Augustus"
,
"Augy"
,
"Aulea"
,
"Auliffe"
,
"Aun"
,
"Aundrea"
,
"Aunson"
,
"Aura"
,
"Aurea"
,
"Aurel"
,
"Aurelea"
,
"Aurelia"
,
"Aurelie"
,
"Aurelio"
,
"Aurelius"
,
"Auria"
,
"Auric"
,
"Aurie"
,
"Aurilia"
,
"Aurita"
,
"Aurlie"
,
"Auroora"
,
"Aurora"
,
"Aurore"
,
"Aurthur"
,
"Ause"
,
"Austen"
,
"Austin"
,
"Austina"
,
"Austine"
,
"Auston"
,
"Australia"
,
"Austreng"
,
"Autrey"
,
"Autry"
,
"Autum"
,
"Autumn"
,
"Auvil"
,
"Av"
,
"Ava"
,
"Avan"
,
"Avaria"
,
"Ave"
,
"Avelin"
,
"Aveline"
,
"Avera"
,
"Averell"
,
"Averi"
,
"Averil"
,
"Averill"
,
"Averir"
,
"Avery"
,
"Averyl"
,
"Avi"
,
"Avictor"
,
"Avie"
,
"Avigdor"
,
"Avilla"
,
"Avis"
,
"Avitzur"
,
"Aviv"
,
"Aviva"
,
"Avivah"
,
"Avner"
,
"Avra"
,
"Avraham"
,
"Avram"
,
"Avril"
,
"Avrit"
,
"Avrom"
,
"Avron"
,
"Avruch"
,
"Awad"
,
"Ax"
,
"Axe"
,
"Axel"
,
"Aylmar"
,
"Aylmer"
,
"Aylsworth"
,
"Aylward"
,
"Aymer"
,
"Ayn"
,
"Aynat"
,
"Ayo"
,
"Ayres"
,
"Azal"
,
"Azalea"
,
"Azaleah"
,
"Azar"
,
"Azarcon"
,
"Azaria"
,
"Azarria"
,
"Azelea"
,
"Azeria"
,
"Aziza"
,
"Azpurua"
,
"Azral"
,
"Azriel"
,
"Baal"
,
"Baalbeer"
,
"Baalman"
,
"Bab"
,
"Babara"
,
"Babb"
,
"Babbette"
,
"Babbie"
,
"Babby"
,
"Babcock"
,
"Babette"
,
"Babita"
,
"Babs"
,
"Bac"
,
"Bacchus"
,
"Bach"
,
"Bachman"
,
"Backer"
,
"Backler"
,
"Bacon"
,
"Badger"
,
"Badr"
,
"Baecher"
,
"Bael"
,
"Baelbeer"
,
"Baer"
,
"Baerl"
,
"Baerman"
,
"Baese"
,
"Bagger"
,
"Baggett"
,
"Baggott"
,
"Baggs"
,
"Bagley"
,
"Bahner"
,
"Bahr"
,
"Baiel"
,
"Bail"
,
"Bailar"
,
"Bailey"
,
"Bailie"
,
"Baillie"
,
"Baillieu"
,
"Baily"
,
"Bain"
,
"Bainbridge"
,
"Bainbrudge"
,
"Bainter"
,
"Baird"
,
"Baiss"
,
"Bajaj"
,
"Bak"
,
"Bakeman"
,
"Bakemeier"
,
"Baker"
,
"Bakerman"
,
"Bakki"
,
"Bal"
,
"Bala"
,
"Balas"
,
"Balbinder"
,
"Balbur"
,
"Balcer"
,
"Balch"
,
"Balcke"
,
"Bald"
,
"Baldridge"
,
"Balduin"
,
"Baldwin"
,
"Bale"
,
"Baler"
,
"Balf"
,
"Balfore"
,
"Balfour"
,
"Balkin"
,
"Ball"
,
"Ballard"
,
"Balliett"
,
"Balling"
,
"Ballinger"
,
"Balliol"
,
"Ballman"
,
"Ballou"
,
"Balmuth"
,
"Balough"
,
"Balsam"
,
"Balthasar"
,
"Balthazar"
,
"Bamberger"
,
"Bambi"
,
"Bambie"
,
"Bamby"
,
"Bamford"
,
"Ban"
,
"Bancroft"
,
"Bandeen"
,
"Bander"
,
"Bandler"
,
"Bandur"
,
"Banebrudge"
,
"Banerjee"
,
"Bang"
,
"Bank"
,
"Banks"
,
"Banky"
,
"Banna"
,
"Bannasch"
,
"Bannerman"
,
"Bannister"
,
"Bannon"
,
"Banquer"
,
"Banwell"
,
"Baptist"
,
"Baptista"
,
"Baptiste"
,
"Baptlsta"
,
"Bar"
,
"Bara"
,
"Barabas"
,
"Barabbas"
,
"Baram"
,
"Baras"
,
"Barayon"
,
"Barb"
,
"Barbabas"
,
"Barbabra"
,
"Barbara"
,
"Barbara-Anne"
,
"Barbaraanne"
,
"Barbarese"
,
"Barbaresi"
,
"Barbe"
,
"Barbee"
,
"Barber"
,
"Barbette"
,
"Barbey"
,
"Barbi"
,
"Barbie"
,
"Barbour"
,
"Barboza"
,
"Barbra"
,
"Barbur"
,
"Barbuto"
,
"Barby"
,
"Barcellona"
,
"Barclay"
,
"Barcot"
,
"Barcroft"
,
"Barcus"
,
"Bard"
,
"Barde"
,
"Barden"
,
"Bardo"
,
"Barfuss"
,
"Barger"
,
"Bari"
,
"Barimah"
,
"Barina"
,
"Barker"
,
"Barkley"
,
"Barling"
,
"Barlow"
,
"Barmen"
,
"Barn"
,
"Barna"
,
"Barnaba"
,
"Barnabas"
,
"Barnabe"
,
"Barnaby"
,
"Barnard"
,
"Barncard"
,
"Barnebas"
,
"Barnes"
,
"Barnet"
,
"Barnett"
,
"Barney"
,
"Barnie"
,
"Barnum"
,
"Barny"
,
"Barolet"
,
"Baron"
,
"Barr"
,
"Barra"
,
"Barrada"
,
"Barram"
,
"Barraza"
,
"Barren"
,
"Barret"
,
"Barrett"
,
"Barri"
,
"Barrie"
,
"Barrington"
,
"Barris"
,
"Barron"
,
"Barrow"
,
"Barrus"
,
"Barry"
,
"Barsky"
,
"Barstow"
,
"Bart"
,
"Barta"
,
"Bartel"
,
"Barth"
,
"Barthel"
,
"Barthelemy"
,
"Barthol"
,
"Barthold"
,
"Bartholemy"
,
"Bartholomeo"
,
"Bartholomeus"
,
"Bartholomew"
,
"Bartie"
,
"Bartko"
,
"Bartle"
,
"Bartlet"
,
"Bartlett"
,
"Bartley"
,
"Bartolemo"
,
"Bartolome"
,
"Bartolomeo"
,
"Barton"
,
"Bartosch"
,
"Bartram"
,
"Barty"
,
"Baruch"
,
"Barvick"
,
"Bary"
,
"Baryram"
,
"Bascio"
,
"Bascomb"
,
"Base"
,
"Baseler"
,
"Basham"
,
"Bashee"
,
"Bashemath"
,
"Bashemeth"
,
"Bashuk"
,
"Basia"
,
"Basil"
,
"Basile"
,
"Basilio"
,
"Basilius"
,
"Basir"
,
"Baskett"
,
"Bass"
,
"Basset"
,
"Bassett"
,
"Basso"
,
"Bast"
,
"Bastian"
,
"Bastien"
,
"Bat"
,
"Batchelor"
,
"Bate"
,
"Baten"
,
"Bates"
,
"Batha"
,
"Bathelda"
,
"Bathesda"
,
"Bathilda"
,
"Batholomew"
,
"Bathsheb"
,
"Bathsheba"
,
"Bathsheeb"
,
"Bathulda"
,
"Batish"
,
"Batista"
,
"Batory"
,
"Batruk"
,
"Batsheva"
,
"Battat"
,
"Battista"
,
"Battiste"
,
"Batty"
,
"Baudelaire"
,
"Baudin"
,
"Baudoin"
,
"Bauer"
,
"Baugh"
,
"Baum"
,
"Baumann"
,
"Baumbaugh"
,
"Baun"
,
"Bausch"
,
"Bauske"
,
"Bautista"
,
"Bautram"
,
"Bax"
,
"Baxie"
,
"Baxter"
,
"Baxy"
,
"Bay"
,
"Bayard"
,
"Bayer"
,
"Bayless"
,
"Baylor"
,
"Bayly"
,
"Baynebridge"
,
"Bazar"
,
"Bazil"
,
"Bazluke"
,
"Bea"
,
"Beach"
,
"Beacham"
,
"Beal"
,
"Beale"
,
"Beall"
,
"Bealle"
,
"Bean"
,
"Beane"
,
"Beaner"
,
"Bear"
,
"Bearce"
,
"Beard"
,
"Beare"
,
"Bearnard"
,
"Beasley"
,
"Beaston"
,
"Beata"
,
"Beatrice"
,
"Beatrisa"
,
"Beatrix"
,
"Beatriz"
,
"Beattie"
,
"Beatty"
,
"Beau"
,
"Beauchamp"
,
"Beaudoin"
,
"Beaufert"
,
"Beaufort"
,
"Beaulieu"
,
"Beaumont"
,
"Beauregard"
,
"Beauvais"
,
"Beaver"
,
"Bebe"
,
"Beberg"
,
"Becca"
,
"Bechler"
,
"Becht"
,
"Beck"
,
"Becka"
,
"Becker"
,
"Beckerman"
,
"Becket"
,
"Beckett"
,
"Becki"
,
"Beckie"
,
"Beckman"
,
"Becky"
,
"Bedad"
,
"Bedelia"
,
"Bedell"
,
"Bedwell"
,
"Bee"
,
"Beebe"
,
"Beeck"
,
"Beedon"
,
"Beekman"
,
"Beera"
,
"Beesley"
,
"Beeson"
,
"Beetner"
,
"Beffrey"
,
"Bega"
,
"Begga"
,
"Beghtol"
,
"Behah"
,
"Behka"
,
"Behl"
,
"Behlau"
,
"Behlke"
,
"Behm"
,
"Behn"
,
"Behnken"
,
"Behre"
,
"Behrens"
,
"Beichner"
,
"Beilul"
,
"Bein"
,
"Beisel"
,
"Beitch"
,
"Beitnes"
,
"Beitris"
,
"Beitz"
,
"Beka"
,
"Bekah"
,
"Bekelja"
,
"Beker"
,
"Bekha"
,
"Bekki"
,
"Bel"
,
"Bela"
,
"Belak"
,
"Belamy"
,
"Belanger"
,
"Belayneh"
,
"Belcher"
,
"Belda"
,
"Belden"
,
"Belding"
,
"Belen"
,
"Belford"
,
"Belia"
,
"Belicia"
,
"Belier"
,
"Belinda"
,
"Belita"
,
"Bell"
,
"Bella"
,
"Bellamy"
,
"Bellanca"
,
"Bellaude"
,
"Bellda"
,
"Belldame"
,
"Belldas"
,
"Belle"
,
"Beller"
,
"Bellew"
,
"Bellina"
,
"Bellis"
,
"Bello"
,
"Belloir"
,
"Belmonte"
,
"Belshin"
,
"Belsky"
,
"Belter"
,
"Beltran"
,
"Belva"
,
"Belvia"
,
"Ben"
,
"Bena"
,
"Bencion"
,
"Benco"
,
"Bender"
,
"Bendick"
,
"Bendicta"
,
"Bendicty"
,
"Bendite"
,
"Bendix"
,
"Benedetta"
,
"Benedetto"
,
"Benedic"
,
"Benedick"
,
"Benedict"
,
"Benedicta"
,
"Benedicto"
,
"Benedikt"
,
"Benedikta"
,
"Benedix"
,
"Benenson"
,
"Benetta"
,
"Benge"
,
"Bengt"
,
"Benia"
,
"Beniamino"
,
"Benil"
,
"Benilda"
,
"Benildas"
,
"Benildis"
,
"Benioff"
,
"Benis"
,
"Benisch"
,
"Benita"
,
"Benito"
,
"Benjamen"
,
"Benjamin"
,
"Benji"
,
"Benjie"
,
"Benjy"
,
"Benkley"
,
"Benn"
,
"Bennet"
,
"Bennett"
,
"Benni"
,
"Bennie"
,
"Bennink"
,
"Bennion"
,
"Bennir"
,
"Benny"
,
"Benoit"
,
"Benoite"
,
"Bensen"
,
"Bensky"
,
"Benson"
,
"Bent"
,
"Bentlee"
,
"Bentley"
,
"Bently"
,
"Benton"
,
"Benyamin"
,
"Benzel"
,
"Beora"
,
"Beore"
,
"Ber"
,
"Berard"
,
"Berardo"
,
"Berck"
,
"Berenice"
,
"Beret"
,
"Berey"
,
"Berfield"
,
"Berg"
,
"Berga"
,
"Bergeman"
,
"Bergen"
,
"Berger"
,
"Bergerac"
,
"Bergeron"
,
"Bergess"
,
"Berget"
,
"Bergh"
,
"Berghoff"
,
"Bergin"
,
"Berglund"
,
"Bergman"
,
"Bergmann"
,
"Bergmans"
,
"Bergquist"
,
"Bergren"
,
"Bergstein"
,
"Bergstrom"
,
"Bergwall"
,
"Berhley"
,
"Berk"
,
"Berke"
,
"Berkeley"
,
"Berkie"
,
"Berkin"
,
"Berkley"
,
"Berkly"
,
"Berkman"
,
"Berkow"
,
"Berkshire"
,
"Berky"
,
"Berl"
,
"Berlauda"
,
"Berlin"
,
"Berlinda"
,
"Berliner"
,
"Berlyn"
,
"Berman"
,
"Bern"
,
"Berna"
,
"Bernadene"
,
"Bernadette"
,
"Bernadina"
,
"Bernadine"
,
"Bernard"
,
"Bernardi"
,
"Bernardina"
,
"Bernardine"
,
"Bernardo"
,
"Bernarr"
,
"Bernat"
,
"Berne"
,
"Bernelle"
,
"Berner"
,
"Berners"
,
"Berneta"
,
"Bernete"
,
"Bernetta"
,
"Bernette"
,
"Bernhard"
,
"Berni"
,
"Bernice"
,
"Bernie"
,
"Bernita"
,
"Bernj"
,
"Berns"
,
"Bernstein"
,
"Bernt"
,
"Berny"
,
"Berri"
,
"Berrie"
,
"Berriman"
,
"Berry"
,
"Berstine"
,
"Bert"
,
"Berta"
,
"Bertasi"
,
"Berte"
,
"Bertelli"
,
"Bertero"
,
"Bertha"
,
"Berthe"
,
"Berthold"
,
"Berthoud"
,
"Berti"
,
"Bertie"
,
"Bertila"
,
"Bertilla"
,
"Bertina"
,
"Bertine"
,
"Bertle"
,
"Bertold"
,
"Bertolde"
,
"Berton"
,
"Bertram"
,
"Bertrand"
,
"Bertrando"
,
"Bertsche"
,
"Berty"
,
"Berwick"
,
"Beryl"
,
"Beryle"
,
"Beshore"
,
"Besnard"
,
"Bess"
,
"Besse"
,
"Bessie"
,
"Bessy"
,
"Best"
,
"Beth"
,
"Bethanne"
,
"Bethany"
,
"Bethel"
,
"Bethena"
,
"Bethesda"
,
"Bethesde"
,
"Bethezel"
,
"Bethina"
,
"Betsey"
,
"Betsy"
,
"Betta"
,
"Bette"
,
"Bette-Ann"
,
"Betteann"
,
"Betteanne"
,
"Bettencourt"
,
"Betthel"
,
"Betthezel"
,
"Betthezul"
,
"Betti"
,
"Bettina"
,
"Bettine"
,
"Betty"
,
"Bettye"
,
"Bettzel"
,
"Betz"
,
"Beulah"
,
"Beuthel"
,
"Beutler"
,
"Beutner"
,
"Bev"
,
"Bevan"
,
"Bevash"
,
"Bever"
,
"Beverie"
,
"Beverle"
,
"Beverlee"
,
"Beverley"
,
"Beverlie"
,
"Beverly"
,
"Bevers"
,
"Bevin"
,
"Bevis"
,
"Bevon"
,
"Bevus"
,
"Bevvy"
,
"Beyer"
,
"Bezanson"
,
"Bhatt"
,
"Bhayani"
,
"Biagi"
,
"Biagio"
,
"Biamonte"
,
"Bianca"
,
"Biancha"
,
"Bianchi"
,
"Bianka"
,
"Bibbie"
,
"Bibby"
,
"Bibbye"
,
"Bibeau"
,
"Bibi"
,
"Bible"
,
"Bick"
,
"Bickart"
,
"Bicknell"
,
"Biddick"
,
"Biddie"
,
"Biddle"
,
"Biddy"
,
"Bidget"
,
"Bidle"
,
"Biebel"
,
"Biegel"
,
"Bierman"
,
"Biernat"
,
"Bigelow"
,
"Bigford"
,
"Bigg"
,
"Biggs"
,
"Bigler"
,
"Bigner"
,
"Bigod"
,
"Bigot"
,
"Bik"
,
"Bikales"
,
"Bil"
,
"Bilbe"
,
"Bilek"
,
"Biles"
,
"Bili"
,
"Bilicki"
,
"Bill"
,
"Billat"
,
"Bille"
,
"Billen"
,
"Billi"
,
"Billie"
,
"Billmyre"
,
"Bills"
,
"Billy"
,
"Billye"
,
"Bilow"
,
"Bilski"
,
"Bina"
,
"Binah"
,
"Bindman"
,
"Binetta"
,
"Binette"
,
"Bing"
,
"Bink"
,
"Binky"
,
"Binni"
,
"Binnie"
,
"Binnings"
,
"Binny"
,
"Biondo"
,
"Birch"
,
"Birchard"
,
"Birck"
,
"Bird"
,
"Birdella"
,
"Birdie"
,
"Birdt"
,
"Birecree"
,
"Birgit"
,
"Birgitta"
,
"Birk"
,
"Birkett"
,
"Birkle"
,
"Birkner"
,
"Birmingham"
,
"Biron"
,
"Bish"
,
"Bishop"
,
"Bissell"
,
"Bisset"
,
"Bithia"
,
"Bittencourt"
,
"Bitthia"
,
"Bittner"
,
"Bivins"
,
"Bixby"
,
"Bixler"
,
"Bjork"
,
"Bjorn"
,
"Black"
,
"Blackburn"
,
"Blackington"
,
"Blackman"
,
"Blackmore"
,
"Blackmun"
,
"Blackstock"
,
"Blackwell"
,
"Blader"
,
"Blain"
,
"Blaine"
,
"Blainey"
,
"Blair"
,
"Blaire"
,
"Blaise"
,
"Blake"
,
"Blakelee"
,
"Blakeley"
,
"Blakely"
,
"Blalock"
,
"Blanc"
,
"Blanca"
,
"Blanch"
,
"Blancha"
,
"Blanchard"
,
"Blanche"
,
"Blanchette"
,
"Bland"
,
"Blandina"
,
"Blanding"
,
"Blane"
,
"Blank"
,
"Blanka"
,
"Blankenship"
,
"Blas"
,
"Blase"
,
"Blaseio"
,
"Blasien"
,
"Blasius"
,
"Blatman"
,
"Blatt"
,
"Blau"
,
"Blayne"
,
"Blayze"
,
"Blaze"
,
"Bledsoe"
,
"Bleier"
,
"Blen"
,
"Blessington"
,
"Blight"
,
"Blim"
,
"Blinni"
,
"Blinnie"
,
"Blinny"
,
"Bliss"
,
"Blisse"
,
"Blithe"
,
"Bloch"
,
"Block"
,
"Blockus"
,
"Blodget"
,
"Blodgett"
,
"Bloem"
,
"Blondell"
,
"Blondelle"
,
"Blondie"
,
"Blondy"
,
"Blood"
,
"Bloom"
,
"Bloomer"
,
"Blossom"
,
"Blount"
,
"Bloxberg"
,
"Bluefarb"
,
"Bluefield"
,
"Bluh"
,
"Bluhm"
,
"Blum"
,
"Bluma"
,
"Blumenfeld"
,
"Blumenthal"
,
"Blunk"
,
"Blunt"
,
"Blus"
,
"Blynn"
,
"Blythe"
,
"Bo"
,
"Boak"
,
"Boar"
,
"Boardman"
,
"Boarer"
,
"Boaten"
,
"Boatwright"
,
"Bob"
,
"Bobbe"
,
"Bobbee"
,
"Bobbette"
,
"Bobbi"
,
"Bobbie"
,
"Bobby"
,
"Bobbye"
,
"Bobette"
,
"Bobina"
,
"Bobine"
,
"Bobinette"
,
"Bobker"
,
"Bobseine"
,
"Bock"
,
"Bocock"
,
"Bodi"
,
"Bodkin"
,
"Bodnar"
,
"Bodrogi"
,
"Bodwell"
,
"Body"
,
"Boehike"
,
"Boehmer"
,
"Boeke"
,
"Boelter"
,
"Boesch"
,
"Boeschen"
,
"Boff"
,
"Boffa"
,
"Bogart"
,
"Bogey"
,
"Boggers"
,
"Boggs"
,
"Bogie"
,
"Bogoch"
,
"Bogosian"
,
"Bogusz"
,
"Bohannon"
,
"Bohaty"
,
"Bohi"
,
"Bohlen"
,
"Bohlin"
,
"Bohman"
,
"Bohner"
,
"Bohon"
,
"Bohrer"
,
"Bohs"
,
"Bohun"
,
"Boice"
,
"Boigie"
,
"Boiney"
,
"Bois"
,
"Bolan"
,
"Boland"
,
"Bolanger"
,
"Bolen"
,
"Boles"
,
"Boleslaw"
,
"Boleyn"
,
"Bolger"
,
"Bolitho"
,
"Bollay"
,
"Bollen"
,
"Bolling"
,
"Bollinger"
,
"Bolme"
,
"Bolt"
,
"Bolte"
,
"Bolten"
,
"Bolton"
,
"Bomke"
,
"Bonacci"
,
"Bonaparte"
,
"Bonar"
,
"Bond"
,
"Bondie"
,
"Bondon"
,
"Bondy"
,
"Bone"
,
"Boni"
,
"Boniface"
,
"Bonilla"
,
"Bonina"
,
"Bonine"
,
"Bonis"
,
"Bonita"
,
"Bonn"
,
"Bonne"
,
"Bonneau"
,
"Bonnee"
,
"Bonnell"
,
"Bonner"
,
"Bonnes"
,
"Bonnette"
,
"Bonney"
,
"Bonni"
,
"Bonnibelle"
,
"Bonnice"
,
"Bonnie"
,
"Bonns"
,
"Bonny"
,
"Bonucci"
,
"Booker"
,
"Booma"
,
"Boone"
,
"Boonie"
,
"Boony"
,
"Boor"
,
"Boorer"
,
"Boorman"
,
"Boot"
,
"Boote"
,
"Booth"
,
"Boothe"
,
"Boothman"
,
"Booze"
,
"Bopp"
,
"Bor"
,
"Bora"
,
"Borchers"
,
"Borchert"
,
"Bord"
,
"Borden"
,
"Bordie"
,
"Bordiuk"
,
"Bordy"
,
"Bore"
,
"Borek"
,
"Borer"
,
"Bores"
,
"Borg"
,
"Borgeson"
,
"Boris"
,
"Bork"
,
"Borlase"
,
"Borlow"
,
"Borman"
,
"Born"
,
"Bornie"
,
"Bornstein"
,
"Borras"
,
"Borrell"
,
"Borreri"
,
"Borries"
,
"Borroff"
,
"Borszcz"
,
"Bortman"
,
"Bortz"
,
"Boru"
,
"Bosch"
,
"Bose"
,
"Boser"
,
"Bosson"
,
"Bostow"
,
"Boswall"
,
"Boswell"
,
"Botnick"
,
"Botsford"
,
"Bottali"
,
"Botti"
,
"Botzow"
,
"Bouchard"
,
"Boucher"
,
"Bouchier"
,
"Boudreaux"
,
"Bough"
,
"Boulanger"
,
"Bouldon"
,
"Bouley"
,
"Bound"
,
"Bounds"
,
"Bourgeois"
,
"Bourke"
,
"Bourn"
,
"Bourne"
,
"Bourque"
,
"Boutis"
,
"Bouton"
,
"Bouzoun"
,
"Bove"
,
"Bovill"
,
"Bow"
,
"Bowden"
,
"Bowe"
,
"Bowen"
,
"Bower"
,
"Bowerman"
,
"Bowers"
,
"Bowes"
,
"Bowie"
,
"Bowlds"
,
"Bowler"
,
"Bowles"
,
"Bowman"
,
"Bowne"
,
"Bowra"
,
"Bowrah"
,
"Bowyer"
,
"Box"
,
"Boy"
,
"Boyce"
,
"Boycey"
,
"Boycie"
,
"Boyd"
,
"Boyden"
,
"Boyer"
,
"Boyes"
,
"Boykins"
,
"Boylan"
,
"Boylston"
,
"Boynton"
,
"Boys"
,
"Boyse"
,
"Boyt"
,
"Bozovich"
,
"Bozuwa"
,
"Braasch"
,
"Brabazon"
,
"Braca"
,
"Bracci"
,
"Brace"
,
"Brackely"
,
"Brackett"
,
"Brad"
,
"Bradan"
,
"Brade"
,
"Braden"
,
"Bradeord"
,
"Brader"
,
"Bradford"
,
"Bradlee"
,
"Bradleigh"
,
"Bradley"
,
"Bradly"
,
"Bradman"
,
"Bradney"
,
"Bradshaw"
,
"Bradski"
,
"Bradstreet"
,
"Bradway"
,
"Bradwell"
,
"Brady"
,
"Braeunig"
,
"Brag"
,
"Brahear"
,
"Brainard"
,
"Bram"
,
"Bramwell"
,
"Bran"
,
"Brana"
,
"Branca"
,
"Branch"
,
"Brand"
,
"Brandais"
,
"Brande"
,
"Brandea"
,
"Branden"
,
"Brandenburg"
,
"Brander"
,
"Brandes"
,
"Brandi"
,
"Brandice"
,
"Brandie"
,
"Brandise"
,
"Brandon"
,
"Brandt"
,
"Brandtr"
,
"Brandwein"
,
"Brandy"
,
"Brandyn"
,
"Branen"
,
"Branham"
,
"Brannon"
,
"Branscum"
,
"Brant"
,
"Brantley"
,
"Brasca"
,
"Brass"
,
"Braswell"
,
"Brathwaite"
,
"Bratton"
,
"Braun"
,
"Braunstein"
,
"Brause"
,
"Bravar"
,
"Bravin"
,
"Brawley"
,
"Brawner"
,
"Bray"
,
"Braynard"
,
"Brazee"
,
"Breana"
,
"Breanne"
,
"Brear"
,
"Breban"
,
"Brebner"
,
"Brecher"
,
"Brechtel"
,
"Bred"
,
"Bree"
,
"Breech"
,
"Breed"
,
"Breen"
,
"Breena"
,
"Breeze"
,
"Breger"
,
"Brelje"
,
"Bremble"
,
"Bremen"
,
"Bremer"
,
"Bremser"
,
"Bren"
,
"Brena"
,
"Brenan"
,
"Brenda"
,
"Brendan"
,
"Brenden"
,
"Brendin"
,
"Brendis"
,
"Brendon"
,
"Brenk"
,
"Brenn"
,
"Brenna"
,
"Brennan"
,
"Brennen"
,
"Brenner"
,
"Brent"
,
"Brenton"
,
"Brentt"
,
"Brenza"
,
"Bresee"
,
"Breskin"
,
"Brest"
,
"Bret"
,
"Brett"
,
"Brew"
,
"Brewer"
,
"Brewster"
,
"Brey"
,
"Brezin"
,
"Bria"
,
"Brian"
,
"Briana"
,
"Brianna"
,
"Brianne"
,
"Briano"
,
"Briant"
,
"Brice"
,
"Brick"
,
"Bricker"
,
"Bride"
,
"Bridge"
,
"Bridges"
,
"Bridget"
,
"Bridgette"
,
"Bridgid"
,
"Bridie"
,
"Bridwell"
,
"Brie"
,
"Brien"
,
"Brier"
,
"Brieta"
,
"Brietta"
,
"Brig"
,
"Brigette"
,
"Brigg"
,
"Briggs"
,
"Brigham"
,
"Bright"
,
"Brightman"
,
"Brighton"
,
"Brigid"
,
"Brigida"
,
"Brigit"
,
"Brigitta"
,
"Brigitte"
,
"Brill"
,
"Brina"
,
"Brindell"
,
"Brindle"
,
"Brine"
,
"Briney"
,
"Bringhurst"
,
"Brink"
,
"Brinkema"
,
"Brinn"
,
"Brinna"
,
"Brinson"
,
"Briny"
,
"Brion"
,
"Briscoe"
,
"Bristow"
,
"Brit"
,
"Brita"
,
"Britney"
,
"Britni"
,
"Britt"
,
"Britta"
,
"Brittain"
,
"Brittan"
,
"Brittaney"
,
"Brittani"
,
"Brittany"
,
"Britte"
,
"Britteny"
,
"Brittne"
,
"Brittnee"
,
"Brittney"
,
"Brittni"
,
"Britton"
,
"Brnaba"
,
"Brnaby"
,
"Broadbent"
,
"Brock"
,
"Brockie"
,
"Brocklin"
,
"Brockwell"
,
"Brocky"
,
"Brod"
,
"Broddie"
,
"Broddy"
,
"Brodench"
,
"Broder"
,
"Broderic"
,
"Broderick"
,
"Brodeur"
,
"Brodie"
,
"Brodsky"
,
"Brody"
,
"Broeder"
,
"Broek"
,
"Broeker"
,
"Brogle"
,
"Broida"
,
"Brok"
,
"Brom"
,
"Bromleigh"
,
"Bromley"
,
"Bron"
,
"Bronder"
,
"Bronez"
,
"Bronk"
,
"Bronnie"
,
"Bronny"
,
"Bronson"
,
"Bronwen"
,
"Bronwyn"
,
"Brook"
,
"Brooke"
,
"Brookes"
,
"Brookhouse"
,
"Brooking"
,
"Brookner"
,
"Brooks"
,
"Broome"
,
"Brose"
,
"Brosine"
,
"Brost"
,
"Brosy"
,
"Brote"
,
"Brothers"
,
"Brotherson"
,
"Brott"
,
"Brottman"
,
"Broucek"
,
"Brout"
,
"Brouwer"
,
"Brower"
,
"Brown"
,
"Browne"
,
"Browning"
,
"Brownley"
,
"Brownson"
,
"Brozak"
,
"Brubaker"
,
"Bruce"
,
"Brucie"
,
"Bruckner"
,
"Bruell"
,
"Brufsky"
,
"Bruis"
,
"Brunell"
,
"Brunella"
,
"Brunelle"
,
"Bruner"
,
"Brunhild"
,
"Brunhilda"
,
"Brunhilde"
,
"Bruni"
,
"Bruning"
,
"Brunk"
,
"Brunn"
,
"Bruno"
,
"Bruns"
,
"Bruyn"
,
"Bryan"
,
"Bryana"
,
"Bryant"
,
"Bryanty"
,
"Bryce"
,
"Bryn"
,
"Bryna"
,
"Bryner"
,
"Brynn"
,
"Brynna"
,
"Brynne"
,
"Bryon"
,
"Buatti"
,
"Bubalo"
,
"Bubb"
,
"Bucella"
,
"Buchalter"
,
"Buchanan"
,
"Buchbinder"
,
"Bucher"
,
"Buchheim"
,
"Buck"
,
"Buckden"
,
"Buckels"
,
"Buckie"
,
"Buckingham"
,
"Buckler"
,
"Buckley"
,
"Bucky"
,
"Bud"
,
"Budd"
,
"Budde"
,
"Buddie"
,
"Budding"
,
"Buddy"
,
"Buderus"
,
"Budge"
,
"Budwig"
,
"Budworth"
,
"Buehler"
,
"Buehrer"
,
"Buell"
,
"Buerger"
,
"Bueschel"
,
"Buff"
,
"Buffo"
,
"Buffum"
,
"Buffy"
,
"Buford"
,
"Bugbee"
,
"Buhler"
,
"Bui"
,
"Buine"
,
"Buiron"
,
"Buke"
,
"Bull"
,
"Bullard"
,
"Bullen"
,
"Buller"
,
"Bulley"
,
"Bullion"
,
"Bullis"
,
"Bullivant"
,
"Bullock"
,
"Bullough"
,
"Bully"
,
"Bultman"
,
"Bum"
,
"Bumgardner"
,
"Buna"
,
"Bunce"
,
"Bunch"
,
"Bunde"
,
"Bunder"
,
"Bundy"
,
"Bunker"
,
"Bunni"
,
"Bunnie"
,
"Bunns"
,
"Bunny"
,
"Bunow"
,
"Bunting"
,
"Buonomo"
,
"Buote"
,
"Burack"
,
"Burbank"
,
"Burch"
,
"Burchett"
,
"Burck"
,
"Burd"
,
"Burdelle"
,
"Burdett"
,
"Burford"
,
"Burg"
,
"Burgener"
,
"Burger"
,
"Burgess"
,
"Burget"
,
"Burgwell"
,
"Burhans"
,
"Burk"
,
"Burke"
,
"Burkhard"
,
"Burkhardt"
,
"Burkhart"
,
"Burkitt"
,
"Burkle"
,
"Burkley"
,
"Burl"
,
"Burleigh"
,
"Burley"
,
"Burlie"
,
"Burman"
,
"Burn"
,
"Burnaby"
,
"Burnard"
,
"Burne"
,
"Burner"
,
"Burnett"
,
"Burney"
,
"Burnham"
,
"Burnie"
,
"Burnight"
,
"Burnley"
,
"Burns"
,
"Burnsed"
,
"Burnside"
,
"Burny"
,
"Buroker"
,
"Burr"
,
"Burra"
,
"Burrell"
,
"Burrill"
,
"Burris"
,
"Burroughs"
,
"Burrow"
,
"Burrows"
,
"Burrton"
,
"Burrus"
,
"Burt"
,
"Burta"
,
"Burtie"
,
"Burtis"
,
"Burton"
,
"Burty"
,
"Burwell"
,
"Bury"
,
"Busby"
,
"Busch"
,
"Buschi"
,
"Buseck"
,
"Busey"
,
"Bush"
,
"Bushey"
,
"Bushore"
,
"Bushweller"
,
"Busiek"
,
"Buskirk"
,
"Buskus"
,
"Bussey"
,
"Bussy"
,
"Bust"
,
"Butch"
,
"Butcher"
,
"Butler"
,
"Butta"
,
"Buttaro"
,
"Butte"
,
"Butterfield"
,
"Butterworth"
,
"Button"
,
"Buxton"
,
"Buyer"
,
"Buyers"
,
"Buyse"
,
"Buzz"
,
"Buzzell"
,
"Byers"
,
"Byler"
,
"Byram"
,
"Byran"
,
"Byrann"
,
"Byrd"
,
"Byrdie"
,
"Byrle"
,
"Byrn"
,
"Byrne"
,
"Byrom"
,
"Byron"
,
"Bysshe"
,
"Bywaters"
,
"Bywoods"
,
"Cacia"
,
"Cacie"
,
"Cacilia"
,
"Cacilie"
,
"Cacka"
,
"Cad"
,
"Cadal"
,
"Caddaric"
,
"Caddric"
,
"Cade"
,
"Cadel"
,
"Cadell"
,
"Cadman"
,
"Cadmann"
,
"Cadmar"
,
"Cadmarr"
,
"Caesar"
,
"Caesaria"
,
"Caffrey"
,
"Cagle"
,
"Cahan"
,
"Cahilly"
,
"Cahn"
,
"Cahra"
,
"Cai"
,
"Caia"
,
"Caiaphas"
,
"Cailean"
,
"Cailly"
,
"Cain"
,
"Caine"
,
"Caines"
,
"Cairistiona"
,
"Cairns"
,
"Caitlin"
,
"Caitrin"
,
"Cal"
,
"Calabrese"
,
"Calabresi"
,
"Calan"
,
"Calandra"
,
"Calandria"
,
"Calbert"
,
"Caldeira"
,
"Calder"
,
"Caldera"
,
"Calderon"
,
"Caldwell"
,
"Cale"
,
"Caleb"
,
"Calen"
,
"Calendra"
,
"Calendre"
,
"Calesta"
,
"Calhoun"
,
"Calia"
,
"Calica"
,
"Calida"
,
"Calie"
,
"Calisa"
,
"Calise"
,
"Calista"
,
"Call"
,
"Calla"
,
"Callahan"
,
"Callan"
,
"Callas"
,
"Calle"
,
"Callean"
,
"Callery"
,
"Calley"
,
"Calli"
,
"Callida"
,
"Callie"
,
"Callista"
,
"Calloway"
,
"Callum"
,
"Cally"
,
"Calmas"
,
"Calondra"
,
"Calore"
,
"Calv"
,
"Calva"
,
"Calvano"
,
"Calvert"
,
"Calvin"
,
"Calvina"
,
"Calvinna"
,
"Calvo"
,
"Calypso"
,
"Calysta"
,
"Cam"
,
"Camala"
,
"Camarata"
,
"Camden"
,
"Camel"
,
"Camella"
,
"Camellia"
,
"Cameron"
,
"Camey"
,
"Camfort"
,
"Cami"
,
"Camila"
,
"Camile"
,
"Camilia"
,
"Camilla"
,
"Camille"
,
"Camilo"
,
"Camm"
,
"Cammi"
,
"Cammie"
,
"Cammy"
,
"Camp"
,
"Campagna"
,
"Campball"
,
"Campbell"
,
"Campman"
,
"Campney"
,
"Campos"
,
"Campy"
,
"Camus"
,
"Can"
,
"Canada"
,
"Canale"
,
"Cand"
,
"Candace"
,
"Candi"
,
"Candice"
,
"Candida"
,
"Candide"
,
"Candie"
,
"Candis"
,
"Candless"
,
"Candra"
,
"Candy"
,
"Candyce"
,
"Caneghem"
,
"Canfield"
,
"Canica"
,
"Canice"
,
"Caniff"
,
"Cann"
,
"Cannell"
,
"Cannice"
,
"Canning"
,
"Cannon"
,
"Canon"
,
"Canotas"
,
"Canter"
,
"Cantlon"
,
"Cantone"
,
"Cantu"
,
"Canty"
,
"Canute"
,
"Capello"
,
"Caplan"
,
"Capon"
,
"Capone"
,
"Capp"
,
"Cappella"
,
"Cappello"
,
"Capps"
,
"Caprice"
,
"Capriola"
,
"Caputo"
,
"Caputto"
,
"Capwell"
,
"Car"
,
"Cara"
,
"Caralie"
,
"Caras"
,
"Caravette"
,
"Caraviello"
,
"Carberry"
,
"Carbo"
,
"Carbone"
,
"Carboni"
,
"Carbrey"
,
"Carce"
,
"Card"
,
"Carder"
,
"Cardew"
,
"Cardie"
,
"Cardinal"
,
"Cardon"
,
"Cardwell"
,
"Care"
,
"Careaga"
,
"Caren"
,
"Carena"
,
"Caresa"
,
"Caressa"
,
"Caresse"
,
"Carew"
,
"Carey"
,
"Cargian"
,
"Carhart"
,
"Cari"
,
"Caria"
,
"Carie"
,
"Caril"
,
"Carilla"
,
"Carilyn"
,
"Carin"
,
"Carina"
,
"Carine"
,
"Cariotta"
,
"Carisa"
,
"Carissa"
,
"Carita"
,
"Caritta"
,
"Carl"
,
"Carla"
,
"Carlee"
,
"Carleen"
,
"Carlen"
,
"Carlene"
,
"Carleton"
,
"Carley"
,
"Carli"
,
"Carlick"
,
"Carlie"
,
"Carlile"
,
"Carlin"
,
"Carlina"
,
"Carline"
,
"Carling"
,
"Carlisle"
,
"Carlita"
,
"Carlo"
,
"Carlock"
,
"Carlos"
,
"Carlota"
,
"Carlotta"
,
"Carlson"
,
"Carlstrom"
,
"Carlton"
,
"Carly"
,
"Carlye"
,
"Carlyle"
,
"Carlyn"
,
"Carlynn"
,
"Carlynne"
,
"Carma"
,
"Carman"
,
"Carmel"
,
"Carmela"
,
"Carmelia"
,
"Carmelina"
,
"Carmelita"
,
"Carmella"
,
"Carmelle"
,
"Carmelo"
,
"Carmen"
,
"Carmena"
,
"Carmencita"
,
"Carmina"
,
"Carmine"
,
"Carmita"
,
"Carmon"
,
"Carn"
,
"Carnahan"
,
"Carnay"
,
"Carnes"
,
"Carney"
,
"Carny"
,
"Caro"
,
"Carol"
,
"Carol-Jean"
,
"Carola"
,
"Carolan"
,
"Carolann"
,
"Carole"
,
"Carolee"
,
"Carolin"
,
"Carolina"
,
"Caroline"
,
"Carolle"
,
"Carolus"
,
"Carolyn"
,
"Carolyne"
,
"Carolynn"
,
"Carolynne"
,
"Caron"
,
"Carothers"
,
"Carpenter"
,
"Carper"
,
"Carpet"
,
"Carpio"
,
"Carr"
,
"Carree"
,
"Carrel"
,
"Carrelli"
,
"Carrew"
,
"Carri"
,
"Carrick"
,
"Carrie"
,
"Carrillo"
,
"Carrington"
,
"Carrissa"
,
"Carrnan"
,
"Carrol"
,
"Carroll"
,
"Carry"
,
"Carson"
,
"Cart"
,
"Cartan"
,
"Carter"
,
"Carthy"
,
"Cartie"
,
"Cartwell"
,
"Cartwright"
,
"Caruso"
,
"Carver"
,
"Carvey"
,
"Cary"
,
"Caryl"
,
"Caryn"
,
"Cas"
,
"Casabonne"
,
"Casady"
,
"Casaleggio"
,
"Casandra"
,
"Casanova"
,
"Casar"
,
"Casavant"
,
"Case"
,
"Casey"
,
"Cash"
,
"Casi"
,
"Casia"
,
"Casie"
,
"Casilda"
,
"Casilde"
,
"Casimir"
,
"Casimire"
,
"Casmey"
,
"Caspar"
,
"Casper"
,
"Cass"
,
"Cassady"
,
"Cassandra"
,
"Cassandre"
,
"Cassandry"
,
"Cassaundra"
,
"Cassell"
,
"Cassella"
,
"Cassey"
,
"Cassi"
,
"Cassiani"
,
"Cassidy"
,
"Cassie"
,
"Cassil"
,
"Cassilda"
,
"Cassius"
,
"Cassondra"
,
"Cassy"
,
"Casta"
,
"Castara"
,
"Casteel"
,
"Castera"
,
"Castillo"
,
"Castle"
,
"Castor"
,
"Castora"
,
"Castorina"
,
"Castra"
,
"Castro"
,
"Caswell"
,
"Cataldo"
,
"Catarina"
,
"Cate"
,
"Caterina"
,
"Cates"
,
"Cath"
,
"Catha"
,
"Catharina"
,
"Catharine"
,
"Cathe"
,
"Cathee"
,
"Catherin"
,
"Catherina"
,
"Catherine"
,
"Cathey"
,
"Cathi"
,
"Cathie"
,
"Cathleen"
,
"Cathlene"
,
"Cathrin"
,
"Cathrine"
,
"Cathryn"
,
"Cathy"
,
"Cathyleen"
,
"Cati"
,
"Catie"
,
"Catima"
,
"Catina"
,
"Catlaina"
,
"Catlee"
,
"Catlin"
,
"Cato"
,
"Caton"
,
"Catrina"
,
"Catriona"
,
"Catt"
,
"Cattan"
,
"Cattier"
,
"Cattima"
,
"Catto"
,
"Catton"
,
"Caty"
,
"Caughey"
,
"Caundra"
,
"Cavallaro"
,
"Cavan"
,
"Cavanagh"
,
"Cavanaugh"
,
"Cave"
,
"Caves"
,
"Cavil"
,
"Cavill"
,
"Cavit"
,
"Cavuoto"
,
"Cawley"
,
"Caye"
,
"Cayla"
,
"Caylor"
,
"Cayser"
,
"Caz"
,
"Cazzie"
,
"Cchaddie"
,
"Cece"
,
"Cecelia"
,
"Cecil"
,
"Cecile"
,
"Ceciley"
,
"Cecilia"
,
"Cecilio"
,
"Cecilius"
,
"Cecilla"
,
"Cecily"
,
"Ced"
,
"Cedar"
,
"Cedell"
,
"Cedric"
,
"Ceevah"
,
"Ceil"
,
"Cele"
,
"Celene"
,
"Celeski"
,
"Celesta"
,
"Celeste"
,
"Celestia"
,
"Celestina"
,
"Celestine"
,
"Celestyn"
,
"Celestyna"
,
"Celia"
,
"Celie"
,
"Celik"
,
"Celin"
,
"Celina"
,
"Celinda"
,
"Celine"
,
"Celinka"
,
"Celio"
,
"Celisse"
,
"Celka"
,
"Celle"
,
"Cello"
,
"Celtic"
,
"Cenac"
,
"Cence"
,
"Centeno"
,
"Center"
,
"Centonze"
,
"Ceporah"
,
"Cerallua"
,
"Cerelia"
,
"Cerell"
,
"Cerellia"
,
"Cerelly"
,
"Cerf"
,
"Cerracchio"
,
"Certie"
,
"Cerveny"
,
"Cerys"
,
"Cesar"
,
"Cesare"
,
"Cesaria"
,
"Cesaro"
,
"Cestar"
,
"Cesya"
,
"Cha"
,
"Chabot"
,
"Chace"
,
"Chad"
,
"Chadabe"
,
"Chadbourne"
,
"Chadburn"
,
"Chadd"
,
"Chaddie"
,
"Chaddy"
,
"Chader"
,
"Chadwick"
,
"Chae"
,
"Chafee"
,
"Chaffee"
,
"Chaffin"
,
"Chaffinch"
,
"Chaiken"
,
"Chaille"
,
"Chaim"
,
"Chainey"
,
"Chaing"
,
"Chak"
,
"Chaker"
,
"Chally"
,
"Chalmer"
,
"Chalmers"
,
"Chamberlain"
,
"Chamberlin"
,
"Chambers"
,
"Chamkis"
,
"Champ"
,
"Champagne"
,
"Champaigne"
,
"Chan"
,
"Chance"
,
"Chancellor"
,
"Chancelor"
,
"Chancey"
,
"Chanda"
,
"Chandal"
,
"Chandler"
,
"Chandless"
,
"Chandos"
,
"Chandra"
,
"Chane"
,
"Chaney"
,
"Chang"
,
"Changaris"
,
"Channa"
,
"Channing"
,
"Chansoo"
,
"Chantal"
,
"Chantalle"
,
"Chao"
,
"Chap"
,
"Chapa"
,
"Chapel"
,
"Chapell"
,
"Chapen"
,
"Chapin"
,
"Chapland"
,
"Chapman"
,
"Chapnick"
,
"Chappelka"
,
"Chappell"
,
"Chappie"
,
"Chappy"
,
"Chara"
,
"Charbonneau"
,
"Charbonnier"
,
"Chard"
,
"Chari"
,
"Charie"
,
"Charil"
,
"Charin"
,
"Chariot"
,
"Charis"
,
"Charissa"
,
"Charisse"
,
"Charita"
,
"Charity"
,
"Charla"
,
"Charlean"
,
"Charleen"
,
"Charlena"
,
"Charlene"
,
"Charles"
,
"Charlet"
,
"Charleton"
,
"Charley"
,
"Charlie"
,
"Charline"
,
"Charlot"
,
"Charlotta"
,
"Charlotte"
,
"Charlton"
,
"Charmain"
,
"Charmaine"
,
"Charmane"
,
"Charmian"
,
"Charmine"
,
"Charmion"
,
"Charo"
,
"Charpentier"
,
"Charron"
,
"Charry"
,
"Charteris"
,
"Charters"
,
"Charyl"
,
"Chas"
,
"Chase"
,
"Chasse"
,
"Chassin"
,
"Chastain"
,
"Chastity"
,
"Chatav"
,
"Chatterjee"
,
"Chatwin"
,
"Chaudoin"
,
"Chaunce"
,
"Chauncey"
,
"Chavaree"
,
"Chaves"
,
"Chavey"
,
"Chavez"
,
"Chaworth"
,
"Che"
,
"Cheadle"
,
"Cheatham"
,
"Checani"
,
"Chee"
,
"Cheffetz"
,
"Cheke"
,
"Chellman"
,
"Chelsae"
,
"Chelsea"
,
"Chelsey"
,
"Chelsie"
,
"Chelsy"
,
"Chelton"
,
"Chem"
,
"Chema"
,
"Chemar"
,
"Chemaram"
,
"Chemarin"
,
"Chemash"
,
"Chemesh"
,
"Chemosh"
,
"Chemush"
,
"Chen"
,
"Chenay"
,
"Chenee"
,
"Cheney"
,
"Cheng"
,
"Cher"
,
"Chere"
,
"Cherey"
,
"Cheri"
,
"Cheria"
,
"Cherian"
,
"Cherianne"
,
"Cherice"
,
"Cherida"
,
"Cherie"
,
"Cherilyn"
,
"Cherilynn"
,
"Cherin"
,
"Cherise"
,
"Cherish"
,
"Cherlyn"
,
"Chernow"
,
"Cherri"
,
"Cherrita"
,
"Cherry"
,
"Chery"
,
"Cherye"
,
"Cheryl"
,
"Ches"
,
"Cheshire"
,
"Cheslie"
,
"Chesna"
,
"Chesney"
,
"Chesnut"
,
"Chessa"
,
"Chessy"
,
"Chester"
,
"Cheston"
,
"Chet"
,
"Cheung"
,
"Chev"
,
"Chevalier"
,
"Chevy"
,
"Chew"
,
"Cheyne"
,
"Cheyney"
,
"Chi"
,
"Chiaki"
,
"Chiang"
,
"Chiarra"
,
"Chic"
,
"Chick"
,
"Chickie"
,
"Chicky"
,
"Chico"
,
"Chicoine"
,
"Chien"
,
"Chil"
,
"Chilcote"
,
"Child"
,
"Childers"
,
"Childs"
,
"Chiles"
,
"Chill"
,
"Chilson"
,
"Chilt"
,
"Chilton"
,
"Chimene"
,
"Chin"
,
"China"
,
"Ching"
,
"Chinua"
,
"Chiou"
,
"Chip"
,
"Chipman"
,
"Chiquia"
,
"Chiquita"
,
"Chirlin"
,
"Chisholm"
,
"Chita"
,
"Chitkara"
,
"Chivers"
,
"Chladek"
,
"Chlo"
,
"Chloe"
,
"Chloette"
,
"Chloras"
,
"Chlores"
,
"Chlori"
,
"Chloris"
,
"Cho"
,
"Chobot"
,
"Chon"
,
"Chong"
,
"Choo"
,
"Choong"
,
"Chor"
,
"Chouest"
,
"Chow"
,
"Chretien"
,
"Chris"
,
"Chrisman"
,
"Chrisoula"
,
"Chrissa"
,
"Chrisse"
,
"Chrissie"
,
"Chrissy"
,
"Christa"
,
"Christabel"
,
"Christabella"
,
"Christabelle"
,
"Christal"
,
"Christalle"
,
"Christan"
,
"Christean"
,
"Christel"
,
"Christen"
,
"Christensen"
,
"Christenson"
,
"Christi"
,
"Christian"
,
"Christiana"
,
"Christiane"
,
"Christianity"
,
"Christianna"
,
"Christiano"
,
"Christiansen"
,
"Christianson"
,
"Christie"
,
"Christin"
,
"Christina"
,
"Christine"
,
"Christis"
,
"Christmann"
,
"Christmas"
,
"Christoffer"
,
"Christoforo"
,
"Christoper"
,
"Christoph"
,
"Christophe"
,
"Christopher"
,
"Christos"
,
"Christy"
,
"Christye"
,
"Christyna"
,
"Chrisy"
,
"Chrotoem"
,
"Chrysa"
,
"Chrysler"
,
"Chrystal"
,
"Chryste"
,
"Chrystel"
,
"Chu"
,
"Chuah"
,
"Chubb"
,
"Chuch"
,
"Chucho"
,
"Chuck"
,
"Chud"
,
"Chui"
,
"Chuipek"
,
"Chun"
,
"Chung"
,
"Chura"
,
"Church"
,
"Churchill"
,
"Chute"
,
"Chuu"
,
"Chyou"
,
"Cia"
,
"Cianca"
,
"Ciapas"
,
"Ciapha"
,
"Ciaphus"
,
"Cibis"
,
"Ciccia"
,
"Cicely"
,
"Cicenia"
,
"Cicero"
,
"Cichocki"
,
"Cicily"
,
"Cid"
,
"Cida"
,
"Ciel"
,
"Cila"
,
"Cilka"
,
"Cilla"
,
"Cilo"
,
"Cilurzo"
,
"Cima"
,
"Cimah"
,
"Cimbura"
,
"Cinda"
,
"Cindee"
,
"Cindelyn"
,
"Cinderella"
,
"Cindi"
,
"Cindie"
,
"Cindra"
,
"Cindy"
,
"Cinelli"
,
"Cini"
,
"Cinnamon"
,
"Cioban"
,
"Cioffred"
,
"Ciprian"
,
"Circosta"
,
"Ciri"
,
"Cirilla"
,
"Cirillo"
,
"Cirilo"
,
"Ciro"
,
"Cirone"
,
"Cirri"
,
"Cis"
,
"Cissie"
,
"Cissiee"
,
"Cissy"
,
"Cita"
,
"Citarella"
,
"Citron"
,
"Clabo"
,
"Claiborn"
,
"Claiborne"
,
"Clair"
,
"Claire"
,
"Claman"
,
"Clance"
,
"Clancy"
,
"Clapp"
,
"Clapper"
,
"Clara"
,
"Clarabelle"
,
"Clarance"
,
"Clardy"
,
"Clare"
,
"Clarence"
,
"Claresta"
,
"Clareta"
,
"Claretta"
,
"Clarette"
,
"Clarey"
,
"Clarhe"
,
"Clari"
,
"Claribel"
,
"Clarice"
,
"Clarie"
,
"Clarinda"
,
"Clarine"
,
"Clarisa"
,
"Clarise"
,
"Clarissa"
,
"Clarisse"
,
"Clarita"
,
"Clark"
,
"Clarke"
,
"Clarkin"
,
"Clarkson"
,
"Clary"
,
"Claud"
,
"Clauddetta"
,
"Claude"
,
"Claudell"
,
"Claudelle"
,
"Claudetta"
,
"Claudette"
,
"Claudia"
,
"Claudian"
,
"Claudianus"
,
"Claudie"
,
"Claudina"
,
"Claudine"
,
"Claudio"
,
"Claudius"
,
"Claudy"
,
"Claus"
,
"Clausen"
,
"Clava"
,
"Clawson"
,
"Clay"
,
"Clayberg"
,
"Clayborn"
,
"Clayborne"
,
"Claybourne"
,
"Clayson"
,
"Clayton"
,
"Clea"
,
"Cleary"
,
"Cleasta"
,
"Cleave"
,
"Cleaves"
,
"Cleavland"
,
"Clein"
,
"Cleland"
,
"Clellan"
,
"Clem"
,
"Clemen"
,
"Clemence"
,
"Clemens"
,
"Clement"
,
"Clementas"
,
"Clemente"
,
"Clementi"
,
"Clementia"
,
"Clementina"
,
"Clementine"
,
"Clementis"
,
"Clementius"
,
"Clements"
,
"Clemmie"
,
"Clemmy"
,
"Cleo"
,
"Cleodal"
,
"Cleodel"
,
"Cleodell"
,
"Cleon"
,
"Cleopatra"
,
"Cleopatre"
,
"Clerc"
,
"Clercq"
,
"Clere"
,
"Cleres"
,
"Clerissa"
,
"Clerk"
,
"Cleti"
,
"Cletis"
,
"Cletus"
,
"Cleve"
,
"Cleveland"
,
"Clevey"
,
"Clevie"
,
"Clie"
,
"Cliff"
,
"Cliffes"
,
"Clifford"
,
"Clift"
,
"Clifton"
,
"Clim"
,
"Cline"
,
"Clint"
,
"Clintock"
,
"Clinton"
,
"Clio"
,
"Clippard"
,
"Clite"
,
"Clive"
,
"Clo"
,
"Cloe"
,
"Cloots"
,
"Clorinda"
,
"Clorinde"
,
"Cloris"
,
"Close"
,
"Clothilde"
,
"Clotilda"
,
"Clotilde"
,
"Clough"
,
"Clougher"
,
"Cloutman"
,
"Clova"
,
"Clovah"
,
"Clover"
,
"Clovis"
,
"Clower"
,
"Clute"
,
"Cly"
,
"Clyde"
,
"Clymer"
,
"Clynes"
,
"Clyte"
,
"Clyve"
,
"Clywd"
,
"Cnut"
,
"Coad"
,
"Coady"
,
"Coates"
,
"Coats"
,
"Cob"
,
"Cobb"
,
"Cobbie"
,
"Cobby"
,
"Coben"
,
"Cochard"
,
"Cochran"
,
"Cochrane"
,
"Cock"
,
"Cockburn"
,
"Cocke"
,
"Cocks"
,
"Coco"
,
"Codd"
,
"Codding"
,
"Codee"
,
"Codel"
,
"Codi"
,
"Codie"
,
"Cody"
,
"Coe"
,
"Coffee"
,
"Coffeng"
,
"Coffey"
,
"Coffin"
,
"Cofsky"
,
"Cogan"
,
"Cogen"
,
"Cogswell"
,
"Coh"
,
"Cohbath"
,
"Cohberg"
,
"Cohbert"
,
"Cohby"
,
"Cohdwell"
,
"Cohe"
,
"Coheman"
,
"Cohen"
,
"Cohette"
,
"Cohin"
,
"Cohl"
,
"Cohla"
,
"Cohleen"
,
"Cohlette"
,
"Cohlier"
,
"Cohligan"
,
"Cohn"
,
"Cointon"
,
"Coit"
,
"Coke"
,
"Col"
,
"Colan"
,
"Colas"
,
"Colb"
,
"Colbert"
,
"Colburn"
,
"Colby"
,
"Colbye"
,
"Cole"
,
"Coleen"
,
"Coleman"
,
"Colene"
,
"Colet"
,
"Coletta"
,
"Colette"
,
"Coleville"
,
"Colfin"
,
"Colier"
,
"Colin"
,
"Colinson"
,
"Colis"
,
"Collar"
,
"Collayer"
,
"Collbaith"
,
"Colleen"
,
"Collen"
,
"Collete"
,
"Collette"
,
"Colley"
,
"Collie"
,
"Collier"
,
"Colligan"
,
"Collimore"
,
"Collin"
,
"Colline"
,
"Collins"
,
"Collis"
,
"Collum"
,
"Colly"
,
"Collyer"
,
"Colman"
,
"Colner"
,
"Colombi"
,
"Colon"
,
"Colp"
,
"Colpin"
,
"Colson"
,
"Colston"
,
"Colt"
,
"Coltin"
,
"Colton"
,
"Coltson"
,
"Coltun"
,
"Columba"
,
"Columbine"
,
"Columbus"
,
"Columbyne"
,
"Colver"
,
"Colvert"
,
"Colville"
,
"Colvin"
,
"Colwell"
,
"Colwen"
,
"Colwin"
,
"Colyer"
,
"Combe"
,
"Combes"
,
"Combs"
,
"Comfort"
,
"Compte"
,
"Comptom"
,
"Compton"
,
"Comras"
,
"Comstock"
,
"Comyns"
,
"Con"
,
"Conah"
,
"Conal"
,
"Conall"
,
"Conan"
,
"Conant"
,
"Conard"
,
"Concepcion"
,
"Concettina"
,
"Concha"
,
"Conchita"
,
"Concoff"
,
"Concordia"
,
"Condon"
,
"Coney"
,
"Congdon"
,
"Conger"
,
"Coniah"
,
"Conias"
,
"Conlan"
,
"Conlee"
,
"Conlen"
,
"Conley"
,
"Conlin"
,
"Conlon"
,
"Conn"
,
"Connel"
,
"Connell"
,
"Connelley"
,
"Connelly"
,
"Conner"
,
"Conners"
,
"Connett"
,
"Conney"
,
"Conni"
,
"Connie"
,
"Connolly"
,
"Connor"
,
"Connors"
,
"Conny"
,
"Conover"
,
"Conrad"
,
"Conrade"
,
"Conrado"
,
"Conroy"
,
"Consalve"
,
"Consolata"
,
"Constance"
,
"Constancia"
,
"Constancy"
,
"Constant"
,
"Constanta"
,
"Constantia"
,
"Constantin"
,
"Constantina"
,
"Constantine"
,
"Constantino"
,
"Consuela"
,
"Consuelo"
,
"Conte"
,
"Conti"
,
"Converse"
,
"Convery"
,
"Conway"
,
"Cony"
,
"Conyers"
,
"Cooe"
,
"Cook"
,
"Cooke"
,
"Cookie"
,
"Cooley"
,
"Coombs"
,
"Coonan"
,
"Coop"
,
"Cooper"
,
"Cooperman"
,
"Coopersmith"
,
"Cooperstein"
,
"Cope"
,
"Copeland"
,
"Copland"
,
"Coplin"
,
"Copp"
,
"Coppinger"
,
"Coppins"
,
"Coppock"
,
"Coppola"
,
"Cora"
,
"Corabel"
,
"Corabella"
,
"Corabelle"
,
"Coral"
,
"Coralie"
,
"Coraline"
,
"Coralyn"
,
"Coray"
,
"Corbet"
,
"Corbett"
,
"Corbie"
,
"Corbin"
,
"Corby"
,
"Cord"
,
"Cordalia"
,
"Cordeelia"
,
"Cordelia"
,
"Cordelie"
,
"Cordell"
,
"Corder"
,
"Cordey"
,
"Cordi"
,
"Cordie"
,
"Cordier"
,
"Cordle"
,
"Cordova"
,
"Cordula"
,
"Cordy"
,
"Coreen"
,
"Corel"
,
"Corell"
,
"Corella"
,
"Corena"
,
"Corenda"
,
"Corene"
,
"Coretta"
,
"Corette"
,
"Corey"
,
"Cori"
,
"Coridon"
,
"Corie"
,
"Corilla"
,
"Corin"
,
"Corina"
,
"Corine"
,
"Corinna"
,
"Corinne"
,
"Coriss"
,
"Corissa"
,
"Corkhill"
,
"Corley"
,
"Corliss"
,
"Corly"
,
"Cormac"
,
"Cormack"
,
"Cormick"
,
"Cormier"
,
"Cornall"
,
"Corneille"
,
"Cornel"
,
"Cornela"
,
"Cornelia"
,
"Cornelie"
,
"Cornelius"
,
"Cornell"
,
"Cornelle"
,
"Cornew"
,
"Corney"
,
"Cornia"
,
"Cornie"
,
"Cornish"
,
"Cornwall"
,
"Cornwell"
,
"Corny"
,
"Corotto"
,
"Correna"
,
"Correy"
,
"Corri"
,
"Corrianne"
,
"Corrie"
,
"Corrina"
,
"Corrine"
,
"Corrinne"
,
"Corron"
,
"Corry"
,
"Corsetti"
,
"Corsiglia"
,
"Corso"
,
"Corson"
,
"Cort"
,
"Cortie"
,
"Cortney"
,
"Corty"
,
"Corvese"
,
"Corvin"
,
"Corwin"
,
"Corwun"
,
"Cory"
,
"Coryden"
,
"Corydon"
,
"Cos"
,
"Cosenza"
,
"Cosetta"
,
"Cosette"
,
"Coshow"
,
"Cosimo"
,
"Cosma"
,
"Cosme"
,
"Cosmo"
,
"Cost"
,
"Costa"
,
"Costanza"
,
"Costanzia"
,
"Costello"
,
"Coster"
,
"Costin"
,
"Cote"
,
"Cotsen"
,
"Cott"
,
"Cotter"
,
"Cotterell"
,
"Cottle"
,
"Cottrell"
,
"Coucher"
,
"Couchman"
,
"Coughlin"
,
"Coulombe"
,
"Coulson"
,
"Coulter"
,
"Coumas"
,
"Countess"
,
"Courcy"
,
"Court"
,
"Courtenay"
,
"Courtland"
,
"Courtnay"
,
"Courtney"
,
"Courtund"
,
"Cousin"
,
"Cousins"
,
"Coussoule"
,
"Couture"
,
"Covell"
,
"Coveney"
,
"Cowan"
,
"Coward"
,
"Cowden"
,
"Cowen"
,
"Cower"
,
"Cowey"
,
"Cowie"
,
"Cowles"
,
"Cowley"
,
"Cown"
,
"Cox"
,
"Coy"
,
"Coyle"
,
"Cozmo"
,
"Cozza"
,
"Crabb"
,
"Craddock"
,
"Craggie"
,
"Craggy"
,
"Craig"
,
"Crain"
,
"Cralg"
,
"Cram"
,
"Cramer"
,
"Cran"
,
"Crandale"
,
"Crandall"
,
"Crandell"
,
"Crane"
,
"Craner"
,
"Cranford"
,
"Cranston"
,
"Crary"
,
"Craven"
,
"Craw"
,
"Crawford"
,
"Crawley"
,
"Creamer"
,
"Crean"
,
"Creath"
,
"Creedon"
,
"Creigh"
,
"Creight"
,
"Creighton"
,
"Crelin"
,
"Crellen"
,
"Crenshaw"
,
"Cresa"
,
"Crescantia"
,
"Crescen"
,
"Crescentia"
,
"Crescin"
,
"Crescint"
,
"Cresida"
,
"Crespi"
,
"Crespo"
,
"Cressi"
,
"Cressida"
,
"Cressler"
,
"Cressy"
,
"Crichton"
,
"Crifasi"
,
"Crim"
,
"Crin"
,
"Cris"
,
"Crisey"
,
"Crispa"
,
"Crispas"
,
"Crispen"
,
"Crispin"
,
"Crissie"
,
"Crissy"
,
"Crist"
,
"Crista"
,
"Cristabel"
,
"Cristal"
,
"Cristen"
,
"Cristi"
,
"Cristian"
,
"Cristiano"
,
"Cristie"
,
"Cristin"
,
"Cristina"
,
"Cristine"
,
"Cristiona"
,
"Cristionna"
,
"Cristobal"
,
"Cristoforo"
,
"Cristy"
,
"Criswell"
,
"Critchfield"
,
"Critta"
,
"Crocker"
,
"Crockett"
,
"Crofoot"
,
"Croft"
,
"Crofton"
,
"Croix"
,
"Crompton"
,
"Cromwell"
,
"Croner"
,
"Cronin"
,
"Crooks"
,
"Croom"
,
"Crosby"
,
"Crosley"
,
"Cross"
,
"Crosse"
,
"Croteau"
,
"Crotty"
,
"Crow"
,
"Crowe"
,
"Crowell"
,
"Crowley"
,
"Crowns"
,
"Croydon"
,
"Cruce"
,
"Crudden"
,
"Cruickshank"
,
"Crutcher"
,
"Cruz"
,
"Cryan"
,
"Crysta"
,
"Crystal"
,
"Crystie"
,
"Cthrine"
,
"Cuda"
,
"Cudlip"
,
"Culberson"
,
"Culbert"
,
"Culbertson"
,
"Culhert"
,
"Cull"
,
"Cullan"
,
"Cullen"
,
"Culley"
,
"Cullie"
,
"Cullin"
,
"Culliton"
,
"Cully"
,
"Culosio"
,
"Culver"
,
"Cumine"
,
"Cumings"
,
"Cummine"
,
"Cummings"
,
"Cummins"
,
"Cung"
,
"Cunningham"
,
"Cupo"
,
"Curcio"
,
"Curhan"
,
"Curkell"
,
"Curley"
,
"Curnin"
,
"Curr"
,
"Curran"
,
"Curren"
,
"Currey"
,
"Currie"
,
"Currier"
,
"Curry"
,
"Curson"
,
"Curt"
,
"Curtice"
,
"Curtis"
,
"Curzon"
,
"Cusack"
,
"Cusick"
,
"Custer"
,
"Cut"
,
"Cutcheon"
,
"Cutcliffe"
,
"Cuthbert"
,
"Cuthbertson"
,
"Cuthburt"
,
"Cutler"
,
"Cutlerr"
,
"Cutlip"
,
"Cutlor"
,
"Cutter"
,
"Cuttie"
,
"Cuttler"
,
"Cutty"
,
"Cuyler"
,
"Cy"
,
"Cyb"
,
"Cybil"
,
"Cybill"
,
"Cychosz"
,
"Cyd"
,
"Cykana"
,
"Cyler"
,
"Cyma"
,
"Cymbre"
,
"Cyn"
,
"Cyna"
,
"Cynar"
,
"Cynara"
,
"Cynarra"
,
"Cynde"
,
"Cyndi"
,
"Cyndia"
,
"Cyndie"
,
"Cyndy"
,
"Cynera"
,
"Cynth"
,
"Cynthea"
,
"Cynthia"
,
"Cynthie"
,
"Cynthla"
,
"Cynthy"
,
"Cyprian"
,
"Cyprio"
,
"Cypro"
,
"Cyprus"
,
"Cyrano"
,
"Cyrie"
,
"Cyril"
,
"Cyrill"
,
"Cyrilla"
,
"Cyrille"
,
"Cyrillus"
,
"Cyrus"
,
"Czarra"
,
"D'Arcy"
,
"Dabbs"
,
"Daberath"
,
"Dabney"
,
"Dace"
,
"Dacey"
,
"Dachi"
,
"Dachia"
,
"Dachy"
,
"Dacia"
,
"Dacie"
,
"Dacy"
,
"Daegal"
,
"Dael"
,
"Daffi"
,
"Daffie"
,
"Daffodil"
,
"Daffy"
,
"Dafna"
,
"Dafodil"
,
"Dag"
,
"Dagall"
,
"Daggett"
,
"Daggna"
,
"Dagley"
,
"Dagmar"
,
"Dagna"
,
"Dagnah"
,
"Dagney"
,
"Dagny"
,
"Dahl"
,
"Dahle"
,
"Dahlia"
,
"Dahlstrom"
,
"Daigle"
,
"Dail"
,
"Daile"
,
"Dailey"
,
"Daisey"
,
"Daisi"
,
"Daisie"
,
"Daisy"
,
"Daitzman"
,
"Dal"
,
"Dale"
,
"Dalenna"
,
"Daley"
,
"Dalia"
,
"Dalila"
,
"Dalis"
,
"Dall"
,
"Dallas"
,
"Dalli"
,
"Dallis"
,
"Dallman"
,
"Dallon"
,
"Daloris"
,
"Dalpe"
,
"Dalston"
,
"Dalt"
,
"Dalton"
,
"Dalury"
,
"Daly"
,
"Dam"
,
"Damal"
,
"Damalas"
,
"Damales"
,
"Damali"
,
"Damalis"
,
"Damalus"
,
"Damara"
,
"Damaris"
,
"Damarra"
,
"Dambro"
,
"Dame"
,
"Damek"
,
"Damian"
,
"Damiani"
,
"Damiano"
,
"Damick"
,
"Damicke"
,
"Damien"
,
"Damita"
,
"Damle"
,
"Damon"
,
"Damour"
,
"Dan"
,
"Dana"
,
"Danae"
,
"Danaher"
,
"Danais"
,
"Danas"
,
"Danby"
,
"Danczyk"
,
"Dane"
,
"Danell"
,
"Danella"
,
"Danelle"
,
"Danete"
,
"Danette"
,
"Daney"
,
"Danforth"
,
"Dang"
,
"Dani"
,
"Dania"
,
"Daniala"
,
"Danialah"
,
"Danica"
,
"Danice"
,
"Danie"
,
"Daniel"
,
"Daniela"
,
"Daniele"
,
"Daniell"
,
"Daniella"
,
"Danielle"
,
"Daniels"
,
"Danielson"
,
"Danieu"
,
"Danika"
,
"Danila"
,
"Danit"
,
"Danita"
,
"Daniyal"
,
"Dann"
,
"Danna"
,
"Dannel"
,
"Danni"
,
"Dannica"
,
"Dannie"
,
"Dannon"
,
"Danny"
,
"Dannye"
,
"Dante"
,
"Danuloff"
,
"Danya"
,
"Danyelle"
,
"Danyette"
,
"Danyluk"
,
"Danzig"
,
"Danziger"
,
"Dao"
,
"Daph"
,
"Daphene"
,
"Daphie"
,
"Daphna"
,
"Daphne"
,
"Dar"
,
"Dara"
,
"Darach"
,
"Darb"
,
"Darbee"
,
"Darbie"
,
"Darby"
,
"Darce"
,
"Darcee"
,
"Darcey"
,
"Darci"
,
"Darcia"
,
"Darcie"
,
"Darcy"
,
"Darda"
,
"Dardani"
,
"Dare"
,
"Dareece"
,
"Dareen"
,
"Darees"
,
"Darell"
,
"Darelle"
,
"Daren"
,
"Dari"
,
"Daria"
,
"Darian"
,
"Darice"
,
"Darill"
,
"Darin"
,
"Dario"
,
"Darius"
,
"Darken"
,
"Darla"
,
"Darleen"
,
"Darlene"
,
"Darline"
,
"Darlleen"
,
"Darmit"
,
"Darn"
,
"Darnall"
,
"Darnell"
,
"Daron"
,
"Darooge"
,
"Darra"
,
"Darrel"
,
"Darrell"
,
"Darrelle"
,
"Darren"
,
"Darrey"
,
"Darrick"
,
"Darrill"
,
"Darrin"
,
"Darrow"
,
"Darryl"
,
"Darryn"
,
"Darsey"
,
"Darsie"
,
"Dart"
,
"Darton"
,
"Darwen"
,
"Darwin"
,
"Darya"
,
"Daryl"
,
"Daryle"
,
"Daryn"
,
"Dash"
,
"Dasha"
,
"Dasi"
,
"Dasie"
,
"Dasteel"
,
"Dasya"
,
"Datha"
,
"Datnow"
,
"Daub"
,
"Daugherty"
,
"Daughtry"
,
"Daukas"
,
"Daune"
,
"Dav"
,
"Dave"
,
"Daveda"
,
"Daveen"
,
"Daven"
,
"Davena"
,
"Davenport"
,
"Daveta"
,
"Davey"
,
"David"
,
"Davida"
,
"Davidde"
,
"Davide"
,
"Davidoff"
,
"Davidson"
,
"Davie"
,
"Davies"
,
"Davilman"
,
"Davin"
,
"Davina"
,
"Davine"
,
"Davis"
,
"Davison"
,
"Davita"
,
"Davon"
,
"Davy"
,
"Dawes"
,
"Dawkins"
,
"Dawn"
,
"Dawna"
,
"Dawson"
,
"Day"
,
"Daye"
,
"Dayle"
,
"Dayna"
,
"Ddene"
,
"De"
,
"De Witt"
,
"Deach"
,
"Deacon"
,
"Deadman"
,
"Dean"
,
"Deana"
,
"Deane"
,
"Deaner"
,
"Deanna"
,
"Deanne"
,
"Dearborn"
,
"Dearden"
,
"Dearman"
,
"Dearr"
,
"Deb"
,
"Debarath"
,
"Debbee"
,
"Debbi"
,
"Debbie"
,
"Debbra"
,
"Debby"
,
"Debee"
,
"Debera"
,
"Debi"
,
"Debor"
,
"Debora"
,
"Deborah"
,
"Deborath"
,
"Debra"
,
"Decamp"
,
"Decato"
,
"Decca"
,
"December"
,
"Decima"
,
"Deck"
,
"Decker"
,
"Deckert"
,
"Declan"
,
"Dede"
,
"Deden"
,
"Dedie"
,
"Dedra"
,
"Dedric"
,
"Dedrick"
,
"Dee"
,
"Dee Dee"
,
"DeeAnn"
,
"Deeann"
,
"Deeanne"
,
"Deedee"
,
"Deegan"
,
"Deena"
,
"Deenya"
,
"Deer"
,
"Deerdre"
,
"Deering"
,
"Deery"
,
"Deeyn"
,
"Defant"
,
"Dehlia"
,
"Dehnel"
,
"Deibel"
,
"Deidre"
,
"Deina"
,
"Deirdra"
,
"Deirdre"
,
"Dekeles"
,
"Dekow"
,
"Del"
,
"Dela"
,
"Delacourt"
,
"Delaine"
,
"Delainey"
,
"Delamare"
,
"Deland"
,
"Delaney"
,
"Delanie"
,
"Delano"
,
"Delanos"
,
"Delanty"
,
"Delaryd"
,
"Delastre"
,
"Delbert"
,
"Delcina"
,
"Delcine"
,
"Delfeena"
,
"Delfine"
,
"Delgado"
,
"Delia"
,
"Delija"
,
"Delila"
,
"Delilah"
,
"Delinda"
,
"Delisle"
,
"Dell"
,
"Della"
,
"Delle"
,
"Dellora"
,
"Delly"
,
"Delmar"
,
"Delmer"
,
"Delmor"
,
"Delmore"
,
"Delogu"
,
"Delora"
,
"Delorenzo"
,
"Delores"
,
"Deloria"
,
"Deloris"
,
"Delos"
,
"Delp"
,
"Delphina"
,
"Delphine"
,
"Delphinia"
,
"Delsman"
,
"Delwin"
,
"Delwyn"
,
"Demaggio"
,
"Demakis"
,
"Demaria"
,
"Demb"
,
"Demeter"
,
"Demetra"
,
"Demetre"
,
"Demetri"
,
"Demetria"
,
"Demetris"
,
"Demetrius"
,
"Demeyer"
,
"Deming"
,
"Demitria"
,
"Demmer"
,
"Demmy"
,
"Demodena"
,
"Demona"
,
"Demott"
,
"Demp"
,
"Dempsey"
,
"Dempster"
,
"Dempstor"
,
"Demy"
,
"Den"
,
"Dena"
,
"Denae"
,
"Denbrook"
,
"Denby"
,
"Dene"
,
"Deni"
,
"Denice"
,
"Denie"
,
"Denis"
,
"Denise"
,
"Denison"
,
"Denman"
,
"Denn"
,
"Denna"
,
"Dennard"
,
"Dennet"
,
"Dennett"
,
"Denney"
,
"Denni"
,
"Dennie"
,
"Dennis"
,
"Dennison"
,
"Denny"
,
"Denoting"
,
"Dent"
,
"Denten"
,
"Denton"
,
"Denver"
,
"Deny"
,
"Denys"
,
"Denyse"
,
"Denzil"
,
"Deonne"
,
"Depoliti"
,
"Deppy"
,
"Der"
,
"Deragon"
,
"Derayne"
,
"Derby"
,
"Dercy"
,
"Derek"
,
"Derian"
,
"Derick"
,
"Derina"
,
"Derinna"
,
"Derk"
,
"Derman"
,
"Dermot"
,
"Dermott"
,
"Derna"
,
"Deron"
,
"Deroo"
,
"Derr"
,
"Derrek"
,
"Derrick"
,
"Derriey"
,
"Derrik"
,
"Derril"
,
"Derron"
,
"Derry"
,
"Derte"
,
"Derward"
,
"Derwin"
,
"Derwon"
,
"Derwood"
,
"Deryl"
,
"Derzon"
,
"Des"
,
"Desai"
,
"Desberg"
,
"Descombes"
,
"Desdamona"
,
"Desdamonna"
,
"Desdee"
,
"Desdemona"
,
"Desi"
,
"Desimone"
,
"Desirae"
,
"Desirea"
,
"Desireah"
,
"Desiree"
,
"Desiri"
,
"Desma"
,
"Desmond"
,
"Desmund"
,
"Dessma"
,
"Desta"
,
"Deste"
,
"Destinee"
,
"Deth"
,
"Dett"
,
"Detta"
,
"Dettmer"
,
"Deuno"
,
"Deutsch"
,
"Dev"
,
"Deva"
,
"Devan"
,
"Devaney"
,
"Dever"
,
"Devi"
,
"Devin"
,
"Devina"
,
"Devine"
,
"Devinna"
,
"Devinne"
,
"Devitt"
,
"Devland"
,
"Devlen"
,
"Devlin"
,
"Devol"
,
"Devon"
,
"Devona"
,
"Devondra"
,
"Devonna"
,
"Devonne"
,
"Devora"
,
"Devy"
,
"Dew"
,
"Dewain"
,
"Dewar"
,
"Dewayne"
,
"Dewees"
,
"Dewey"
,
"Dewhirst"
,
"Dewhurst"
,
"Dewie"
,
"Dewitt"
,
"Dex"
,
"Dexter"
,
"Dey"
,
"Dhar"
,
"Dhiman"
,
"Dhiren"
,
"Dhruv"
,
"Dhu"
,
"Dhumma"
,
"Di"
,
"Diahann"
,
"Diamante"
,
"Diamond"
,
"Dian"
,
"Diana"
,
"Diandra"
,
"Diandre"
,
"Diane"
,
"Diane-Marie"
,
"Dianemarie"
,
"Diann"
,
"Dianna"
,
"Dianne"
,
"Diannne"
,
"Diantha"
,
"Dianthe"
,
"Diao"
,
"Diarmid"
,
"Diarmit"
,
"Diarmuid"
,
"Diaz"
,
"Dib"
,
"Diba"
,
"Dibb"
,
"Dibbell"
,
"Dibbrun"
,
"Dibri"
,
"Dibrin"
,
"Dibru"
,
"Dich"
,
"Dichy"
,
"Dick"
,
"Dickens"
,
"Dickenson"
,
"Dickerson"
,
"Dickey"
,
"Dickie"
,
"Dickinson"
,
"Dickman"
,
"Dicks"
,
"Dickson"
,
"Dicky"
,
"Didi"
,
"Didier"
,
"Dido"
,
"Dieball"
,
"Diego"
,
"Diehl"
,
"Diella"
,
"Dielle"
,
"Dielu"
,
"Diena"
,
"Dierdre"
,
"Dierolf"
,
"Diet"
,
"Dieter"
,
"Dieterich"
,
"Dietrich"
,
"Dietsche"
,
"Dietz"
,
"Dikmen"
,
"Dilan"
,
"Diley"
,
"Dilisio"
,
"Dilks"
,
"Dill"
,
"Dillie"
,
"Dillon"
,
"Dilly"
,
"Dimitri"
,
"Dimitris"
,
"Dimitry"
,
"Dimmick"
,
"Dimond"
,
"Dimphia"
,
"Dina"
,
"Dinah"
,
"Dinan"
,
"Dincolo"
,
"Dine"
,
"Dinerman"
,
"Dinesh"
,
"Dinin"
,
"Dinnage"
,
"Dinnie"
,
"Dinny"
,
"Dino"
,
"Dinsdale"
,
"Dinse"
,
"Dinsmore"
,
"Diogenes"
,
"Dion"
,
"Dione"
,
"Dionis"
,
"Dionisio"
,
"Dionne"
,
"Dionysus"
,
"Dippold"
,
"Dira"
,
"Dirk"
,
"Disario"
,
"Disharoon"
,
"Disini"
,
"Diskin"
,
"Diskson"
,
"Disraeli"
,
"Dita"
,
"Ditmore"
,
"Ditter"
,
"Dittman"
,
"Dituri"
,
"Ditzel"
,
"Diver"
,
"Divine"
,
"Dix"
,
"Dixie"
,
"Dixil"
,
"Dixon"
,
"Dmitri"
,
"Dniren"
,
"Doak"
,
"Doane"
,
"Dobb"
,
"Dobbins"
,
"Doble"
,
"Dobrinsky"
,
"Dobson"
,
"Docia"
,
"Docila"
,
"Docile"
,
"Docilla"
,
"Docilu"
,
"Dodd"
,
"Dodds"
,
"Dode"
,
"Dodge"
,
"Dodi"
,
"Dodie"
,
"Dodson"
,
"Dodwell"
,
"Dody"
,
"Doe"
,
"Doehne"
,
"Doelling"
,
"Doerrer"
,
"Doersten"
,
"Doggett"
,
"Dogs"
,
"Doherty"
,
"Doi"
,
"Doig"
,
"Dola"
,
"Dolan"
,
"Dole"
,
"Doley"
,
"Dolf"
,
"Dolhenty"
,
"Doll"
,
"Dollar"
,
"Dolley"
,
"Dolli"
,
"Dollie"
,
"Dolloff"
,
"Dolly"
,
"Dolora"
,
"Dolores"
,
"Dolorita"
,
"Doloritas"
,
"Dolph"
,
"Dolphin"
,
"Dom"
,
"Domash"
,
"Dombrowski"
,
"Domel"
,
"Domela"
,
"Domella"
,
"Domenech"
,
"Domenic"
,
"Domenico"
,
"Domeniga"
,
"Domineca"
,
"Dominga"
,
"Domingo"
,
"Domini"
,
"Dominic"
,
"Dominica"
,
"Dominick"
,
"Dominik"
,
"Dominique"
,
"Dominus"
,
"Dominy"
,
"Domonic"
,
"Domph"
,
"Don"
,
"Dona"
,
"Donadee"
,
"Donaghue"
,
"Donahoe"
,
"Donahue"
,
"Donal"
,
"Donald"
,
"Donaldson"
,
"Donall"
,
"Donalt"
,
"Donata"
,
"Donatelli"
,
"Donaugh"
,
"Donavon"
,
"Donegan"
,
"Donela"
,
"Donell"
,
"Donella"
,
"Donelle"
,
"Donelson"
,
"Donelu"
,
"Doner"
,
"Donetta"
,
"Dong"
,
"Donia"
,
"Donica"
,
"Donielle"
,
"Donn"
,
"Donna"
,
"Donnamarie"
,
"Donnell"
,
"Donnelly"
,
"Donnenfeld"
,
"Donni"
,
"Donnie"
,
"Donny"
,
"Donoghue"
,
"Donoho"
,
"Donohue"
,
"Donough"
,
"Donovan"
,
"Doolittle"
,
"Doone"
,
"Dopp"
,
"Dora"
,
"Doralia"
,
"Doralin"
,
"Doralyn"
,
"Doralynn"
,
"Doralynne"
,
"Doran"
,
"Dorca"
,
"Dorcas"
,
"Dorcea"
,
"Dorcia"
,
"Dorcus"
,
"Dorcy"
,
"Dore"
,
"Doreen"
,
"Dorelia"
,
"Dorella"
,
"Dorelle"
,
"Dorena"
,
"Dorene"
,
"Doretta"
,
"Dorette"
,
"Dorey"
,
"Dorfman"
,
"Dori"
,
"Doria"
,
"Dorian"
,
"Dorice"
,
"Dorie"
,
"Dorin"
,
"Dorina"
,
"Dorinda"
,
"Dorine"
,
"Dorion"
,
"Doris"
,
"Dorisa"
,
"Dorise"
,
"Dorison"
,
"Dorita"
,
"Dorkas"
,
"Dorkus"
,
"Dorlisa"
,
"Dorman"
,
"Dorn"
,
"Doro"
,
"Dorolice"
,
"Dorolisa"
,
"Dorotea"
,
"Doroteya"
,
"Dorothea"
,
"Dorothee"
,
"Dorothi"
,
"Dorothy"
,
"Dorr"
,
"Dorran"
,
"Dorree"
,
"Dorren"
,
"Dorri"
,
"Dorrie"
,
"Dorris"
,
"Dorry"
,
"Dorsey"
,
"Dorsman"
,
"Dorsy"
,
"Dorthea"
,
"Dorthy"
,
"Dorweiler"
,
"Dorwin"
,
"Dory"
,
"Doscher"
,
"Dosh"
,
"Dosi"
,
"Dosia"
,
"Doss"
,
"Dot"
,
"Doti"
,
"Dotson"
,
"Dott"
,
"Dotti"
,
"Dottie"
,
"Dotty"
,
"Doty"
,
"Doubler"
,
"Doug"
,
"Dougal"
,
"Dougald"
,
"Dougall"
,
"Dougherty"
,
"Doughman"
,
"Doughty"
,
"Dougie"
,
"Douglas"
,
"Douglass"
,
"Dougy"
,
"Douty"
,
"Douville"
,
"Dov"
,
"Dove"
,
"Dovev"
,
"Dow"
,
"Dowd"
,
"Dowdell"
,
"Dowell"
,
"Dowlen"
,
"Dowling"
,
"Down"
,
"Downall"
,
"Downe"
,
"Downes"
,
"Downey"
,
"Downing"
,
"Downs"
,
"Dowski"
,
"Dowzall"
,
"Doxia"
,
"Doy"
,
"Doykos"
,
"Doyle"
,
"Drabeck"
,
"Dragelin"
,
"Dragon"
,
"Dragone"
,
"Dragoon"
,
"Drain"
,
"Drais"
,
"Drake"
,
"Drandell"
,
"Drape"
,
"Draper"
,
"Dray"
,
"Dre"
,
"Dream"
,
"Dreda"
,
"Dreddy"
,
"Dredi"
,
"Dreeda"
,
"Dreher"
,
"Dremann"
,
"Drescher"
,
"Dressel"
,
"Dressler"
,
"Drew"
,
"Drewett"
,
"Drews"
,
"Drexler"
,
"Dreyer"
,
"Dric"
,
"Drice"
,
"Drida"
,
"Dripps"
,
"Driscoll"
,
"Driskill"
,
"Drisko"
,
"Drislane"
,
"Drobman"
,
"Drogin"
,
"Drolet"
,
"Drona"
,
"Dronski"
,
"Drooff"
,
"Dru"
,
"Druce"
,
"Druci"
,
"Drucie"
,
"Drucill"
,
"Drucilla"
,
"Drucy"
,
"Drud"
,
"Drue"
,
"Drugge"
,
"Drugi"
,
"Drummond"
,
"Drus"
,
"Drusi"
,
"Drusie"
,
"Drusilla"
,
"Drusus"
,
"Drusy"
,
"Dry"
,
"Dryden"
,
"Drye"
,
"Dryfoos"
,
"DuBois"
,
"Duane"
,
"Duarte"
,
"Duax"
,
"Dubenko"
,
"Dublin"
,
"Ducan"
,
"Duck"
,
"Dud"
,
"Dudden"
,
"Dudley"
,
"Duer"
,
"Duester"
,
"Duff"
,
"Duffie"
,
"Duffy"
,
"Dugaid"
,
"Dugald"
,
"Dugan"
,
"Dugas"
,
"Duggan"
,
"Duhl"
,
"Duke"
,
"Dukey"
,
"Dukie"
,
"Duky"
,
"Dulce"
,
"Dulcea"
,
"Dulci"
,
"Dulcia"
,
"Dulciana"
,
"Dulcie"
,
"Dulcine"
,
"Dulcinea"
,
"Dulcle"
,
"Dulcy"
,
"Duleba"
,
"Dulla"
,
"Dulsea"
,
"Duma"
,
"Dumah"
,
"Dumanian"
,
"Dumas"
,
"Dumm"
,
"Dumond"
,
"Dun"
,
"Dunaville"
,
"Dunc"
,
"Duncan"
,
"Dunham"
,
"Dunkin"
,
"Dunlavy"
,
"Dunn"
,
"Dunning"
,
"Dunseath"
,
"Dunson"
,
"Dunstan"
,
"Dunston"
,
"Dunton"
,
"Duntson"
,
"Duong"
,
"Dupaix"
,
"Dupin"
,
"Dupre"
,
"Dupuis"
,
"Dupuy"
,
"Duquette"
,
"Dur"
,
"Durand"
,
"Durant"
,
"Durante"
,
"Durarte"
,
"Durer"
,
"Durgy"
,
"Durham"
,
"Durkee"
,
"Durkin"
,
"Durman"
,
"Durnan"
,
"Durning"
,
"Durno"
,
"Durr"
,
"Durrace"
,
"Durrell"
,
"Durrett"
,
"Durst"
,
"Durstin"
,
"Durston"
,
"Durtschi"
,
"Durward"
,
"Durware"
,
"Durwin"
,
"Durwood"
,
"Durwyn"
,
"Dusa"
,
"Dusen"
,
"Dust"
,
"Dustan"
,
"Duster"
,
"Dustie"
,
"Dustin"
,
"Dustman"
,
"Duston"
,
"Dusty"
,
"Dusza"
,
"Dutch"
,
"Dutchman"
,
"Duthie"
,
"Duval"
,
"Duvall"
,
"Duwalt"
,
"Duwe"
,
"Duyne"
,
"Dwain"
,
"Dwaine"
,
"Dwan"
,
"Dwane"
,
"Dwayne"
,
"Dweck"
,
"Dwight"
,
"Dwinnell"
,
"Dworman"
,
"Dwyer"
,
"Dyal"
,
"Dyan"
,
"Dyana"
,
"Dyane"
,
"Dyann"
,
"Dyanna"
,
"Dyanne"
,
"Dyche"
,
"Dyer"
,
"Dygal"
,
"Dygall"
,
"Dygert"
,
"Dyke"
,
"Dyl"
,
"Dylan"
,
"Dylana"
,
"Dylane"
,
"Dymoke"
,
"Dympha"
,
"Dymphia"
,
"Dyna"
,
"Dynah"
,
"Dysart"
,
"Dyson"
,
"Dyun"
,
"Dzoba"
,
"Eachelle"
,
"Eachern"
,
"Eada"
,
"Eade"
,
"Eadie"
,
"Eadith"
,
"Eadmund"
,
"Eads"
,
"Eadwina"
,
"Eadwine"
,
"Eagle"
,
"Eal"
,
"Ealasaid"
,
"Eamon"
,
"Eanore"
,
"Earl"
,
"Earla"
,
"Earle"
,
"Earleen"
,
"Earlene"
,
"Earley"
,
"Earlie"
,
"Early"
,
"Eartha"
,
"Earvin"
,
"East"
,
"Easter"
,
"Eastlake"
,
"Eastman"
,
"Easton"
,
"Eaton"
,
"Eatton"
,
"Eaves"
,
"Eb"
,
"Eba"
,
"Ebarta"
,
"Ebba"
,
"Ebbarta"
,
"Ebberta"
,
"Ebbie"
,
"Ebby"
,
"Eben"
,
"Ebeneser"
,
"Ebenezer"
,
"Eberhard"
,
"Eberhart"
,
"Eberle"
,
"Eberly"
,
"Ebert"
,
"Eberta"
,
"Eberto"
,
"Ebner"
,
"Ebneter"
,
"Eboh"
,
"Ebonee"
,
"Ebony"
,
"Ebsen"
,
"Echikson"
,
"Echo"
,
"Eckardt"
,
"Eckart"
,
"Eckblad"
,
"Eckel"
,
"Eckhardt"
,
"Eckmann"
,
"Econah"
,
"Ed"
,
"Eda"
,
"Edan"
,
"Edana"
,
"Edbert"
,
"Edd"
,
"Edda"
,
"Eddana"
,
"Eddi"
,
"Eddie"
,
"Eddina"
,
"Eddra"
,
"Eddy"
,
"Ede"
,
"Edea"
,
"Edee"
,
"Edeline"
,
"Edelman"
,
"Edelson"
,
"Edelstein"
,
"Edelsten"
,
"Eden"
,
"Edette"
,
"Edgar"
,
"Edgard"
,
"Edgardo"
,
"Edge"
,
"Edgell"
,
"Edgerton"
,
"Edholm"
,
"Edi"
,
"Edie"
,
"Edik"
,
"Edin"
,
"Edina"
,
"Edison"
,
"Edita"
,
"Edith"
,
"Editha"
,
"Edithe"
,
"Ediva"
,
"Edla"
,
"Edlin"
,
"Edlun"
,
"Edlyn"
,
"Edmanda"
,
"Edme"
,
"Edmea"
,
"Edmead"
,
"Edmee"
,
"Edmon"
,
"Edmond"
,
"Edmonda"
,
"Edmondo"
,
"Edmonds"
,
"Edmund"
,
"Edmunda"
,
"Edna"
,
"Edny"
,
"Edora"
,
"Edouard"
,
"Edra"
,
"Edrea"
,
"Edrei"
,
"Edric"
,
"Edrick"
,
"Edris"
,
"Edrock"
,
"Edroi"
,
"Edsel"
,
"Edson"
,
"Eduard"
,
"Eduardo"
,
"Eduino"
,
"Edva"
,
"Edvard"
,
"Edveh"
,
"Edward"
,
"Edwards"
,
"Edwin"
,
"Edwina"
,
"Edwine"
,
"Edwyna"
,
"Edy"
,
"Edyth"
,
"Edythe"
,
"Effie"
,
"Effy"
,
"Efram"
,
"Efrem"
,
"Efren"
,
"Efron"
,
"Efthim"
,
"Egan"
,
"Egarton"
,
"Egbert"
,
"Egerton"
,
"Eggett"
,
"Eggleston"
,
"Egide"
,
"Egidio"
,
"Egidius"
,
"Egin"
,
"Eglanteen"
,
"Eglantine"
,
"Egon"
,
"Egor"
,
"Egwan"
,
"Egwin"
,
"Ehling"
,
"Ehlke"
,
"Ehman"
,
"Ehr"
,
"Ehrenberg"
,
"Ehrlich"
,
"Ehrman"
,
"Ehrsam"
,
"Ehud"
,
"Ehudd"
,
"Eichman"
,
"Eidson"
,
"Eiger"
,
"Eileen"
,
"Eilis"
,
"Eimile"
,
"Einberger"
,
"Einhorn"
,
"Eipper"
,
"Eirena"
,
"Eirene"
,
"Eisele"
,
"Eisen"
,
"Eisenberg"
,
"Eisenhart"
,
"Eisenstark"
,
"Eiser"
,
"Eisinger"
,
"Eisler"
,
"Eiten"
,
"Ekaterina"
,
"El"
,
"Ela"
,
"Elah"
,
"Elaina"
,
"Elaine"
,
"Elana"
,
"Elane"
,
"Elata"
,
"Elatia"
,
"Elayne"
,
"Elazaro"
,
"Elbart"
,
"Elberfeld"
,
"Elbert"
,
"Elberta"
,
"Elbertina"
,
"Elbertine"
,
"Elboa"
,
"Elbring"
,
"Elburr"
,
"Elburt"
,
"Elconin"
,
"Elda"
,
"Elden"
,
"Elder"
,
"Eldin"
,
"Eldon"
,
"Eldora"
,
"Eldorado"
,
"Eldoree"
,
"Eldoria"
,
"Eldred"
,
"Eldreda"
,
"Eldredge"
,
"Eldreeda"
,
"Eldrid"
,
"Eldrida"
,
"Eldridge"
,
"Eldwen"
,
"Eldwin"
,
"Eldwon"
,
"Eldwun"
,
"Eleanor"
,
"Eleanora"
,
"Eleanore"
,
"Eleazar"
,
"Electra"
,
"Eleen"
,
"Elena"
,
"Elene"
,
"Eleni"
,
"Elenore"
,
"Eleonora"
,
"Eleonore"
,
"Eleph"
,
"Elephus"
,
"Elery"
,
"Elexa"
,
"Elfie"
,
"Elfont"
,
"Elfreda"
,
"Elfrida"
,
"Elfrieda"
,
"Elfstan"
,
"Elga"
,
"Elgar"
,
"Eli"
,
"Elia"
,
"Eliades"
,
"Elianora"
,
"Elianore"
,
"Elias"
,
"Eliason"
,
"Eliath"
,
"Eliathan"
,
"Eliathas"
,
"Elicia"
,
"Elidad"
,
"Elie"
,
"Eliezer"
,
"Eliga"
,
"Elihu"
,
"Elijah"
,
"Elinor"
,
"Elinore"
,
"Eliot"
,
"Eliott"
,
"Elisa"
,
"Elisabet"
,
"Elisabeth"
,
"Elisabetta"
,
"Elise"
,
"Elisee"
,
"Eliseo"
,
"Elish"
,
"Elisha"
,
"Elison"
,
"Elissa"
,
"Elita"
,
"Eliza"
,
"Elizabet"
,
"Elizabeth"
,
"Elka"
,
"Elke"
,
"Elkin"
,
"Ella"
,
"Elladine"
,
"Ellan"
,
"Ellard"
,
"Ellary"
,
"Ellata"
,
"Elle"
,
"Ellen"
,
"Ellene"
,
"Ellerd"
,
"Ellerey"
,
"Ellersick"
,
"Ellery"
,
"Ellett"
,
"Ellette"
,
"Ellga"
,
"Elli"
,
"Ellicott"
,
"Ellie"
,
"Ellinger"
,
"Ellingston"
,
"Elliot"
,
"Elliott"
,
"Ellis"
,
"Ellison"
,
"Ellissa"
,
"Ellita"
,
"Ellmyer"
,
"Ellon"
,
"Ellora"
,
"Ellord"
,
"Ellswerth"
,
"Ellsworth"
,
"Ellwood"
,
"Elly"
,
"Ellyn"
,
"Ellynn"
,
"Elma"
,
"Elmajian"
,
"Elmaleh"
,
"Elman"
,
"Elmer"
,
"Elmina"
,
"Elmira"
,
"Elmo"
,
"Elmore"
,
"Elna"
,
"Elnar"
,
"Elnora"
,
"Elnore"
,
"Elo"
,
"Elodea"
,
"Elodia"
,
"Elodie"
,
"Eloisa"
,
"Eloise"
,
"Elon"
,
"Elonore"
,
"Elora"
,
"Elreath"
,
"Elrod"
,
"Elroy"
,
"Els"
,
"Elsa"
,
"Elsbeth"
,
"Else"
,
"Elset"
,
"Elsey"
,
"Elsi"
,
"Elsie"
,
"Elsinore"
,
"Elson"
,
"Elspet"
,
"Elspeth"
,
"Elstan"
,
"Elston"
,
"Elsworth"
,
"Elsy"
,
"Elton"
,
"Elum"
,
"Elurd"
,
"Elva"
,
"Elvah"
,
"Elvera"
,
"Elvia"
,
"Elvie"
,
"Elvin"
,
"Elvina"
,
"Elvira"
,
"Elvis"
,
"Elvyn"
,
"Elwaine"
,
"Elwee"
,
"Elwin"
,
"Elwina"
,
"Elwira"
,
"Elwood"
,
"Elwyn"
,
"Ely"
,
"Elyn"
,
"Elyse"
,
"Elysee"
,
"Elysha"
,
"Elysia"
,
"Elyssa"
,
"Em"
,
"Ema"
,
"Emad"
,
"Emalee"
,
"Emalia"
,
"Emanuel"
,
"Emanuela"
,
"Emanuele"
,
"Emarie"
,
"Embry"
,
"Emee"
,
"Emelda"
,
"Emelen"
,
"Emelia"
,
"Emelin"
,
"Emelina"
,
"Emeline"
,
"Emelita"
,
"Emelun"
,
"Emelyne"
,
"Emera"
,
"Emerald"
,
"Emeric"
,
"Emerick"
,
"Emersen"
,
"Emerson"
,
"Emery"
,
"Emie"
,
"Emil"
,
"Emile"
,
"Emilee"
,
"Emili"
,
"Emilia"
,
"Emilie"
,
"Emiline"
,
"Emilio"
,
"Emily"
,
"Emina"
,
"Emlen"
,
"Emlin"
,
"Emlyn"
,
"Emlynn"
,
"Emlynne"
,
"Emma"
,
"Emmalee"
,
"Emmaline"
,
"Emmalyn"
,
"Emmalynn"
,
"Emmalynne"
,
"Emmanuel"
,
"Emmeline"
,
"Emmer"
,
"Emmeram"
,
"Emmerich"
,
"Emmerie"
,
"Emmery"
,
"Emmet"
,
"Emmett"
,
"Emmey"
,
"Emmi"
,
"Emmie"
,
"Emmit"
,
"Emmons"
,
"Emmott"
,
"Emmuela"
,
"Emmy"
,
"Emmye"
,
"Emogene"
,
"Emory"
,
"Emrich"
,
"Emsmus"
,
"Emyle"
,
"Emylee"
,
"Enalda"
,
"Encrata"
,
"Encratia"
,
"Encratis"
,
"End"
,
"Ender"
,
"Endo"
,
"Endor"
,
"Endora"
,
"Endres"
,
"Enenstein"
,
"Eng"
,
"Engdahl"
,
"Engeddi"
,
"Engedi"
,
"Engedus"
,
"Engel"
,
"Engelbert"
,
"Engelhart"
,
"Engen"
,
"Engenia"
,
"England"
,
"Engle"
,
"Englebert"
,
"Engleman"
,
"Englis"
,
"English"
,
"Engracia"
,
"Engud"
,
"Engvall"
,
"Enid"
,
"Ennis"
,
"Eno"
,
"Enoch"
,
"Enos"
,
"Enrica"
,
"Enrichetta"
,
"Enrico"
,
"Enrika"
,
"Enrique"
,
"Enriqueta"
,
"Ensign"
,
"Ensoll"
,
"Entwistle"
,
"Enyedy"
,
"Eoin"
,
"Eolanda"
,
"Eolande"
,
"Eph"
,
"Ephraim"
,
"Ephram"
,
"Ephrayim"
,
"Ephrem"
,
"Epifano"
,
"Epner"
,
"Epp"
,
"Epperson"
,
"Eppes"
,
"Eppie"
,
"Epps"
,
"Epstein"
,
"Er"
,
"Eradis"
,
"Eran"
,
"Eras"
,
"Erasme"
,
"Erasmo"
,
"Erasmus"
,
"Erastatus"
,
"Eraste"
,
"Erastes"
,
"Erastus"
,
"Erb"
,
"Erbe"
,
"Erbes"
,
"Erda"
,
"Erdah"
,
"Erdda"
,
"Erde"
,
"Erdei"
,
"Erdman"
,
"Erdrich"
,
"Erek"
,
"Erelia"
,
"Erena"
,
"Erfert"
,
"Ergener"
,
"Erhard"
,
"Erhart"
,
"Eri"
,
"Eric"
,
"Erica"
,
"Erich"
,
"Ericha"
,
"Erick"
,
"Ericka"
,
"Ericksen"
,
"Erickson"
,
"Erida"
,
"Erie"
,
"Eriha"
,
"Erik"
,
"Erika"
,
"Erikson"
,
"Erin"
,
"Erina"
,
"Erine"
,
"Erinn"
,
"Erinna"
,
"Erkan"
,
"Erl"
,
"Erland"
,
"Erlandson"
,
"Erle"
,
"Erleena"
,
"Erlene"
,
"Erlewine"
,
"Erlin"
,
"Erlina"
,
"Erline"
,
"Erlinna"
,
"Erlond"
,
"Erma"
,
"Ermanno"
,
"Erme"
,
"Ermeena"
,
"Ermengarde"
,
"Ermentrude"
,
"Ermey"
,
"Ermin"
,
"Ermina"
,
"Ermine"
,
"Erminia"
,
"Erminie"
,
"Erminna"
,
"Ern"
,
"Erna"
,
"Ernald"
,
"Ernaldus"
,
"Ernaline"
,
"Ernest"
,
"Ernesta"
,
"Ernestine"
,
"Ernesto"
,
"Ernestus"
,
"Ernie"
,
"Ernst"
,
"Erny"
,
"Errecart"
,
"Errick"
,
"Errol"
,
"Erroll"
,
"Erskine"
,
"Ertha"
,
"Erund"
,
"Erv"
,
"ErvIn"
,
"Ervin"
,
"Ervine"
,
"Erving"
,
"Erwin"
,
"Eryn"
,
"Esau"
,
"Esbensen"
,
"Esbenshade"
,
"Esch"
,
"Esdras"
,
"Eshelman"
,
"Eshman"
,
"Eskil"
,
"Eskill"
,
"Esma"
,
"Esmaria"
,
"Esme"
,
"Esmeralda"
,
"Esmerelda"
,
"Esmerolda"
,
"Esmond"
,
"Espy"
,
"Esra"
,
"Essa"
,
"Essam"
,
"Essex"
,
"Essie"
,
"Essinger"
,
"Essy"
,
"Esta"
,
"Estas"
,
"Esteban"
,
"Estel"
,
"Estele"
,
"Estell"
,
"Estella"
,
"Estelle"
,
"Esten"
,
"Ester"
,
"Estes"
,
"Estevan"
,
"Estey"
,
"Esther"
,
"Estis"
,
"Estrella"
,
"Estrellita"
,
"Estren"
,
"Estrin"
,
"Estus"
,
"Eta"
,
"Etam"
,
"Etan"
,
"Etana"
,
"Etem"
,
"Ethan"
,
"Ethban"
,
"Ethben"
,
"Ethbin"
,
"Ethbinium"
,
"Ethbun"
,
"Ethe"
,
"Ethel"
,
"Ethelbert"
,
"Ethelda"
,
"Ethelin"
,
"Ethelind"
,
"Ethelinda"
,
"Etheline"
,
"Ethelred"
,
"Ethelstan"
,
"Ethelyn"
,
"Ethyl"
,
"Etienne"
,
"Etka"
,
"Etoile"
,
"Etom"
,
"Etra"
,
"Etrem"
,
"Etta"
,
"Ettari"
,
"Etti"
,
"Ettie"
,
"Ettinger"
,
"Ettore"
,
"Etty"
,
"Etz"
,
"Eudo"
,
"Eudoca"
,
"Eudocia"
,
"Eudora"
,
"Eudosia"
,
"Eudoxia"
,
"Euell"
,
"Eugen"
,
"Eugene"
,
"Eugenia"
,
"Eugenides"
,
"Eugenie"
,
"Eugenio"
,
"Eugenius"
,
"Eugeniusz"
,
"Eugenle"
,
"Eugine"
,
"Euh"
,
"Eula"
,
"Eulalee"
,
"Eulalia"
,
"Eulaliah"
,
"Eulalie"
,
"Eulau"
,
"Eunice"
,
"Eupheemia"
,
"Euphemia"
,
"Euphemiah"
,
"Euphemie"
,
"Euridice"
,
"Eurydice"
,
"Eusebio"
,
"Eustace"
,
"Eustache"
,
"Eustacia"
,
"Eustashe"
,
"Eustasius"
,
"Eustatius"
,
"Eustazio"
,
"Eustis"
,
"Euton"
,
"Ev"
,
"Eva"
,
"Evadne"
,
"Evadnee"
,
"Evaleen"
,
"Evalyn"
,
"Evan"
,
"Evander"
,
"Evangelia"
,
"Evangelin"
,
"Evangelina"
,
"Evangeline"
,
"Evangelist"
,
"Evania"
,
"Evanne"
,
"Evannia"
,
"Evans"
,
"Evante"
,
"Evanthe"
,
"Evars"
,
"Eve"
,
"Eveleen"
,
"Evelin"
,
"Evelina"
,
"Eveline"
,
"Evelinn"
,
"Evelunn"
,
"Evelyn"
,
"Even"
,
"Everara"
,
"Everard"
,
"Evered"
,
"Everest"
,
"Everett"
,
"Everick"
,
"Everrs"
,
"Evers"
,
"Eversole"
,
"Everson"
,
"Evetta"
,
"Evette"
,
"Evey"
,
"Evie"
,
"Evin"
,
"Evita"
,
"Evonne"
,
"Evoy"
,
"Evslin"
,
"Evvie"
,
"Evvy"
,
"Evy"
,
"Evyn"
,
"Ewald"
,
"Ewall"
,
"Ewan"
,
"Eward"
,
"Ewart"
,
"Ewell"
,
"Ewen"
,
"Ewens"
,
"Ewer"
,
"Ewold"
,
"Eyde"
,
"Eydie"
,
"Eyeleen"
,
"Eyla"
,
"Ez"
,
"Ezana"
,
"Ezar"
,
"Ezara"
,
"Ezaria"
,
"Ezarra"
,
"Ezarras"
,
"Ezechiel"
,
"Ezekiel"
,
"Ezequiel"
,
"Eziechiele"
,
"Ezmeralda"
,
"Ezra"
,
"Ezri"
,
"Ezzo"
,
"Fabe"
,
"Faber"
,
"Fabi"
,
"Fabian"
,
"Fabiano"
,
"Fabien"
,
"Fabio"
,
"Fabiola"
,
"Fabiolas"
,
"Fablan"
,
"Fabozzi"
,
"Fabri"
,
"Fabria"
,
"Fabriane"
,
"Fabrianna"
,
"Fabrianne"
,
"Fabrice"
,
"Fabrienne"
,
"Fabrin"
,
"Fabron"
,
"Fabyola"
,
"Fachan"
,
"Fachanan"
,
"Fachini"
,
"Fadden"
,
"Faden"
,
"Fadil"
,
"Fadiman"
,
"Fae"
,
"Fagaly"
,
"Fagan"
,
"Fagen"
,
"Fagin"
,
"Fahey"
,
"Fahland"
,
"Fahy"
,
"Fai"
,
"Faina"
,
"Fair"
,
"Fairbanks"
,
"Faires"
,
"Fairfax"
,
"Fairfield"
,
"Fairleigh"
,
"Fairley"
,
"Fairlie"
,
"Fairman"
,
"Fairweather"
,
"Faith"
,
"Fakieh"
,
"Falcone"
,
"Falconer"
,
"Falda"
,
"Faletti"
,
"Faline"
,
"Falito"
,
"Falk"
,
"Falkner"
,
"Fallon"
,
"Faludi"
,
"Falzetta"
,
"Fan"
,
"Fanchan"
,
"Fanchet"
,
"Fanchette"
,
"Fanchie"
,
"Fanchon"
,
"Fancie"
,
"Fancy"
,
"Fanechka"
,
"Fanestil"
,
"Fang"
,
"Fania"
,
"Fanni"
,
"Fannie"
,
"Fanning"
,
"Fanny"
,
"Fantasia"
,
"Fante"
,
"Fanya"
,
"Far"
,
"Fara"
,
"Farah"
,
"Farand"
,
"Farant"
,
"Farhi"
,
"Fari"
,
"Faria"
,
"Farica"
,
"Farika"
,
"Fariss"
,
"Farkas"
,
"Farl"
,
"Farland"
,
"Farlay"
,
"Farlee"
,
"Farleigh"
,
"Farley"
,
"Farlie"
,
"Farly"
,
"Farman"
,
"Farmann"
,
"Farmelo"
,
"Farmer"
,
"Farnham"
,
"Farnsworth"
,
"Farny"
,
"Faro"
,
"Farr"
,
"Farra"
,
"Farrah"
,
"Farrand"
,
"Farrar"
,
"Farrel"
,
"Farrell"
,
"Farrica"
,
"Farrington"
,
"Farris"
,
"Farrish"
,
"Farrison"
,
"Farro"
,
"Farron"
,
"Farrow"
,
"Faruq"
,
"Farver"
,
"Farwell"
,
"Fasano"
,
"Faso"
,
"Fassold"
,
"Fast"
,
"Fasta"
,
"Fasto"
,
"Fates"
,
"Fatima"
,
"Fatimah"
,
"Fatma"
,
"Fattal"
,
"Faubert"
,
"Faubion"
,
"Fauch"
,
"Faucher"
,
"Faulkner"
,
"Fauman"
,
"Faun"
,
"Faunia"
,
"Faunie"
,
"Faus"
,
"Faust"
,
"Fausta"
,
"Faustena"
,
"Faustina"
,
"Faustine"
,
"Faustus"
,
"Fauver"
,
"Faux"
,
"Favata"
,
"Favian"
,
"Favianus"
,
"Favien"
,
"Favin"
,
"Favrot"
,
"Fawcett"
,
"Fawcette"
,
"Fawn"
,
"Fawna"
,
"Fawne"
,
"Fawnia"
,
"Fax"
,
"Faxan"
,
"Faxen"
,
"Faxon"
,
"Faxun"
,
"Fay"
,
"Faydra"
,
"Faye"
,
"Fayette"
,
"Fayina"
,
"Fayola"
,
"Fayre"
,
"Fayth"
,
"Faythe"
,
"Fazeli"
,
"Fe"
,
"Featherstone"
,
"February"
,
"Fechter"
,
"Fedak"
,
"Federica"
,
"Federico"
,
"Fedirko"
,
"Fedora"
,
"Fee"
,
"Feeley"
,
"Feeney"
,
"Feer"
,
"Feigin"
,
"Feil"
,
"Fein"
,
"Feinberg"
,
"Feingold"
,
"Feinleib"
,
"Feinstein"
,
"Feld"
,
"Felder"
,
"Feldman"
,
"Feldstein"
,
"Feldt"
,
"Felecia"
,
"Feledy"
,
"Felic"
,
"Felicdad"
,
"Felice"
,
"Felicia"
,
"Felicidad"
,
"Felicie"
,
"Felicio"
,
"Felicity"
,
"Felicle"
,
"Felike"
,
"Feliks"
,
"Felipa"
,
"Felipe"
,
"Felise"
,
"Felisha"
,
"Felita"
,
"Felix"
,
"Feliza"
,
"Felizio"
,
"Fellner"
,
"Fellows"
,
"Felske"
,
"Felt"
,
"Felten"
,
"Feltie"
,
"Felton"
,
"Felty"
,
"Fem"
,
"Femi"
,
"Femmine"
,
"Fen"
,
"Fendig"
,
"Fenelia"
,
"Fenella"
,
"Fenn"
,
"Fennell"
,
"Fennelly"
,
"Fenner"
,
"Fennessy"
,
"Fennie"
,
"Fenny"
,
"Fenton"
,
"Fenwick"
,
"Feodor"
,
"Feodora"
,
"Feodore"
,
"Feola"
,
"Ferd"
,
"Ferde"
,
"Ferdie"
,
"Ferdinana"
,
"Ferdinand"
,
"Ferdinanda"
,
"Ferdinande"
,
"Ferdy"
,
"Fergus"
,
"Ferguson"
,
"Feriga"
,
"Ferino"
,
"Fermin"
,
"Fern"
,
"Ferna"
,
"Fernald"
,
"Fernand"
,
"Fernanda"
,
"Fernande"
,
"Fernandes"
,
"Fernandez"
,
"Fernandina"
,
"Fernando"
,
"Fernas"
,
"Ferne"
,
"Ferneau"
,
"Fernyak"
,
"Ferrand"
,
"Ferreby"
,
"Ferree"
,
"Ferrel"
,
"Ferrell"
,
"Ferren"
,
"Ferretti"
,
"Ferri"
,
"Ferrick"
,
"Ferrigno"
,
"Ferris"
,
"Ferriter"
,
"Ferro"
,
"Ferullo"
,
"Ferwerda"
,
"Festa"
,
"Festatus"
,
"Festus"
,
"Feucht"
,
"Feune"
,
"Fevre"
,
"Fey"
,
"Fi"
,
"Fia"
,
"Fiann"
,
"Fianna"
,
"Fidel"
,
"Fidela"
,
"Fidelas"
,
"Fidele"
,
"Fidelia"
,
"Fidelio"
,
"Fidelis"
,
"Fidelity"
,
"Fidellas"
,
"Fidellia"
,
"Fiden"
,
"Fidole"
,
"Fiedler"
,
"Fiedling"
,
"Field"
,
"Fielding"
,
"Fields"
,
"Fiertz"
,
"Fiester"
,
"Fife"
,
"Fifi"
,
"Fifine"
,
"Figge"
,
"Figone"
,
"Figueroa"
,
"Filbert"
,
"Filberte"
,
"Filberto"
,
"Filemon"
,
"Files"
,
"Filia"
,
"Filiano"
,
"Filide"
,
"Filip"
,
"Filipe"
,
"Filippa"
,
"Filippo"
,
"Fillander"
,
"Fillbert"
,
"Fillender"
,
"Filler"
,
"Fillian"
,
"Filmer"
,
"Filmore"
,
"Filomena"
,
"Fin"
,
"Fina"
,
"Finbar"
,
"Finbur"
,
"Findlay"
,
"Findley"
,
"Fine"
,
"Fineberg"
,
"Finegan"
,
"Finella"
,
"Fineman"
,
"Finer"
,
"Fini"
,
"Fink"
,
"Finkelstein"
,
"Finlay"
,
"Finley"
,
"Finn"
,
"Finnegan"
,
"Finnie"
,
"Finnigan"
,
"Finny"
,
"Finstad"
,
"Finzer"
,
"Fiona"
,
"Fionna"
,
"Fionnula"
,
"Fiora"
,
"Fiore"
,
"Fiorenza"
,
"Fiorenze"
,
"Firestone"
,
"Firman"
,
"Firmin"
,
"Firooc"
,
"Fisch"
,
"Fischer"
,
"Fish"
,
"Fishback"
,
"Fishbein"
,
"Fisher"
,
"Fishman"
,
"Fisk"
,
"Fiske"
,
"Fisken"
,
"Fitting"
,
"Fitton"
,
"Fitts"
,
"Fitz"
,
"Fitzger"
,
"Fitzgerald"
,
"Fitzhugh"
,
"Fitzpatrick"
,
"Fitzsimmons"
,
"Flagler"
,
"Flaherty"
,
"Flam"
,
"Flan"
,
"Flanagan"
,
"Flanders"
,
"Flanigan"
,
"Flann"
,
"Flanna"
,
"Flannery"
,
"Flatto"
,
"Flavia"
,
"Flavian"
,
"Flavio"
,
"Flavius"
,
"Fleck"
,
"Fleda"
,
"Fleece"
,
"Fleeman"
,
"Fleeta"
,
"Fleischer"
,
"Fleisher"
,
"Fleisig"
,
"Flem"
,
"Fleming"
,
"Flemings"
,
"Flemming"
,
"Flessel"
,
"Fleta"
,
"Fletch"
,
"Fletcher"
,
"Fleur"
,
"Fleurette"
,
"Flieger"
,
"Flight"
,
"Flin"
,
"Flinn"
,
"Flint"
,
"Flip"
,
"Flita"
,
"Flo"
,
"Floeter"
,
"Flor"
,
"Flora"
,
"Florance"
,
"Flore"
,
"Florella"
,
"Florence"
,
"Florencia"
,
"Florentia"
,
"Florenza"
,
"Florette"
,
"Flori"
,
"Floria"
,
"Florian"
,
"Florida"
,
"Floridia"
,
"Florie"
,
"Florin"
,
"Florina"
,
"Florinda"
,
"Florine"
,
"Florio"
,
"Floris"
,
"Floro"
,
"Florri"
,
"Florrie"
,
"Florry"
,
"Flory"
,
"Flosi"
,
"Floss"
,
"Flosser"
,
"Flossi"
,
"Flossie"
,
"Flossy"
,
"Flower"
,
"Flowers"
,
"Floyd"
,
"Flss"
,
"Flyn"
,
"Flynn"
,
"Foah"
,
"Fogarty"
,
"Fogel"
,
"Fogg"
,
"Fokos"
,
"Folberth"
,
"Foley"
,
"Folger"
,
"Follansbee"
,
"Follmer"
,
"Folly"
,
"Folsom"
,
"Fonda"
,
"Fondea"
,
"Fong"
,
"Fons"
,
"Fonseca"
,
"Fonsie"
,
"Fontana"
,
"Fontes"
,
"Fonville"
,
"Fonz"
,
"Fonzie"
,
"Foote"
,
"Forbes"
,
"Forcier"
,
"Ford"
,
"Fording"
,
"Forelli"
,
"Forest"
,
"Forester"
,
"Forkey"
,
"Forland"
,
"Forlini"
,
"Formenti"
,
"Formica"
,
"Fornof"
,
"Forras"
,
"Forrer"
,
"Forrest"
,
"Forrester"
,
"Forsta"
,
"Forster"
,
"Forsyth"
,
"Forta"
,
"Fortier"
,
"Fortin"
,
"Fortna"
,
"Fortuna"
,
"Fortunato"
,
"Fortune"
,
"Fortunia"
,
"Fortunio"
,
"Fortunna"
,
"Forward"
,
"Foscalina"
,
"Fosdick"
,
"Foskett"
,
"Fosque"
,
"Foss"
,
"Foster"
,
"Fotina"
,
"Fotinas"
,
"Fougere"
,
"Foulk"
,
"Four"
,
"Foushee"
,
"Fowkes"
,
"Fowle"
,
"Fowler"
,
"Fox"
,
"Foy"
,
"Fraase"
,
"Fradin"
,
"Frager"
,
"Frame"
,
"Fran"
,
"France"
,
"Francene"
,
"Frances"
,
"Francesca"
,
"Francesco"
,
"Franchot"
,
"Franci"
,
"Francie"
,
"Francine"
,
"Francis"
,
"Francisca"
,
"Franciscka"
,
"Francisco"
,
"Franciska"
,
"Franciskus"
,
"Franck"
,
"Francklin"
,
"Francklyn"
,
"Franckot"
,
"Francois"
,
"Francoise"
,
"Francyne"
,
"Franek"
,
"Frangos"
,
"Frank"
,
"Frankel"
,
"Frankhouse"
,
"Frankie"
,
"Franklin"
,
"Franklyn"
,
"Franky"
,
"Franni"
,
"Frannie"
,
"Franny"
,
"Frans"
,
"Fransen"
,
"Fransis"
,
"Fransisco"
,
"Frants"
,
"Frantz"
,
"Franz"
,
"Franza"
,
"Franzen"
,
"Franzoni"
,
"Frasch"
,
"Frasco"
,
"Fraser"
,
"Frasier"
,
"Frasquito"
,
"Fraya"
,
"Frayda"
,
"Frayne"
,
"Fraze"
,
"Frazer"
,
"Frazier"
,
"Frear"
,
"Freberg"
,
"Frech"
,
"Frechette"
,
"Fred"
,
"Freda"
,
"Freddi"
,
"Freddie"
,
"Freddy"
,
"Fredek"
,
"Fredel"
,
"Fredela"
,
"Fredelia"
,
"Fredella"
,
"Fredenburg"
,
"Frederic"
,
"Frederica"
,
"Frederich"
,
"Frederick"
,
"Fredericka"
,
"Frederico"
,
"Frederigo"
,
"Frederik"
,
"Frederiksen"
,
"Frederique"
,
"Fredette"
,
"Fredi"
,
"Fredia"
,
"Fredie"
,
"Fredkin"
,
"Fredra"
,
"Fredric"
,
"Fredrick"
,
"Fredrika"
,
"Free"
,
"Freeborn"
,
"Freed"
,
"Freedman"
,
"Freeland"
,
"Freeman"
,
"Freemon"
,
"Fregger"
,
"Freida"
,
"Freiman"
,
"Fremont"
,
"French"
,
"Frendel"
,
"Frentz"
,
"Frere"
,
"Frerichs"
,
"Fretwell"
,
"Freud"
,
"Freudberg"
,
"Frey"
,
"Freya"
,
"Freyah"
,
"Freytag"
,
"Frick"
,
"Fricke"
,
"Frida"
,
"Friday"
,
"Fridell"
,
"Fridlund"
,
"Fried"
,
"Frieda"
,
"Friedberg"
,
"Friede"
,
"Frieder"
,
"Friederike"
,
"Friedland"
,
"Friedlander"
,
"Friedly"
,
"Friedman"
,
"Friedrich"
,
"Friedrick"
,
"Friend"
,
"Frierson"
,
"Fries"
,
"Frisse"
,
"Frissell"
,
"Fritts"
,
"Fritz"
,
"Fritze"
,
"Fritzie"
,
"Fritzsche"
,
"Frodeen"
,
"Frodi"
,
"Frodin"
,
"Frodina"
,
"Frodine"
,
"Froehlich"
,
"Froemming"
,
"Froh"
,
"Frohman"
,
"Frohne"
,
"Frolick"
,
"Froma"
,
"Fromma"
,
"Fronia"
,
"Fronnia"
,
"Fronniah"
,
"Frost"
,
"Fruin"
,
"Frulla"
,
"Frum"
,
"Fruma"
,
"Fry"
,
"Fryd"
,
"Frydman"
,
"Frye"
,
"Frymire"
,
"Fu"
,
"Fuchs"
,
"Fugate"
,
"Fugazy"
,
"Fugere"
,
"Fuhrman"
,
"Fujio"
,
"Ful"
,
"Fulbert"
,
"Fulbright"
,
"Fulcher"
,
"Fuld"
,
"Fulks"
,
"Fuller"
,
"Fullerton"
,
"Fulmer"
,
"Fulmis"
,
"Fulton"
,
"Fulvi"
,
"Fulvia"
,
"Fulviah"
,
"Funch"
,
"Funda"
,
"Funk"
,
"Furey"
,
"Furgeson"
,
"Furie"
,
"Furiya"
,
"Furlani"
,
"Furlong"
,
"Furmark"
,
"Furnary"
,
"Furr"
,
"Furtek"
,
"Fusco"
,
"Gaal"
,
"Gabbert"
,
"Gabbey"
,
"Gabbi"
,
"Gabbie"
,
"Gabby"
,
"Gabe"
,
"Gabel"
,
"Gabey"
,
"Gabi"
,
"Gabie"
,
"Gable"
,
"Gabler"
,
"Gabor"
,
"Gabriel"
,
"Gabriela"
,
"Gabriele"
,
"Gabriell"
,
"Gabriella"
,
"Gabrielle"
,
"Gabrielli"
,
"Gabriellia"
,
"Gabriello"
,
"Gabrielson"
,
"Gabrila"
,
"Gaby"
,
"Gad"
,
"Gaddi"
,
"Gader"
,
"Gadmann"
,
"Gadmon"
,
"Gae"
,
"Gael"
,
"Gaelan"
,
"Gaeta"
,
"Gage"
,
"Gagliano"
,
"Gagne"
,
"Gagnon"
,
"Gahan"
,
"Gahl"
,
"Gaidano"
,
"Gaige"
,
"Gail"
,
"Gaile"
,
"Gaillard"
,
"Gainer"
,
"Gainor"
,
"Gaiser"
,
"Gaither"
,
"Gaivn"
,
"Gal"
,
"Gala"
,
"Galan"
,
"Galang"
,
"Galanti"
,
"Galasyn"
,
"Galatea"
,
"Galateah"
,
"Galatia"
,
"Gale"
,
"Galen"
,
"Galer"
,
"Galina"
,
"Galitea"
,
"Gall"
,
"Gallager"
,
"Gallagher"
,
"Gallard"
,
"Gallenz"
,
"Galliett"
,
"Galligan"
,
"Galloway"
,
"Gally"
,
"Galvan"
,
"Galven"
,
"Galvin"
,
"Gamages"
,
"Gamal"
,
"Gamali"
,
"Gamaliel"
,
"Gambell"
,
"Gamber"
,
"Gambrell"
,
"Gambrill"
,
"Gamin"
,
"Gan"
,
"Ganiats"
,
"Ganley"
,
"Gannes"
,
"Gannie"
,
"Gannon"
,
"Ganny"
,
"Gans"
,
"Gant"
,
"Gapin"
,
"Gar"
,
"Garald"
,
"Garate"
,
"Garaway"
,
"Garbe"
,
"Garber"
,
"Garbers"
,
"Garceau"
,
"Garcia"
,
"Garcon"
,
"Gard"
,
"Garda"
,
"Gardal"
,
"Gardas"
,
"Gardel"
,
"Gardell"
,
"Gardener"
,
"Gardia"
,
"Gardie"
,
"Gardiner"
,
"Gardner"
,
"Gardol"
,
"Gardy"
,
"Gare"
,
"Garek"
,
"Gareri"
,
"Gareth"
,
"Garett"
,
"Garey"
,
"Garfield"
,
"Garfinkel"
,
"Gargan"
,
"Garges"
,
"Garibald"
,
"Garibold"
,
"Garibull"
,
"Gariepy"
,
"Garik"
,
"Garin"
,
"Garlaand"
,
"Garlan"
,
"Garland"
,
"Garlanda"
,
"Garlen"
,
"Garlinda"
,
"Garling"
,
"Garmaise"
,
"Garneau"
,
"Garner"
,
"Garnes"
,
"Garnet"
,
"Garnett"
,
"Garnette"
,
"Garold"
,
"Garrard"
,
"Garratt"
,
"Garrek"
,
"Garret"
,
"Garreth"
,
"Garretson"
,
"Garrett"
,
"Garrick"
,
"Garrik"
,
"Garris"
,
"Garrison"
,
"Garrity"
,
"Garrot"
,
"Garrott"
,
"Garry"
,
"Garson"
,
"Garth"
,
"Garv"
,
"Garvey"
,
"Garvin"
,
"Garvy"
,
"Garwin"
,
"Garwood"
,
"Gary"
,
"Garzon"
,
"Gascony"
,
"Gaskill"
,
"Gaskin"
,
"Gaskins"
,
"Gaspar"
,
"Gaspard"
,
"Gasparo"
,
"Gasper"
,
"Gasperoni"
,
"Gass"
,
"Gasser"
,
"Gassman"
,
"Gastineau"
,
"Gaston"
,
"Gates"
,
"Gathard"
,
"Gathers"
,
"Gati"
,
"Gatian"
,
"Gatias"
,
"Gaudet"
,
"Gaudette"
,
"Gaughan"
,
"Gaul"
,
"Gauldin"
,
"Gaulin"
,
"Gault"
,
"Gaultiero"
,
"Gauntlett"
,
"Gausman"
,
"Gaut"
,
"Gautea"
,
"Gauthier"
,
"Gautier"
,
"Gautious"
,
"Gav"
,
"Gavan"
,
"Gaven"
,
"Gavette"
,
"Gavin"
,
"Gavini"
,
"Gavra"
,
"Gavrah"
,
"Gavriella"
,
"Gavrielle"
,
"Gavrila"
,
"Gavrilla"
,
"Gaw"
,
"Gawain"
,
"Gawen"
,
"Gawlas"
,
"Gay"
,
"Gaye"
,
"Gayel"
,
"Gayelord"
,
"Gayl"
,
"Gayla"
,
"Gayle"
,
"Gayleen"
,
"Gaylene"
,
"Gayler"
,
"Gaylor"
,
"Gaylord"
,
"Gayn"
,
"Gayner"
,
"Gaynor"
,
"Gazo"
,
"Gazzo"
,
"Geaghan"
,
"Gean"
,
"Geanine"
,
"Gearalt"
,
"Gearard"
,
"Gearhart"
,
"Gebelein"
,
"Gebhardt"
,
"Gebler"
,
"Geddes"
,
"Gee"
,
"Geehan"
,
"Geer"
,
"Geerts"
,
"Geesey"
,
"Gefell"
,
"Gefen"
,
"Geffner"
,
"Gehlbach"
,
"Gehman"
,
"Geibel"
,
"Geier"
,
"Geiger"
,
"Geilich"
,
"Geis"
,
"Geiss"
,
"Geithner"
,
"Gelasias"
,
"Gelasius"
,
"Gelb"
,
"Geldens"
,
"Gelhar"
,
"Geller"
,
"Gellman"
,
"Gelman"
,
"Gelya"
,
"Gemina"
,
"Gemini"
,
"Geminian"
,
"Geminius"
,
"Gemma"
,
"Gemmell"
,
"Gemoets"
,
"Gemperle"
,
"Gen"
,
"Gena"
,
"Genaro"
,
"Gene"
,
"Genesa"
,
"Genesia"
,
"Genet"
,
"Geneva"
,
"Genevieve"
,
"Genevra"
,
"Genia"
,
"Genie"
,
"Genisia"
,
"Genna"
,
"Gennaro"
,
"Genni"
,
"Gennie"
,
"Gennifer"
,
"Genny"
,
"Geno"
,
"Genovera"
,
"Gensler"
,
"Gensmer"
,
"Gent"
,
"Gentes"
,
"Gentilis"
,
"Gentille"
,
"Gentry"
,
"Genvieve"
,
"Geof"
,
"Geoff"
,
"Geoffrey"
,
"Geoffry"
,
"Georas"
,
"Geordie"
,
"Georg"
,
"George"
,
"Georgeanna"
,
"Georgeanne"
,
"Georgena"
,
"Georges"
,
"Georgeta"
,
"Georgetta"
,
"Georgette"
,
"Georgi"
,
"Georgia"
,
"Georgiana"
,
"Georgianna"
,
"Georgianne"
,
"Georgie"
,
"Georgina"
,
"Georgine"
,
"Georglana"
,
"Georgy"
,
"Ger"
,
"Geraint"
,
"Gerald"
,
"Geralda"
,
"Geraldina"
,
"Geraldine"
,
"Gerard"
,
"Gerardo"
,
"Geraud"
,
"Gerbold"
,
"Gerda"
,
"Gerdeen"
,
"Gerdi"
,
"Gerdy"
,
"Gere"
,
"Gerek"
,
"Gereld"
,
"Gereron"
,
"Gerfen"
,
"Gerge"
,
"Gerger"
,
"Gerhan"
,
"Gerhard"
,
"Gerhardine"
,
"Gerhardt"
,
"Geri"
,
"Gerianna"
,
"Gerianne"
,
"Gerick"
,
"Gerik"
,
"Gerita"
,
"Gerius"
,
"Gerkman"
,
"Gerlac"
,
"Gerladina"
,
"Germain"
,
"Germaine"
,
"German"
,
"Germana"
,
"Germann"
,
"Germano"
,
"Germaun"
,
"Germayne"
,
"Germin"
,
"Gernhard"
,
"Gerome"
,
"Gerrald"
,
"Gerrard"
,
"Gerri"
,
"Gerrie"
,
"Gerrilee"
,
"Gerrit"
,
"Gerry"
,
"Gersham"
,
"Gershom"
,
"Gershon"
,
"Gerson"
,
"Gerstein"
,
"Gerstner"
,
"Gert"
,
"Gerta"
,
"Gerti"
,
"Gertie"
,
"Gertrud"
,
"Gertruda"
,
"Gertrude"
,
"Gertrudis"
,
"Gerty"
,
"Gervais"
,
"Gervase"
,
"Gery"
,
"Gesner"
,
"Gessner"
,
"Getraer"
,
"Getter"
,
"Gettings"
,
"Gewirtz"
,
"Ghassan"
,
"Gherardi"
,
"Gherardo"
,
"Gherlein"
,
"Ghiselin"
,
"Giacamo"
,
"Giacinta"
,
"Giacobo"
,
"Giacomo"
,
"Giacopo"
,
"Giaimo"
,
"Giamo"
,
"Gian"
,
"Giana"
,
"Gianina"
,
"Gianna"
,
"Gianni"
,
"Giannini"
,
"Giarla"
,
"Giavani"
,
"Gib"
,
"Gibb"
,
"Gibbeon"
,
"Gibbie"
,
"Gibbon"
,
"Gibbons"
,
"Gibbs"
,
"Gibby"
,
"Gibe"
,
"Gibeon"
,
"Gibert"
,
"Gibrian"
,
"Gibson"
,
"Gibun"
,
"Giddings"
,
"Gide"
,
"Gideon"
,
"Giefer"
,
"Gies"
,
"Giesecke"
,
"Giess"
,
"Giesser"
,
"Giff"
,
"Giffard"
,
"Giffer"
,
"Gifferd"
,
"Giffie"
,
"Gifford"
,
"Giffy"
,
"Gigi"
,
"Giglio"
,
"Gignac"
,
"Giguere"
,
"Gil"
,
"Gilba"
,
"Gilbart"
,
"Gilbert"
,
"Gilberta"
,
"Gilberte"
,
"Gilbertina"
,
"Gilbertine"
,
"Gilberto"
,
"Gilbertson"
,
"Gilboa"
,
"Gilburt"
,
"Gilbye"
,
"Gilchrist"
,
"Gilcrest"
,
"Gilda"
,
"Gildas"
,
"Gildea"
,
"Gilder"
,
"Gildus"
,
"Gile"
,
"Gilead"
,
"Gilemette"
,
"Giles"
,
"Gilford"
,
"Gilges"
,
"Giliana"
,
"Giliane"
,
"Gill"
,
"Gillan"
,
"Gillead"
,
"Gilleod"
,
"Gilles"
,
"Gillespie"
,
"Gillett"
,
"Gilletta"
,
"Gillette"
,
"Gilli"
,
"Gilliam"
,
"Gillian"
,
"Gillie"
,
"Gilliette"
,
"Gilligan"
,
"Gillman"
,
"Gillmore"
,
"Gilly"
,
"Gilman"
,
"Gilmer"
,
"Gilmore"
,
"Gilmour"
,
"Gilpin"
,
"Gilroy"
,
"Gilson"
,
"Giltzow"
,
"Gilud"
,
"Gilus"
,
"Gimble"
,
"Gimpel"
,
"Gina"
,
"Ginder"
,
"Gine"
,
"Ginelle"
,
"Ginevra"
,
"Ginger"
,
"Gingras"
,
"Ginni"
,
"Ginnie"
,
"Ginnifer"
,
"Ginny"
,
"Gino"
,
"Ginsberg"
,
"Ginsburg"
,
"Gintz"
,
"Ginzburg"
,
"Gio"
,
"Giordano"
,
"Giorgi"
,
"Giorgia"
,
"Giorgio"
,
"Giovanna"
,
"Giovanni"
,
"Gipps"
,
"Gipson"
,
"Gipsy"
,
"Giralda"
,
"Giraldo"
,
"Girand"
,
"Girard"
,
"Girardi"
,
"Girardo"
,
"Giraud"
,
"Girhiny"
,
"Girish"
,
"Girovard"
,
"Girvin"
,
"Gisela"
,
"Giselbert"
,
"Gisele"
,
"Gisella"
,
"Giselle"
,
"Gish"
,
"Gisser"
,
"Gitel"
,
"Githens"
,
"Gitlow"
,
"Gitt"
,
"Gittel"
,
"Gittle"
,
"Giuditta"
,
"Giule"
,
"Giulia"
,
"Giuliana"
,
"Giulietta"
,
"Giulio"
,
"Giuseppe"
,
"Giustina"
,
"Giustino"
,
"Giusto"
,
"Given"
,
"Giverin"
,
"Giza"
,
"Gizela"
,
"Glaab"
,
"Glad"
,
"Gladdie"
,
"Gladdy"
,
"Gladi"
,
"Gladine"
,
"Gladis"
,
"Gladstone"
,
"Gladwin"
,
"Gladys"
,
"Glanti"
,
"Glantz"
,
"Glanville"
,
"Glarum"
,
"Glaser"
,
"Glasgo"
,
"Glass"
,
"Glassco"
,
"Glassman"
,
"Glaudia"
,
"Glavin"
,
"Gleason"
,
"Gleda"
,
"Gleeson"
,
"Gleich"
,
"Glen"
,
"Glenda"
,
"Glenden"
,
"Glendon"
,
"Glenine"
,
"Glenn"
,
"Glenna"
,
"Glennie"
,
"Glennis"
,
"Glennon"
,
"Glialentn"
,
"Glick"
,
"Glimp"
,
"Glinys"
,
"Glogau"
,
"Glori"
,
"Gloria"
,
"Gloriana"
,
"Gloriane"
,
"Glorianna"
,
"Glory"
,
"Glover"
,
"Glovsky"
,
"Gluck"
,
"Glyn"
,
"Glynas"
,
"Glynda"
,
"Glynias"
,
"Glynis"
,
"Glynn"
,
"Glynnis"
,
"Gmur"
,
"Gnni"
,
"Goar"
,
"Goat"
,
"Gobert"
,
"God"
,
"Goda"
,
"Godard"
,
"Godart"
,
"Godbeare"
,
"Godber"
,
"Goddard"
,
"Goddart"
,
"Godden"
,
"Godderd"
,
"Godding"
,
"Goddord"
,
"Godewyn"
,
"Godfree"
,
"Godfrey"
,
"Godfry"
,
"Godiva"
,
"Godliman"
,
"Godred"
,
"Godric"
,
"Godrich"
,
"Godspeed"
,
"Godwin"
,
"Goebel"
,
"Goeger"
,
"Goer"
,
"Goerke"
,
"Goeselt"
,
"Goetz"
,
"Goff"
,
"Goggin"
,
"Goines"
,
"Gokey"
,
"Golanka"
,
"Gold"
,
"Golda"
,
"Goldarina"
,
"Goldberg"
,
"Golden"
,
"Goldenberg"
,
"Goldfarb"
,
"Goldfinch"
,
"Goldi"
,
"Goldia"
,
"Goldie"
,
"Goldin"
,
"Goldina"
,
"Golding"
,
"Goldman"
,
"Goldner"
,
"Goldshell"
,
"Goldshlag"
,
"Goldsmith"
,
"Goldstein"
,
"Goldston"
,
"Goldsworthy"
,
"Goldwin"
,
"Goldy"
,
"Goles"
,
"Golightly"
,
"Gollin"
,
"Golliner"
,
"Golter"
,
"Goltz"
,
"Golub"
,
"Gomar"
,
"Gombach"
,
"Gombosi"
,
"Gomer"
,
"Gomez"
,
"Gona"
,
"Gonagle"
,
"Gone"
,
"Gonick"
,
"Gonnella"
,
"Gonroff"
,
"Gonsalve"
,
"Gonta"
,
"Gonyea"
,
"Gonzales"
,
"Gonzalez"
,
"Gonzalo"
,
"Goober"
,
"Good"
,
"Goodard"
,
"Goodden"
,
"Goode"
,
"Goodhen"
,
"Goodill"
,
"Goodkin"
,
"Goodman"
,
"Goodrich"
,
"Goodrow"
,
"Goodson"
,
"Goodspeed"
,
"Goodwin"
,
"Goody"
,
"Goodyear"
,
"Googins"
,
"Gora"
,
"Goran"
,
"Goraud"
,
"Gord"
,
"Gordan"
,
"Gorden"
,
"Gordie"
,
"Gordon"
,
"Gordy"
,
"Gore"
,
"Goren"
,
"Gorey"
,
"Gorga"
,
"Gorges"
,
"Gorlicki"
,
"Gorlin"
,
"Gorman"
,
"Gorrian"
,
"Gorrono"
,
"Gorski"
,
"Gorton"
,
"Gosnell"
,
"Gosney"
,
"Goss"
,
"Gosselin"
,
"Gosser"
,
"Gotcher"
,
"Goth"
,
"Gothar"
,
"Gothard"
,
"Gothart"
,
"Gothurd"
,
"Goto"
,
"Gottfried"
,
"Gotthard"
,
"Gotthelf"
,
"Gottlieb"
,
"Gottuard"
,
"Gottwald"
,
"Gough"
,
"Gould"
,
"Goulden"
,
"Goulder"
,
"Goulet"
,
"Goulette"
,
"Gove"
,
"Gow"
,
"Gower"
,
"Gowon"
,
"Gowrie"
,
"Graaf"
,
"Grace"
,
"Graces"
,
"Gracia"
,
"Gracie"
,
"Gracye"
,
"Gradeigh"
,
"Gradey"
,
"Grados"
,
"Grady"
,
"Grae"
,
"Graehl"
,
"Graehme"
,
"Graeme"
,
"Graf"
,
"Graff"
,
"Graham"
,
"Graig"
,
"Grail"
,
"Gram"
,
"Gran"
,
"Grand"
,
"Grane"
,
"Graner"
,
"Granese"
,
"Grange"
,
"Granger"
,
"Grani"
,
"Grania"
,
"Graniah"
,
"Graniela"
,
"Granlund"
,
"Grannia"
,
"Granniah"
,
"Grannias"
,
"Grannie"
,
"Granny"
,
"Granoff"
,
"Grant"
,
"Grantham"
,
"Granthem"
,
"Grantland"
,
"Grantley"
,
"Granville"
,
"Grassi"
,
"Grata"
,
"Grath"
,
"Grati"
,
"Gratia"
,
"Gratiana"
,
"Gratianna"
,
"Gratt"
,
"Graubert"
,
"Gravante"
,
"Graves"
,
"Gray"
,
"Graybill"
,
"Grayce"
,
"Grayson"
,
"Grazia"
,
"Greabe"
,
"Grearson"
,
"Gredel"
,
"Greeley"
,
"Green"
,
"Greenberg"
,
"Greenburg"
,
"Greene"
,
"Greenebaum"
,
"Greenes"
,
"Greenfield"
,
"Greenland"
,
"Greenleaf"
,
"Greenlee"
,
"Greenman"
,
"Greenquist"
,
"Greenstein"
,
"Greenwald"
,
"Greenwell"
,
"Greenwood"
,
"Greer"
,
"Greerson"
,
"Greeson"
,
"Grefe"
,
"Grefer"
,
"Greff"
,
"Greg"
,
"Grega"
,
"Gregg"
,
"Greggory"
,
"Greggs"
,
"Gregoire"
,
"Gregoor"
,
"Gregor"
,
"Gregorio"
,
"Gregorius"
,
"Gregory"
,
"Gregrory"
,
"Gregson"
,
"Greiner"
,
"Grekin"
,
"Grenier"
,
"Grenville"
,
"Gresham"
,
"Greta"
,
"Gretal"
,
"Gretchen"
,
"Grete"
,
"Gretel"
,
"Grethel"
,
"Gretna"
,
"Gretta"
,
"Grevera"
,
"Grew"
,
"Grewitz"
,
"Grey"
,
"Greyso"
,
"Greyson"
,
"Greysun"
,
"Grider"
,
"Gridley"
,
"Grier"
,
"Grieve"
,
"Griff"
,
"Griffie"
,
"Griffin"
,
"Griffis"
,
"Griffith"
,
"Griffiths"
,
"Griffy"
,
"Griggs"
,
"Grigson"
,
"Grim"
,
"Grimaldi"
,
"Grimaud"
,
"Grimbal"
,
"Grimbald"
,
"Grimbly"
,
"Grimes"
,
"Grimona"
,
"Grimonia"
,
"Grindlay"
,
"Grindle"
,
"Grinnell"
,
"Gris"
,
"Griselda"
,
"Griseldis"
,
"Grishilda"
,
"Grishilde"
,
"Grissel"
,
"Grissom"
,
"Gristede"
,
"Griswold"
,
"Griz"
,
"Grizel"
,
"Grizelda"
,
"Groark"
,
"Grobe"
,
"Grochow"
,
"Grodin"
,
"Grof"
,
"Grogan"
,
"Groh"
,
"Gromme"
,
"Grondin"
,
"Gronseth"
,
"Groome"
,
"Groos"
,
"Groot"
,
"Grory"
,
"Grosberg"
,
"Groscr"
,
"Grose"
,
"Grosmark"
,
"Gross"
,
"Grossman"
,
"Grosvenor"
,
"Grosz"
,
"Grote"
,
"Grounds"
,
"Grous"
,
"Grove"
,
"Groveman"
,
"Grover"
,
"Groves"
,
"Grubb"
,
"Grube"
,
"Gruber"
,
"Grubman"
,
"Gruchot"
,
"Grunberg"
,
"Grunenwald"
,
"Grussing"
,
"Gruver"
,
"Gschu"
,
"Guadalupe"
,
"Gualterio"
,
"Gualtiero"
,
"Guarino"
,
"Gudren"
,
"Gudrin"
,
"Gudrun"
,
"Guendolen"
,
"Guenevere"
,
"Guenna"
,
"Guenzi"
,
"Guerin"
,
"Guerra"
,
"Guevara"
,
"Guglielma"
,
"Guglielmo"
,
"Gui"
,
"Guibert"
,
"Guido"
,
"Guidotti"
,
"Guilbert"
,
"Guild"
,
"Guildroy"
,
"Guillaume"
,
"Guillema"
,
"Guillemette"
,
"Guillermo"
,
"Guimar"
,
"Guimond"
,
"Guinevere"
,
"Guinn"
,
"Guinna"
,
"Guise"
,
"Gujral"
,
"Gula"
,
"Gulgee"
,
"Gulick"
,
"Gun"
,
"Gunar"
,
"Gunas"
,
"Gundry"
,
"Gunilla"
,
"Gunn"
,
"Gunnar"
,
"Gunner"
,
"Gunning"
,
"Guntar"
,
"Gunter"
,
"Gunthar"
,
"Gunther"
,
"Gunzburg"
,
"Gupta"
,
"Gurango"
,
"Gurevich"
,
"Guria"
,
"Gurias"
,
"Gurl"
,
"Gurney"
,
"Gurolinick"
,
"Gurtner"
,
"Gus"
,
"Gusba"
,
"Gusella"
,
"Guss"
,
"Gussi"
,
"Gussie"
,
"Gussman"
,
"Gussy"
,
"Gusta"
,
"Gustaf"
,
"Gustafson"
,
"Gustafsson"
,
"Gustav"
,
"Gustave"
,
"Gustavo"
,
"Gustavus"
,
"Gusti"
,
"Gustie"
,
"Gustin"
,
"Gusty"
,
"Gut"
,
"Guthrey"
,
"Guthrie"
,
"Guthry"
,
"Gutow"
,
"Guttery"
,
"Guy"
,
"Guyer"
,
"Guyon"
,
"Guzel"
,
"Gwen"
,
"Gwendolen"
,
"Gwendolin"
,
"Gwendolyn"
,
"Gweneth"
,
"Gwenette"
,
"Gwenn"
,
"Gwenneth"
,
"Gwenni"
,
"Gwennie"
,
"Gwenny"
,
"Gwenora"
,
"Gwenore"
,
"Gwyn"
,
"Gwyneth"
,
"Gwynne"
,
"Gyasi"
,
"Gyatt"
,
"Gyimah"
,
"Gylys"
,
"Gypsie"
,
"Gypsy"
,
"Gytle"
,
"Ha"
,
"Haag"
,
"Haakon"
,
"Haas"
,
"Haase"
,
"Haberman"
,
"Hach"
,
"Hachman"
,
"Hachmann"
,
"Hachmin"
,
"Hackathorn"
,
"Hacker"
,
"Hackett"
,
"Hackney"
,
"Had"
,
"Haddad"
,
"Hadden"
,
"Haden"
,
"Hadik"
,
"Hadlee"
,
"Hadleigh"
,
"Hadley"
,
"Hadria"
,
"Hadrian"
,
"Hadsall"
,
"Hadwin"
,
"Hadwyn"
,
"Haeckel"
,
"Haerle"
,
"Haerr"
,
"Haff"
,
"Hafler"
,
"Hagai"
,
"Hagan"
,
"Hagar"
,
"Hagen"
,
"Hagerman"
,
"Haggai"
,
"Haggar"
,
"Haggerty"
,
"Haggi"
,
"Hagi"
,
"Hagood"
,
"Hahn"
,
"Hahnert"
,
"Hahnke"
,
"Haida"
,
"Haig"
,
"Haile"
,
"Hailee"
,
"Hailey"
,
"Haily"
,
"Haim"
,
"Haimes"
,
"Haines"
,
"Hak"
,
"Hakan"
,
"Hake"
,
"Hakeem"
,
"Hakim"
,
"Hako"
,
"Hakon"
,
"Hal"
,
"Haland"
,
"Halbeib"
,
"Halbert"
,
"Halda"
,
"Haldan"
,
"Haldane"
,
"Haldas"
,
"Haldeman"
,
"Halden"
,
"Haldes"
,
"Haldi"
,
"Haldis"
,
"Hale"
,
"Haleigh"
,
"Haletky"
,
"Haletta"
,
"Halette"
,
"Haley"
,
"Halfdan"
,
"Halfon"
,
"Halford"
,
"Hali"
,
"Halie"
,
"Halima"
,
"Halimeda"
,
"Hall"
,
"Halla"
,
"Hallagan"
,
"Hallam"
,
"Halland"
,
"Halle"
,
"Hallee"
,
"Hallerson"
,
"Hallett"
,
"Hallette"
,
"Halley"
,
"Halli"
,
"Halliday"
,
"Hallie"
,
"Hallock"
,
"Hallsy"
,
"Hallvard"
,
"Hally"
,
"Halona"
,
"Halonna"
,
"Halpern"
,
"Halsey"
,
"Halstead"
,
"Halsted"
,
"Halsy"
,
"Halvaard"
,
"Halverson"
,
"Ham"
,
"Hama"
,
"Hamachi"
,
"Hamal"
,
"Haman"
,
"Hamann"
,
"Hambley"
,
"Hamburger"
,
"Hamel"
,
"Hamer"
,
"Hamford"
,
"Hamforrd"
,
"Hamfurd"
,
"Hamid"
,
"Hamil"
,
"Hamilton"
,
"Hamish"
,
"Hamlani"
,
"Hamlen"
,
"Hamlet"
,
"Hamlin"
,
"Hammad"
,
"Hammel"
,
"Hammer"
,
"Hammerskjold"
,
"Hammock"
,
"Hammond"
,
"Hamner"
,
"Hamnet"
,
"Hamo"
,
"Hamon"
,
"Hampton"
,
"Hamrah"
,
"Hamrnand"
,
"Han"
,
"Hana"
,
"Hanae"
,
"Hanafee"
,
"Hanako"
,
"Hanan"
,
"Hance"
,
"Hancock"
,
"Handal"
,
"Handbook"
,
"Handel"
,
"Handler"
,
"Hands"
,
"Handy"
,
"Haney"
,
"Hanford"
,
"Hanforrd"
,
"Hanfurd"
,
"Hank"
,
"Hankins"
,
"Hanleigh"
,
"Hanley"
,
"Hanna"
,
"Hannah"
,
"Hannan"
,
"Hanni"
,
"Hannibal"
,
"Hannie"
,
"Hannis"
,
"Hannon"
,
"Hannover"
,
"Hannus"
,
"Hanny"
,
"Hanover"
,
"Hans"
,
"Hanschen"
,
"Hansel"
,
"Hanselka"
,
"Hansen"
,
"Hanser"
,
"Hanshaw"
,
"Hansiain"
,
"Hanson"
,
"Hanus"
,
"Hanway"
,
"Hanzelin"
,
"Happ"
,
"Happy"
,
"Hapte"
,
"Hara"
,
"Harald"
,
"Harbard"
,
"Harberd"
,
"Harbert"
,
"Harbird"
,
"Harbison"
,
"Harbot"
,
"Harbour"
,
"Harcourt"
,
"Hardan"
,
"Harday"
,
"Hardden"
,
"Hardej"
,
"Harden"
,
"Hardi"
,
"Hardie"
,
"Hardigg"
,
"Hardin"
,
"Harding"
,
"Hardman"
,
"Hardner"
,
"Hardunn"
,
"Hardwick"
,
"Hardy"
,
"Hare"
,
"Harelda"
,
"Harewood"
,
"Harhay"
,
"Harilda"
,
"Harim"
,
"Harl"
,
"Harlamert"
,
"Harlan"
,
"Harland"
,
"Harle"
,
"Harleigh"
,
"Harlen"
,
"Harlene"
,
"Harley"
,
"Harli"
,
"Harlie"
,
"Harlin"
,
"Harlow"
,
"Harman"
,
"Harmaning"
,
"Harmon"
,
"Harmonia"
,
"Harmonie"
,
"Harmony"
,
"Harms"
,
"Harned"
,
"Harneen"
,
"Harness"
,
"Harod"
,
"Harold"
,
"Harolda"
,
"Haroldson"
,
"Haroun"
,
"Harp"
,
"Harper"
,
"Harpole"
,
"Harpp"
,
"Harragan"
,
"Harrell"
,
"Harri"
,
"Harrie"
,
"Harriet"
,
"Harriett"
,
"Harrietta"
,
"Harriette"
,
"Harriman"
,
"Harrington"
,
"Harriot"
,
"Harriott"
,
"Harris"
,
"Harrison"
,
"Harrod"
,
"Harrow"
,
"Harrus"
,
"Harry"
,
"Harshman"
,
"Harsho"
,
"Hart"
,
"Harte"
,
"Hartfield"
,
"Hartill"
,
"Hartley"
,
"Hartman"
,
"Hartmann"
,
"Hartmunn"
,
"Hartnett"
,
"Harts"
,
"Hartwell"
,
"Harty"
,
"Hartzel"
,
"Hartzell"
,
"Hartzke"
,
"Harv"
,
"Harvard"
,
"Harve"
,
"Harvey"
,
"Harvie"
,
"Harvison"
,
"Harwell"
,
"Harwill"
,
"Harwilll"
,
"Harwin"
,
"Hasan"
,
"Hasen"
,
"Hasheem"
,
"Hashim"
,
"Hashimoto"
,
"Hashum"
,
"Hasin"
,
"Haskel"
,
"Haskell"
,
"Haskins"
,
"Haslam"
,
"Haslett"
,
"Hasseman"
,
"Hassett"
,
"Hassi"
,
"Hassin"
,
"Hastie"
,
"Hastings"
,
"Hasty"
,
"Haswell"
,
"Hatch"
,
"Hatcher"
,
"Hatfield"
,
"Hathaway"
,
"Hathcock"
,
"Hatti"
,
"Hattie"
,
"Hatty"
,
"Hau"
,
"Hauck"
,
"Hauge"
,
"Haugen"
,
"Hauger"
,
"Haughay"
,
"Haukom"
,
"Hauser"
,
"Hausmann"
,
"Hausner"
,
"Havard"
,
"Havelock"
,
"Haveman"
,
"Haven"
,
"Havener"
,
"Havens"
,
"Havstad"
,
"Hawger"
,
"Hawk"
,
"Hawken"
,
"Hawker"
,
"Hawkie"
,
"Hawkins"
,
"Hawley"
,
"Hawthorn"
,
"Hax"
,
"Hay"
,
"Haya"
,
"Hayashi"
,
"Hayden"
,
"Haydon"
,
"Haye"
,
"Hayes"
,
"Hayley"
,
"Hayman"
,
"Haymes"
,
"Haymo"
,
"Hayne"
,
"Haynes"
,
"Haynor"
,
"Hayott"
,
"Hays"
,
"Hayse"
,
"Hayton"
,
"Hayward"
,
"Haywood"
,
"Hayyim"
,
"Hazaki"
,
"Hazard"
,
"Haze"
,
"Hazeghi"
,
"Hazel"
,
"Hazelton"
,
"Hazem"
,
"Hazen"
,
"Hazlett"
,
"Hazlip"
,
"Head"
,
"Heady"
,
"Healey"
,
"Healion"
,
"Heall"
,
"Healy"
,
"Heaps"
,
"Hearn"
,
"Hearsh"
,
"Heater"
,
"Heath"
,
"Heathcote"
,
"Heather"
,
"Hebbe"
,
"Hebe"
,
"Hebel"
,
"Heber"
,
"Hebert"
,
"Hebner"
,
"Hebrew"
,
"Hecht"
,
"Heck"
,
"Hecker"
,
"Hecklau"
,
"Hector"
,
"Heda"
,
"Hedberg"
,
"Hedda"
,
"Heddi"
,
"Heddie"
,
"Heddy"
,
"Hedelman"
,
"Hedgcock"
,
"Hedges"
,
"Hedi"
,
"Hedley"
,
"Hedva"
,
"Hedvah"
,
"Hedve"
,
"Hedveh"
,
"Hedvig"
,
"Hedvige"
,
"Hedwig"
,
"Hedwiga"
,
"Hedy"
,
"Heeley"
,
"Heer"
,
"Heffron"
,
"Hefter"
,
"Hegarty"
,
"Hege"
,
"Heger"
,
"Hegyera"
,
"Hehre"
,
"Heid"
,
"Heida"
,
"Heidi"
,
"Heidie"
,
"Heidt"
,
"Heidy"
,
"Heigho"
,
"Heigl"
,
"Heilman"
,
"Heilner"
,
"Heim"
,
"Heimer"
,
"Heimlich"
,
"Hein"
,
"Heindrick"
,
"Heiner"
,
"Heiney"
,
"Heinrich"
,
"Heinrick"
,
"Heinrik"
,
"Heinrike"
,
"Heins"
,
"Heintz"
,
"Heise"
,
"Heisel"
,
"Heiskell"
,
"Heisser"
,
"Hekker"
,
"Hekking"
,
"Helaina"
,
"Helaine"
,
"Helali"
,
"Helban"
,
"Helbon"
,
"Helbona"
,
"Helbonia"
,
"Helbonna"
,
"Helbonnah"
,
"Helbonnas"
,
"Held"
,
"Helen"
,
"Helena"
,
"Helene"
,
"Helenka"
,
"Helfand"
,
"Helfant"
,
"Helga"
,
"Helge"
,
"Helgeson"
,
"Hellene"
,
"Heller"
,
"Helli"
,
"Hellman"
,
"Helm"
,
"Helman"
,
"Helmer"
,
"Helms"
,
"Helmut"
,
"Heloise"
,
"Helprin"
,
"Helsa"
,
"Helse"
,
"Helsell"
,
"Helsie"
,
"Helve"
,
"Helyn"
,
"Heman"
,
"Hembree"
,
"Hemingway"
,
"Hemminger"
,
"Hemphill"
,
"Hen"
,
"Hendel"
,
"Henden"
,
"Henderson"
,
"Hendon"
,
"Hendren"
,
"Hendrick"
,
"Hendricks"
,
"Hendrickson"
,
"Hendrik"
,
"Hendrika"
,
"Hendrix"
,
"Hendry"
,
"Henebry"
,
"Heng"
,
"Hengel"
,
"Henghold"
,
"Henig"
,
"Henigman"
,
"Henka"
,
"Henke"
,
"Henleigh"
,
"Henley"
,
"Henn"
,
"Hennahane"
,
"Hennebery"
,
"Hennessey"
,
"Hennessy"
,
"Henni"
,
"Hennie"
,
"Henning"
,
"Henri"
,
"Henricks"
,
"Henrie"
,
"Henrieta"
,
"Henrietta"
,
"Henriette"
,
"Henriha"
,
"Henrik"
,
"Henrion"
,
"Henrique"
,
"Henriques"
,
"Henry"
,
"Henryetta"
,
"Henryk"
,
"Henryson"
,
"Henson"
,
"Hentrich"
,
"Hephzibah"
,
"Hephzipa"
,
"Hephzipah"
,
"Heppman"
,
"Hepsiba"
,
"Hepsibah"
,
"Hepza"
,
"Hepzi"
,
"Hera"
,
"Herald"
,
"Herb"
,
"Herbert"
,
"Herbie"
,
"Herbst"
,
"Herby"
,
"Herc"
,
"Hercule"
,
"Hercules"
,
"Herculie"
,
"Hereld"
,
"Heriberto"
,
"Heringer"
,
"Herm"
,
"Herman"
,
"Hermann"
,
"Hermes"
,
"Hermia"
,
"Hermie"
,
"Hermina"
,
"Hermine"
,
"Herminia"
,
"Hermione"
,
"Hermon"
,
"Hermosa"
,
"Hermy"
,
"Hernandez"
,
"Hernando"
,
"Hernardo"
,
"Herod"
,
"Herodias"
,
"Herold"
,
"Heron"
,
"Herr"
,
"Herra"
,
"Herrah"
,
"Herrera"
,
"Herrick"
,
"Herries"
,
"Herring"
,
"Herrington"
,
"Herriott"
,
"Herrle"
,
"Herrmann"
,
"Herrod"
,
"Hersch"
,
"Herschel"
,
"Hersh"
,
"Hershel"
,
"Hershell"
,
"Herson"
,
"Herstein"
,
"Herta"
,
"Hertberg"
,
"Hertha"
,
"Hertz"
,
"Hertzfeld"
,
"Hertzog"
,
"Herv"
,
"Herve"
,
"Hervey"
,
"Herwick"
,
"Herwig"
,
"Herwin"
,
"Herzberg"
,
"Herzel"
,
"Herzen"
,
"Herzig"
,
"Herzog"
,
"Hescock"
,
"Heshum"
,
"Hesketh"
,
"Hesky"
,
"Hesler"
,
"Hesper"
,
"Hess"
,
"Hessler"
,
"Hessney"
,
"Hesta"
,
"Hester"
,
"Hesther"
,
"Hestia"
,
"Heti"
,
"Hett"
,
"Hetti"
,
"Hettie"
,
"Hetty"
,
"Heurlin"
,
"Heuser"
,
"Hew"
,
"Hewart"
,
"Hewe"
,
"Hewes"
,
"Hewet"
,
"Hewett"
,
"Hewie"
,
"Hewitt"
,
"Hey"
,
"Heyde"
,
"Heydon"
,
"Heyer"
,
"Heyes"
,
"Heyman"
,
"Heymann"
,
"Heyward"
,
"Heywood"
,
"Hezekiah"
,
"Hi"
,
"Hibben"
,
"Hibbert"
,
"Hibbitts"
,
"Hibbs"
,
"Hickey"
,
"Hickie"
,
"Hicks"
,
"Hidie"
,
"Hieronymus"
,
"Hiett"
,
"Higbee"
,
"Higginbotham"
,
"Higgins"
,
"Higginson"
,
"Higgs"
,
"High"
,
"Highams"
,
"Hightower"
,
"Higinbotham"
,
"Higley"
,
"Hijoung"
,
"Hike"
,
"Hilaire"
,
"Hilar"
,
"Hilaria"
,
"Hilario"
,
"Hilarius"
,
"Hilary"
,
"Hilbert"
,
"Hild"
,
"Hilda"
,
"Hildagard"
,
"Hildagarde"
,
"Hilde"
,
"Hildebrandt"
,
"Hildegaard"
,
"Hildegard"
,
"Hildegarde"
,
"Hildick"
,
"Hildie"
,
"Hildy"
,
"Hilel"
,
"Hill"
,
"Hillard"
,
"Hillari"
,
"Hillary"
,
"Hilleary"
,
"Hillegass"
,
"Hillel"
,
"Hillell"
,
"Hiller"
,
"Hillery"
,
"Hillhouse"
,
"Hilliard"
,
"Hilliary"
,
"Hillie"
,
"Hillier"
,
"Hillinck"
,
"Hillman"
,
"Hills"
,
"Hilly"
,
"Hillyer"
,
"Hiltan"
,
"Hilten"
,
"Hiltner"
,
"Hilton"
,
"Him"
,
"Hime"
,
"Himelman"
,
"Hinch"
,
"Hinckley"
,
"Hinda"
,
"Hindorff"
,
"Hindu"
,
"Hines"
,
"Hinkel"
,
"Hinkle"
,
"Hinman"
,
"Hinson"
,
"Hintze"
,
"Hinze"
,
"Hippel"
,
"Hirai"
,
"Hiram"
,
"Hirasuna"
,
"Hiro"
,
"Hiroko"
,
"Hiroshi"
,
"Hirsch"
,
"Hirschfeld"
,
"Hirsh"
,
"Hirst"
,
"Hirz"
,
"Hirza"
,
"Hisbe"
,
"Hitchcock"
,
"Hite"
,
"Hitoshi"
,
"Hitt"
,
"Hittel"
,
"Hizar"
,
"Hjerpe"
,
"Hluchy"
,
"Ho"
,
"Hoag"
,
"Hoagland"
,
"Hoang"
,
"Hoashis"
,
"Hoban"
,
"Hobard"
,
"Hobart"
,
"Hobbie"
,
"Hobbs"
,
"Hobey"
,
"Hobie"
,
"Hochman"
,
"Hock"
,
"Hocker"
,
"Hodess"
,
"Hodge"
,
"Hodges"
,
"Hodgkinson"
,
"Hodgson"
,
"Hodosh"
,
"Hoebart"
,
"Hoeg"
,
"Hoehne"
,
"Hoem"
,
"Hoenack"
,
"Hoes"
,
"Hoeve"
,
"Hoffarth"
,
"Hoffer"
,
"Hoffert"
,
"Hoffman"
,
"Hoffmann"
,
"Hofmann"
,
"Hofstetter"
,
"Hogan"
,
"Hogarth"
,
"Hogen"
,
"Hogg"
,
"Hogle"
,
"Hogue"
,
"Hoi"
,
"Hoisch"
,
"Hokanson"
,
"Hola"
,
"Holbrook"
,
"Holbrooke"
,
"Holcman"
,
"Holcomb"
,
"Holden"
,
"Holder"
,
"Holds"
,
"Hole"
,
"Holey"
,
"Holladay"
,
"Hollah"
,
"Holland"
,
"Hollander"
,
"Holle"
,
"Hollenbeck"
,
"Holleran"
,
"Hollerman"
,
"Holli"
,
"Hollie"
,
"Hollinger"
,
"Hollingsworth"
,
"Hollington"
,
"Hollis"
,
"Hollister"
,
"Holloway"
,
"Holly"
,
"Holly-Anne"
,
"Hollyanne"
,
"Holman"
,
"Holmann"
,
"Holmen"
,
"Holmes"
,
"Holms"
,
"Holmun"
,
"Holna"
,
"Holofernes"
,
"Holsworth"
,
"Holt"
,
"Holton"
,
"Holtorf"
,
"Holtz"
,
"Holub"
,
"Holzman"
,
"Homans"
,
"Home"
,
"Homer"
,
"Homere"
,
"Homerus"
,
"Homovec"
,
"Honan"
,
"Honebein"
,
"Honey"
,
"Honeyman"
,
"Honeywell"
,
"Hong"
,
"Honig"
,
"Honna"
,
"Honniball"
,
"Honor"
,
"Honora"
,
"Honoria"
,
"Honorine"
,
"Hoo"
,
"Hooge"
,
"Hook"
,
"Hooke"
,
"Hooker"
,
"Hoon"
,
"Hoopen"
,
"Hooper"
,
"Hoopes"
,
"Hootman"
,
"Hoover"
,
"Hope"
,
"Hopfinger"
,
"Hopkins"
,
"Hoppe"
,
"Hopper"
,
"Horace"
,
"Horacio"
,
"Horan"
,
"Horatia"
,
"Horatio"
,
"Horatius"
,
"Horbal"
,
"Horgan"
,
"Horick"
,
"Horlacher"
,
"Horn"
,
"Horne"
,
"Horner"
,
"Hornstein"
,
"Horodko"
,
"Horowitz"
,
"Horsey"
,
"Horst"
,
"Hort"
,
"Horten"
,
"Hortensa"
,
"Hortense"
,
"Hortensia"
,
"Horter"
,
"Horton"
,
"Horvitz"
,
"Horwath"
,
"Horwitz"
,
"Hosbein"
,
"Hose"
,
"Hosea"
,
"Hoseia"
,
"Hosfmann"
,
"Hoshi"
,
"Hoskinson"
,
"Hospers"
,
"Hotchkiss"
,
"Hotze"
,
"Hough"
,
"Houghton"
,
"Houlberg"
,
"Hound"
,
"Hourigan"
,
"Hourihan"
,
"Housen"
,
"Houser"
,
"Houston"
,
"Housum"
,
"Hovey"
,
"How"
,
"Howard"
,
"Howarth"
,
"Howe"
,
"Howell"
,
"Howenstein"
,
"Howes"
,
"Howey"
,
"Howie"
,
"Howlan"
,
"Howland"
,
"Howlend"
,
"Howlond"
,
"Howlyn"
,
"Howund"
,
"Howzell"
,
"Hoxie"
,
"Hoxsie"
,
"Hoy"
,
"Hoye"
,
"Hoyt"
,
"Hrutkay"
,
"Hsu"
,
"Hu"
,
"Huai"
,
"Huan"
,
"Huang"
,
"Huba"
,
"Hubbard"
,
"Hubble"
,
"Hube"
,
"Huber"
,
"Huberman"
,
"Hubert"
,
"Huberto"
,
"Huberty"
,
"Hubey"
,
"Hubie"
,
"Hubing"
,
"Hubsher"
,
"Huckaby"
,
"Huda"
,
"Hudgens"
,
"Hudis"
,
"Hudnut"
,
"Hudson"
,
"Huebner"
,
"Huei"
,
"Huesman"
,
"Hueston"
,
"Huey"
,
"Huff"
,
"Hufnagel"
,
"Huggins"
,
"Hugh"
,
"Hughes"
,
"Hughett"
,
"Hughie"
,
"Hughmanick"
,
"Hugibert"
,
"Hugo"
,
"Hugon"
,
"Hugues"
,
"Hui"
,
"Hujsak"
,
"Hukill"
,
"Hulbard"
,
"Hulbert"
,
"Hulbig"
,
"Hulburt"
,
"Hulda"
,
"Huldah"
,
"Hulen"
,
"Hull"
,
"Hullda"
,
"Hultgren"
,
"Hultin"
,
"Hulton"
,
"Hum"
,
"Humbert"
,
"Humberto"
,
"Humble"
,
"Hume"
,
"Humfrey"
,
"Humfrid"
,
"Humfried"
,
"Hummel"
,
"Humo"
,
"Hump"
,
"Humpage"
,
"Humph"
,
"Humphrey"
,
"Hun"
,
"Hunfredo"
,
"Hung"
,
"Hungarian"
,
"Hunger"
,
"Hunley"
,
"Hunsinger"
,
"Hunt"
,
"Hunter"
,
"Huntingdon"
,
"Huntington"
,
"Huntlee"
,
"Huntley"
,
"Huoh"
,
"Huppert"
,
"Hurd"
,
"Hurff"
,
"Hurlbut"
,
"Hurlee"
,
"Hurleigh"
,
"Hurless"
,
"Hurley"
,
"Hurlow"
,
"Hurst"
,
"Hurty"
,
"Hurwit"
,
"Hurwitz"
,
"Husain"
,
"Husch"
,
"Husein"
,
"Husha"
,
"Huskamp"
,
"Huskey"
,
"Hussar"
,
"Hussein"
,
"Hussey"
,
"Huston"
,
"Hut"
,
"Hutchings"
,
"Hutchins"
,
"Hutchinson"
,
"Hutchison"
,
"Hutner"
,
"Hutson"
,
"Hutt"
,
"Huttan"
,
"Hutton"
,
"Hux"
,
"Huxham"
,
"Huxley"
,
"Hwang"
,
"Hwu"
,
"Hy"
,
"Hyacinth"
,
"Hyacintha"
,
"Hyacinthe"
,
"Hyacinthia"
,
"Hyacinthie"
,
"Hyams"
,
"Hyatt"
,
"Hyde"
,
"Hylan"
,
"Hyland"
,
"Hylton"
,
"Hyman"
,
"Hymen"
,
"Hymie"
,
"Hynda"
,
"Hynes"
,
"Hyo"
,
"Hyozo"
,
"Hyps"
,
"Hyrup"
,
"Iago"
,
"Iain"
,
"Iams"
,
"Ian"
,
"Iand"
,
"Ianteen"
,
"Ianthe"
,
"Iaria"
,
"Iaverne"
,
"Ib"
,
"Ibbetson"
,
"Ibbie"
,
"Ibbison"
,
"Ibby"
,
"Ibrahim"
,
"Ibson"
,
"Ichabod"
,
"Icken"
,
"Id"
,
"Ida"
,
"Idalia"
,
"Idalina"
,
"Idaline"
,
"Idalla"
,
"Idden"
,
"Iddo"
,
"Ide"
,
"Idel"
,
"Idelia"
,
"Idell"
,
"Idelle"
,
"Idelson"
,
"Iden"
,
"Idette"
,
"Idleman"
,
"Idola"
,
"Idolah"
,
"Idolla"
,
"Idona"
,
"Idonah"
,
"Idonna"
,
"Idou"
,
"Idoux"
,
"Idzik"
,
"Iene"
,
"Ier"
,
"Ierna"
,
"Ieso"
,
"Ietta"
,
"Iey"
,
"Ifill"
,
"Igal"
,
"Igenia"
,
"Iggie"
,
"Iggy"
,
"Iglesias"
,
"Ignace"
,
"Ignacia"
,
"Ignacio"
,
"Ignacius"
,
"Ignatia"
,
"Ignatius"
,
"Ignatz"
,
"Ignatzia"
,
"Ignaz"
,
"Ignazio"
,
"Igor"
,
"Ihab"
,
"Iiette"
,
"Iila"
,
"Iinde"
,
"Iinden"
,
"Iives"
,
"Ike"
,
"Ikeda"
,
"Ikey"
,
"Ikkela"
,
"Ilaire"
,
"Ilan"
,
"Ilana"
,
"Ilario"
,
"Ilarrold"
,
"Ilbert"
,
"Ileana"
,
"Ileane"
,
"Ilene"
,
"Iline"
,
"Ilise"
,
"Ilka"
,
"Ilke"
,
"Illa"
,
"Illene"
,
"Illona"
,
"Illyes"
,
"Ilona"
,
"Ilonka"
,
"Ilowell"
,
"Ilsa"
,
"Ilse"
,
"Ilwain"
,
"Ilysa"
,
"Ilyse"
,
"Ilyssa"
,
"Im"
,
"Ima"
,
"Imalda"
,
"Iman"
,
"Imelda"
,
"Imelida"
,
"Imena"
,
"Immanuel"
,
"Imogen"
,
"Imogene"
,
"Imojean"
,
"Imray"
,
"Imre"
,
"Imtiaz"
,
"Ina"
,
"Incrocci"
,
"Indihar"
,
"Indira"
,
"Inerney"
,
"Ines"
,
"Inesita"
,
"Ineslta"
,
"Inessa"
,
"Inez"
,
"Infeld"
,
"Infield"
,
"Ing"
,
"Inga"
,
"Ingaberg"
,
"Ingaborg"
,
"Ingalls"
,
"Ingamar"
,
"Ingar"
,
"Inge"
,
"Ingeberg"
,
"Ingeborg"
,
"Ingelbert"
,
"Ingemar"
,
"Inger"
,
"Ingham"
,
"Inglebert"
,
"Ingles"
,
"Inglis"
,
"Ingmar"
,
"Ingold"
,
"Ingra"
,
"Ingraham"
,
"Ingram"
,
"Ingrid"
,
"Ingrim"
,
"Ingunna"
,
"Ingvar"
,
"Inigo"
,
"Inkster"
,
"Inman"
,
"Inna"
,
"Innes"
,
"Inness"
,
"Innis"
,
"Inoue"
,
"Intisar"
,
"Intosh"
,
"Intyre"
,
"Inverson"
,
"Iny"
,
"Ioab"
,
"Iolande"
,
"Iolanthe"
,
"Iolenta"
,
"Ion"
,
"Iona"
,
"Iong"
,
"Iorgo"
,
"Iorgos"
,
"Iorio"
,
"Iormina"
,
"Iosep"
,
"Ioved"
,
"Iover"
,
"Ioves"
,
"Iow"
,
"Ioyal"
,
"Iphagenia"
,
"Iphigenia"
,
"Iphigeniah"
,
"Iphlgenia"
,
"Ira"
,
"Iran"
,
"Irby"
,
"Iredale"
,
"Ireland"
,
"Irena"
,
"Irene"
,
"Irfan"
,
"Iridis"
,
"Iridissa"
,
"Irina"
,
"Iris"
,
"Irisa"
,
"Irish"
,
"Irita"
,
"Irma"
,
"Irme"
,
"Irmgard"
,
"Irmina"
,
"Irmine"
,
"Irra"
,
"Irv"
,
"Irvin"
,
"Irvine"
,
"Irving"
,
"Irwin"
,
"Irwinn"
,
"Isa"
,
"Isaac"
,
"Isaacs"
,
"Isaacson"
,
"Isaak"
,
"Isabea"
,
"Isabeau"
,
"Isabel"
,
"Isabelita"
,
"Isabella"
,
"Isabelle"
,
"Isac"
,
"Isacco"
,
"Isador"
,
"Isadora"
,
"Isadore"
,
"Isahella"
,
"Isaiah"
,
"Isak"
,
"Isbel"
,
"Isbella"
,
"Isborne"
,
"Iseabal"
,
"Isherwood"
,
"Ishii"
,
"Ishmael"
,
"Ishmul"
,
"Isia"
,
"Isiah"
,
"Isiahi"
,
"Isidor"
,
"Isidora"
,
"Isidore"
,
"Isidoro"
,
"Isidro"
,
"Isis"
,
"Isla"
,
"Islaen"
,
"Island"
,
"Isle"
,
"Islean"
,
"Isleana"
,
"Isleen"
,
"Islek"
,
"Isma"
,
"Isman"
,
"Isobel"
,
"Isola"
,
"Isolda"
,
"Isolde"
,
"Isolt"
,
"Israel"
,
"Israeli"
,
"Issi"
,
"Issiah"
,
"Issie"
,
"Issy"
,
"Ita"
,
"Itagaki"
,
"Itch"
,
"Ithaman"
,
"Ithnan"
,
"Itin"
,
"Iva"
,
"Ivah"
,
"Ivan"
,
"Ivana"
,
"Ivanah"
,
"Ivanna"
,
"Ivar"
,
"Ivatts"
,
"Ive"
,
"Ivens"
,
"Iver"
,
"Ivers"
,
"Iverson"
,
"Ives"
,
"Iveson"
,
"Ivett"
,
"Ivette"
,
"Ivetts"
,
"Ivey"
,
"Ivie"
,
"Ivo"
,
"Ivon"
,
"Ivonne"
,
"Ivor"
,
"Ivory"
,
"Ivy"
,
"Iy"
,
"Iyre"
,
"Iz"
,
"Izaak"
,
"Izabel"
,
"Izak"
,
"Izawa"
,
"Izy"
,
"Izzy"
,
"Ja"
,
"Jaal"
,
"Jaala"
,
"Jaan"
,
"Jaban"
,
"Jabe"
,
"Jabez"
,
"Jabin"
,
"Jablon"
,
"Jabon"
,
"Jac"
,
"Jacenta"
,
"Jacey"
,
"Jacie"
,
"Jacinda"
,
"Jacinta"
,
"Jacintha"
,
"Jacinthe"
,
"Jacinto"
,
"Jack"
,
"Jackelyn"
,
"Jacki"
,
"Jackie"
,
"Jacklin"
,
"Jacklyn"
,
"Jackquelin"
,
"Jackqueline"
,
"Jackson"
,
"Jacky"
,
"Jaclin"
,
"Jaclyn"
,
"Jaco"
,
"Jacob"
,
"Jacoba"
,
"Jacobah"
,
"Jacobba"
,
"Jacobina"
,
"Jacobine"
,
"Jacobo"
,
"Jacobs"
,
"Jacobsen"
,
"Jacobsohn"
,
"Jacobson"
,
"Jacoby"
,
"Jacquelin"
,
"Jacqueline"
,
"Jacquelyn"
,
"Jacquelynn"
,
"Jacquenetta"
,
"Jacquenette"
,
"Jacques"
,
"Jacquet"
,
"Jacquetta"
,
"Jacquette"
,
"Jacqui"
,
"Jacquie"
,
"Jacy"
,
"Jacynth"
,
"Jada"
,
"Jadd"
,
"Jadda"
,
"Jaddan"
,
"Jaddo"
,
"Jade"
,
"Jadwiga"
,
"Jae"
,
"Jaeger"
,
"Jaehne"
,
"Jael"
,
"Jaela"
,
"Jaella"
,
"Jaenicke"
,
"Jaf"
,
"Jaffe"
,
"Jagir"
,
"Jago"
,
"Jahdai"
,
"Jahdal"
,
"Jahdiel"
,
"Jahdol"
,
"Jahn"
,
"Jahncke"
,
"Jaime"
,
"Jaime "
,
"Jaimie"
,
"Jain"
,
"Jaine"
,
"Jair"
,
"Jairia"
,
"Jake"
,
"Jakie"
,
"Jakob"
,
"Jakoba"
,
"Jala"
,
"Jalbert"
,
"Jallier"
,
"Jamaal"
,
"Jamal"
,
"Jamel"
,
"James"
,
"Jameson"
,
"Jamesy"
,
"Jamey"
,
"Jami"
,
"Jamie"
,
"Jamieson"
,
"Jamil"
,
"Jamila"
,
"Jamill"
,
"Jamilla"
,
"Jamille"
,
"Jamima"
,
"Jamin"
,
"Jamison"
,
"Jammal"
,
"Jammie"
,
"Jammin"
,
"Jamnes"
,
"Jamnis"
,
"Jan"
,
"Jana"
,
"Janaya"
,
"Janaye"
,
"Jandel"
,
"Jandy"
,
"Jane"
,
"Janean"
,
"Janeczka"
,
"Janeen"
,
"Janek"
,
"Janel"
,
"Janela"
,
"Janella"
,
"Janelle"
,
"Janene"
,
"Janenna"
,
"Janerich"
,
"Janessa"
,
"Janet"
,
"Janeta"
,
"Janetta"
,
"Janette"
,
"Janeva"
,
"Janey"
,
"Jangro"
,
"Jania"
,
"Janice"
,
"Janicki"
,
"Janie"
,
"Janifer"
,
"Janik"
,
"Janina"
,
"Janine"
,
"Janis"
,
"Janith"
,
"Janiuszck"
,
"Janka"
,
"Jankell"
,
"Jankey"
,
"Jann"
,
"Janna"
,
"Jannel"
,
"Jannelle"
,
"Jannery"
,
"Janos"
,
"Janot"
,
"Jansen"
,
"Jansson"
,
"Januarius"
,
"January"
,
"Januisz"
,
"Janus"
,
"Jany"
,
"Janyte"
,
"Japeth"
,
"Japha"
,
"Japheth"
,
"Jaqitsch"
,
"Jaquelin"
,
"Jaquelyn"
,
"Jaquenetta"
,
"Jaquenette"
,
"Jaquiss"
,
"Jaquith"
,
"Jara"
,
"Jarad"
,
"Jard"
,
"Jardena"
,
"Jareb"
,
"Jared"
,
"Jarek"
,
"Jaret"
,
"Jari"
,
"Jariah"
,
"Jarib"
,
"Jarid"
,
"Jarietta"
,
"Jarita"
,
"Jarl"
,
"Jarlath"
,
"Jarlathus"
,
"Jarlen"
,
"Jarnagin"
,
"Jarrad"
,
"Jarred"
,
"Jarrell"
,
"Jarret"
,
"Jarrett"
,
"Jarrid"
,
"Jarrod"
,
"Jarrow"
,
"Jarv"
,
"Jarvey"
,
"Jarvis"
,
"Jary"
,
"Jase"
,
"Jasen"
,
"Jasik"
,
"Jasisa"
,
"Jasmin"
,
"Jasmina"
,
"Jasmine"
,
"Jason"
,
"Jasper"
,
"Jasun"
,
"Jauch"
,
"Jaunita"
,
"Javed"
,
"Javier"
,
"Javler"
,
"Jaworski"
,
"Jay"
,
"Jaycee"
,
"Jaye"
,
"Jaylene"
,
"Jayme"
,
"Jaymee"
,
"Jaymie"
,
"Jayne"
,
"Jaynell"
,
"Jaynes"
,
"Jayson"
,
"Jazmin"
,
"Jdavie"
,
"Jea"
,
"Jean"
,
"Jean-Claude"
,
"Jeana"
,
"Jeane"
,
"Jeanelle"
,
"Jeanette"
,
"Jeanie"
,
"Jeanine"
,
"Jeanna"
,
"Jeanne"
,
"Jeannette"
,
"Jeannie"
,
"Jeannine"
,
"Jeavons"
,
"Jeaz"
,
"Jeb"
,
"Jecho"
,
"Jecoa"
,
"Jecon"
,
"Jeconiah"
,
"Jed"
,
"Jedd"
,
"Jeddy"
,
"Jedediah"
,
"Jedidiah"
,
"Jedlicka"
,
"Jedthus"
,
"Jeff"
,
"Jeffcott"
,
"Jefferey"
,
"Jeffers"
,
"Jefferson"
,
"Jeffery"
,
"Jeffie"
,
"Jeffrey"
,
"Jeffries"
,
"Jeffry"
,
"Jeffy"
,
"Jegar"
,
"Jeggar"
,
"Jegger"
,
"Jehanna"
,
"Jehiah"
,
"Jehial"
,
"Jehias"
,
"Jehiel"
,
"Jehius"
,
"Jehoash"
,
"Jehovah"
,
"Jehu"
,
"Jelena"
,
"Jelene"
,
"Jelks"
,
"Jelle"
,
"Jelsma"
,
"Jem"
,
"Jemena"
,
"Jemie"
,
"Jemima"
,
"Jemimah"
,
"Jemina"
,
"Jeminah"
,
"Jemine"
,
"Jemma"
,
"Jemmie"
,
"Jemmy"
,
"Jempty"
,
"Jemy"
,
"Jen"
,
"Jena"
,
"Jenda"
,
"Jenei"
,
"Jenelle"
,
"Jenesia"
,
"Jenette"
,
"Jeni"
,
"Jenica"
,
"Jeniece"
,
"Jenifer"
,
"Jeniffer"
,
"Jenilee"
,
"Jenine"
,
"Jenkel"
,
"Jenkins"
,
"Jenks"
,
"Jenn"
,
"Jenna"
,
"Jenne"
,
"Jennee"
,
"Jenness"
,
"Jennette"
,
"Jenni"
,
"Jennica"
,
"Jennie"
,
"Jennifer"
,
"Jennilee"
,
"Jennine"
,
"Jennings"
,
"Jenny"
,
"Jeno"
,
"Jens"
,
"Jensen"
,
"Jentoft"
,
"Jephthah"
,
"Jephum"
,
"Jepson"
,
"Jepum"
,
"Jer"
,
"Jerad"
,
"Jerald"
,
"Jeraldine"
,
"Jeralee"
,
"Jeramey"
,
"Jeramie"
,
"Jere"
,
"Jereld"
,
"Jereme"
,
"Jeremiah"
,
"Jeremias"
,
"Jeremie"
,
"Jeremy"
,
"Jeri"
,
"Jeritah"
,
"Jermain"
,
"Jermaine"
,
"Jerman"
,
"Jermayne"
,
"Jermyn"
,
"Jerol"
,
"Jerold"
,
"Jeroma"
,
"Jerome"
,
"Jeromy"
,
"Jerri"
,
"Jerrie"
,
"Jerrilee"
,
"Jerrilyn"
,
"Jerrine"
,
"Jerrol"
,
"Jerrold"
,
"Jerroll"
,
"Jerrome"
,
"Jerry"
,
"Jerrylee"
,
"Jerusalem"
,
"Jervis"
,
"Jerz"
,
"Jesh"
,
"Jesher"
,
"Jess"
,
"Jessa"
,
"Jessabell"
,
"Jessalin"
,
"Jessalyn"
,
"Jessamine"
,
"Jessamyn"
,
"Jesse"
,
"Jessee"
,
"Jesselyn"
,
"Jessen"
,
"Jessey"
,
"Jessi"
,
"Jessica"
,
"Jessie"
,
"Jessika"
,
"Jessy"
,
"Jestude"
,
"Jesus"
,
"Jeth"
,
"Jethro"
,
"Jeu"
,
"Jeunesse"
,
"Jeuz"
,
"Jevon"
,
"Jew"
,
"Jewel"
,
"Jewell"
,
"Jewelle"
,
"Jewett"
,
"Jews"
,
"Jez"
,
"Jezabel"
,
"Jezabella"
,
"Jezabelle"
,
"Jezebel"
,
"Jezreel"
,
"Ji"
,
"Jill"
,
"Jillana"
,
"Jillane"
,
"Jillayne"
,
"Jilleen"
,
"Jillene"
,
"Jilli"
,
"Jillian"
,
"Jillie"
,
"Jilly"
,
"Jim"
,
"Jimmie"
,
"Jimmy"
,
"Jinny"
,
"Jit"
,
"Jo"
,
"Jo Ann"
,
"Jo-Ann"
,
"Jo-Anne"
,
"JoAnn"
,
"JoAnne"
,
"Joab"
,
"Joachim"
,
"Joachima"
,
"Joacima"
,
"Joacimah"
,
"Joan"
,
"Joana"
,
"Joane"
,
"Joanie"
,
"Joann"
,
"Joanna"
,
"Joanne"
,
"Joannes"
,
"Joao"
,
"Joappa"
,
"Joaquin"
,
"Joash"
,
"Joashus"
,
"Job"
,
"Jobe"
,
"Jobey"
,
"Jobi"
,
"Jobie"
,
"Jobina"
,
"Joby"
,
"Jobye"
,
"Jobyna"
,
"Jocelin"
,
"Joceline"
,
"Jocelyn"
,
"Jocelyne"
,
"Jochbed"
,
"Jochebed"
,
"Jock"
,
"Jocko"
,
"Jodee"
,
"Jodi"
,
"Jodie"
,
"Jodoin"
,
"Jody"
,
"Joe"
,
"Joeann"
,
"Joed"
,
"Joel"
,
"Joela"
,
"Joelie"
,
"Joell"
,
"Joella"
,
"Joelle"
,
"Joellen"
,
"Joelly"
,
"Joellyn"
,
"Joelynn"
,
"Joerg"
,
"Joete"
,
"Joette"
,
"Joey"
,
"Joh"
,
"Johan"
,
"Johanan"
,
"Johann"
,
"Johanna"
,
"Johannah"
,
"Johannes"
,
"Johannessen"
,
"Johansen"
,
"Johathan"
,
"Johen"
,
"Johiah"
,
"Johm"
,
"John"
,
"Johna"
,
"Johnath"
,
"Johnathan"
,
"Johnathon"
,
"Johnette"
,
"Johnna"
,
"Johnnie"
,
"Johnny"
,
"Johns"
,
"Johnson"
,
"Johnsson"
,
"Johnsten"
,
"Johnston"
,
"Johnstone"
,
"Johny"
,
"Johppa"
,
"Johppah"
,
"Johst"
,
"Joice"
,
"Joiner"
,
"Jojo"
,
"Joktan"
,
"Jola"
,
"Jolanta"
,
"Jolda"
,
"Jolee"
,
"Joleen"
,
"Jolene"
,
"Jolenta"
,
"Joletta"
,
"Joli"
,
"Jolie"
,
"Joliet"
,
"Joline"
,
"Jollanta"
,
"Jollenta"
,
"Joly"
,
"Jolyn"
,
"Jolynn"
,
"Jon"
,
"Jona"
,
"Jonah"
,
"Jonas"
,
"Jonathan"
,
"Jonathon"
,
"Jonati"
,
"Jone"
,
"Jonell"
,
"Jones"
,
"Jonette"
,
"Joni"
,
"Jonie"
,
"Jonina"
,
"Jonis"
,
"Jonme"
,
"Jonna"
,
"Jonny"
,
"Joo"
,
"Joon"
,
"Joost"
,
"Jopa"
,
"Jordain"
,
"Jordan"
,
"Jordana"
,
"Jordanna"
,
"Jordans"
,
"Jordanson"
,
"Jordison"
,
"Jordon"
,
"Jorey"
,
"Jorgan"
,
"Jorge"
,
"Jorgensen"
,
"Jorgenson"
,
"Jori"
,
"Jorie"
,
"Jorin"
,
"Joris"
,
"Jorrie"
,
"Jorry"
,
"Jory"
,
"Jos"
,
"Joscelin"
,
"Jose"
,
"Josee"
,
"Josefa"
,
"Josefina"
,
"Joseito"
,
"Joselow"
,
"Joselyn"
,
"Joseph"
,
"Josepha"
,
"Josephina"
,
"Josephine"
,
"Josephson"
,
"Joses"
,
"Josey"
,
"Josh"
,
"Joshi"
,
"Joshia"
,
"Joshua"
,
"Joshuah"
,
"Josi"
,
"Josiah"
,
"Josias"
,
"Josie"
,
"Josler"
,
"Joslyn"
,
"Josselyn"
,
"Josy"
,
"Jotham"
,
"Joub"
,
"Joung"
,
"Jourdain"
,
"Jourdan"
,
"Jovi"
,
"Jovia"
,
"Jovita"
,
"Jovitah"
,
"Jovitta"
,
"Jowett"
,
"Joy"
,
"Joya"
,
"Joyan"
,
"Joyann"
,
"Joyce"
,
"Joycelin"
,
"Joye"
,
"Jozef"
,
"Jsandye"
,
"Juan"
,
"Juana"
,
"Juanita"
,
"Juanne"
,
"Juback"
,
"Jud"
,
"Judah"
,
"Judas"
,
"Judd"
,
"Jude"
,
"Judenberg"
,
"Judi"
,
"Judie"
,
"Judith"
,
"Juditha"
,
"Judon"
,
"Judsen"
,
"Judson"
,
"Judus"
,
"Judy"
,
"Judye"
,
"Jueta"
,
"Juetta"
,
"Juieta"
,
"Jule"
,
"Julee"
,
"Jules"
,
"Juley"
,
"Juli"
,
"Julia"
,
"Julian"
,
"Juliana"
,
"Juliane"
,
"Juliann"
,
"Julianna"
,
"Julianne"
,
"Juliano"
,
"Julide"
,
"Julie"
,
"Julienne"
,
"Juliet"
,
"Julieta"
,
"Julietta"
,
"Juliette"
,
"Julina"
,
"Juline"
,
"Julio"
,
"Julis"
,
"Julissa"
,
"Julita"
,
"Julius"
,
"Jumbala"
,
"Jump"
,
"Jun"
,
"Juna"
,
"June"
,
"Junette"
,
"Jung"
,
"Juni"
,
"Junia"
,
"Junie"
,
"Junieta"
,
"Junina"
,
"Junius"
,
"Junji"
,
"Junko"
,
"Junna"
,
"Junno"
,
"Juno"
,
"Jurdi"
,
"Jurgen"
,
"Jurkoic"
,
"Just"
,
"Justen"
,
"Juster"
,
"Justicz"
,
"Justin"
,
"Justina"
,
"Justine"
,
"Justinian"
,
"Justinn"
,
"Justino"
,
"Justis"
,
"Justus"
,
"Juta"
,
"Jutta"
,
"Juxon"
,
"Jyoti"
,
"Kablesh"
,
"Kacerek"
,
"Kacey"
,
"Kachine"
,
"Kacie"
,
"Kacy"
,
"Kaczer"
,
"Kaden"
,
"Kadner"
,
"Kado"
,
"Kaela"
,
"Kaenel"
,
"Kaete"
,
"Kafka"
,
"Kahaleel"
,
"Kahl"
,
"Kahle"
,
"Kahler"
,
"Kahlil"
,
"Kahn"
,
"Kai"
,
"Kaia"
,
"Kaila"
,
"Kaile"
,
"Kailey"
,
"Kain"
,
"Kaine"
,
"Kaiser"
,
"Kaitlin"
,
"Kaitlyn"
,
"Kaitlynn"
,
"Kaiulani"
,
"Kaja"
,
"Kajdan"
,
"Kakalina"
,
"Kal"
,
"Kala"
,
"Kalagher"
,
"Kalasky"
,
"Kalb"
,
"Kalbli"
,
"Kale"
,
"Kaleb"
,
"Kaleena"
,
"Kalfas"
,
"Kali"
,
"Kalie"
,
"Kalikow"
,
"Kalil"
,
"Kalila"
,
"Kalin"
,
"Kalina"
,
"Kalinda"
,
"Kalindi"
,
"Kaliope"
,
"Kaliski"
,
"Kalk"
,
"Kall"
,
"Kalle"
,
"Kalli"
,
"Kallick"
,
"Kallista"
,
"Kallman"
,
"Kally"
,
"Kalman"
,
"Kalmick"
,
"Kaltman"
,
"Kalvin"
,
"Kalvn"
,
"Kam"
,
"Kama"
,
"Kamal"
,
"Kamaria"
,
"Kamat"
,
"Kameko"
,
"Kamerman"
,
"Kamila"
,
"Kamilah"
,
"Kamillah"
,
"Kamin"
,
"Kammerer"
,
"Kamp"
,
"Kampmann"
,
"Kampmeier"
,
"Kan"
,
"Kanal"
,
"Kancler"
,
"Kandace"
,
"Kandy"
,
"Kane"
,
"Kania"
,
"Kannan"
,
"Kannry"
,
"Kano"
,
"Kant"
,
"Kanter"
,
"Kantor"
,
"Kantos"
,
"Kanya"
,
"Kape"
,
"Kaplan"
,
"Kapoor"
,
"Kapor"
,
"Kappel"
,
"Kappenne"
,
"Kara"
,
"Kara-Lynn"
,
"Karalee"
,
"Karalynn"
,
"Karame"
,
"Karas"
,
"Karb"
,
"Kare"
,
"Karee"
,
"Kareem"
,
"Karel"
,
"Karen"
,
"Karena"
,
"Kari"
,
"Karia"
,
"Karie"
,
"Karil"
,
"Karilla"
,
"Karilynn"
,
"Karim"
,
"Karin"
,
"Karina"
,
"Karine"
,
"Kariotta"
,
"Karisa"
,
"Karissa"
,
"Karita"
,
"Karl"
,
"Karla"
,
"Karlan"
,
"Karlee"
,
"Karleen"
,
"Karlen"
,
"Karlene"
,
"Karlens"
,
"Karli"
,
"Karlie"
,
"Karlik"
,
"Karlin"
,
"Karlis"
,
"Karlise"
,
"Karlotta"
,
"Karlotte"
,
"Karlow"
,
"Karly"
,
"Karlyn"
,
"Karmen"
,
"Karna"
,
"Karney"
,
"Karol"
,
"Karola"
,
"Karole"
,
"Karolina"
,
"Karoline"
,
"Karoly"
,
"Karolyn"
,
"Karon"
,
"Karp"
,
"Karr"
,
"Karrah"
,
"Karrie"
,
"Karry"
,
"Karsten"
,
"Kartis"
,
"Karwan"
,
"Kary"
,
"Karyl"
,
"Karylin"
,
"Karyn"
,
"Kasevich"
,
"Kasey"
,
"Kashden"
,
"Kask"
,
"Kaslik"
,
"Kaspar"
,
"Kasper"
,
"Kass"
,
"Kassab"
,
"Kassandra"
,
"Kassaraba"
,
"Kassel"
,
"Kassey"
,
"Kassi"
,
"Kassia"
,
"Kassie"
,
"Kassity"
,
"Kast"
,
"Kat"
,
"Kata"
,
"Katalin"
,
"Kataway"
,
"Kate"
,
"Katee"
,
"Katerina"
,
"Katerine"
,
"Katey"
,
"Kath"
,
"Katha"
,
"Katharina"
,
"Katharine"
,
"Katharyn"
,
"Kathe"
,
"Katherin"
,
"Katherina"
,
"Katherine"
,
"Katheryn"
,
"Kathi"
,
"Kathie"
,
"Kathleen"
,
"Kathlene"
,
"Kathlin"
,
"Kathrine"
,
"Kathryn"
,
"Kathryne"
,
"Kathy"
,
"Kathye"
,
"Kati"
,
"Katie"
,
"Katina"
,
"Katine"
,
"Katinka"
,
"Katlaps"
,
"Katleen"
,
"Katlin"
,
"Kato"
,
"Katonah"
,
"Katrina"
,
"Katrine"
,
"Katrinka"
,
"Katsuyama"
,
"Katt"
,
"Katti"
,
"Kattie"
,
"Katuscha"
,
"Katusha"
,
"Katushka"
,
"Katy"
,
"Katya"
,
"Katz"
,
"Katzen"
,
"Katzir"
,
"Katzman"
,
"Kauffman"
,
"Kauffmann"
,
"Kaufman"
,
"Kaufmann"
,
"Kaule"
,
"Kauppi"
,
"Kauslick"
,
"Kavanagh"
,
"Kavanaugh"
,
"Kavita"
,
"Kawai"
,
"Kawasaki"
,
"Kay"
,
"Kaya"
,
"Kaycee"
,
"Kaye"
,
"Kayla"
,
"Kayle"
,
"Kaylee"
,
"Kayley"
,
"Kaylil"
,
"Kaylyn"
,
"Kayne"
,
"Kaz"
,
"Kazim"
,
"Kazimir"
,
"Kazmirci"
,
"Kazue"
,
"Kealey"
,
"Kean"
,
"Keane"
,
"Keare"
,
"Kearney"
,
"Keary"
,
"Keating"
,
"Keavy"
,
"Kee"
,
"Keefe"
,
"Keefer"
,
"Keegan"
,
"Keel"
,
"Keelby"
,
"Keele"
,
"Keeler"
,
"Keeley"
,
"Keelia"
,
"Keelin"
,
"Keely"
,
"Keen"
,
"Keenan"
,
"Keene"
,
"Keener"
,
"Keese"
,
"Keeton"
,
"Keever"
,
"Keffer"
,
"Keg"
,
"Kegan"
,
"Keheley"
,
"Kehoe"
,
"Kehr"
,
"Kei"
,
"Keifer"
,
"Keiko"
,
"Keil"
,
"Keily"
,
"Keir"
,
"Keisling"
,
"Keith"
,
"Keithley"
,
"Kela"
,
"Kelbee"
,
"Kelby"
,
"Kelcey"
,
"Kelci"
,
"Kelcie"
,
"Kelcy"
,
"Kelda"
,
"Keldah"
,
"Keldon"
,
"Kele"
,
"Keli"
,
"Keligot"
,
"Kelila"
,
"Kella"
,
"Kellby"
,
"Kellda"
,
"Kelleher"
,
"Kellen"
,
"Kellene"
,
"Keller"
,
"Kelley"
,
"Kelli"
,
"Kellia"
,
"Kellie"
,
"Kellina"
,
"Kellsie"
,
"Kelly"
,
"Kellyann"
,
"Kellyn"
,
"Kelsey"
,
"Kelsi"
,
"Kelson"
,
"Kelsy"
,
"Kelton"
,
"Kelula"
,
"Kelvin"
,
"Kelwen"
,
"Kelwin"
,
"Kelwunn"
,
"Kemble"
,
"Kemeny"
,
"Kemme"
,
"Kemp"
,
"Kempe"
,
"Kemppe"
,
"Ken"
,
"Kenay"
,
"Kenaz"
,
"Kendal"
,
"Kendall"
,
"Kendell"
,
"Kendra"
,
"Kendrah"
,
"Kendre"
,
"Kendrick"
,
"Kendricks"
,
"Kendry"
,
"Kendy"
,
"Kendyl"
,
"Kenelm"
,
"Kenison"
,
"Kenji"
,
"Kenlay"
,
"Kenlee"
,
"Kenleigh"
,
"Kenley"
,
"Kenn"
,
"Kenna"
,
"Kennan"
,
"Kennard"
,
"Kennedy"
,
"Kennet"
,
"Kenneth"
,
"Kennett"
,
"Kenney"
,
"Kennie"
,
"Kennith"
,
"Kenny"
,
"Kenon"
,
"Kenric"
,
"Kenrick"
,
"Kensell"
,
"Kent"
,
"Kenta"
,
"Kenti"
,
"Kentiga"
,
"Kentigera"
,
"Kentigerma"
,
"Kentiggerma"
,
"Kenton"
,
"Kenward"
,
"Kenway"
,
"Kenwee"
,
"Kenweigh"
,
"Kenwood"
,
"Kenwrick"
,
"Kenyon"
,
"Kenzi"
,
"Kenzie"
,
"Keon"
,
"Kepner"
,
"Keppel"
,
"Ker"
,
"Kerby"
,
"Kerek"
,
"Kerekes"
,
"Kerge"
,
"Keri"
,
"Keriann"
,
"Kerianne"
,
"Kerin"
,
"Kerk"
,
"Kerman"
,
"Kermie"
,
"Kermit"
,
"Kermy"
,
"Kern"
,
"Kernan"
,
"Kerns"
,
"Kerr"
,
"Kerri"
,
"Kerrie"
,
"Kerril"
,
"Kerrill"
,
"Kerrin"
,
"Kerrison"
,
"Kerry"
,
"Kersten"
,
"Kerstin"
,
"Kerwin"
,
"Kerwinn"
,
"Kerwon"
,
"Kery"
,
"Kesia"
,
"Kesley"
,
"Keslie"
,
"Kessel"
,
"Kessia"
,
"Kessiah"
,
"Kessler"
,
"Kester"
,
"Ketchan"
,
"Ketchum"
,
"Ketti"
,
"Kettie"
,
"Ketty"
,
"Keung"
,
"Kev"
,
"Kevan"
,
"Keven"
,
"Keverian"
,
"Keverne"
,
"Kevin"
,
"Kevina"
,
"Kevon"
,
"Kevyn"
,
"Key"
,
"Keyek"
,
"Keyes"
,
"Keynes"
,
"Keyser"
,
"Keyte"
,
"Kezer"
,
"Khai"
,
"Khajeh"
,
"Khalid"
,
"Khalil"
,
"Khalin"
,
"Khalsa"
,
"Khan"
,
"Khanna"
,
"Khano"
,
"Khichabia"
,
"Kho"
,
"Khorma"
,
"Khosrow"
,
"Khoury"
,
"Khudari"
,
"Ki"
,
"Kiah"
,
"Kial"
,
"Kidd"
,
"Kidder"
,
"Kiefer"
,
"Kieffer"
,
"Kieger"
,
"Kiehl"
,
"Kiel"
,
"Kiele"
,
"Kielty"
,
"Kienan"
,
"Kier"
,
"Kieran"
,
"Kiernan"
,
"Kiersten"
,
"Kikelia"
,
"Kiker"
,
"Kiki"
,
"Kila"
,
"Kilah"
,
"Kilan"
,
"Kilar"
,
"Kilbride"
,
"Kilby"
,
"Kile"
,
"Kiley"
,
"Kilgore"
,
"Kilian"
,
"Kilk"
,
"Killam"
,
"Killarney"
,
"Killen"
,
"Killian"
,
"Killie"
,
"Killigrew"
,
"Killion"
,
"Killoran"
,
"Killy"
,
"Kilmarx"
,
"Kilroy"
,
"Kim"
,
"Kimball"
,
"Kimbell"
,
"Kimber"
,
"Kimberlee"
,
"Kimberley"
,
"Kimberli"
,
"Kimberly"
,
"Kimberlyn"
,
"Kimble"
,
"Kimbra"
,
"Kimitri"
,
"Kimmel"
,
"Kimmi"
,
"Kimmie"
,
"Kimmy"
,
"Kimon"
,
"Kimura"
,
"Kin"
,
"Kinata"
,
"Kincaid"
,
"Kinch"
,
"Kinchen"
,
"Kind"
,
"Kindig"
,
"Kinelski"
,
"King"
,
"Kingdon"
,
"Kinghorn"
,
"Kingsbury"
,
"Kingsley"
,
"Kingsly"
,
"Kingston"
,
"Kinna"
,
"Kinnard"
,
"Kinney"
,
"Kinnie"
,
"Kinnon"
,
"Kinny"
,
"Kinsler"
,
"Kinsley"
,
"Kinsman"
,
"Kinson"
,
"Kinzer"
,
"Kiona"
,
"Kip"
,
"Kipp"
,
"Kippar"
,
"Kipper"
,
"Kippie"
,
"Kippy"
,
"Kipton"
,
"Kira"
,
"Kiran"
,
"Kirbee"
,
"Kirbie"
,
"Kirby"
,
"Kirch"
,
"Kirchner"
,
"Kiri"
,
"Kirima"
,
"Kirimia"
,
"Kirit"
,
"Kirk"
,
"Kirkpatrick"
,
"Kirkwood"
,
"Kironde"
,
"Kirsch"
,
"Kirschner"
,
"Kirshbaum"
,
"Kirst"
,
"Kirsten"
,
"Kirsteni"
,
"Kirsti"
,
"Kirstin"
,
"Kirstyn"
,
"Kirt"
,
"Kirtley"
,
"Kirven"
,
"Kirwin"
,
"Kisor"
,
"Kissee"
,
"Kissel"
,
"Kissiah"
,
"Kissie"
,
"Kissner"
,
"Kistner"
,
"Kisung"
,
"Kit"
,
"Kitchen"
,
"Kitti"
,
"Kittie"
,
"Kitty"
,
"Kiyohara"
,
"Kiyoshi"
,
"Kizzee"
,
"Kizzie"
,
"Kjersti"
,
"Klapp"
,
"Klara"
,
"Klarika"
,
"Klarrisa"
,
"Klatt"
,
"Klaus"
,
"Klayman"
,
"Klecka"
,
"Kleeman"
,
"Klehm"
,
"Kleiman"
,
"Klein"
,
"Kleinstein"
,
"Klemens"
,
"Klement"
,
"Klemm"
,
"Klemperer"
,
"Klenk"
,
"Kleon"
,
"Klepac"
,
"Kleper"
,
"Kletter"
,
"Kliber"
,
"Kliman"
,
"Kliment"
,
"Klimesh"
,
"Klina"
,
"Kline"
,
"Kling"
,
"Klingel"
,
"Klinger"
,
"Klinges"
,
"Klockau"
,
"Kloman"
,
"Klos"
,
"Kloster"
,
"Klotz"
,
"Klug"
,
"Kluge"
,
"Klump"
,
"Klusek"
,
"Klute"
,
"Knapp"
,
"Kneeland"
,
"Knepper"
,
"Knick"
,
"Knight"
,
"Knighton"
,
"Knipe"
,
"Knitter"
,
"Knobloch"
,
"Knoll"
,
"Knorring"
,
"Knowland"
,
"Knowle"
,
"Knowles"
,
"Knowling"
,
"Knowlton"
,
"Knox"
,
"Knudson"
,
"Knut"
,
"Knute"
,
"Knuth"
,
"Knutson"
,
"Ko"
,
"Koa"
,
"Koah"
,
"Koal"
,
"Koball"
,
"Kobe"
,
"Kobi"
,
"Koblas"
,
"Koblick"
,
"Koby"
,
"Kobylak"
,
"Koch"
,
"Koehler"
,
"Koenig"
,
"Koeninger"
,
"Koenraad"
,
"Koeppel"
,
"Koerlin"
,
"Koerner"
,
"Koetke"
,
"Koffler"
,
"Koffman"
,
"Koh"
,
"Kohl"
,
"Kohler"
,
"Kohn"
,
"Kokaras"
,
"Kokoruda"
,
"Kolb"
,
"Kolivas"
,
"Kolk"
,
"Koller"
,
"Kolnick"
,
"Kolnos"
,
"Kolodgie"
,
"Kolosick"
,
"Koloski"
,
"Kolva"
,
"Komara"
,
"Komarek"
,
"Komsa"
,
"Kondon"
,
"Kone"
,
"Kong"
,
"Konikow"
,
"Kono"
,
"Konopka"
,
"Konrad"
,
"Konstance"
,
"Konstantin"
,
"Konstantine"
,
"Konstanze"
,
"Konyn"
,
"Koo"
,
"Kooima"
,
"Koosis"
,
"Kopans"
,
"Kopaz"
,
"Kopp"
,
"Koppel"
,
"Kopple"
,
"Kora"
,
"Koral"
,
"Koralie"
,
"Koralle"
,
"Koran"
,
"Kordula"
,
"Kore"
,
"Korella"
,
"Koren"
,
"Korenblat"
,
"Koressa"
,
"Korey"
,
"Korff"
,
"Korfonta"
,
"Kori"
,
"Korie"
,
"Korman"
,
"Korney"
,
"Kornher"
,
"Korns"
,
"Korrie"
,
"Korry"
,
"Kort"
,
"Korten"
,
"Korwin"
,
"Korwun"
,
"Kory"
,
"Kosak"
,
"Kosaka"
,
"Kosel"
,
"Koser"
,
"Kosey"
,
"Kosiur"
,
"Koslo"
,
"Koss"
,
"Kosse"
,
"Kostival"
,
"Kostman"
,
"Kotick"
,
"Kotta"
,
"Kotto"
,
"Kotz"
,
"Kovacev"
,
"Kovacs"
,
"Koval"
,
"Kovar"
,
"Kowal"
,
"Kowalski"
,
"Kowatch"
,
"Kowtko"
,
"Koy"
,
"Koziara"
,
"Koziarz"
,
"Koziel"
,
"Kozloski"
,
"Kraft"
,
"Kragh"
,
"Krahling"
,
"Krahmer"
,
"Krakow"
,
"Krall"
,
"Kramer"
,
"Kramlich"
,
"Krantz"
,
"Kraska"
,
"Krasner"
,
"Krasnoff"
,
"Kraul"
,
"Kraus"
,
"Krause"
,
"Krauss"
,
"Kravits"
,
"Krawczyk"
,
"Kreager"
,
"Krebs"
,
"Kreda"
,
"Kreegar"
,
"Krefetz"
,
"Kreg"
,
"Kreiker"
,
"Krein"
,
"Kreindler"
,
"Kreiner"
,
"Kreis"
,
"Kreit"
,
"Kreitman"
,
"Krell"
,
"Kremer"
,
"Krenek"
,
"Krenn"
,
"Kresic"
,
"Kress"
,
"Krever"
,
"Kries"
,
"Krigsman"
,
"Krilov"
,
"Kris"
,
"Krischer"
,
"Krisha"
,
"Krishna"
,
"Krishnah"
,
"Krispin"
,
"Kriss"
,
"Krissie"
,
"Krissy"
,
"Krista"
,
"Kristal"
,
"Kristan"
,
"Kriste"
,
"Kristel"
,
"Kristen"
,
"Kristi"
,
"Kristian"
,
"Kristianson"
,
"Kristie"
,
"Kristien"
,
"Kristin"
,
"Kristina"
,
"Kristine"
,
"Kristo"
,
"Kristof"
,
"Kristofer"
,
"Kristoffer"
,
"Kristofor"
,
"Kristoforo"
,
"Kristopher"
,
"Kristos"
,
"Kristy"
,
"Kristyn"
,
"Krock"
,
"Kroll"
,
"Kronfeld"
,
"Krongold"
,
"Kronick"
,
"Kroo"
,
"Krucik"
,
"Krueger"
,
"Krug"
,
"Kruger"
,
"Krum"
,
"Krusche"
,
"Kruse"
,
"Krute"
,
"Kruter"
,
"Krutz"
,
"Krys"
,
"Kryska"
,
"Krysta"
,
"Krystal"
,
"Krystalle"
,
"Krystin"
,
"Krystle"
,
"Krystyna"
,
"Ku"
,
"Kubetz"
,
"Kubiak"
,
"Kubis"
,
"Kucik"
,
"Kudva"
,
"Kuebbing"
,
"Kuehn"
,
"Kuehnel"
,
"Kuhlman"
,
"Kuhn"
,
"Kulda"
,
"Kulseth"
,
"Kulsrud"
,
"Kumagai"
,
"Kumar"
,
"Kumler"
,
"Kung"
,
"Kunin"
,
"Kunkle"
,
"Kunz"
,
"Kuo"
,
"Kurland"
,
"Kurman"
,
"Kurr"
,
"Kursh"
,
"Kurt"
,
"Kurth"
,
"Kurtis"
,
"Kurtz"
,
"Kurtzig"
,
"Kurtzman"
,
"Kurys"
,
"Kurzawa"
,
"Kus"
,
"Kushner"
,
"Kusin"
,
"Kuska"
,
"Kussell"
,
"Kuster"
,
"Kutchins"
,
"Kuth"
,
"Kutzenco"
,
"Kutzer"
,
"Kwabena"
,
"Kwan"
,
"Kwang"
,
"Kwapong"
,
"Kwarteng"
,
"Kwasi"
,
"Kwei"
,
"Kwok"
,
"Kwon"
,
"Ky"
,
"Kyd"
,
"Kyl"
,
"Kyla"
,
"Kylah"
,
"Kylander"
,
"Kyle"
,
"Kylen"
,
"Kylie"
,
"Kylila"
,
"Kylstra"
,
"Kylynn"
,
"Kym"
,
"Kynan"
,
"Kyne"
,
"Kynthia"
,
"Kyriako"
,
"Kyrstin"
,
"Kyte"
,
"La"
,
"La Verne"
,
"LaBaw"
,
"LaMee"
,
"LaMonica"
,
"LaMori"
,
"LaRue"
,
"LaSorella"
,
"Laaspere"
,
"Laban"
,
"Labana"
,
"Laband"
,
"Labanna"
,
"Labannah"
,
"Labors"
,
"Lacagnia"
,
"Lacee"
,
"Lacefield"
,
"Lacey"
,
"Lach"
,
"Lachance"
,
"Lachish"
,
"Lachlan"
,
"Lachman"
,
"Lachus"
,
"Lacie"
,
"Lacombe"
,
"Lacy"
,
"Lad"
,
"Ladd"
,
"Laddie"
,
"Laddy"
,
"Laden"
,
"Ladew"
,
"Ladonna"
,
"Lady"
,
"Lael"
,
"Laetitia"
,
"Laflam"
,
"Lafleur"
,
"Laforge"
,
"Lagas"
,
"Lagasse"
,
"Lahey"
,
"Lai"
,
"Laidlaw"
,
"Lail"
,
"Laina"
,
"Laine"
,
"Lainey"
,
"Laing"
,
"Laird"
,
"Lais"
,
"Laise"
,
"Lait"
,
"Laith"
,
"Laius"
,
"Lakin"
,
"Laks"
,
"Laktasic"
,
"Lal"
,
"Lala"
,
"Lalage"
,
"Lali"
,
"Lalise"
,
"Lalita"
,
"Lalitta"
,
"Lalittah"
,
"Lalla"
,
"Lallage"
,
"Lally"
,
"Lalo"
,
"Lam"
,
"Lamar"
,
"Lamarre"
,
"Lamb"
,
"Lambard"
,
"Lambart"
,
"Lambert"
,
"Lamberto"
,
"Lambertson"
,
"Lambrecht"
,
"Lamdin"
,
"Lammond"
,
"Lamond"
,
"Lamont"
,
"Lamoree"
,
"Lamoureux"
,
"Lamp"
,
"Lampert"
,
"Lamphere"
,
"Lamprey"
,
"Lamrert"
,
"Lamrouex"
,
"Lamson"
,
"Lan"
,
"Lana"
,
"Lanae"
,
"Lanam"
,
"Lananna"
,
"Lancaster"
,
"Lance"
,
"Lancelle"
,
"Lancelot"
,
"Lancey"
,
"Lanctot"
,
"Land"
,
"Landa"
,
"Landahl"
,
"Landan"
,
"Landau"
,
"Landbert"
,
"Landel"
,
"Lander"
,
"Landers"
,
"Landes"
,
"Landing"
,
"Landis"
,
"Landmeier"
,
"Landon"
,
"Landre"
,
"Landri"
,
"Landrum"
,
"Landry"
,
"Landsman"
,
"Landy"
,
"Lane"
,
"Lanette"
,
"Laney"
,
"Lanford"
,
"Lanfri"
,
"Lang"
,
"Langan"
,
"Langbehn"
,
"Langdon"
,
"Lange"
,
"Langelo"
,
"Langer"
,
"Langham"
,
"Langill"
,
"Langille"
,
"Langley"
,
"Langsdon"
,
"Langston"
,
"Lani"
,
"Lanie"
,
"Lanita"
,
"Lankton"
,
"Lanna"
,
"Lanni"
,
"Lannie"
,
"Lanny"
,
"Lansing"
,
"Lanta"
,
"Lantha"
,
"Lanti"
,
"Lantz"
,
"Lanza"
,
"Lapham"
,
"Lapides"
,
"Lapointe"
,
"Lapotin"
,
"Lara"
,
"Laraine"
,
"Larcher"
,
"Lardner"
,
"Lareena"
,
"Lareine"
,
"Larena"
,
"Larentia"
,
"Laresa"
,
"Largent"
,
"Lari"
,
"Larianna"
,
"Larimer"
,
"Larimor"
,
"Larimore"
,
"Larina"
,
"Larine"
,
"Laris"
,
"Larisa"
,
"Larissa"
,
"Lark"
,
"Larkin"
,
"Larkins"
,
"Larner"
,
"Larochelle"
,
"Laroy"
,
"Larrabee"
,
"Larrie"
,
"Larrisa"
,
"Larry"
,
"Lars"
,
"Larsen"
,
"Larson"
,
"Laryssa"
,
"Lasala"
,
"Lash"
,
"Lashar"
,
"Lashoh"
,
"Lashond"
,
"Lashonda"
,
"Lashonde"
,
"Lashondra"
,
"Lasko"
,
"Lasky"
,
"Lasley"
,
"Lasonde"
,
"Laspisa"
,
"Lasser"
,
"Lassiter"
,
"Laszlo"
,
"Lat"
,
"Latashia"
,
"Latea"
,
"Latham"
,
"Lathan"
,
"Lathe"
,
"Lathrop"
,
"Lathrope"
,
"Lati"
,
"Latia"
,
"Latif"
,
"Latimer"
,
"Latimore"
,
"Latin"
,
"Latini"
,
"Latisha"
,
"Latona"
,
"Latonia"
,
"Latoniah"
,
"Latouche"
,
"Latoya"
,
"Latoye"
,
"Latoyia"
,
"Latreece"
,
"Latreese"
,
"Latrell"
,
"Latrena"
,
"Latreshia"
,
"Latrice"
,
"Latricia"
,
"Latrina"
,
"Latt"
,
"Latta"
,
"Latterll"
,
"Lattie"
,
"Lattimer"
,
"Latton"
,
"Lattonia"
,
"Latty"
,
"Latvina"
,
"Lau"
,
"Lauber"
,
"Laubin"
,
"Laud"
,
"Lauder"
,
"Lauer"
,
"Laufer"
,
"Laughlin"
,
"Laughry"
,
"Laughton"
,
"Launce"
,
"Launcelot"
,
"Laundes"
,
"Laura"
,
"Lauraine"
,
"Laural"
,
"Lauralee"
,
"Laurance"
,
"Laure"
,
"Lauree"
,
"Laureen"
,
"Laurel"
,
"Laurella"
,
"Lauren"
,
"Laurena"
,
"Laurence"
,
"Laurene"
,
"Laurens"
,
"Laurent"
,
"Laurentia"
,
"Laurentium"
,
"Lauretta"
,
"Laurette"
,
"Lauri"
,
"Laurianne"
,
"Laurice"
,
"Laurie"
,
"Laurin"
,
"Laurinda"
,
"Laurita"
,
"Lauritz"
,
"Lauro"
,
"Lauryn"
,
"Lauter"
,
"Laux"
,
"Lauzon"
,
"Laval"
,
"Laveen"
,
"Lavella"
,
"Lavelle"
,
"Laven"
,
"Lavena"
,
"Lavern"
,
"Laverna"
,
"Laverne"
,
"Lavery"
,
"Lavina"
,
"Lavine"
,
"Lavinia"
,
"Lavinie"
,
"Lavoie"
,
"Lavona"
,
"Law"
,
"Lawford"
,
"Lawler"
,
"Lawley"
,
"Lawlor"
,
"Lawrence"
,
"Lawrenson"
,
"Lawry"
,
"Laws"
,
"Lawson"
,
"Lawton"
,
"Lawtun"
,
"Lay"
,
"Layla"
,
"Layman"
,
"Layne"
,
"Layney"
,
"Layton"
,
"Lazar"
,
"Lazare"
,
"Lazaro"
,
"Lazaruk"
,
"Lazarus"
,
"Lazes"
,
"Lazor"
,
"Lazos"
,
"Le"
,
"LeCroy"
,
"LeDoux"
,
"LeMay"
,
"LeRoy"
,
"LeVitus"
,
"Lea"
,
"Leach"
,
"Leacock"
,
"Leah"
,
"Leahey"
,
"Leake"
,
"Leal"
,
"Lean"
,
"Leanard"
,
"Leander"
,
"Leandra"
,
"Leandre"
,
"Leandro"
,
"Leann"
,
"Leanna"
,
"Leanne"
,
"Leanor"
,
"Leanora"
,
"Leaper"
,
"Lear"
,
"Leary"
,
"Leasia"
,
"Leatri"
,
"Leatrice"
,
"Leavelle"
,
"Leavitt"
,
"Leavy"
,
"Leban"
,
"Lebar"
,
"Lebaron"
,
"Lebbie"
,
"Leblanc"
,
"Lebna"
,
"Leboff"
,
"Lechner"
,
"Lecia"
,
"Leckie"
,
"Leclair"
,
"Lectra"
,
"Leda"
,
"Ledah"
,
"Ledda"
,
"Leddy"
,
"Ledeen"
,
"Lederer"
,
"Lee"
,
"LeeAnn"
,
"Leeann"
,
"Leeanne"
,
"Leede"
,
"Leeke"
,
"Leela"
,
"Leelah"
,
"Leeland"
,
"Leena"
,
"Leesa"
,
"Leese"
,
"Leesen"
,
"Leeth"
,
"Leff"
,
"Leffen"
,
"Leffert"
,
"Lefkowitz"
,
"Lefton"
,
"Leftwich"
,
"Lefty"
,
"Leggat"
,
"Legge"
,
"Leggett"
,
"Legra"
,
"Lehet"
,
"Lehman"
,
"Lehmann"
,
"Lehrer"
,
"Leia"
,
"Leibman"
,
"Leicester"
,
"Leid"
,
"Leif"
,
"Leifer"
,
"Leifeste"
,
"Leigh"
,
"Leigha"
,
"Leighland"
,
"Leighton"
,
"Leila"
,
"Leilah"
,
"Leilani"
,
"Leipzig"
,
"Leis"
,
"Leiser"
,
"Leisha"
,
"Leitao"
,
"Leith"
,
"Leitman"
,
"Lejeune"
,
"Lek"
,
"Lela"
,
"Lelah"
,
"Leland"
,
"Leler"
,
"Lelia"
,
"Lelith"
,
"Lello"
,
"Lem"
,
"Lema"
,
"Lemaceon"
,
"Lemal"
,
"Lemar"
,
"Lemcke"
,
"Lemieux"
,
"Lemire"
,
"Lemkul"
,
"Lemmie"
,
"Lemmuela"
,
"Lemmueu"
,
"Lemmy"
,
"Lemon"
,
"Lempres"
,
"Lemuel"
,
"Lemuela"
,
"Lemuelah"
,
"Len"
,
"Lena"
,
"Lenard"
,
"Lenci"
,
"Lenee"
,
"Lenes"
,
"Lenette"
,
"Lengel"
,
"Lenhard"
,
"Lenhart"
,
"Lenka"
,
"Lenna"
,
"Lennard"
,
"Lenni"
,
"Lennie"
,
"Lenno"
,
"Lennon"
,
"Lennox"
,
"Lenny"
,
"Leno"
,
"Lenora"
,
"Lenore"
,
"Lenox"
,
"Lenrow"
,
"Lenssen"
,
"Lentha"
,
"Lenwood"
,
"Lenz"
,
"Lenzi"
,
"Leo"
,
"Leod"
,
"Leodora"
,
"Leoine"
,
"Leola"
,
"Leoline"
,
"Leon"
,
"Leona"
,
"Leonanie"
,
"Leonard"
,
"Leonardi"
,
"Leonardo"
,
"Leone"
,
"Leonelle"
,
"Leonerd"
,
"Leong"
,
"Leonhard"
,
"Leoni"
,
"Leonid"
,
"Leonidas"
,
"Leonie"
,
"Leonor"
,
"Leonora"
,
"Leonore"
,
"Leonsis"
,
"Leonteen"
,
"Leontina"
,
"Leontine"
,
"Leontyne"
,
"Leopold"
,
"Leopoldeen"
,
"Leopoldine"
,
"Leor"
,
"Leora"
,
"Leotie"
,
"Lepine"
,
"Lepley"
,
"Lepp"
,
"Lepper"
,
"Lerner"
,
"Leroi"
,
"Leroy"
,
"Les"
,
"Lesak"
,
"Leschen"
,
"Lesh"
,
"Leshia"
,
"Lesko"
,
"Leslee"
,
"Lesley"
,
"Lesli"
,
"Leslie"
,
"Lesly"
,
"Lessard"
,
"Lesser"
,
"Lesslie"
,
"Lester"
,
"Lesya"
,
"Let"
,
"Leta"
,
"Letch"
,
"Letha"
,
"Lethia"
,
"Leticia"
,
"Letisha"
,
"Letitia"
,
"Letizia"
,
"Letreece"
,
"Letrice"
,
"Letsou"
,
"Letta"
,
"Lette"
,
"Letti"
,
"Lettie"
,
"Letty"
,
"Leund"
,
"Leupold"
,
"Lev"
,
"Levan"
,
"Levana"
,
"Levania"
,
"Levenson"
,
"Leventhal"
,
"Leventis"
,
"Leverett"
,
"Leverick"
,
"Leveridge"
,
"Leveroni"
,
"Levesque"
,
"Levey"
,
"Levi"
,
"Levin"
,
"Levina"
,
"Levine"
,
"Levins"
,
"Levinson"
,
"Levison"
,
"Levitan"
,
"Levitt"
,
"Levon"
,
"Levona"
,
"Levy"
,
"Lew"
,
"Lewak"
,
"Lewan"
,
"Lewanna"
,
"Lewellen"
,
"Lewendal"
,
"Lewert"
,
"Lewes"
,
"Lewie"
,
"Lewin"
,
"Lewis"
,
"Lewison"
,
"Lewiss"
,
"Lewls"
,
"Lewse"
,
"Lexi"
,
"Lexie"
,
"Lexine"
,
"Lexis"
,
"Lexy"
,
"Ley"
,
"Leyes"
,
"Leyla"
,
"Lezley"
,
"Lezlie"
,
"Lhary"
,
"Li"
,
"Lia"
,
"Liam"
,
"Lian"
,
"Liana"
,
"Liane"
,
"Lianna"
,
"Lianne"
,
"Lias"
,
"Liatrice"
,
"Liatris"
,
"Lib"
,
"Liba"
,
"Libb"
,
"Libbey"
,
"Libbi"
,
"Libbie"
,
"Libbna"
,
"Libby"
,
"Libenson"
,
"Liberati"
,
"Libna"
,
"Libnah"
,
"Liborio"
,
"Libove"
,
"Libre"
,
"Licastro"
,
"Licha"
,
"Licht"
,
"Lichtenfeld"
,
"Lichter"
,
"Licko"
,
"Lida"
,
"Lidah"
,
"Lidda"
,
"Liddie"
,
"Liddle"
,
"Liddy"
,
"Lidia"
,
"Lidstone"
,
"Lieberman"
,
"Liebermann"
,
"Liebman"
,
"Liebowitz"
,
"Liederman"
,
"Lief"
,
"Lienhard"
,
"Liesa"
,
"Lietman"
,
"Liew"
,
"Lifton"
,
"Ligetti"
,
"Liggett"
,
"Liggitt"
,
"Light"
,
"Lightfoot"
,
"Lightman"
,
"Lil"
,
"Lila"
,
"Lilac"
,
"Lilah"
,
"Lilas"
,
"Lili"
,
"Lilia"
,
"Lilian"
,
"Liliane"
,
"Lilias"
,
"Lilith"
,
"Lilithe"
,
"Lilla"
,
"Lilli"
,
"Lillian"
,
"Lillie"
,
"Lillis"
,
"Lillith"
,
"Lilllie"
,
"Lilly"
,
"Lillywhite"
,
"Lily"
,
"Lilyan"
,
"Lilybel"
,
"Lilybelle"
,
"Lim"
,
"Liman"
,
"Limann"
,
"Limber"
,
"Limbert"
,
"Limemann"
,
"Limoli"
,
"Lin"
,
"Lina"
,
"Linc"
,
"Lincoln"
,
"Lind"
,
"Linda"
,
"Lindahl"
,
"Lindberg"
,
"Lindblad"
,
"Lindbom"
,
"Lindeberg"
,
"Lindell"
,
"Lindemann"
,
"Linden"
,
"Linder"
,
"Linders"
,
"Lindgren"
,
"Lindholm"
,
"Lindi"
,
"Lindie"
,
"Lindley"
,
"Lindly"
,
"Lindner"
,
"Lindo"
,
"Lindon"
,
"Lindsay"
,
"Lindsey"
,
"Lindsley"
,
"Lindsy"
,
"Lindy"
,
"Line"
,
"Linea"
,
"Linehan"
,
"Linell"
,
"Linet"
,
"Linetta"
,
"Linette"
,
"Ling"
,
"Lingwood"
,
"Linis"
,
"Link"
,
"Linker"
,
"Linkoski"
,
"Linn"
,
"Linnea"
,
"Linnell"
,
"Linneman"
,
"Linnet"
,
"Linnette"
,
"Linnie"
,
"Linoel"
,
"Linsk"
,
"Linskey"
,
"Linson"
,
"Linus"
,
"Linzer"
,
"Linzy"
,
"Lion"
,
"Lionel"
,
"Lionello"
,
"Lipcombe"
,
"Lipfert"
,
"Lipinski"
,
"Lipkin"
,
"Lipman"
,
"Liponis"
,
"Lipp"
,
"Lippold"
,
"Lipps"
,
"Lipscomb"
,
"Lipsey"
,
"Lipski"
,
"Lipson"
,
"Lira"
,
"Liris"
,
"Lisa"
,
"Lisabet"
,
"Lisabeth"
,
"Lisan"
,
"Lisandra"
,
"Lisbeth"
,
"Liscomb"
,
"Lise"
,
"Lisetta"
,
"Lisette"
,
"Lisha"
,
"Lishe"
,
"Lisk"
,
"Lisle"
,
"Liss"
,
"Lissa"
,
"Lissak"
,
"Lissi"
,
"Lissie"
,
"Lissner"
,
"Lissy"
,
"Lister"
,
"Lita"
,
"Litch"
,
"Litha"
,
"Lithea"
,
"Litman"
,
"Litt"
,
"Litta"
,
"Littell"
,
"Little"
,
"Littlejohn"
,
"Littman"
,
"Litton"
,
"Liu"
,
"Liuka"
,
"Liv"
,
"Liva"
,
"Livesay"
,
"Livi"
,
"Livia"
,
"Livingston"
,
"Livingstone"
,
"Livvi"
,
"Livvie"
,
"Livvy"
,
"Livvyy"
,
"Livy"
,
"Liz"
,
"Liza"
,
"Lizabeth"
,
"Lizbeth"
,
"Lizette"
,
"Lizzie"
,
"Lizzy"
,
"Ljoka"
,
"Llewellyn"
,
"Llovera"
,
"Lloyd"
,
"Llywellyn"
,
"Loar"
,
"Loats"
,
"Lobel"
,
"Lobell"
,
"Lochner"
,
"Lock"
,
"Locke"
,
"Lockhart"
,
"Locklin"
,
"Lockwood"
,
"Lodge"
,
"Lodhia"
,
"Lodi"
,
"Lodie"
,
"Lodmilla"
,
"Lodovico"
,
"Lody"
,
"Loeb"
,
"Loella"
,
"Loesceke"
,
"Loferski"
,
"Loftis"
,
"Loftus"
,
"Logan"
,
"Loggia"
,
"Loggins"
,
"Loginov"
,
"Lohman"
,
"Lohner"
,
"Lohrman"
,
"Lohse"
,
"Lois"
,
"Loise"
,
"Lola"
,
"Lolande"
,
"Lolanthe"
,
"Lole"
,
"Loleta"
,
"Lolita"
,
"Lolly"
,
"Loma"
,
"Lomasi"
,
"Lomax"
,
"Lombard"
,
"Lombardi"
,
"Lombardo"
,
"Lombardy"
,
"Lon"
,
"Lona"
,
"London"
,
"Londoner"
,
"Lonee"
,
"Lonergan"
,
"Long"
,
"Longan"
,
"Longawa"
,
"Longerich"
,
"Longfellow"
,
"Longley"
,
"Longmire"
,
"Longo"
,
"Longtin"
,
"Longwood"
,
"Loni"
,
"Lonier"
,
"Lonna"
,
"Lonnard"
,
"Lonne"
,
"Lonni"
,
"Lonnie"
,
"Lonny"
,
"Lontson"
,
"Loomis"
,
"Loos"
,
"Lopes"
,
"Lopez"
,
"Lora"
,
"Lorain"
,
"Loraine"
,
"Loralee"
,
"Loralie"
,
"Loralyn"
,
"Loram"
,
"Lorant"
,
"Lord"
,
"Lordan"
,
"Loredana"
,
"Loredo"
,
"Loree"
,
"Loreen"
,
"Lorelei"
,
"Lorelie"
,
"Lorelle"
,
"Loren"
,
"Lorena"
,
"Lorene"
,
"Lorens"
,
"Lorenz"
,
"Lorenza"
,
"Lorenzana"
,
"Lorenzo"
,
"Loresz"
,
"Loretta"
,
"Lorette"
,
"Lori"
,
"Loria"
,
"Lorianna"
,
"Lorianne"
,
"Lorie"
,
"Lorien"
,
"Lorilee"
,
"Lorilyn"
,
"Lorimer"
,
"Lorin"
,
"Lorinda"
,
"Lorine"
,
"Loriner"
,
"Loring"
,
"Loris"
,
"Lorita"
,
"Lorn"
,
"Lorna"
,
"Lorne"
,
"Lorola"
,
"Lorolla"
,
"Lorollas"
,
"Lorou"
,
"Lorraine"
,
"Lorrayne"
,
"Lorri"
,
"Lorrie"
,
"Lorrimer"
,
"Lorrimor"
,
"Lorrin"
,
"Lorry"
,
"Lorsung"
,
"Lorusso"
,
"Lory"
,
"Lose"
,
"Loseff"
,
"Loss"
,
"Lossa"
,
"Losse"
,
"Lot"
,
"Lothair"
,
"Lothaire"
,
"Lothar"
,
"Lothario"
,
"Lotson"
,
"Lotta"
,
"Lotte"
,
"Lotti"
,
"Lottie"
,
"Lotty"
,
"Lotus"
,
"Lotz"
,
"Lou"
,
"Louanna"
,
"Louanne"
,
"Louella"
,
"Lough"
,
"Lougheed"
,
"Loughlin"
,
"Louie"
,
"Louis"
,
"Louisa"
,
"Louise"
,
"Louisette"
,
"Louls"
,
"Lounge"
,
"Lourdes"
,
"Lourie"
,
"Louth"
,
"Loutitia"
,
"Loux"
,
"Lovash"
,
"Lovato"
,
"Love"
,
"Lovel"
,
"Lovell"
,
"Loveridge"
,
"Lovering"
,
"Lovett"
,
"Lovich"
,
"Lovmilla"
,
"Low"
,
"Lowe"
,
"Lowell"
,
"Lowenstein"
,
"Lowenstern"
,
"Lower"
,
"Lowery"
,
"Lowis"
,
"Lowndes"
,
"Lowney"
,
"Lowrance"
,
"Lowrie"
,
"Lowry"
,
"Lowson"
,
"Loy"
,
"Loyce"
,
"Loydie"
,
"Lozano"
,
"Lozar"
,
"Lu"
,
"Luana"
,
"Luane"
,
"Luann"
,
"Luanne"
,
"Luanni"
,
"Luba"
,
"Lubba"
,
"Lubbi"
,
"Lubbock"
,
"Lubeck"
,
"Luben"
,
"Lubet"
,
"Lubin"
,
"Lubow"
,
"Luby"
,
"Luca"
,
"Lucais"
,
"Lucania"
,
"Lucas"
,
"Lucchesi"
,
"Luce"
,
"Lucey"
,
"Lucho"
,
"Luci"
,
"Lucia"
,
"Lucian"
,
"Luciana"
,
"Luciano"
,
"Lucias"
,
"Lucic"
,
"Lucie"
,
"Lucien"
,
"Lucienne"
,
"Lucier"
,
"Lucila"
,
"Lucilia"
,
"Lucilla"
,
"Lucille"
,
"Lucina"
,
"Lucinda"
,
"Lucine"
,
"Lucio"
,
"Lucita"
,
"Lucius"
,
"Luckett"
,
"Luckin"
,
"Lucky"
,
"Lucrece"
,
"Lucretia"
,
"Lucy"
,
"Lud"
,
"Ludeman"
,
"Ludewig"
,
"Ludie"
,
"Ludlew"
,
"Ludlow"
,
"Ludly"
,
"Ludmilla"
,
"Ludovick"
,
"Ludovico"
,
"Ludovika"
,
"Ludvig"
,
"Ludwig"
,
"Ludwigg"
,
"Ludwog"
,
"Luebke"
,
"Luedtke"
,
"Luehrmann"
,
"Luella"
,
"Luelle"
,
"Lugar"
,
"Lugo"
,
"Luhe"
,
"Luhey"
,
"Luht"
,
"Luigi"
,
"Luigino"
,
"Luing"
,
"Luis"
,
"Luisa"
,
"Luise"
,
"Luiza"
,
"Lukas"
,
"Lukash"
,
"Lukasz"
,
"Luke"
,
"Lukey"
,
"Lukin"
,
"Lula"
,
"Lulita"
,
"Lull"
,
"Lulu"
,
"Lumbard"
,
"Lumbye"
,
"Lumpkin"
,
"Luna"
,
"Lund"
,
"Lundberg"
,
"Lundeen"
,
"Lundell"
,
"Lundgren"
,
"Lundin"
,
"Lundquist"
,
"Lundt"
,
"Lune"
,
"Lunetta"
,
"Lunette"
,
"Lunn"
,
"Lunna"
,
"Lunneta"
,
"Lunnete"
,
"Lunseth"
,
"Lunsford"
,
"Lunt"
,
"Luo"
,
"Lupe"
,
"Lupee"
,
"Lupien"
,
"Lupita"
,
"Lura"
,
"Lurette"
,
"Lurie"
,
"Lurleen"
,
"Lurlene"
,
"Lurline"
,
"Lusa"
,
"Lussi"
,
"Lussier"
,
"Lust"
,
"Lustick"
,
"Lustig"
,
"Lusty"
,
"Lutero"
,
"Luthanen"
,
"Luther"
,
"Luttrell"
,
"Luwana"
,
"Lux"
,
"Luz"
,
"Luzader"
,
"Ly"
,
"Lyall"
,
"Lyckman"
,
"Lyda"
,
"Lydell"
,
"Lydia"
,
"Lydie"
,
"Lydon"
,
"Lyell"
,
"Lyford"
,
"Lyle"
,
"Lyman"
,
"Lymann"
,
"Lymn"
,
"Lyn"
,
"Lynch"
,
"Lynd"
,
"Lynda"
,
"Lynde"
,
"Lyndel"
,
"Lyndell"
,
"Lynden"
,
"Lyndes"
,
"Lyndon"
,
"Lyndsay"
,
"Lyndsey"
,
"Lyndsie"
,
"Lyndy"
,
"Lynea"
,
"Lynelle"
,
"Lynett"
,
"Lynette"
,
"Lynn"
,
"Lynna"
,
"Lynne"
,
"Lynnea"
,
"Lynnell"
,
"Lynnelle"
,
"Lynnet"
,
"Lynnett"
,
"Lynnette"
,
"Lynnworth"
,
"Lyns"
,
"Lynsey"
,
"Lynus"
,
"Lyon"
,
"Lyons"
,
"Lyontine"
,
"Lyris"
,
"Lysander"
,
"Lyssa"
,
"Lytle"
,
"Lytton"
,
"Lyudmila"
,
"Ma"
,
"Maag"
,
"Mab"
,
"Mabel"
,
"Mabelle"
,
"Mable"
,
"Mac"
,
"MacCarthy"
,
"MacDermot"
,
"MacDonald"
,
"MacDonell"
,
"MacDougall"
,
"MacEgan"
,
"MacFadyn"
,
"MacFarlane"
,
"MacGregor"
,
"MacGuiness"
,
"MacIlroy"
,
"MacIntosh"
,
"MacIntyre"
,
"MacKay"
,
"MacKenzie"
,
"MacLaine"
,
"MacLay"
,
"MacLean"
,
"MacLeod"
,
"MacMahon"
,
"MacMillan"
,
"MacMullin"
,
"MacNair"
,
"MacNamara"
,
"MacPherson"
,
"MacRae"
,
"MacSwan"
,
"Macario"
,
"Maccarone"
,
"Mace"
,
"Macegan"
,
"Macey"
,
"Machos"
,
"Machute"
,
"Machutte"
,
"Mack"
,
"Mackenie"
,
"Mackenzie"
,
"Mackey"
,
"Mackie"
,
"Mackintosh"
,
"Mackler"
,
"Macknair"
,
"Mackoff"
,
"Macnair"
,
"Macomber"
,
"Macri"
,
"Macur"
,
"Macy"
,
"Mada"
,
"Madai"
,
"Madaih"
,
"Madalena"
,
"Madalyn"
,
"Madancy"
,
"Madaras"
,
"Maddalena"
,
"Madden"
,
"Maddeu"
,
"Maddi"
,
"Maddie"
,
"Maddis"
,
"Maddock"
,
"Maddocks"
,
"Maddox"
,
"Maddy"
,
"Madea"
,
"Madel"
,
"Madelaine"
,
"Madeleine"
,
"Madelena"
,
"Madelene"
,
"Madelin"
,
"Madelina"
,
"Madeline"
,
"Madella"
,
"Madelle"
,
"Madelon"
,
"Madelyn"
,
"Madge"
,
"Madi"
,
"Madian"
,
"Madid"
,
"Madigan"
,
"Madison"
,
"Madlen"
,
"Madlin"
,
"Madoc"
,
"Madonia"
,
"Madonna"
,
"Madora"
,
"Madox"
,
"Madra"
,
"Madriene"
,
"Madson"
,
"Mady"
,
"Mae"
,
"Maegan"
,
"Maeve"
,
"Mafala"
,
"Mafalda"
,
"Maffa"
,
"Maffei"
,
"Mag"
,
"Magan"
,
"Magas"
,
"Magavern"
,
"Magbie"
,
"Magda"
,
"Magdaia"
,
"Magdala"
,
"Magdalen"
,
"Magdalena"
,
"Magdalene"
,
"Magdau"
,
"Magee"
,
"Magel"
,
"Magen"
,
"Magena"
,
"Mages"
,
"Maggee"
,
"Maggi"
,
"Maggie"
,
"Maggio"
,
"Maggs"
,
"Maggy"
,
"Maghutte"
,
"Magill"
,
"Magna"
,
"Magner"
,
"Magnien"
,
"Magnolia"
,
"Magnum"
,
"Magnus"
,
"Magnuson"
,
"Magnusson"
,
"Magocsi"
,
"Magree"
,
"Maguire"
,
"Magulac"
,
"Mahala"
,
"Mahalia"
,
"Mahan"
,
"Mahau"
,
"Maher"
,
"Mahla"
,
"Mahmoud"
,
"Mahmud"
,
"Mahon"
,
"Mahoney"
,
"Maia"
,
"Maiah"
,
"Maibach"
,
"Maible"
,
"Maice"
,
"Maida"
,
"Maidel"
,
"Maidie"
,
"Maidy"
,
"Maier"
,
"Maiga"
,
"Maighdiln"
,
"Maighdlin"
,
"Mailand"
,
"Main"
,
"Mainis"
,
"Maiocco"
,
"Mair"
,
"Maire"
,
"Maise"
,
"Maisel"
,
"Maisey"
,
"Maisie"
,
"Maison"
,
"Maite"
,
"Maitilde"
,
"Maitland"
,
"Maitund"
,
"Maje"
,
"Majka"
,
"Major"
,
"Mak"
,
"Makell"
,
"Maker"
,
"Mal"
,
"Mala"
,
"Malachi"
,
"Malachy"
,
"Malamud"
,
"Malamut"
,
"Malan"
,
"Malanie"
,
"Malarkey"
,
"Malaspina"
,
"Malca"
,
"Malcah"
,
"Malchus"
,
"Malchy"
,
"Malcolm"
,
"Malcom"
,
"Malda"
,
"Maleeny"
,
"Malek"
,
"Maleki"
,
"Malena"
,
"Malet"
,
"Maletta"
,
"Mali"
,
"Malia"
,
"Malik"
,
"Malin"
,
"Malina"
,
"Malinda"
,
"Malinde"
,
"Malinin"
,
"Malinowski"
,
"Malissa"
,
"Malissia"
,
"Malita"
,
"Malka"
,
"Malkah"
,
"Malkin"
,
"Mall"
,
"Mallen"
,
"Maller"
,
"Malley"
,
"Mallin"
,
"Mallina"
,
"Mallis"
,
"Mallissa"
,
"Malloch"
,
"Mallon"
,
"Mallorie"
,
"Mallory"
,
"Malloy"
,
"Malo"
,
"Malone"
,
"Maloney"
,
"Malonis"
,
"Malony"
,
"Malorie"
,
"Malory"
,
"Maloy"
,
"Malti"
,
"Maltz"
,
"Maltzman"
,
"Malva"
,
"Malvia"
,
"Malvie"
,
"Malvin"
,
"Malvina"
,
"Malvino"
,
"Malynda"
,
"Mame"
,
"Mamie"
,
"Mamoun"
,
"Man"
,
"Manaker"
,
"Manara"
,
"Manard"
,
"Manchester"
,
"Mancino"
,
"Manda"
,
"Mandal"
,
"Mandel"
,
"Mandelbaum"
,
"Mandell"
,
"Mandeville"
,
"Mandi"
,
"Mandie"
,
"Mandle"
,
"Mandler"
,
"Mandy"
,
"Mandych"
,
"Manella"
,
"Manfred"
,
"Manheim"
,
"Mani"
,
"Manley"
,
"Manlove"
,
"Manly"
,
"Mann"
,
"Mannes"
,
"Mannie"
,
"Manning"
,
"Manno"
,
"Mannos"
,
"Mannuela"
,
"Manny"
,
"Mano"
,
"Manoff"
,
"Manolo"
,
"Manon"
,
"Manouch"
,
"Mansfield"
,
"Manson"
,
"Mansoor"
,
"Mansur"
,
"Manthei"
,
"Manton"
,
"Manuel"
,
"Manuela"
,
"Manus"
,
"Manvel"
,
"Manvell"
,
"Manvil"
,
"Manville"
,
"Manwell"
,
"Manya"
,
"Mapel"
,
"Mapes"
,
"Maples"
,
"Mar"
,
"Mara"
,
"Marabel"
,
"Marabelle"
,
"Marala"
,
"Marasco"
,
"Marashio"
,
"Marbut"
,
"Marc"
,
"Marceau"
,
"Marcel"
,
"Marcela"
,
"Marcelia"
,
"Marcell"
,
"Marcella"
,
"Marcelle"
,
"Marcellina"
,
"Marcelline"
,
"Marcello"
,
"Marcellus"
,
"Marcelo"
,
"March"
,
"Marchak"
,
"Marchal"
,
"Marchall"
,
"Marchelle"
,
"Marchese"
,
"Marci"
,
"Marcia"
,
"Marciano"
,
"Marcie"
,
"Marcile"
,
"Marcille"
,
"Marcin"
,
"Marco"
,
"Marcos"
,
"Marcoux"
,
"Marcus"
,
"Marcy"
,
"Marden"
,
"Marder"
,
"Marduk"
,
"Mareah"
,
"Marek"
,
"Marela"
,
"Mareld"
,
"Marelda"
,
"Marella"
,
"Marelya"
,
"Maren"
,
"Marena"
,
"Marentic"
,
"Maressa"
,
"Maretz"
,
"Marga"
,
"Margalit"
,
"Margalo"
,
"Margaret"
,
"Margareta"
,
"Margarete"
,
"Margaretha"
,
"Margarethe"
,
"Margaretta"
,
"Margarette"
,
"Margarida"
,
"Margarita"
,
"Margaux"
,
"Marge"
,
"Margeaux"
,
"Margery"
,
"Marget"
,
"Margette"
,
"Margetts"
,
"Margherita"
,
"Margi"
,
"Margie"
,
"Margit"
,
"Margo"
,
"Margot"
,
"Margret"
,
"Margreta"
,
"Marguerie"
,
"Marguerita"
,
"Marguerite"
,
"Margy"
,
"Mari"
,
"Maria"
,
"Mariam"
,
"Marian"
,
"Mariana"
,
"Mariand"
,
"Mariande"
,
"Mariandi"
,
"Mariann"
,
"Marianna"
,
"Marianne"
,
"Mariano"
,
"Maribel"
,
"Maribelle"
,
"Maribeth"
,
"Marice"
,
"Maridel"
,
"Marie"
,
"Marie-Ann"
,
"Marie-Jeanne"
,
"Marieann"
,
"Mariejeanne"
,
"Mariel"
,
"Mariele"
,
"Marielle"
,
"Mariellen"
,
"Marienthal"
,
"Marietta"
,
"Mariette"
,
"Marigold"
,
"Marigolda"
,
"Marigolde"
,
"Marijane"
,
"Marijn"
,
"Marijo"
,
"Marika"
,
"Mariken"
,
"Mariko"
,
"Maril"
,
"Marilee"
,
"Marilin"
,
"Marilla"
,
"Marillin"
,
"Marilou"
,
"Marilyn"
,
"Marin"
,
"Marina"
,
"Marinelli"
,
"Marinna"
,
"Marino"
,
"Mario"
,
"Marion"
,
"Mariquilla"
,
"Maris"
,
"Marisa"
,
"Mariska"
,
"Marissa"
,
"Marita"
,
"Maritsa"
,
"Marius"
,
"Mariya"
,
"Marj"
,
"Marja"
,
"Marjana"
,
"Marje"
,
"Marji"
,
"Marjie"
,
"Marjorie"
,
"Marjory"
,
"Marjy"
,
"Mark"
,
"Market"
,
"Marketa"
,
"Markland"
,
"Markman"
,
"Marko"
,
"Markos"
,
"Markowitz"
,
"Marks"
,
"Markson"
,
"Markus"
,
"Marl"
,
"Marla"
,
"Marlane"
,
"Marlea"
,
"Marleah"
,
"Marlee"
,
"Marleen"
,
"Marlen"
,
"Marlena"
,
"Marlene"
,
"Marler"
,
"Marlette"
,
"Marley"
,
"Marlie"
,
"Marlin"
,
"Marline"
,
"Marlo"
,
"Marlon"
,
"Marlow"
,
"Marlowe"
,
"Marlyn"
,
"Marmaduke"
,
"Marmawke"
,
"Marmion"
,
"Marna"
,
"Marne"
,
"Marney"
,
"Marni"
,
"Marnia"
,
"Marnie"
,
"Maro"
,
"Marola"
,
"Marolda"
,
"Maroney"
,
"Marou"
,
"Marozas"
,
"Marozik"
,
"Marpet"
,
"Marquardt"
,
"Marquet"
,
"Marquez"
,
"Marquis"
,
"Marquita"
,
"Marr"
,
"Marra"
,
"Marras"
,
"Marrilee"
,
"Marrin"
,
"Marriott"
,
"Marris"
,
"Marrissa"
,
"Marron"
,
"Mars"
,
"Marsden"
,
"Marsh"
,
"Marsha"
,
"Marshal"
,
"Marshall"
,
"Marsiella"
,
"Marsland"
,
"Marston"
,
"Mart"
,
"Marta"
,
"Martainn"
,
"Marte"
,
"Marteena"
,
"Martel"
,
"Martell"
,
"Martella"
,
"Martelle"
,
"Martelli"
,
"Marten"
,
"Martens"
,
"Martguerita"
,
"Martha"
,
"Marthe"
,
"Marthena"
,
"Marti"
,
"Martica"
,
"Martie"
,
"Martijn"
,
"Martin"
,
"Martina"
,
"Martine"
,
"Martineau"
,
"Martinelli"
,
"Martinez"
,
"Martinic"
,
"Martino"
,
"Martinsen"
,
"Martinson"
,
"Martita"
,
"Martres"
,
"Martsen"
,
"Marty"
,
"Martyn"
,
"Martynne"
,
"Martz"
,
"Marucci"
,
"Marutani"
,
"Marv"
,
"Marva"
,
"Marve"
,
"Marvel"
,
"Marvella"
,
"Marven"
,
"Marvin"
,
"Marwin"
,
"Marx"
,
"Mary"
,
"Marya"
,
"Maryann"
,
"Maryanna"
,
"Maryanne"
,
"Marybella"
,
"Marybelle"
,
"Marybeth"
,
"Maryellen"
,
"Maryjane"
,
"Maryjo"
,
"Maryl"
,
"Marylee"
,
"Marylin"
,
"Marylinda"
,
"Marylou"
,
"Maryly"
,
"Marylynne"
,
"Maryn"
,
"Maryrose"
,
"Marys"
,
"Marysa"
,
"Marzi"
,
"Mas"
,
"Masao"
,
"Mascia"
,
"Masera"
,
"Masha"
,
"Mashe"
,
"Mason"
,
"Masry"
,
"Massarelli"
,
"Massey"
,
"Massie"
,
"Massimiliano"
,
"Massimo"
,
"Massingill"
,
"Masson"
,
"Mast"
,
"Mastat"
,
"Masterson"
,
"Mastic"
,
"Mastrianni"
,
"Mat"
,
"Mata"
,
"Matazzoni"
,
"Matejka"
,
"Matelda"
,
"Mateo"
,
"Materi"
,
"Materse"
,
"Mateusz"
,
"Mateya"
,
"Mathe"
,
"Matheny"
,
"Mather"
,
"Matheson"
,
"Mathew"
,
"Mathews"
,
"Mathi"
,
"Mathia"
,
"Mathian"
,
"Mathias"
,
"Mathilda"
,
"Mathilde"
,
"Mathis"
,
"Mathre"
,
"Mathur"
,
"Matias"
,
"Matilda"
,
"Matilde"
,
"Matland"
,
"Matless"
,
"Matlick"
,
"Matrona"
,
"Matronna"
,
"Matt"
,
"Matta"
,
"Mattah"
,
"Matteo"
,
"Matthaeus"
,
"Matthaus"
,
"Matthei"
,
"Mattheus"
,
"Matthew"
,
"Matthews"
,
"Matthia"
,
"Matthias"
,
"Matthieu"
,
"Matthiew"
,
"Matthus"
,
"Matti"
,
"Mattias"
,
"Mattie"
,
"Mattland"
,
"Mattox"
,
"Mattson"
,
"Matty"
,
"Matusow"
,
"Mauceri"
,
"Mauchi"
,
"Maud"
,
"Maude"
,
"Maudie"
,
"Mauer"
,
"Mauldon"
,
"Maunsell"
,
"Maupin"
,
"Maura"
,
"Mauralia"
,
"Maure"
,
"Maureen"
,
"Maureene"
,
"Maurene"
,
"Maurer"
,
"Mauretta"
,
"Maurey"
,
"Mauri"
,
"Maurice"
,
"Mauricio"
,
"Maurie"
,
"Maurili"
,
"Maurilia"
,
"Maurilla"
,
"Maurine"
,
"Maurise"
,
"Maurita"
,
"Maurits"
,
"Maurizia"
,
"Maurizio"
,
"Mauro"
,
"Maurreen"
,
"Maury"
,
"Mauve"
,
"Mavilia"
,
"Mavis"
,
"Mavra"
,
"Max"
,
"Maxa"
,
"Maxama"
,
"Maxantia"
,
"Maxentia"
,
"Maxey"
,
"Maxfield"
,
"Maxi"
,
"Maxia"
,
"Maxie"
,
"Maxim"
,
"Maxima"
,
"Maximilian"
,
"Maximilianus"
,
"Maximilien"
,
"Maximo"
,
"Maxine"
,
"Maxma"
,
"Maxwell"
,
"Maxy"
,
"May"
,
"Maya"
,
"Maybelle"
,
"Mayberry"
,
"Mayce"
,
"Mayda"
,
"Maye"
,
"Mayeda"
,
"Mayer"
,
"Mayes"
,
"Mayfield"
,
"Mayhew"
,
"Mayman"
,
"Maynard"
,
"Mayne"
,
"Maynord"
,
"Mayor"
,
"Mays"
,
"Mayworm"
,
"Maze"
,
"Mazel"
,
"Maziar"
,
"Mazlack"
,
"Mazman"
,
"Mazonson"
,
"Mazur"
,
"Mazurek"
,
"McAdams"
,
"McAfee"
,
"McAllister"
,
"McArthur"
,
"McBride"
,
"McCafferty"
,
"McCahill"
,
"McCall"
,
"McCallion"
,
"McCallum"
,
"McCandless"
,
"McCartan"
,
"McCarthy"
,
"McCarty"
,
"McClain"
,
"McClary"
,
"McClees"
,
"McClelland"
,
"McClenaghan"
,
"McClenon"
,
"McClimans"
,
"McClish"
,
"McClure"
,
"McCollum"
,
"McComb"
,
"McConaghy"
,
"McConnell"
,
"McCord"
,
"McCormac"
,
"McCormick"
,
"McCourt"
,
"McCowyn"
,
"McCoy"
,
"McCready"
,
"McCreary"
,
"McCreery"
,
"McCulloch"
,
"McCullough"
,
"McCully"
,
"McCurdy"
,
"McCutcheon"
,
"McDade"
,
"McDermott"
,
"McDonald"
,
"McDougall"
,
"McDowell"
,
"McEvoy"
,
"McFadden"
,
"McFarland"
,
"McFerren"
,
"McGannon"
,
"McGaw"
,
"McGean"
,
"McGee"
,
"McGill"
,
"McGinnis"
,
"McGrath"
,
"McGraw"
,
"McGray"
,
"McGregor"
,
"McGrody"
,
"McGruter"
,
"McGuire"
,
"McGurn"
,
"McHail"
,
"McHale"
,
"McHenry"
,
"McHugh"
,
"McIlroy"
,
"McIntosh"
,
"McIntyre"
,
"McKale"
,
"McKay"
,
"McKee"
,
"McKenna"
,
"McKenzie"
,
"McKeon"
,
"McKinney"
,
"McKnight"
,
"McLain"
,
"McLaughlin"
,
"McLaurin"
,
"McLeod"
,
"McLeroy"
,
"McLoughlin"
,
"McLyman"
,
"McMahon"
,
"McMaster"
,
"McMath"
,
"McMillan"
,
"McMullan"
,
"McMurry"
,
"McNair"
,
"McNalley"
,
"McNally"
,
"McNamara"
,
"McNamee"
,
"McNeely"
,
"McNeil"
,
"McNelly"
,
"McNully"
,
"McNutt"
,
"McQuade"
,
"McQuillin"
,
"McQuoid"
,
"McRipley"
,
"McRoberts"
,
"McSpadden"
,
"McTyre"
,
"McWherter"
,
"McWilliams"
,
"Mead"
,
"Meade"
,
"Meador"
,
"Meadow"
,
"Meadows"
,
"Meagan"
,
"Meaghan"
,
"Meagher"
,
"Meakem"
,
"Means"
,
"Meara"
,
"Meares"
,
"Mears"
,
"Meave"
,
"Mechelle"
,
"Mechling"
,
"Mecke"
,
"Meda"
,
"Medarda"
,
"Medardas"
,
"Medea"
,
"Medeah"
,
"Medin"
,
"Medina"
,
"Medlin"
,
"Medor"
,
"Medora"
,
"Medorra"
,
"Medovich"
,
"Medrek"
,
"Medwin"
,
"Meece"
,
"Meehan"
,
"Meek"
,
"Meeker"
,
"Meeks"
,
"Meenen"
,
"Meg"
,
"Megan"
,
"Megargee"
,
"Megdal"
,
"Megen"
,
"Meggi"
,
"Meggie"
,
"Meggs"
,
"Meggy"
,
"Meghan"
,
"Meghann"
,
"Mehala"
,
"Mehalek"
,
"Mehalick"
,
"Mehetabel"
,
"Mehitable"
,
"Mehta"
,
"Mei"
,
"Meibers"
,
"Meier"
,
"Meijer"
,
"Meilen"
,
"Meill"
,
"Meingolda"
,
"Meingoldas"
,
"Meir"
,
"Meisel"
,
"Meit"
,
"Mel"
,
"Mela"
,
"Melamed"
,
"Melamie"
,
"Melan"
,
"Melania"
,
"Melanie"
,
"Melantha"
,
"Melany"
,
"Melar"
,
"Melba"
,
"Melborn"
,
"Melbourne"
,
"Melburn"
,
"Melcher"
,
"Melda"
,
"Meldoh"
,
"Meldon"
,
"Melena"
,
"Melentha"
,
"Melesa"
,
"Melessa"
,
"Meletius"
,
"Melgar"
,
"Meli"
,
"Melia"
,
"Melicent"
,
"Melina"
,
"Melinda"
,
"Melinde"
,
"Melisa"
,
"Melisande"
,
"Melisandra"
,
"Melise"
,
"Melisenda"
,
"Melisent"
,
"Melissa"
,
"Melisse"
,
"Melita"
,
"Melitta"
,
"Mell"
,
"Mella"
,
"Mellar"
,
"Mellen"
,
"Melleta"
,
"Mellette"
,
"Melli"
,
"Mellicent"
,
"Mellie"
,
"Mellins"
,
"Mellisa"
,
"Mellisent"
,
"Mellitz"
,
"Mellman"
,
"Mello"
,
"Melloney"
,
"Melly"
,
"Melmon"
,
"Melnick"
,
"Melodee"
,
"Melodie"
,
"Melody"
,
"Melone"
,
"Melonie"
,
"Melony"
,
"Melosa"
,
"Melquist"
,
"Melton"
,
"Melva"
,
"Melvena"
,
"Melville"
,
"Melvin"
,
"Melvina"
,
"Melvyn"
,
"Memberg"
,
"Memory"
,
"Mena"
,
"Menard"
,
"Menashem"
,
"Mencher"
,
"Mendel"
,
"Mendelsohn"
,
"Mendelson"
,
"Mendes"
,
"Mendez"
,
"Mendie"
,
"Mendive"
,
"Mendoza"
,
"Mendy"
,
"Meneau"
,
"Menedez"
,
"Menell"
,
"Menendez"
,
"Meng"
,
"Menides"
,
"Menis"
,
"Menken"
,
"Menon"
,
"Mensch"
,
"Menzies"
,
"Mera"
,
"Meraree"
,
"Merari"
,
"Meras"
,
"Merat"
,
"Merc"
,
"Mercado"
,
"Merce"
,
"Mercedes"
,
"Merceer"
,
"Mercer"
,
"Merchant"
,
"Merci"
,
"Mercie"
,
"Mercier"
,
"Mercola"
,
"Mercorr"
,
"Mercuri"
,
"Mercy"
,
"Merdith"
,
"Meredeth"
,
"Meredi"
,
"Meredith"
,
"Meredithe"
,
"Merell"
,
"Merete"
,
"Meri"
,
"Meridel"
,
"Merideth"
,
"Meridith"
,
"Meriel"
,
"Merilee"
,
"Merill"
,
"Merilyn"
,
"Meris"
,
"Merissa"
,
"Merkle"
,
"Merkley"
,
"Merl"
,
"Merla"
,
"Merle"
,
"Merlin"
,
"Merlina"
,
"Merline"
,
"Merna"
,
"Merola"
,
"Merow"
,
"Merralee"
,
"Merras"
,
"Merrel"
,
"Merrell"
,
"Merri"
,
"Merriam"
,
"Merrick"
,
"Merridie"
,
"Merrie"
,
"Merrielle"
,
"Merril"
,
"Merrile"
,
"Merrilee"
,
"Merrili"
,
"Merrill"
,
"Merrily"
,
"Merriman"
,
"Merriott"
,
"Merritt"
,
"Merrow"
,
"Merry"
,
"Mersey"
,
"Mert"
,
"Merta"
,
"Merth"
,
"Merton"
,
"Merv"
,
"Mervin"
,
"Merwin"
,
"Merwyn"
,
"Meryl"
,
"Mesics"
,
"Messere"
,
"Messing"
,
"Meta"
,
"Metabel"
,
"Metcalf"
,
"Meter"
,
"Methuselah"
,
"Metsky"
,
"Mettah"
,
"Metts"
,
"Metzgar"
,
"Metzger"
,
"Meunier"
,
"Meurer"
,
"Meuse"
,
"Meuser"
,
"Meyer"
,
"Meyeroff"
,
"Meyers"
,
"Mezoff"
,
"Mia"
,
"Mic"
,
"Micaela"
,
"Micah"
,
"Micco"
,
"Mich"
,
"Michael"
,
"Michaela"
,
"Michaele"
,
"Michaelina"
,
"Michaeline"
,
"Michaella"
,
"Michaeu"
,
"Michail"
,
"Michal"
,
"Michale"
,
"Michaud"
,
"Miche"
,
"Micheal"
,
"Micheil"
,
"Michel"
,
"Michele"
,
"Michelina"
,
"Micheline"
,
"Michell"
,
"Michella"
,
"Michelle"
,
"Michelsen"
,
"Michey"
,
"Michi"
,
"Michigan"
,
"Michiko"
,
"Michon"
,
"Mick"
,
"Mickelson"
,
"Mickey"
,
"Micki"
,
"Mickie"
,
"Micky"
,
"Micro"
,
"Miculek"
,
"Midas"
,
"Middendorf"
,
"Middle"
,
"Middlesworth"
,
"Middleton"
,
"Mide"
,
"Midge"
,
"Midian"
,
"Midis"
,
"Mientao"
,
"Miett"
,
"Migeon"
,
"Mighell"
,
"Mignon"
,
"Mignonne"
,
"Miguel"
,
"Miguela"
,
"Miguelita"
,
"Mihalco"
,
"Mihe"
,
"Mika"
,
"Mikael"
,
"Mikaela"
,
"Mikal"
,
"Mike"
,
"Mikel"
,
"Mikes"
,
"Mikey"
,
"Miki"
,
"Mikihisa"
,
"Mikiso"
,
"Mikkanen"
,
"Mikkel"
,
"Miko"
,
"Mikol"
,
"Miksen"
,
"Mil"
,
"Mila"
,
"Milan"
,
"Milano"
,
"Milburn"
,
"Milburr"
,
"Milburt"
,
"Milda"
,
"Milde"
,
"Mildred"
,
"Mildrid"
,
"Mile"
,
"Milena"
,
"Miles"
,
"Milewski"
,
"Milford"
,
"Milicent"
,
"Milinda"
,
"Milissa"
,
"Milissent"
,
"Milka"
,
"Milks"
,
"Mill"
,
"Milla"
,
"Millan"
,
"Millar"
,
"Millard"
,
"Millburn"
,
"Millda"
,
"Miller"
,
"Millford"
,
"Millham"
,
"Millhon"
,
"Milli"
,
"Millian"
,
"Millicent"
,
"Millie"
,
"Millisent"
,
"Millman"
,
"Mills"
,
"Millur"
,
"Millwater"
,
"Milly"
,
"Milman"
,
"Milo"
,
"Milon"
,
"Milone"
,
"Milore"
,
"Milson"
,
"Milstone"
,
"Milt"
,
"Miltie"
,
"Milton"
,
"Milty"
,
"Milurd"
,
"Milzie"
,
"Mima"
,
"Mimi"
,
"Min"
,
"Mina"
,
"Minabe"
,
"Minardi"
,
"Minda"
,
"Mindi"
,
"Mindy"
,
"Miner"
,
"Minerva"
,
"Mines"
,
"Minetta"
,
"Minette"
,
"Ming"
,
"Mingche"
,
"Mini"
,
"Minica"
,
"Minier"
,
"Minna"
,
"Minnaminnie"
,
"Minne"
,
"Minni"
,
"Minnie"
,
"Minnnie"
,
"Minny"
,
"Minor"
,
"Minoru"
,
"Minsk"
,
"Minta"
,
"Minton"
,
"Mintun"
,
"Mintz"
,
"Miof Mela"
,
"Miquela"
,
"Mir"
,
"Mira"
,
"Mirabel"
,
"Mirabella"
,
"Mirabelle"
,
"Miran"
,
"Miranda"
,
"Mireielle"
,
"Mireille"
,
"Mirella"
,
"Mirelle"
,
"Miriam"
,
"Mirielle"
,
"Mirilla"
,
"Mirisola"
,
"Mirna"
,
"Mirth"
,
"Miru"
,
"Mischa"
,
"Misha"
,
"Mishaan"
,
"Missi"
,
"Missie"
,
"Missy"
,
"Misti"
,
"Mistrot"
,
"Misty"
,
"Mita"
,
"Mitch"
,
"Mitchael"
,
"Mitchel"
,
"Mitchell"
,
"Mitchiner"
,
"Mitinger"
,
"Mitman"
,
"Mitran"
,
"Mittel"
,
"Mitzi"
,
"Mitzie"
,
"Mitzl"
,
"Miun"
,
"Mixie"
,
"Miyasawa"
,
"Mizuki"
,
"Mlawsky"
,
"Mllly"
,
"Moazami"
,
"Moberg"
,
"Mobley"
,
"Mochun"
,
"Mode"
,
"Modern"
,
"Modesta"
,
"Modeste"
,
"Modestia"
,
"Modestine"
,
"Modesty"
,
"Modie"
,
"Modla"
,
"Moe"
,
"Moersch"
,
"Moffat"
,
"Moffit"
,
"Moffitt"
,
"Mogerly"
,
"Moguel"
,
"Mohamed"
,
"Mohammad"
,
"Mohammed"
,
"Mohandas"
,
"Mohandis"
,
"Mohl"
,
"Mohn"
,
"Mohr"
,
"Mohsen"
,
"Mohun"
,
"Moia"
,
"Moina"
,
"Moir"
,
"Moira"
,
"Moise"
,
"Moises"
,
"Moishe"
,
"Moitoso"
,
"Mojgan"
,
"Mok"
,
"Mokas"
,
"Molini"
,
"Moll"
,
"Mollee"
,
"Molli"
,
"Mollie"
,
"Molloy"
,
"Molly"
,
"Molton"
,
"Mommy"
,
"Mona"
,
"Monaco"
,
"Monafo"
,
"Monagan"
,
"Monah"
,
"Monahan"
,
"Monahon"
,
"Monarski"
,
"Moncear"
,
"Mond"
,
"Monda"
,
"Moneta"
,
"Monetta"
,
"Mongeau"
,
"Monia"
,
"Monica"
,
"Monie"
,
"Monika"
,
"Monique"
,
"Monjan"
,
"Monjo"
,
"Monk"
,
"Monney"
,
"Monreal"
,
"Monro"
,
"Monroe"
,
"Monroy"
,
"Monson"
,
"Monsour"
,
"Mont"
,
"Montagna"
,
"Montagu"
,
"Montague"
,
"Montana"
,
"Montanez"
,
"Montano"
,
"Monte"
,
"Monteith"
,
"Monteria"
,
"Montford"
,
"Montfort"
,
"Montgomery"
,
"Monti"
,
"Monto"
,
"Monty"
,
"Moody"
,
"Mook"
,
"Moon"
,
"Mooney"
,
"Moonier"
,
"Moor"
,
"Moore"
,
"Moorefield"
,
"Moorish"
,
"Mor"
,
"Mora"
,
"Moran"
,
"Mord"
,
"Mordecai"
,
"Mordy"
,
"Moreen"
,
"Morehouse"
,
"Morel"
,
"Moreland"
,
"Morell"
,
"Morena"
,
"Moreno"
,
"Morentz"
,
"Moreta"
,
"Moretta"
,
"Morette"
,
"Moreville"
,
"Morey"
,
"Morez"
,
"Morgan"
,
"Morgana"
,
"Morganica"
,
"Morganne"
,
"Morganstein"
,
"Morgen"
,
"Morgenthaler"
,
"Morgun"
,
"Mori"
,
"Moria"
,
"Moriah"
,
"Moriarty"
,
"Morice"
,
"Morie"
,
"Morissa"
,
"Morita"
,
"Moritz"
,
"Moriyama"
,
"Morlee"
,
"Morley"
,
"Morly"
,
"Morna"
,
"Morocco"
,
"Morra"
,
"Morrell"
,
"Morrie"
,
"Morril"
,
"Morrill"
,
"Morris"
,
"Morrison"
,
"Morrissey"
,
"Morry"
,
"Morse"
,
"Mort"
,
"Morten"
,
"Mortensen"
,
"Mortie"
,
"Mortimer"
,
"Morton"
,
"Morty"
,
"Morven"
,
"Morville"
,
"Morvin"
,
"Mosa"
,
"Mosby"
,
"Moscow"
,
"Mose"
,
"Moseley"
,
"Moselle"
,
"Mosenthal"
,
"Moser"
,
"Mosera"
,
"Moses"
,
"Moshe"
,
"Moshell"
,
"Mosier"
,
"Mosira"
,
"Moskow"
,
"Mosley"
,
"Mosora"
,
"Mosra"
,
"Moss"
,
"Mossberg"
,
"Mossman"
,
"Most"
,
"Motch"
,
"Moth"
,
"Mott"
,
"Motteo"
,
"Mou"
,
"Moulden"
,
"Mouldon"
,
"Moule"
,
"Moulton"
,
"Mount"
,
"Mountford"
,
"Mountfort"
,
"Mourant"
,
"Moureaux"
,
"Mowbray"
,
"Moya"
,
"Moyer"
,
"Moyers"
,
"Moyna"
,
"Moynahan"
,
"Moyra"
,
"Mozart"
,
"Mozelle"
,
"Mozes"
,
"Mozza"
,
"Mraz"
,
"Mroz"
,
"Mueller"
,
"Muffin"
,
"Mufi"
,
"Mufinella"
,
"Muhammad"
,
"Muir"
,
"Muire"
,
"Muirhead"
,
"Mukerji"
,
"Mukul"
,
"Mukund"
,
"Mulcahy"
,
"Mulderig"
,
"Muldon"
,
"Mulford"
,
"Mullane"
,
"Mullen"
,
"Muller"
,
"Mulligan"
,
"Mullins"
,
"Mulloy"
,
"Mulry"
,
"Mulvihill"
,
"Mumford"
,
"Mun"
,
"Muna"
,
"Munafo"
,
"Muncey"
,
"Mundford"
,
"Mundt"
,
"Mundy"
,
"Munford"
,
"Mungo"
,
"Mungovan"
,
"Munmro"
,
"Munn"
,
"Munniks"
,
"Munro"
,
"Munroe"
,
"Muns"
,
"Munsey"
,
"Munshi"
,
"Munson"
,
"Munster"
,
"Munt"
,
"Mur"
,
"Murage"
,
"Muraida"
,
"Murat"
,
"Murdocca"
,
"Murdoch"
,
"Murdock"
,
"Mureil"
,
"Muriah"
,
"Murial"
,
"Muriel"
,
"Murielle"
,
"Murphy"
,
"Murrah"
,
"Murray"
,
"Murrell"
,
"Murry"
,
"Murtagh"
,
"Murtha"
,
"Murton"
,
"Murvyn"
,
"Musa"
,
"Muscolo"
,
"Musetta"
,
"Musette"
,
"Mushro"
,
"Muslim"
,
"Musser"
,
"Mussman"
,
"Mutz"
,
"My"
,
"Mya"
,
"Myca"
,
"Mycah"
,
"Mychael"
,
"Mychal"
,
"Myer"
,
"Myers"
,
"Myke"
,
"Mylan"
,
"Mylander"
,
"Myles"
,
"Mylo"
,
"Mylor"
,
"Myna"
,
"Myo"
,
"Myra"
,
"Myrah"
,
"Myranda"
,
"Myriam"
,
"Myrilla"
,
"Myrle"
,
"Myrlene"
,
"Myrna"
,
"Myron"
,
"Myrt"
,
"Myrta"
,
"Myrtia"
,
"Myrtice"
,
"Myrtie"
,
"Myrtle"
,
"Myrvyn"
,
"Myrwyn"
,
"Na"
,
"Naam"
,
"Naaman"
,
"Naamana"
,
"Naamann"
,
"Naara"
,
"Naarah"
,
"Naashom"
,
"Nabal"
,
"Nabala"
,
"Nabalas"
,
"Nabila"
,
"Nace"
,
"Nachison"
,
"Nada"
,
"Nadab"
,
"Nadaba"
,
"Nadabas"
,
"Nadabb"
,
"Nadabus"
,
"Nadaha"
,
"Nadbus"
,
"Nadda"
,
"Nadean"
,
"Nadeau"
,
"Nadeen"
,
"Nader"
,
"Nadia"
,
"Nadine"
,
"Nadiya"
,
"Nadler"
,
"Nador"
,
"Nady"
,
"Nadya"
,
"Nafis"
,
"Naga"
,
"Nagel"
,
"Nagey"
,
"Nagle"
,
"Nagy"
,
"Nahama"
,
"Nahamas"
,
"Nahshon"
,
"Nahshu"
,
"Nahshun"
,
"Nahshunn"
,
"Nahtanha"
,
"Nahum"
,
"Naiditch"
,
"Naima"
,
"Naji"
,
"Nakada"
,
"Nakashima"
,
"Nakasuji"
,
"Nalani"
,
"Nalda"
,
"Naldo"
,
"Nalepka"
,
"Nally"
,
"Nalor"
,
"Nam"
,
"Naman"
,
"Namara"
,
"Names"
,
"Nan"
,
"Nana"
,
"Nananne"
,
"Nance"
,
"Nancee"
,
"Nancey"
,
"Nanci"
,
"Nancie"
,
"Nancy"
,
"Nandor"
,
"Nanete"
,
"Nanette"
,
"Nani"
,
"Nanice"
,
"Nanine"
,
"Nanji"
,
"Nannette"
,
"Nanni"
,
"Nannie"
,
"Nanny"
,
"Nanon"
,
"Naoma"
,
"Naomi"
,
"Naor"
,
"Nap"
,
"Napier"
,
"Naples"
,
"Napoleon"
,
"Nappie"
,
"Nappy"
,
"Naquin"
,
"Nara"
,
"Narah"
,
"Narayan"
,
"Narcho"
,
"Narcis"
,
"Narcissus"
,
"Narda"
,
"Naresh"
,
"Nari"
,
"Nariko"
,
"Narine"
,
"Narra"
,
"Narton"
,
"Nary"
,
"Nash"
,
"Nashbar"
,
"Nashner"
,
"Nasho"
,
"Nashom"
,
"Nashoma"
,
"Nasia"
,
"Nason"
,
"Nassi"
,
"Nassir"
,
"Nastassia"
,
"Nasya"
,
"Nat"
,
"Nata"
,
"Natal"
,
"Natala"
,
"Natale"
,
"Natalee"
,
"Natalia"
,
"Natalie"
,
"Natalina"
,
"Nataline"
,
"Natalya"
,
"Nataniel"
,
"Natascha"
,
"Natasha"
,
"Natassia"
,
"Nate"
,
"Natelson"
,
"Nath"
,
"Nathalia"
,
"Nathalie"
,
"Nathan"
,
"Nathanael"
,
"Nathanial"
,
"Nathaniel"
,
"Nathanil"
,
"Nathanson"
,
"Natica"
,
"Natie"
,
"Natiha"
,
"Natika"
,
"Nations"
,
"Natividad"
,
"Natka"
,
"Nattie"
,
"Natty"
,
"Nava"
,
"Navada"
,
"Naval"
,
"Navarro"
,
"Nawrocki"
,
"Nay"
,
"Naylor"
,
"Nazar"
,
"Nazario"
,
"Nazarius"
,
"Nazler"
,
"Nea"
,
"Neal"
,
"Neala"
,
"Nealah"
,
"Neale"
,
"Nealey"
,
"Neall"
,
"Nealon"
,
"Nealson"
,
"Nealy"
,
"Neau"
,
"Ned"
,
"Neda"
,
"Nedda"
,
"Neddie"
,
"Neddra"
,
"Neddy"
,
"Nedi"
,
"Nedra"
,
"Nedrah"
,
"Nedrud"
,
"Nedry"
,
"Nee"
,
"Neel"
,
"Neela"
,
"Neelon"
,
"Neely"
,
"Neeoma"
,
"Nefen"
,
"Neff"
,
"Negris"
,
"Nehemiah"
,
"Neibart"
,
"Neidhardt"
,
"Neil"
,
"Neila"
,
"Neile"
,
"Neill"
,
"Neilla"
,
"Neille"
,
"Neils"
,
"Neilson"
,
"Neiman"
,
"Neisa"
,
"Nel"
,
"Nela"
,
"Nelan"
,
"Nelda"
,
"Nelia"
,
"Nelie"
,
"Nell"
,
"Nella"
,
"Nellda"
,
"Nelle"
,
"Nelli"
,
"Nellie"
,
"Nellir"
,
"Nelly"
,
"Nelrsa"
,
"Nels"
,
"Nelsen"
,
"Nelson"
,
"Nema"
,
"Nemhauser"
,
"Nena"
,
"Nenney"
,
"Neo"
,
"Neom"
,
"Neoma"
,
"Neomah"
,
"Neona"
,
"Nepean"
,
"Nepil"
,
"Nereen"
,
"Nereids"
,
"Nereus"
,
"Neri"
,
"Nerin"
,
"Nerine"
,
"Nerissa"
,
"Nerita"
,
"Nerland"
,
"Nero"
,
"Neron"
,
"Nert"
,
"Nerta"
,
"Nerte"
,
"Nerti"
,
"Nertie"
,
"Nerty"
,
"Nesbitt"
,
"Nesline"
,
"Neslund"
,
"Ness"
,
"Nessa"
,
"Nessi"
,
"Nessie"
,
"Nessim"
,
"Nessy"
,
"Nesta"
,
"Nester"
,
"Nesto"
,
"Nestor"
,
"Nett"
,
"Netta"
,
"Nette"
,
"Netti"
,
"Nettie"
,
"Nettle"
,
"Netty"
,
"Neu"
,
"Neuberger"
,
"Neuburger"
,
"Neufer"
,
"Neukam"
,
"Neumann"
,
"Neumark"
,
"Neumeyer"
,
"Neurath"
,
"Nev"
,
"Neva"
,
"Nevada"
,
"Nevai"
,
"Neve"
,
"Neveda"
,
"Nevil"
,
"Nevile"
,
"Neville"
,
"Nevin"
,
"Nevins"
,
"Nevlin"
,
"Nevsa"
,
"New"
,
"Newberry"
,
"Newbill"
,
"Newbold"
,
"Newby"
,
"Newcomb"
,
"Newcomer"
,
"Newel"
,
"Newell"
,
"Newfeld"
,
"Newhall"
,
"Newkirk"
,
"Newlin"
,
"Newman"
,
"Newmann"
,
"Newmark"
,
"Newsom"
,
"Newton"
,
"Neysa"
,
"Ng"
,
"Ngo"
,
"Nguyen"
,
"Niabi"
,
"Nial"
,
"Niall"
,
"Nibbs"
,
"Nic"
,
"Nica"
,
"Niccolo"
,
"Nich"
,
"Nichani"
,
"Nichol"
,
"Nichola"
,
"Nicholas"
,
"Nichole"
,
"Nicholl"
,
"Nicholle"
,
"Nichols"
,
"Nicholson"
,
"Nichy"
,
"Nick"
,
"Nickelsen"
,
"Nickerson"
,
"Nickey"
,
"Nicki"
,
"Nickie"
,
"Nickles"
,
"Nicko"
,
"Nickola"
,
"Nickolai"
,
"Nickolas"
,
"Nickolaus"
,
"Nicks"
,
"Nicky"
,
"Nico"
,
"Nicodemus"
,
"Nicol"
,
"Nicola"
,
"Nicolai"
,
"Nicolais"
,
"Nicolas"
,
"Nicolau"
,
"Nicole"
,
"Nicolea"
,
"Nicolella"
,
"Nicolette"
,
"Nicoli"
,
"Nicolina"
,
"Nicoline"
,
"Nicolis"
,
"Nicolle"
,
"Nidia"
,
"Nidorf"
,
"Nieberg"
,
"Niehaus"
,
"Niel"
,
"Niela"
,
"Niels"
,
"Nielsen"
,
"Nielson"
,
"Nierman"
,
"Nies"
,
"Nievelt"
,
"Nigel"
,
"Nightingale"
,
"Nihhi"
,
"Nihi"
,
"Nika"
,
"Nikaniki"
,
"Nike"
,
"Niki"
,
"Nikita"
,
"Nikki"
,
"Nikkie"
,
"Niklaus"
,
"Niko"
,
"Nikola"
,
"Nikolai"
,
"Nikolaos"
,
"Nikolas"
,
"Nikolaus"
,
"Nikoletta"
,
"Nikolia"
,
"Nikolos"
,
"Nikos"
,
"Nil"
,
"Nila"
,
"Nile"
,
"Niles"
,
"Nilla"
,
"Nils"
,
"Nilson"
,
"Nimesh"
,
"Nimocks"
,
"Nims"
,
"Nina"
,
"Nine"
,
"Ninetta"
,
"Ninette"
,
"Ninnetta"
,
"Ninnette"
,
"Nino"
,
"Ninon"
,
"Ninos"
,
"Niobe"
,
"Nipha"
,
"Niple"
,
"Nisa"
,
"Nisbet"
,
"Nisen"
,
"Nishi"
,
"Nissa"
,
"Nisse"
,
"Nissensohn"
,
"Nissie"
,
"Nissy"
,
"Nita"
,
"Nitin"
,
"Nitz"
,
"Nitza"
,
"Niu"
,
"Niven"
,
"Nixie"
,
"Nixon"
,
"Noach"
,
"Noah"
,
"Noak"
,
"Noakes"
,
"Noam"
,
"Noami"
,
"Nobe"
,
"Nobel"
,
"Nobell"
,
"Nobie"
,
"Nobile"
,
"Noble"
,
"Noby"
,
"Nochur"
,
"Nodab"
,
"Nodababus"
,
"Nodarse"
,
"Noe"
,
"Noel"
,
"Noelani"
,
"Noell"
,
"Noella"
,
"Noelle"
,
"Noellyn"
,
"Noelyn"
,
"Noemi"
,
"Nogas"
,
"Noguchi"
,
"Nola"
,
"Nolan"
,
"Nolana"
,
"Noland"
,
"Nole"
,
"Noleta"
,
"Noletta"
,
"Noli"
,
"Nolie"
,
"Nolita"
,
"Nolitta"
,
"Noll"
,
"Nollie"
,
"Nolly"
,
"Nolte"
,
"Noma"
,
"Noman"
,
"Nomi"
,
"Nona"
,
"Nonah"
,
"Noni"
,
"Nonie"
,
"Nonna"
,
"Nonnah"
,
"Noonan"
,
"Noonberg"
,
"Nor"
,
"Nora"
,
"Norah"
,
"Norbert"
,
"Norbie"
,
"Norby"
,
"Nord"
,
"Nordgren"
,
"Nordin"
,
"Nordine"
,
"Nore"
,
"Norean"
,
"Noreen"
,
"Norene"
,
"Norford"
,
"Norina"
,
"Norine"
,
"Norita"
,
"Nork"
,
"Norling"
,
"Norm"
,
"Norma"
,
"Normalie"
,
"Norman"
,
"Normand"
,
"Normandy"
,
"Normi"
,
"Normie"
,
"Normy"
,
"Norri"
,
"Norrie"
,
"Norris"
,
"Norrv"
,
"Norry"
,
"Norse"
,
"North"
,
"Northey"
,
"Northington"
,
"Northrop"
,
"Northrup"
,
"Northway"
,
"Norton"
,
"Norty"
,
"Norval"
,
"Norvall"
,
"Norvan"
,
"Norvell"
,
"Norven"
,
"Norvil"
,
"Norvin"
,
"Norvol"
,
"Norvun"
,
"Norward"
,
"Norwood"
,
"Norword"
,
"Nottage"
,
"Nova"
,
"Novah"
,
"Novak"
,
"Novelia"
,
"Novello"
,
"Novia"
,
"Novick"
,
"Novikoff"
,
"Nowell"
,
"Noyes"
,
"Nozicka"
,
"Nudd"
,
"Nugent"
,
"Nuli"
,
"Nunci"
,
"Nuncia"
,
"Nunciata"
,
"Nunes"
,
"Nunnery"
,
"Nur"
,
"Nuri"
,
"Nuriel"
,
"Nuris"
,
"Nurse"
,
"Nussbaum"
,
"Nutter"
,
"Nuzzi"
,
"Nyberg"
,
"Nydia"
,
"Nye"
,
"Nyhagen"
,
"Nysa"
,
"Nyssa"
,
"O'Hara"
,
"O'Neill"
,
"Oak"
,
"Oakes"
,
"Oakie"
,
"Oakleil"
,
"Oakley"
,
"Oakman"
,
"Oaks"
,
"Oates"
,
"Oatis"
,
"Oba"
,
"Obadiah"
,
"Obadias"
,
"Obala"
,
"Oballa"
,
"Obara"
,
"Obau"
,
"Obaza"
,
"Obbard"
,
"Obe"
,
"Obed"
,
"Obeded"
,
"Obediah"
,
"Obel"
,
"Obelia"
,
"Obellia"
,
"Obeng"
,
"Ober"
,
"Oberg"
,
"Oberheim"
,
"Oberon"
,
"Oberstone"
,
"Obidiah"
,
"Obie"
,
"Obla"
,
"Obola"
,
"Obrien"
,
"Oby"
,
"Oca"
,
"Ocana"
,
"Ochs"
,
"Ocker"
,
"Ocko"
,
"Oconnor"
,
"Octave"
,
"Octavia"
,
"Octavian"
,
"Octavie"
,
"Octavius"
,
"Octavla"
,
"Octavus"
,
"Odab"
,
"Odawa"
,
"Ode"
,
"Odeen"
,
"Odel"
,
"Odele"
,
"Odelet"
,
"Odelia"
,
"Odelinda"
,
"Odell"
,
"Odella"
,
"Odelle"
,
"Odericus"
,
"Odessa"
,
"Odetta"
,
"Odette"
,
"Odey"
,
"Odie"
,
"Odilia"
,
"Odille"
,
"Odilo"
,
"Odin"
,
"Odine"
,
"Odlo"
,
"Odo"
,
"Odom"
,
"Odoric"
,
"Odrick"
,
"Ody"
,
"Odysseus"
,
"Odyssey"
,
"Oech"
,
"Oeflein"
,
"Oehsen"
,
"Ofelia"
,
"Ofella"
,
"Offen"
,
"Ofilia"
,
"Ofori"
,
"Og"
,
"Ogata"
,
"Ogawa"
,
"Ogdan"
,
"Ogden"
,
"Ogdon"
,
"Ogg"
,
"Ogilvie"
,
"Ogilvy"
,
"Oglesby"
,
"Ogren"
,
"Ohara"
,
"Ohare"
,
"Ohaus"
,
"Ohl"
,
"Oilla"
,
"Oina"
,
"Oira"
,
"Okajima"
,
"Okechuku"
,
"Okubo"
,
"Okun"
,
"Okwu"
,
"Ola"
,
"Olaf"
,
"Olag"
,
"Olatha"
,
"Olathe"
,
"Olav"
,
"Olcott"
,
"Old"
,
"Older"
,
"Olds"
,
"Ole"
,
"Oleg"
,
"Olen"
,
"Olenka"
,
"Olenolin"
,
"Olenta"
,
"Oler"
,
"Oleta"
,
"Oletha"
,
"Olethea"
,
"Oletta"
,
"Olette"
,
"Olfe"
,
"Olga"
,
"Olia"
,
"Oliana"
,
"Olimpia"
,
"Olin"
,
"Olinde"
,
"Oliva"
,
"Olivann"
,
"Olive"
,
"Oliver"
,
"Olivero"
,
"Olivette"
,
"Olivia"
,
"Olivie"
,
"Olivier"
,
"Oliviero"
,
"Oliy"
,
"Ollayos"
,
"Olli"
,
"Ollie"
,
"Olly"
,
"Olmstead"
,
"Olmsted"
,
"Olnay"
,
"Olnee"
,
"Olnek"
,
"Olney"
,
"Olnton"
,
"Olodort"
,
"Olpe"
,
"Olsen"
,
"Olsewski"
,
"Olshausen"
,
"Olson"
,
"Olsson"
,
"Olva"
,
"Olvan"
,
"Olwen"
,
"Olwena"
,
"Oly"
,
"Olympe"
,
"Olympia"
,
"Olympias"
,
"Olympie"
,
"Olympium"
,
"Om"
,
"Oman"
,
"Omar"
,
"Omari"
,
"Omarr"
,
"Omer"
,
"Omero"
,
"Omidyar"
,
"Omland"
,
"Omor"
,
"Omora"
,
"Omura"
,
"On"
,
"Ona"
,
"Onder"
,
"Ondine"
,
"Ondrea"
,
"Ondrej"
,
"Oneal"
,
"Oneida"
,
"Oneil"
,
"Oneill"
,
"Onfre"
,
"Onfroi"
,
"Ong"
,
"Ongun"
,
"Oni"
,
"Onia"
,
"Onida"
,
"Oniskey"
,
"Onofredo"
,
"Onstad"
,
"Ontina"
,
"Ontine"
,
"Onyx"
,
"Oona"
,
"Opal"
,
"Opalina"
,
"Opaline"
,
"Ophelia"
,
"Ophelie"
,
"Oppen"
,
"Opportina"
,
"Opportuna"
,
"Ora"
,
"Orabel"
,
"Orabelle"
,
"Oralee"
,
"Oralia"
,
"Oralie"
,
"Oralla"
,
"Oralle"
,
"Oram"
,
"Oran"
,
"Orazio"
,
"Orbadiah"
,
"Orban"
,
"Ordway"
,
"Orel"
,
"Orelee"
,
"Orelia"
,
"Orelie"
,
"Orella"
,
"Orelle"
,
"Orelu"
,
"Oren"
,
"Orest"
,
"Oreste"
,
"Orestes"
,
"Orferd"
,
"Orfield"
,
"Orfinger"
,
"Orford"
,
"Orfurd"
,
"Orgel"
,
"Orgell"
,
"Ori"
,
"Oria"
,
"Orian"
,
"Oriana"
,
"Oriane"
,
"Orianna"
,
"Oribel"
,
"Oribella"
,
"Oribelle"
,
"Oriel"
,
"Orin"
,
"Oringa"
,
"Oringas"
,
"Oriole"
,
"Orion"
,
"Orit"
,
"Orji"
,
"Orlan"
,
"Orland"
,
"Orlando"
,
"Orlanta"
,
"Orlantha"
,
"Orlena"
,
"Orlene"
,
"Orlina"
,
"Orling"
,
"Orlosky"
,
"Orlov"
,
"Orly"
,
"Orman"
,
"Ormand"
,
"Orme"
,
"Ormiston"
,
"Ormond"
,
"Orms"
,
"Ormsby"
,
"Orna"
,
"Ornas"
,
"Ornie"
,
"Ornstead"
,
"Orola"
,
"Orose"
,
"Orozco"
,
"Orpah"
,
"Orpha"
,
"Orpheus"
,
"Orr"
,
"Orran"
,
"Orren"
,
"Orrin"
,
"Orsa"
,
"Orsay"
,
"Orsini"
,
"Orsino"
,
"Orsola"
,
"Orson"
,
"Orten"
,
"Ortensia"
,
"Orth"
,
"Orthman"
,
"Ortiz"
,
"Orton"
,
"Ortrud"
,
"Ortrude"
,
"Oruntha"
,
"Orv"
,
"Orva"
,
"Orvah"
,
"Orvan"
,
"Orvas"
,
"Orvie"
,
"Orvil"
,
"Orville"
,
"Orwin"
,
"Os"
,
"Osana"
,
"Osanna"
,
"Osber"
,
"Osbert"
,
"Osborn"
,
"Osborne"
,
"Osbourn"
,
"Osbourne"
,
"Oscar"
,
"Osei"
,
"Osgood"
,
"Osher"
,
"Oshinski"
,
"Osi"
,
"Osithe"
,
"Oskar"
,
"Osman"
,
"Osmen"
,
"Osmo"
,
"Osmond"
,
"Osmund"
,
"Osric"
,
"Osrick"
,
"Osrock"
,
"Ossie"
,
"Osswald"
,
"Ossy"
,
"Ostap"
,
"Oster"
,
"Osterhus"
,
"Ostler"
,
"Ostraw"
,
"Osugi"
,
"Oswal"
,
"Oswald"
,
"Oswell"
,
"Oswin"
,
"Osy"
,
"Osyth"
,
"Ot"
,
"Otero"
,
"Otes"
,
"Otha"
,
"Othe"
,
"Othelia"
,
"Othella"
,
"Othello"
,
"Other"
,
"Othilia"
,
"Othilie"
,
"Otho"
,
"Otila"
,
"Otilia"
,
"Otina"
,
"Otis"
,
"Ott"
,
"Ottavia"
,
"Otte"
,
"Otter"
,
"Otti"
,
"Ottie"
,
"Ottilie"
,
"Ottillia"
,
"Ottinger"
,
"Otto"
,
"Oulman"
,
"Outhe"
,
"Outlaw"
,
"Ovid"
,
"Ovida"
,
"Owades"
,
"Owain"
,
"Owen"
,
"Owena"
,
"Owens"
,
"Oxford"
,
"Oxley"
,
"Oys"
,
"Oz"
,
"Oza"
,
"Ozan"
,
"Ozen"
,
"Ozkum"
,
"Ozmo"
,
"Ozzie"
,
"Ozzy"
,
"O'Brien"
,
"O'Callaghan"
,
"O'Carroll"
,
"O'Connell"
,
"O'Conner"
,
"O'Connor"
,
"O'Dell"
,
"O'Doneven"
,
"O'Donnell"
,
"O'Donoghue"
,
"O'Donovan"
,
"O'Driscoll"
,
"O'Gowan"
,
"O'Grady"
,
"O'Hara"
,
"O'Kelly"
,
"O'Mahony"
,
"O'Malley"
,
"O'Meara"
,
"O'Neil"
,
"O'Neill"
,
"O'Reilly"
,
"O'Rourke"
,
"O'Shee"
,
"O'Toole"
,
"Paapanen"
,
"Pablo"
,
"Pace"
,
"Pacheco"
,
"Pachston"
,
"Pachton"
,
"Pacian"
,
"Pacien"
,
"Pacifa"
,
"Pacifica"
,
"Pacificas"
,
"Pacificia"
,
"Pack"
,
"Packer"
,
"Packston"
,
"Packton"
,
"Paco"
,
"Pacorro"
,
"Paddie"
,
"Paddy"
,
"Padegs"
,
"Paderna"
,
"Padget"
,
"Padgett"
,
"Padraic"
,
"Padraig"
,
"Padriac"
,
"Paff"
,
"Pagas"
,
"Page"
,
"Pages"
,
"Paget"
,
"Pahl"
,
"Paige"
,
"Paik"
,
"Pail"
,
"Pain"
,
"Paine"
,
"Painter"
,
"Palecek"
,
"Palermo"
,
"Palestine"
,
"Paley"
,
"Palgrave"
,
"Palila"
,
"Pall"
,
"Palla"
,
"Palladin"
,
"Pallas"
,
"Pallaten"
,
"Pallaton"
,
"Pallua"
,
"Palm"
,
"Palma"
,
"Palmer"
,
"Palmira"
,
"Palmore"
,
"Palocz"
,
"Paloma"
,
"Pals"
,
"Palua"
,
"Paluas"
,
"Palumbo"
,
"Pam"
,
"Pamela"
,
"Pamelina"
,
"Pamella"
,
"Pammi"
,
"Pammie"
,
"Pammy"
,
"Pampuch"
,
"Pan"
,
"Panaggio"
,
"Panayiotis"
,
"Panchito"
,
"Pancho"
,
"Pandich"
,
"Pandolfi"
,
"Pandora"
,
"Pang"
,
"Pangaro"
,
"Pani"
,
"Pansie"
,
"Pansir"
,
"Pansy"
,
"Panta"
,
"Panter"
,
"Panthea"
,
"Pantheas"
,
"Panther"
,
"Panthia"
,
"Pantia"
,
"Pantin"
,
"Paola"
,
"Paolina"
,
"Paolo"
,
"Papagena"
,
"Papageno"
,
"Pape"
,
"Papert"
,
"Papke"
,
"Papotto"
,
"Papp"
,
"Pappano"
,
"Pappas"
,
"Papst"
,
"Paquito"
,
"Par"
,
"Paradies"
,
"Parcel"
,
"Pardew"
,
"Pardner"
,
"Pardo"
,
"Pardoes"
,
"Pare"
,
"Parent"
,
"Paresh"
,
"Parette"
,
"Parfitt"
,
"Parhe"
,
"Parik"
,
"Paris"
,
"Parish"
,
"Park"
,
"Parke"
,
"Parker"
,
"Parks"
,
"Parlin"
,
"Parnas"
,
"Parnell"
,
"Parrie"
,
"Parris"
,
"Parrisch"
,
"Parrish"
,
"Parrnell"
,
"Parrott"
,
"Parry"
,
"Parsaye"
,
"Parshall"
,
"Parsifal"
,
"Parsons"
,
"Partan"
,
"Parthen"
,
"Parthena"
,
"Parthenia"
,
"Parthinia"
,
"Particia"
,
"Partridge"
,
"Paryavi"
,
"Pas"
,
"Pasadis"
,
"Pasahow"
,
"Pascal"
,
"Pascale"
,
"Pascasia"
,
"Pascha"
,
"Paschasia"
,
"Pascia"
,
"Pasco"
,
"Pascoe"
,
"Pasho"
,
"Pasia"
,
"Paske"
,
"Pasol"
,
"Pasquale"
,
"Pass"
,
"Past"
,
"Pastelki"
,
"Pat"
,
"Pate"
,
"Paten"
,
"Paterson"
,
"Pathe"
,
"Patience"
,
"Patin"
,
"Patman"
,
"Patnode"
,
"Paton"
,
"Patric"
,
"Patrica"
,
"Patrice"
,
"Patrich"
,
"Patricia"
,
"Patricio"
,
"Patrick"
,
"Patrizia"
,
"Patrizio"
,
"Patrizius"
,
"Patsis"
,
"Patsy"
,
"Patt"
,
"Pattani"
,
"Patten"
,
"Patterman"
,
"Patterson"
,
"Patti"
,
"Pattie"
,
"Pattin"
,
"Pattison"
,
"Patton"
,
"Patty"
,
"Paucker"
,
"Paugh"
,
"Pauiie"
,
"Paul"
,
"Paula"
,
"Paule"
,
"Pauletta"
,
"Paulette"
,
"Pauli"
,
"Paulie"
,
"Paulina"
,
"Pauline"
,
"Paulita"
,
"Paulo"
,
"Paulsen"
,
"Paulson"
,
"Pauly"
,
"Pauwles"
,
"Pavel"
,
"Paver"
,
"Pavia"
,
"Pavier"
,
"Pavior"
,
"Paviour"
,
"Pavkovic"
,
"Pavla"
,
"Pavlish"
,
"Pavlov"
,
"Pavyer"
,
"Pawsner"
,
"Pax"
,
"Paxon"
,
"Paxton"
,
"Paymar"
,
"Payne"
,
"Paynter"
,
"Payson"
,
"Payton"
,
"Paz"
,
"Paza"
,
"Pazia"
,
"Pazice"
,
"Pazit"
,
"Peace"
,
"Peacock"
,
"Peadar"
,
"Peale"
,
"Pearce"
,
"Pearl"
,
"Pearla"
,
"Pearle"
,
"Pearline"
,
"Pearlman"
,
"Pearlstein"
,
"Pearman"
,
"Pears"
,
"Pearse"
,
"Pearson"
,
"Pease"
,
"Peatroy"
,
"Pebrook"
,
"Peck"
,
"Peckham"
,
"Pedaiah"
,
"Pedaias"
,
"Peddada"
,
"Peder"
,
"Pedersen"
,
"Pederson"
,
"Pedrick"
,
"Pedro"
,
"Pedrotti"
,
"Pedroza"
,
"Peer"
,
"Peers"
,
"Peery"
,
"Peg"
,
"Pega"
,
"Pegasus"
,
"Pegeen"
,
"Pegg"
,
"Peggi"
,
"Peggie"
,
"Peggir"
,
"Peggy"
,
"Pegma"
,
"Peh"
,
"Peirce"
,
"Peirsen"
,
"Peisch"
,
"Pejsach"
,
"Pelag"
,
"Pelaga"
,
"Pelage"
,
"Pelagi"
,
"Pelagia"
,
"Pelagias"
,
"Pell"
,
"Pellegrini"
,
"Pellet"
,
"Pelletier"
,
"Pelligrini"
,
"Pellikka"
,
"Pelmas"
,
"Pelpel"
,
"Pelson"
,
"Peltier"
,
"Peltz"
,
"Pember"
,
"Pembroke"
,
"Pembrook"
,
"Pen"
,
"Pena"
,
"Pence"
,
"Pendergast"
,
"Pendleton"
,
"Penelopa"
,
"Penelope"
,
"Pengelly"
,
"Penhall"
,
"Penland"
,
"Penman"
,
"Penn"
,
"Pennebaker"
,
"Penney"
,
"Penni"
,
"Pennie"
,
"Pennington"
,
"Penny"
,
"Penoyer"
,
"Penrod"
,
"Penrose"
,
"Pentha"
,
"Penthea"
,
"Pentheam"
,
"Pentheas"
,
"Peonir"
,
"Peony"
,
"Peoples"
,
"Pepe"
,
"Peper"
,
"Pepi"
,
"Pepillo"
,
"Pepin"
,
"Pepita"
,
"Pepito"
,
"Peppard"
,
"Peppel"
,
"Pepper"
,
"Peppi"
,
"Peppie"
,
"Peppy"
,
"Per"
,
"Perce"
,
"Perceval"
,
"Percival"
,
"Percy"
,
"Perdita"
,
"Peregrine"
,
"Pergrim"
,
"Peri"
,
"Peria"
,
"Perice"
,
"Perkin"
,
"Perkins"
,
"Perkoff"
,
"Perl"
,
"Perla"
,
"Perle"
,
"Perlie"
,
"Perlis"
,
"Perlman"
,
"Perloff"
,
"Pernas"
,
"Pernell"
,
"Perni"
,
"Pernick"
,
"Pero"
,
"Perot"
,
"Perpetua"
,
"Perr"
,
"Perreault"
,
"Perren"
,
"Perretta"
,
"Perri"
,
"Perrie"
,
"Perrin"
,
"Perrine"
,
"Perrins"
,
"Perron"
,
"Perry"
,
"Persas"
,
"Perseus"
,
"Persian"
,
"Persis"
,
"Persons"
,
"Persse"
,
"Persson"
,
"Perusse"
,
"Perzan"
,
"Pesek"
,
"Peskoff"
,
"Pessa"
,
"Pestana"
,
"Pet"
,
"Peta"
,
"Pete"
,
"Peter"
,
"Peterec"
,
"Peterman"
,
"Peters"
,
"Petersen"
,
"Peterson"
,
"Peterus"
,
"Petes"
,
"Petey"
,
"Peti"
,
"Petie"
,
"Petigny"
,
"Petit"
,
"Petite"
,
"Petr"
,
"Petra"
,
"Petracca"
,
"Petras"
,
"Petrick"
,
"Petrie"
,
"Petrina"
,
"Petrine"
,
"Petromilli"
,
"Petronella"
,
"Petronia"
,
"Petronilla"
,
"Petronille"
,
"Petta"
,
"Pettifer"
,
"Pettiford"
,
"Pettit"
,
"Petty"
,
"Petua"
,
"Petula"
,
"Petulah"
,
"Petulia"
,
"Petunia"
,
"Petuu"
,
"Peugia"
,
"Peursem"
,
"Pevzner"
,
"Peyter"
,
"Peyton"
,
"Pfaff"
,
"Pfeffer"
,
"Pfeifer"
,
"Pfister"
,
"Pfosi"
,
"Phaedra"
,
"Phaidra"
,
"Phaih"
,
"Phail"
,
"Phalan"
,
"Pharaoh"
,
"Phare"
,
"Phares"
,
"Phebe"
,
"Phedra"
,
"Phelan"
,
"Phelgen"
,
"Phelgon"
,
"Phelia"
,
"Phelips"
,
"Phelps"
,
"Phemia"
,
"Phene"
,
"Pheni"
,
"Phenica"
,
"Phenice"
,
"Phi"
,
"Phia"
,
"Phil"
,
"Phila"
,
"Philan"
,
"Philana"
,
"Philander"
,
"Philbert"
,
"Philbin"
,
"Philbo"
,
"Philbrook"
,
"Philcox"
,
"Philemol"
,
"Philemon"
,
"Philender"
,
"Philina"
,
"Philine"
,
"Philip"
,
"Philipa"
,
"Philipines"
,
"Philipp"
,
"Philippa"
,
"Philippe"
,
"Philippine"
,
"Philipps"
,
"Philips"
,
"Philipson"
,
"Philis"
,
"Phillada"
,
"Phillane"
,
"Phillida"
,
"Phillie"
,
"Phillip"
,
"Phillipe"
,
"Phillipp"
,
"Phillips"
,
"Phillis"
,
"Philly"
,
"Philo"
,
"Philomena"
,
"Philoo"
,
"Philpot"
,
"Philps"
,
"Phina"
,
"Phineas"
,
"Phio"
,
"Phiona"
,
"Phionna"
,
"Phip"
,
"Phippen"
,
"Phipps"
,
"Phira"
,
"Phoebe"
,
"Phonsa"
,
"Photima"
,
"Photina"
,
"Phox"
,
"Phyl"
,
"Phylis"
,
"Phyllida"
,
"Phyllis"
,
"Phyllys"
,
"Phylys"
,
"Pia"
,
"Piane"
,
"Picardi"
,
"Picco"
,
"Pich"
,
"Pickar"
,
"Pickard"
,
"Pickens"
,
"Picker"
,
"Pickering"
,
"Pickett"
,
"Pickford"
,
"Piderit"
,
"Piefer"
,
"Piegari"
,
"Pier"
,
"Pierce"
,
"Pierette"
,
"Piero"
,
"Pierpont"
,
"Pierre"
,
"Pierrepont"
,
"Pierrette"
,
"Pierro"
,
"Piers"
,
"Pierson"
,
"Pieter"
,
"Pietje"
,
"Pietra"
,
"Pietrek"
,
"Pietro"
,
"Pigeon"
,
"Piggy"
,
"Pike"
,
"Pilar"
,
"Pilloff"
,
"Pillow"
,
"Pillsbury"
,
"Pimbley"
,
"Pincas"
,
"Pinchas"
,
"Pincince"
,
"Pinckney"
,
"Pincus"
,
"Pine"
,
"Pinebrook"
,
"Pineda"
,
"Pinelli"
,
"Pinette"
,
"Ping"
,
"Pinkerton"
,
"Pinkham"
,
"Pinsky"
,
"Pinter"
,
"Pinto"
,
"Pinzler"
,
"Piotr"
,
"Pip"
,
"Piper"
,
"Pippa"
,
"Pippas"
,
"Pippo"
,
"Pippy"
,
"Pirali"
,
"Pirbhai"
,
"Pirnot"
,
"Pironi"
,
"Pirozzo"
,
"Pirri"
,
"Pirzada"
,
"Pisano"
,
"Pisarik"
,
"Piscatelli"
,
"Piselli"
,
"Pish"
,
"Pitarys"
,
"Pitchford"
,
"Pitt"
,
"Pittel"
,
"Pittman"
,
"Pitts"
,
"Pitzer"
,
"Pius"
,
"Piwowar"
,
"Pizor"
,
"Placeeda"
,
"Placia"
,
"Placida"
,
"Placidia"
,
"Placido"
,
"Plafker"
,
"Plank"
,
"Plantagenet"
,
"Plante"
,
"Platas"
,
"Plate"
,
"Plath"
,
"Plato"
,
"Platon"
,
"Platt"
,
"Platto"
,
"Platus"
,
"Player"
,
"Pleasant"
,
"Pleione"
,
"Plerre"
,
"Pliam"
,
"Pliner"
,
"Pliske"
,
"Ploch"
,
"Ploss"
,
"Plossl"
,
"Plotkin"
,
"Plumbo"
,
"Plume"
,
"Plunkett"
,
"Plusch"
,
"Podvin"
,
"Pogue"
,
"Poirer"
,
"Pokorny"
,
"Pol"
,
"Polad"
,
"Polak"
,
"Poland"
,
"Polard"
,
"Polash"
,
"Poler"
,
"Poliard"
,
"Polik"
,
"Polinski"
,
"Polish"
,
"Politi"
,
"Polito"
,
"Polivy"
,
"Polk"
,
"Polky"
,
"Poll"
,
"Pollack"
,
"Pollak"
,
"Pollard"
,
"Pollerd"
,
"Pollie"
,
"Pollitt"
,
"Polloch"
,
"Pollock"
,
"Pollux"
,
"Polly"
,
"Pollyanna"
,
"Pomcroy"
,
"Pomeroy"
,
"Pomfret"
,
"Pomfrey"
,
"Pomona"
,
"Pompea"
,
"Pompei"
,
"Ponce"
,
"Pond"
,
"Pontias"
,
"Pontius"
,
"Ponton"
,
"Pontone"
,
"Pontus"
,
"Ponzo"
,
"Poock"
,
"Pooh"
,
"Pooi"
,
"Pool"
,
"Poole"
,
"Pooley"
,
"Poore"
,
"Pope"
,
"Popele"
,
"Popelka"
,
"Poppas"
,
"Popper"
,
"Poppo"
,
"Poppy"
,
"Porche"
,
"Porcia"
,
"Poree"
,
"Porett"
,
"Port"
,
"Porta"
,
"Porte"
,
"Porter"
,
"Portia"
,
"Portie"
,
"Portingale"
,
"Portland"
,
"Portugal"
,
"Portuna"
,
"Portwin"
,
"Portwine"
,
"Porty"
,
"Porush"
,
"Posehn"
,
"Posner"
,
"Possing"
,
"Post"
,
"Postman"
,
"Potash"
,
"Potter"
,
"Potts"
,
"Poucher"
,
"Poul"
,
"Poulter"
,
"Pouncey"
,
"Pournaras"
,
"Powder"
,
"Powe"
,
"Powel"
,
"Powell"
,
"Power"
,
"Powers"
,
"Pownall"
,
"Poyssick"
,
"Pozzy"
,
"Pradeep"
,
"Prader"
,
"Prady"
,
"Prager"
,
"Prakash"
,
"Prasad"
,
"Pratt"
,
"Pratte"
,
"Pravit"
,
"Prebo"
,
"Preciosa"
,
"Preiser"
,
"Prem"
,
"Premer"
,
"Pren"
,
"Prendergast"
,
"Prent"
,
"Prentice"
,
"Prentiss"
,
"Presber"
,
"Prescott"
,
"Presley"
,
"Press"
,
"Pressey"
,
"Pressman"
,
"Prestige"
,
"Preston"
,
"Pretrice"
,
"Preuss"
,
"Previdi"
,
"Prevot"
,
"Price"
,
"Prichard"
,
"Pricilla"
,
"Pride"
,
"Priebe"
,
"Priest"
,
"Priestley"
,
"Prima"
,
"Primalia"
,
"Primavera"
,
"Primaveras"
,
"Primaveria"
,
"Primo"
,
"Primrosa"
,
"Primrose"
,
"Prince"
,
"Princess"
,
"Prinz"
,
"Prior"
,
"Pris"
,
"Prisca"
,
"Priscella"
,
"Priscilla"
,
"Prisilla"
,
"Prissie"
,
"Prissy"
,
"Pritchard"
,
"Pritchett"
,
"Prober"
,
"Prochora"
,
"Prochoras"
,
"Procora"
,
"Procter"
,
"Procto"
,
"Proctor"
,
"Profant"
,
"Proffitt"
,
"Pronty"
,
"Pros"
,
"Prosper"
,
"Prospero"
,
"Prosperus"
,
"Prosser"
,
"Proud"
,
"Proudfoot"
,
"Proudlove"
,
"Proudman"
,
"Proulx"
,
"Prouty"
,
"Prowel"
,
"Pru"
,
"Pruchno"
,
"Prud"
,
"Prudence"
,
"Prudhoe"
,
"Prudi"
,
"Prudie"
,
"Prudy"
,
"Prue"
,
"Prunella"
,
"Prussian"
,
"Pruter"
,
"Pry"
,
"Pryce"
,
"Pryor"
,
"Psyche"
,
"Pubilis"
,
"Publea"
,
"Publia"
,
"Publias"
,
"Publius"
,
"Publus"
,
"Pucida"
,
"Pudendas"
,
"Pudens"
,
"Puduns"
,
"Puett"
,
"Pufahl"
,
"Puff"
,
"Pugh"
,
"Puglia"
,
"Puiia"
,
"Puklich"
,
"Pul"
,
"Pulcheria"
,
"Pulchi"
,
"Pulchia"
,
"Pulling"
,
"Pulsifer"
,
"Pump"
,
"Punak"
,
"Punke"
,
"Purcell"
,
"Purdum"
,
"Purdy"
,
"Puri"
,
"Purington"
,
"Puritan"
,
"Purity"
,
"Purpura"
,
"Purse"
,
"Purvis"
,
"Putnam"
,
"Putnem"
,
"Puto"
,
"Putscher"
,
"Puttergill"
,
"Py"
,
"Pyle"
,
"Pylle"
,
"Pyne"
,
"Pyotr"
,
"Pyszka"
,
"Pytlik"
,
"Quackenbush"
,
"Quar"
,
"Quarta"
,
"Quartana"
,
"Quartas"
,
"Quartet"
,
"Quartis"
,
"Quartus"
,
"Queen"
,
"Queena"
,
"Queenie"
,
"Quenby"
,
"Quenna"
,
"Quennie"
,
"Quent"
,
"Quentin"
,
"Queri"
,
"Querida"
,
"Queridas"
,
"Questa"
,
"Queston"
,
"Quick"
,
"Quickel"
,
"Quickman"
,
"Quigley"
,
"Quill"
,
"Quillan"
,
"Quillon"
,
"Quin"
,
"Quinby"
,
"Quince"
,
"Quincey"
,
"Quincy"
,
"Quinlan"
,
"Quinn"
,
"Quint"
,
"Quinta"
,
"Quintana"
,
"Quintessa"
,
"Quintie"
,
"Quintilla"
,
"Quintin"
,
"Quintina"
,
"Quinton"
,
"Quintus"
,
"Quirita"
,
"Quirk"
,
"Quita"
,
"Quiteri"
,
"Quiteria"
,
"Quiteris"
,
"Quitt"
,
"Qulllon"
,
"Raab"
,
"Raama"
,
"Raasch"
,
"Rab"
,
"Rabah"
,
"Rabassa"
,
"Rabbi"
,
"Rabelais"
,
"Rabi"
,
"Rabiah"
,
"Rabin"
,
"Rabjohn"
,
"Rabkin"
,
"Rabush"
,
"Race"
,
"Rachaba"
,
"Rachael"
,
"Rachel"
,
"Rachele"
,
"Rachelle"
,
"Racklin"
,
"Rad"
,
"Radack"
,
"Radborne"
,
"Radbourne"
,
"Radbun"
,
"Radburn"
,
"Radcliffe"
,
"Raddatz"
,
"Raddi"
,
"Raddie"
,
"Raddy"
,
"Radferd"
,
"Radford"
,
"Radie"
,
"Radke"
,
"Radley"
,
"Radloff"
,
"Radman"
,
"Radmen"
,
"Radmilla"
,
"Radu"
,
"Rae"
,
"Raeann"
,
"Raf"
,
"Rafa"
,
"Rafael"
,
"Rafaela"
,
"Rafaelia"
,
"Rafaelita"
,
"Rafaelle"
,
"Rafaellle"
,
"Rafaello"
,
"Rafaelof"
,
"Rafat"
,
"Rafe"
,
"Raff"
,
"Raffaello"
,
"Raffarty"
,
"Rafferty"
,
"Raffin"
,
"Raffo"
,
"Rafi"
,
"Rafiq"
,
"Rafter"
,
"Ragan"
,
"Ragen"
,
"Ragg"
,
"Ragland"
,
"Ragnar"
,
"Ragouzis"
,
"Ragucci"
,
"Rahal"
,
"Rahel"
,
"Rahm"
,
"Rahman"
,
"Rahmann"
,
"Rahr"
,
"Rai"
,
"Raila"
,
"Raimes"
,
"Raimondo"
,
"Raimund"
,
"Raimundo"
,
"Raina"
,
"Rainah"
,
"Raine"
,
"Rainer"
,
"Raines"
,
"Rainger"
,
"Rainie"
,
"Rains"
,
"Rainwater"
,
"Rajewski"
,
"Raji"
,
"Rajiv"
,
"Rakel"
,
"Rakia"
,
"Ralaigh"
,
"Raleigh"
,
"Ralf"
,
"Ralfston"
,
"Ralina"
,
"Ralleigh"
,
"Ralli"
,
"Ralph"
,
"Ralston"
,
"Ram"
,
"Rama"
,
"Ramah"
,
"Raman"
,
"Ramberg"
,
"Rambert"
,
"Rambort"
,
"Rambow"
,
"Ramburt"
,
"Rame"
,
"Ramey"
,
"Ramiah"
,
"Ramin"
,
"Ramon"
,
"Ramona"
,
"Ramonda"
,
"Ramos"
,
"Ramsay"
,
"Ramsdell"
,
"Ramsden"
,
"Ramses"
,
"Ramsey"
,
"Ramunni"
,
"Ran"
,
"Rana"
,
"Rance"
,
"Rancell"
,
"Ranchod"
,
"Rand"
,
"Randa"
,
"Randal"
,
"Randall"
,
"Randee"
,
"Randell"
,
"Randene"
,
"Randi"
,
"Randie"
,
"Randolf"
,
"Randolph"
,
"Randy"
,
"Ranee"
,
"Raney"
,
"Range"
,
"Rangel"
,
"Ranger"
,
"Rani"
,
"Rania"
,
"Ranice"
,
"Ranie"
,
"Ranique"
,
"Ranit"
,
"Ranita"
,
"Ranite"
,
"Ranitta"
,
"Ranjiv"
,
"Rankin"
,
"Rann"
,
"Ranna"
,
"Ransell"
,
"Ransom"
,
"Ransome"
,
"Ranson"
,
"Ranzini"
,
"Rao"
,
"Raouf"
,
"Raoul"
,
"Rap"
,
"Rape"
,
"Raphael"
,
"Raphaela"
,
"Rapp"
,
"Raquel"
,
"Raquela"
,
"Ras"
,
"Raseda"
,
"Raseta"
,
"Rashida"
,
"Rashidi"
,
"Rasia"
,
"Rask"
,
"Raskin"
,
"Raskind"
,
"Rasla"
,
"Rasmussen"
,
"Rastus"
,
"Rasure"
,
"Ratcliff"
,
"Ratcliffe"
,
"Ratha"
,
"Rather"
,
"Ratib"
,
"Rattan"
,
"Rattray"
,
"Rauch"
,
"Raul"
,
"Rausch"
,
"Rauscher"
,
"Raveaux"
,
"Raven"
,
"Ravens"
,
"Ravi"
,
"Ravid"
,
"Raviv"
,
"Ravo"
,
"Rawdan"
,
"Rawden"
,
"Rawdin"
,
"Rawdon"
,
"Rawley"
,
"Rawlinson"
,
"Ray"
,
"Raybin"
,
"Raybourne"
,
"Rayburn"
,
"Raychel"
,
"Raycher"
,
"Raye"
,
"Rayford"
,
"Rayle"
,
"Raymond"
,
"Raymonds"
,
"Raymund"
,
"Rayna"
,
"Raynah"
,
"Raynard"
,
"Raynata"
,
"Raynell"
,
"Rayner"
,
"Raynold"
,
"Raynor"
,
"Rayshell"
,
"Razid"
,
"Rea"
,
"Reace"
,
"Read"
,
"Reade"
,
"Readus"
,
"Ready"
,
"Reagan"
,
"Reagen"
,
"Reahard"
,
"Reames"
,
"Reamonn"
,
"Reamy"
,
"Reave"
,
"Reba"
,
"Rebah"
,
"Rebak"
,
"Rebane"
,
"Rebba"
,
"Rebbecca"
,
"Rebe"
,
"Rebeca"
,
"Rebecca"
,
"Rebecka"
,
"Rebeka"
,
"Rebekah"
,
"Rebekkah"
,
"Rebel"
,
"Rebhun"
,
"Rech"
,
"Recha"
,
"Rechaba"
,
"Reckford"
,
"Recor"
,
"Rector"
,
"Red"
,
"Redd"
,
"Reddin"
,
"Reddy"
,
"Redfield"
,
"Redford"
,
"Redman"
,
"Redmer"
,
"Redmond"
,
"Redmund"
,
"Redvers"
,
"Redwine"
,
"Ree"
,
"Reeba"
,
"Reece"
,
"Reed"
,
"Reede"
,
"Reedy"
,
"Reeher"
,
"Reel"
,
"Reena"
,
"Rees"
,
"Reese"
,
"Reeta"
,
"Reeva"
,
"Reeve"
,
"Reeves"
,
"Reg"
,
"Regan"
,
"Regazzi"
,
"Regen"
,
"Reger"
,
"Reggi"
,
"Reggie"
,
"Reggis"
,
"Reggy"
,
"Regina"
,
"Reginald"
,
"Reginauld"
,
"Regine"
,
"Rego"
,
"Rehm"
,
"Rehnberg"
,
"Reich"
,
"Reiche"
,
"Reichel"
,
"Reichert"
,
"Reid"
,
"Reidar"
,
"Reider"
,
"Reifel"
,
"Reiko"
,
"Reilly"
,
"Reimer"
,
"Rein"
,
"Reina"
,
"Reinald"
,
"Reinaldo"
,
"Reinaldos"
,
"Reine"
,
"Reiner"
,
"Reiners"
,
"Reinert"
,
"Reinertson"
,
"Reinhard"
,
"Reinhardt"
,
"Reinhart"
,
"Reinhold"
,
"Reinke"
,
"Reinold"
,
"Reinwald"
,
"Reis"
,
"Reisch"
,
"Reiser"
,
"Reisfield"
,
"Reisinger"
,
"Reisman"
,
"Reiss"
,
"Reiter"
,
"Reitman"
,
"Reld"
,
"Rella"
,
"Rellia"
,
"Relly"
,
"Rem"
,
"Rema"
,
"Remde"
,
"Remington"
,
"Remmer"
,
"Rempe"
,
"Remsen"
,
"Remus"
,
"Remy"
,
"Rena"
,
"Renado"
,
"Renae"
,
"Renaldo"
,
"Renard"
,
"Renata"
,
"Renate"
,
"Renato"
,
"Renaud"
,
"Renault"
,
"Renckens"
,
"Rene"
,
"Renee"
,
"Renell"
,
"Renelle"
,
"Reneta"
,
"Renferd"
,
"Renfred"
,
"Reni"
,
"Renick"
,
"Renie"
,
"Renita"
,
"Reniti"
,
"Rennane"
,
"Renner"
,
"Rennie"
,
"Rennold"
,
"Renny"
,
"Rento"
,
"Rentsch"
,
"Rentschler"
,
"Renwick"
,
"Renzo"
,
"Reo"
,
"Resa"
,
"Rese"
,
"Reseda"
,
"Resee"
,
"Reseta"
,
"Resor"
,
"Ress"
,
"Ressler"
,
"Reste"
,
"Restivo"
,
"Reta"
,
"Retha"
,
"Rett"
,
"Rettig"
,
"Rettke"
,
"Reube"
,
"Reuben"
,
"Reuven"
,
"Revell"
,
"Reviel"
,
"Reviere"
,
"Revkah"
,
"Rew"
,
"Rex"
,
"Rexana"
,
"Rexanna"
,
"Rexanne"
,
"Rexer"
,
"Rexferd"
,
"Rexford"
,
"Rexfourd"
,
"Rey"
,
"Reyna"
,
"Reynard"
,
"Reynold"
,
"Reynolds"
,
"Rezzani"
,
"Rhea"
,
"Rheba"
,
"Rhee"
,
"Rheims"
,
"Rheingold"
,
"Rheinlander"
,
"Rheta"
,
"Rhett"
,
"Rhetta"
,
"Rhiamon"
,
"Rhiana"
,
"Rhianna"
,
"Rhianon"
,
"Rhine"
,
"Rhines"
,
"Rhoades"
,
"Rhoads"
,
"Rhoda"
,
"Rhodes"
,
"Rhodia"
,
"Rhodie"
,
"Rhody"
,
"Rhona"
,
"Rhonda"
,
"Rhu"
,
"Rhynd"
,
"Rhyne"
,
"Rhyner"
,
"Rhys"
,
"Ri"
,
"Ria"
,
"Riana"
,
"Riancho"
,
"Riane"
,
"Rianna"
,
"Riannon"
,
"Rianon"
,
"Riba"
,
"Ribal"
,
"Ribaudo"
,
"Ribble"
,
"Ric"
,
"Rica"
,
"Ricard"
,
"Ricarda"
,
"Ricardama"
,
"Ricardo"
,
"Ricca"
,
"Riccardo"
,
"Riccio"
,
"Rice"
,
"Rich"
,
"Richara"
,
"Richard"
,
"Richarda"
,
"Richardo"
,
"Richards"
,
"Richardson"
,
"Richart"
,
"Richel"
,
"Richela"
,
"Richella"
,
"Richelle"
,
"Richer"
,
"Richers"
,
"Richey"
,
"Richia"
,
"Richie"
,
"Richlad"
,
"Richma"
,
"Richmal"
,
"Richman"
,
"Richmond"
,
"Richmound"
,
"Richter"
,
"Richy"
,
"Rici"
,
"Rick"
,
"Rickard"
,
"Rickart"
,
"Ricker"
,
"Rickert"
,
"Ricketts"
,
"Rickey"
,
"Ricki"
,
"Rickie"
,
"Ricky"
,
"Rico"
,
"Ricoriki"
,
"Rida"
,
"Riddle"
,
"Rider"
,
"Ridglea"
,
"Ridglee"
,
"Ridgley"
,
"Ridinger"
,
"Ridley"
,
"Rie"
,
"Riebling"
,
"Riedel"
,
"Riegel"
,
"Rieger"
,
"Riehl"
,
"Riella"
,
"Ries"
,
"Riesman"
,
"Riess"
,
"Rieth"
,
"Riffle"
,
"Rifkin"
,
"Rigby"
,
"Rigdon"
,
"Riggall"
,
"Riggins"
,
"Riggs"
,
"Riha"
,
"Rihana"
,
"Rik"
,
"Rika"
,
"Riker"
,
"Riki"
,
"Rikki"
,
"Rilda"
,
"Riley"
,
"Rillings"
,
"Rillis"
,
"Rima"
,
"Rimas"
,
"Rimma"
,
"Rimola"
,
"Rina"
,
"Rinaldo"
,
"Rind"
,
"Rinee"
,
"Ring"
,
"Ringe"
,
"Ringler"
,
"Ringo"
,
"Ringsmuth"
,
"Rinna"
,
"Rintoul"
,
"Riobard"
,
"Riocard"
,
"Rior"
,
"Riordan"
,
"Riorsson"
,
"Rip"
,
"Ripleigh"
,
"Riplex"
,
"Ripley"
,
"Ripp"
,
"Risa"
,
"Rise"
,
"Risley"
,
"Rissa"
,
"Risser"
,
"Rist"
,
"Risteau"
,
"Rita"
,
"Ritch"
,
"Ritchie"
,
"Riti"
,
"Ritter"
,
"Ritz"
,
"Riva"
,
"Rivalee"
,
"Rivard"
,
"River"
,
"Rivera"
,
"Rivers"
,
"Rives"
,
"Rivi"
,
"Rivkah"
,
"Rivy"
,
"Rizas"
,
"Rizika"
,
"Rizzi"
,
"Rizzo"
,
"Ro"
,
"Roach"
,
"Roana"
,
"Roane"
,
"Roanna"
,
"Roanne"
,
"Roarke"
,
"Roath"
,
"Rob"
,
"Robaina"
,
"Robb"
,
"Robbert"
,
"Robbi"
,
"Robbie"
,
"Robbin"
,
"Robbins"
,
"Robby"
,
"Robbyn"
,
"Robena"
,
"Robenia"
,
"Robers"
,
"Roberson"
,
"Robert"
,
"Roberta"
,
"Roberto"
,
"Roberts"
,
"Robertson"
,
"Robet"
,
"Robi"
,
"Robillard"
,
"Robin"
,
"Robina"
,
"Robinet"
,
"Robinett"
,
"Robinetta"
,
"Robinette"
,
"Robinia"
,
"Robins"
,
"Robinson"
,
"Robison"
,
"Robson"
,
"Roby"
,
"Robyn"
,
"Rocca"
,
"Rocco"
,
"Roch"
,
"Roche"
,
"Rochell"
,
"Rochella"
,
"Rochelle"
,
"Rochemont"
,
"Rocher"
,
"Rochester"
,
"Rochette"
,
"Rochkind"
,
"Rochus"
,
"Rock"
,
"Rockafellow"
,
"Rockefeller"
,
"Rockel"
,
"Rocker"
,
"Rockey"
,
"Rockie"
,
"Rockwell"
,
"Rockwood"
,
"Rocky"
,
"Rocray"
,
"Rod"
,
"Roda"
,
"Rodd"
,
"Roddie"
,
"Roddy"
,
"Rodenhouse"
,
"Roderic"
,
"Roderica"
,
"Roderich"
,
"Roderick"
,
"Roderigo"
,
"Rodge"
,
"Rodger"
,
"Rodgers"
,
"Rodi"
,
"Rodie"
,
"Rodina"
,
"Rodl"
,
"Rodman"
,
"Rodmann"
,
"Rodmun"
,
"Rodmur"
,
"Rodney"
,
"Rodolfo"
,
"Rodolph"
,
"Rodolphe"
,
"Rodrich"
,
"Rodrick"
,
"Rodrigo"
,
"Rodriguez"
,
"Rodrique"
,
"Roe"
,
"Roede"
,
"Roee"
,
"Roehm"
,
"Roer"
,
"Roeser"
,
"Rog"
,
"Roger"
,
"Rogerio"
,
"Rogers"
,
"Rogerson"
,
"Rogovy"
,
"Rogozen"
,
"Rohn"
,
"Roi"
,
"Roice"
,
"Roid"
,
"Rois"
,
"Rojas"
,
"Rokach"
,
"Rola"
,
"Rolan"
,
"Roland"
,
"Rolanda"
,
"Rolando"
,
"Rolandson"
,
"Roldan"
,
"Roley"
,
"Rolf"
,
"Rolfe"
,
"Rolfston"
,
"Rolland"
,
"Rollet"
,
"Rollie"
,
"Rollin"
,
"Rollins"
,
"Rollo"
,
"Rolo"
,
"Rolph"
,
"Roma"
,
"Romain"
,
"Romaine"
,
"Romalda"
,
"Roman"
,
"Romanas"
,
"Romano"
,
"Rombert"
,
"Rome"
,
"Romelda"
,
"Romelle"
,
"Romeo"
,
"Romeon"
,
"Romeu"
,
"Romeyn"
,
"Romie"
,
"Romilda"
,
"Romilly"
,
"Romina"
,
"Romine"
,
"Romito"
,
"Romney"
,
"Romo"
,
"Romola"
,
"Romona"
,
"Romonda"
,
"Romulus"
,
"Romy"
,
"Ron"
,
"Rona"
,
"Ronal"
,
"Ronald"
,
"Ronalda"
,
"Ronda"
,
"Rondi"
,
"Rondon"
,
"Ronel"
,
"Ronen"
,
"Ronica"
,
"Ronn"
,
"Ronna"
,
"Ronnholm"
,
"Ronni"
,
"Ronnica"
,
"Ronnie"
,
"Ronny"
,
"Roobbie"
,
"Rooke"
,
"Rooker"
,
"Rooney"
,
"Roos"
,
"Roose"
,
"Roosevelt"
,
"Root"
,
"Roots"
,
"Roper"
,
"Roque"
,
"Rora"
,
"Rori"
,
"Rorie"
,
"Rorke"
,
"Rorry"
,
"Rorrys"
,
"Rory"
,
"Ros"
,
"Rosa"
,
"Rosabel"
,
"Rosabella"
,
"Rosabelle"
,
"Rosalba"
,
"Rosalee"
,
"Rosaleen"
,
"Rosalia"
,
"Rosalie"
,
"Rosalind"
,
"Rosalinda"
,
"Rosalinde"
,
"Rosaline"
,
"Rosalyn"
,
"Rosalynd"
,
"Rosamond"
,
"Rosamund"
,
"Rosana"
,
"Rosane"
,
"Rosanna"
,
"Rosanne"
,
"Rosario"
,
"Rosati"
,
"Rosco"
,
"Roscoe"
,
"Rose"
,
"Roseann"
,
"Roseanna"
,
"Roseanne"
,
"Rosecan"
,
"Rosel"
,
"Roselane"
,
"Roselani"
,
"Roselba"
,
"Roselia"
,
"Roselin"
,
"Roseline"
,
"Rosella"
,
"Roselle"
,
"Roselyn"
,
"Rosemare"
,
"Rosemari"
,
"Rosemaria"
,
"Rosemarie"
,
"Rosemary"
,
"Rosemonde"
,
"Rosen"
,
"Rosena"
,
"Rosenbaum"
,
"Rosenberg"
,
"Rosenberger"
,
"Rosenblast"
,
"Rosenblatt"
,
"Rosenblum"
,
"Rosene"
,
"Rosenfeld"
,
"Rosenkrantz"
,
"Rosenkranz"
,
"Rosenquist"
,
"Rosenstein"
,
"Rosenthal"
,
"Rosenwald"
,
"Rosenzweig"
,
"Rosetta"
,
"Rosette"
,
"Roshan"
,
"Roshelle"
,
"Rosie"
,
"Rosina"
,
"Rosinski"
,
"Rosio"
,
"Rosita"
,
"Roskes"
,
"Roslyn"
,
"Rosmarin"
,
"Rosmunda"
,
"Rosner"
,
"Rosol"
,
"Ross"
,
"Rosse"
,
"Rossen"
,
"Rossi"
,
"Rossie"
,
"Rossing"
,
"Rossner"
,
"Rossuck"
,
"Rossy"
,
"Rostand"
,
"Roswald"
,
"Roswell"
,
"Rosy"
,
"Rotberg"
,
"Roter"
,
"Roth"
,
"Rothberg"
,
"Rothenberg"
,
"Rother"
,
"Rothmuller"
,
"Rothschild"
,
"Rothstein"
,
"Rothwell"
,
"Roti"
,
"Rotman"
,
"Rotow"
,
"Roumell"
,
"Rourke"
,
"Routh"
,
"Rouvin"
,
"Roux"
,
"Rovelli"
,
"Rovit"
,
"Rovner"
,
"Row"
,
"Rowan"
,
"Rowe"
,
"Rowell"
,
"Rowen"
,
"Rowena"
,
"Rowland"
,
"Rowley"
,
"Rowney"
,
"Rox"
,
"Roxana"
,
"Roxane"
,
"Roxanna"
,
"Roxanne"
,
"Roxi"
,
"Roxie"
,
"Roxine"
,
"Roxy"
,
"Roy"
,
"Royal"
,
"Royall"
,
"Roybn"
,
"Royce"
,
"Royd"
,
"Roydd"
,
"Royden"
,
"Roye"
,
"Royo"
,
"Roz"
,
"Rozalie"
,
"Rozalin"
,
"Rozamond"
,
"Rozanna"
,
"Rozanne"
,
"Roze"
,
"Rozek"
,
"Rozele"
,
"Rozella"
,
"Rozelle"
,
"Rozina"
,
"Rriocard"
,
"Ru"
,
"Rubbico"
,
"Rube"
,
"Rubel"
,
"Ruben"
,
"Rubens"
,
"Rubenstein"
,
"Ruberta"
,
"Rubetta"
,
"Rubi"
,
"Rubia"
,
"Rubie"
,
"Rubin"
,
"Rubina"
,
"Rubinstein"
,
"Rubio"
,
"Ruby"
,
"Rucker"
,
"Ruckman"
,
"Rudd"
,
"Ruddie"
,
"Ruddy"
,
"Rudelson"
,
"Ruder"
,
"Rudich"
,
"Rudie"
,
"Rudiger"
,
"Rudin"
,
"Rudman"
,
"Rudolf"
,
"Rudolfo"
,
"Rudolph"
,
"Rudwik"
,
"Rudy"
,
"Rudyard"
,
"Rue"
,
"Ruel"
,
"Ruella"
,
"Ruelle"
,
"Ruelu"
,
"Rufe"
,
"Rufena"
,
"Ruff"
,
"Ruffi"
,
"Ruffin"
,
"Ruffina"
,
"Ruffo"
,
"Rufford"
,
"Rufina"
,
"Ruford"
,
"Rufus"
,
"Rugen"
,
"Rugg"
,
"Ruggiero"
,
"Ruhl"
,
"Ruhnke"
,
"Ruiz"
,
"Rumery"
,
"Rumilly"
,
"Rumney"
,
"Rumpf"
,
"Runck"
,
"Rundgren"
,
"Runkel"
,
"Runkle"
,
"Runstadler"
,
"Rupert"
,
"Ruperta"
,
"Ruperto"
,
"Ruphina"
,
"Ruprecht"
,
"Rurik"
,
"Rus"
,
"Ruscher"
,
"Ruscio"
,
"Rusel"
,
"Rusell"
,
"Rusert"
,
"Rush"
,
"Rushing"
,
"Ruskin"
,
"Russ"
,
"Russel"
,
"Russell"
,
"Russi"
,
"Russia"
,
"Russian"
,
"Russo"
,
"Russom"
,
"Russon"
,
"Rust"
,
"Rustice"
,
"Rusticus"
,
"Rustie"
,
"Rustin"
,
"Rusty"
,
"Rutan"
,
"Rutger"
,
"Ruth"
,
"Ruthann"
,
"Ruthanne"
,
"Ruthe"
,
"Rutherford"
,
"Rutherfurd"
,
"Ruthi"
,
"Ruthie"
,
"Ruthven"
,
"Ruthy"
,
"Rutledge"
,
"Rutter"
,
"Ruttger"
,
"Ruvolo"
,
"Ruy"
,
"Ruyle"
,
"Ruzich"
,
"Ryan"
,
"Ryann"
,
"Rycca"
,
"Rydder"
,
"Ryder"
,
"Rye"
,
"Ryle"
,
"Ryley"
,
"Ryon"
,
"Rysler"
,
"Ryter"
,
"Ryun"
,
"Saba"
,
"Sabah"
,
"Sabba"
,
"Sabec"
,
"Sabella"
,
"Sabelle"
,
"Saber"
,
"Saberhagen"
,
"Saberio"
,
"Sabian"
,
"Sabina"
,
"Sabine"
,
"Sabino"
,
"Sabir"
,
"Sabra"
,
"Sabrina"
,
"Sabsay"
,
"Sabu"
,
"Sacci"
,
"Sacha"
,
"Sachi"
,
"Sachiko"
,
"Sachs"
,
"Sachsse"
,
"Sacken"
,
"Sackey"
,
"Sackman"
,
"Sacks"
,
"Sacksen"
,
"Sackville"
,
"Sacttler"
,
"Sad"
,
"Sada"
,
"Saddler"
,
"Sadella"
,
"Sadick"
,
"Sadie"
,
"Sadira"
,
"Sadirah"
,
"Sadiras"
,
"Sadler"
,
"Sadoc"
,
"Sadoff"
,
"Sadonia"
,
"Sadowski"
,
"Sadye"
,
"Saeger"
,
"Saffian"
,
"Saffier"
,
"Saffren"
,
"Safier"
,
"Safir"
,
"Safire"
,
"Safko"
,
"Sage"
,
"Sager"
,
"Sagerman"
,
"Saidee"
,
"Saidel"
,
"Saideman"
,
"Saied"
,
"Saiff"
,
"Sailesh"
,
"Saimon"
,
"Saint"
,
"Sair"
,
"Saire"
,
"Saito"
,
"Sajovich"
,
"Sakhuja"
,
"Sakmar"
,
"Sakovich"
,
"Saks"
,
"Sal"
,
"Salahi"
,
"Salaidh"
,
"Salamanca"
,
"Salamone"
,
"Salangi"
,
"Salangia"
,
"Salas"
,
"Salazar"
,
"Salba"
,
"Salbu"
,
"Salchunas"
,
"Sale"
,
"Saleem"
,
"Salem"
,
"Salema"
,
"Saleme"
,
"Salena"
,
"Salene"
,
"Salesin"
,
"Salim"
,
"Salina"
,
"Salinas"
,
"Salisbarry"
,
"Salisbury"
,
"Salita"
,
"Sall"
,
"Sallee"
,
"Salli"
,
"Sallie"
,
"Sally"
,
"Sallyann"
,
"Sallyanne"
,
"Salman"
,
"Salmon"
,
"Saloma"
,
"Salome"
,
"Salomi"
,
"Salomie"
,
"Salomo"
,
"Salomon"
,
"Salomone"
,
"Salot"
,
"Salsbury"
,
"Salter"
,
"Saltsman"
,
"Saltzman"
,
"Salvador"
,
"Salvadore"
,
"Salvatore"
,
"Salvay"
,
"Salvidor"
,
"Salvucci"
,
"Salzhauer"
,
"Sam"
,
"Sama"
,
"Samal"
,
"Samala"
,
"Samale"
,
"Samalla"
,
"Samantha"
,
"Samanthia"
,
"Samara"
,
"Samaria"
,
"Samau"
,
"Samella"
,
"Samford"
,
"Sami"
,
"Samira"
,
"Sammer"
,
"Sammie"
,
"Sammons"
,
"Sammy"
,
"Samp"
,
"Sampson"
,
"Sams"
,
"Samson"
,
"Samuel"
,
"Samuela"
,
"Samuele"
,
"Samuella"
,
"Samuelson"
,
"Samul"
,
"Samy"
,
"Sanalda"
,
"Sanbo"
,
"Sanborn"
,
"Sanborne"
,
"Sanburn"
,
"Sancha"
,
"Sanchez"
,
"Sancho"
,
"Sand"
,
"Sandberg"
,
"Sande"
,
"Sandeep"
,
"Sandell"
,
"Sander"
,
"Sanders"
,
"Sanderson"
,
"Sandi"
,
"Sandie"
,
"Sandler"
,
"Sandon"
,
"Sandor"
,
"Sandra"
,
"Sandro"
,
"Sandry"
,
"Sands"
,
"Sandstrom"
,
"Sandy"
,
"Sandye"
,
"Sanferd"
,
"Sanfo"
,
"Sanford"
,
"Sanfourd"
,
"Sanfred"
,
"Sang"
,
"Sanger"
,
"Sanjay"
,
"Sanjiv"
,
"Sankaran"
,
"Sankey"
,
"Sansbury"
,
"Sansen"
,
"Sanson"
,
"Sansone"
,
"Santa"
,
"Santana"
,
"Santiago"
,
"Santini"
,
"Santoro"
,
"Santos"
,
"Sanyu"
,
"Sapers"
,
"Saphra"
,
"Sapienza"
,
"Sapowith"
,
"Sapphera"
,
"Sapphira"
,
"Sapphire"
,
"Sara"
,
"Sara-Ann"
,
"Saraann"
,
"Sarad"
,
"Sarah"
,
"Saraiya"
,
"Sarajane"
,
"Sarazen"
,
"Sarchet"
,
"Sardella"
,
"Saree"
,
"Sarena"
,
"Sarene"
,
"Saretta"
,
"Sarette"
,
"Sarge"
,
"Sargent"
,
"Sari"
,
"Sarid"
,
"Sarilda"
,
"Sarina"
,
"Sarine"
,
"Sarita"
,
"Sarkaria"
,
"Sarnoff"
,
"Sarson"
,
"Sartin"
,
"Sascha"
,
"Sasha"
,
"Sashenka"
,
"Sasnett"
,
"Sass"
,
"Sassan"
,
"Sateia"
,
"Sathrum"
,
"Sato"
,
"Satterfield"
,
"Satterlee"
,
"Saturday"
,
"Saucy"
,
"Sauder"
,
"Saudra"
,
"Sauer"
,
"Sauers"
,
"Saul"
,
"Sauls"
,
"Saum"
,
"Sauncho"
,
"Saunder"
,
"Saunders"
,
"Saunderson"
,
"Saundra"
,
"Sausa"
,
"Sauveur"
,
"Savadove"
,
"Savage"
,
"Saval"
,
"Savanna"
,
"Savannah"
,
"Savdeep"
,
"Savell"
,
"Savick"
,
"Savil"
,
"Savill"
,
"Saville"
,
"Savina"
,
"Savior"
,
"Savitt"
,
"Savory"
,
"Saw"
,
"Sawtelle"
,
"Sawyer"
,
"Sawyere"
,
"Sawyor"
,
"Sax"
,
"Saxe"
,
"Saxen"
,
"Saxena"
,
"Saxon"
,
"Say"
,
"Sayce"
,
"Sayed"
,
"Sayer"
,
"Sayers"
,
"Sayette"
,
"Sayles"
,
"Saylor"
,
"Sayre"
,
"Sayres"
,
"Scales"
,
"Scammon"
,
"Scandura"
,
"Scarface"
,
"Scarito"
,
"Scarlet"
,
"Scarlett"
,
"Scarrow"
,
"Scever"
,
"Scevo"
,
"Scevor"
,
"Scevour"
,
"Schaab"
,
"Schaaff"
,
"Schach"
,
"Schacker"
,
"Schaefer"
,
"Schaeffer"
,
"Schafer"
,
"Schaffel"
,
"Schaffer"
,
"Schalles"
,
"Schaper"
,
"Schapira"
,
"Scharaga"
,
"Scharf"
,
"Scharff"
,
"Schargel"
,
"Schatz"
,
"Schaumberger"
,
"Schear"
,
"Schechinger"
,
"Schechter"
,
"Scheck"
,
"Schecter"
,
"Scheer"
,
"Scheers"
,
"Scheider"
,
"Scheld"
,
"Schell"
,
"Schellens"
,
"Schenck"
,
"Scherle"
,
"Scherman"
,
"Schertz"
,
"Schick"
,
"Schiff"
,
"Schiffman"
,
"Schifra"
,
"Schild"
,
"Schilit"
,
"Schilling"
,
"Schilt"
,
"Schindler"
,
"Schinica"
,
"Schiro"
,
"Schlenger"
,
"Schlesinger"
,
"Schlessel"
,
"Schlessinger"
,
"Schlicher"
,
"Schlosser"
,
"Schluter"
,
"Schmeltzer"
,
"Schmidt"
,
"Schmitt"
,
"Schmitz"
,
"Schnabel"
,
"Schnapp"
,
"Schnell"
,
"Schnorr"
,
"Schnur"
,
"Schnurr"
,
"Schober"
,
"Schoenberg"
,
"Schoenburg"
,
"Schoenfelder"
,
"Schoening"
,
"Schofield"
,
"Scholem"
,
"Scholz"
,
"Schonfeld"
,
"Schonfield"
,
"Schonthal"
,
"Schoof"
,
"Schott"
,
"Schou"
,
"Schouten"
,
"Schrader"
,
"Schram"
,
"Schramke"
,
"Schreck"
,
"Schreib"
,
"Schreibe"
,
"Schreiber"
,
"Schreibman"
,
"Schrick"
,
"Schriever"
,
"Schroder"
,
"Schroeder"
,
"Schroer"
,
"Schroth"
,
"Schubert"
,
"Schug"
,
"Schuh"
,
"Schulein"
,
"Schuler"
,
"Schulman"
,
"Schultz"
,
"Schulz"
,
"Schulze"
,
"Schuman"
,
"Schumer"
,
"Schurman"
,
"Schuster"
,
"Schuyler"
,
"Schwab"
,
"Schwartz"
,
"Schwarz"
,
"Schweiker"
,
"Schweitzer"
,
"Schwejda"
,
"Schwenk"
,
"Schwerin"
,
"Schwing"
,
"Schwinn"
,
"Schwitzer"
,
"Scibert"
,
"Sclar"
,
"Sclater"
,
"Scoles"
,
"Scopp"
,
"Scornik"
,
"Scot"
,
"Scoter"
,
"Scotney"
,
"Scott"
,
"Scotti"
,
"Scottie"
,
"Scotty"
,
"Scoville"
,
"Screens"
,
"Scribner"
,
"Scriven"
,
"Scrivenor"
,
"Scrivens"
,
"Scrivings"
,
"Scrogan"
,
"Scrope"
,
"Sculley"
,
"Scully"
,
"Scurlock"
,
"Scutt"
,
"Seabrook"
,
"Seabrooke"
,
"Seabury"
,
"Seaddon"
,
"Seaden"
,
"Seadon"
,
"Seafowl"
,
"Seagrave"
,
"Seagraves"
,
"Seale"
,
"Seaman"
,
"Seamus"
,
"Sean"
,
"Seana"
,
"Searby"
,
"Searcy"
,
"Searle"
,
"Sears"
,
"Season"
,
"Seaton"
,
"Seaver"
,
"Seavey"
,
"Seavir"
,
"Sebastian"
,
"Sebastiano"
,
"Sebastien"
,
"Sebbie"
,
"Secor"
,
"Secrest"
,
"Secunda"
,
"Secundas"
,
"Seda"
,
"Sedberry"
,
"Sedda"
,
"Sedgewake"
,
"Sedgewick"
,
"Sedgewinn"
,
"Sedlik"
,
"See"
,
"Seebeck"
,
"Seed"
,
"Seedman"
,
"Seel"
,
"Seely"
,
"Seem"
,
"Seema"
,
"Seen"
,
"Seena"
,
"Seessel"
,
"Seeto"
,
"Seften"
,
"Sefton"
,
"Seftton"
,
"Segal"
,
"Segalman"
,
"Seiber"
,
"Seibold"
,
"Seidel"
,
"Seiden"
,
"Seidler"
,
"Seidule"
,
"Seif"
,
"Seigel"
,
"Seigler"
,
"Seiter"
,
"Seitz"
,
"Seka"
,
"Seko"
,
"Sekofski"
,
"Sekyere"
,
"Sela"
,
"Selassie"
,
"Selby"
,
"Selda"
,
"Seldan"
,
"Selden"
,
"Seldon"
,
"Seldun"
,
"Selemas"
,
"Selena"
,
"Selene"
,
"Selestina"
,
"Seleta"
,
"Selfridge"
,
"Selhorst"
,
"Selia"
,
"Selie"
,
"Selig"
,
"Seligman"
,
"Seligmann"
,
"Selima"
,
"Selimah"
,
"Selina"
,
"Selinda"
,
"Seline"
,
"Selinski"
,
"Sell"
,
"Sella"
,
"Selle"
,
"Sellers"
,
"Sellma"
,
"Sello"
,
"Sells"
,
"Selma"
,
"Selmner"
,
"Selmore"
,
"Selry"
,
"Seltzer"
,
"Selway"
,
"Selwin"
,
"Selwyn"
,
"Semela"
,
"Semele"
,
"Semmes"
,
"Sena"
,
"Senalda"
,
"Sender"
,
"Senecal"
,
"Senhauser"
,
"Senior"
,
"Senn"
,
"Sension"
,
"Senskell"
,
"Senzer"
,
"Seow"
,
"Sephira"
,
"Seppala"
,
"September"
,
"Septima"
,
"Sera"
,
"Serafina"
,
"Serafine"
,
"Seraphim"
,
"Seraphina"
,
"Seraphine"
,
"Serena"
,
"Serene"
,
"Serg"
,
"Serge"
,
"Sergeant"
,
"Sergei"
,
"Sergent"
,
"Sergias"
,
"Sergio"
,
"Sergius"
,
"Sergo"
,
"Sergu"
,
"Serica"
,
"Serilda"
,
"Serle"
,
"Serles"
,
"Seroka"
,
"Serra"
,
"Serrano"
,
"Serrell"
,
"Servais"
,
"Server"
,
"Servetnick"
,
"Service"
,
"Sessler"
,
"Seta"
,
"Seth"
,
"Sethi"
,
"Sethrida"
,
"Seto"
,
"Seton"
,
"Settera"
,
"Settle"
,
"Seumas"
,
"Sev"
,
"Seve"
,
"Severen"
,
"Severin"
,
"Severn"
,
"Severson"
,
"Sevik"
,
"Seward"
,
"Sewel"
,
"Sewell"
,
"Sewellyn"
,
"Sewole"
,
"Sewoll"
,
"Sexton"
,
"Seyler"
,
"Seymour"
,
"Seys"
,
"Sezen"
,
"Shabbir"
,
"Shaddock"
,
"Shadow"
,
"Shae"
,
"Shaefer"
,
"Shaeffer"
,
"Shaer"
,
"Shafer"
,
"Shaff"
,
"Shaffer"
,
"Shaffert"
,
"Shah"
,
"Shaia"
,
"Shaikh"
,
"Shaina"
,
"Shaine"
,
"Shakespeare"
,
"Shakti"
,
"Shalna"
,
"Shalne"
,
"Shalom"
,
"Shama"
,
"Shamma"
,
"Shamrao"
,
"Shamus"
,
"Shana"
,
"Shanahan"
,
"Shanan"
,
"Shanda"
,
"Shandee"
,
"Shandeigh"
,
"Shandie"
,
"Shandra"
,
"Shandy"
,
"Shane"
,
"Shaner"
,
"Shani"
,
"Shanie"
,
"Shank"
,
"Shanks"
,
"Shanleigh"
,
"Shanley"
,
"Shanly"
,
"Shanna"
,
"Shannah"
,
"Shannan"
,
"Shannen"
,
"Shanney"
,
"Shannon"
,
"Shanon"
,
"Shanta"
,
"Shantee"
,
"Shantha"
,
"Shaper"
,
"Shapiro"
,
"Shara"
,
"Sharai"
,
"Shargel"
,
"Shari"
,
"Sharia"
,
"Sharity"
,
"Sharl"
,
"Sharla"
,
"Sharleen"
,
"Sharlene"
,
"Sharline"
,
"Sharma"
,
"Sharman"
,
"Sharon"
,
"Sharona"
,
"Sharos"
,
"Sharp"
,
"Sharpe"
,
"Sharron"
,
"Sharyl"
,
"Shatzer"
,
"Shaughn"
,
"Shaughnessy"
,
"Shaum"
,
"Shaun"
,
"Shauna"
,
"Shaver"
,
"Shaw"
,
"Shawn"
,
"Shawna"
,
"Shawnee"
,
"Shay"
,
"Shaya"
,
"Shayla"
,
"Shaylah"
,
"Shaylyn"
,
"Shaylynn"
,
"Shayn"
,
"Shayna"
,
"Shayne"
,
"Shea"
,
"Sheaff"
,
"Shear"
,
"Sheba"
,
"Shedd"
,
"Sheeb"
,
"Sheedy"
,
"Sheehan"
,
"Sheela"
,
"Sheelagh"
,
"Sheelah"
,
"Sheena"
,
"Sheepshanks"
,
"Sheeran"
,
"Sheeree"
,
"Sheets"
,
"Sheff"
,
"Sheffie"
,
"Sheffield"
,
"Sheffy"
,
"Sheila"
,
"Sheilah"
,
"Shel"
,
"Shela"
,
"Shelagh"
,
"Shelah"
,
"Shelba"
,
"Shelbi"
,
"Shelburne"
,
"Shelby"
,
"Shelden"
,
"Sheldon"
,
"Sheley"
,
"Shelia"
,
"Sheline"
,
"Shell"
,
"Shellans"
,
"Shelley"
,
"Shelli"
,
"Shellie"
,
"Shelly"
,
"Shelman"
,
"Shelton"
,
"Shem"
,
"Shena"
,
"Shenan"
,
"Sheng"
,
"Shep"
,
"Shepard"
,
"Shepherd"
,
"Shepley"
,
"Sheply"
,
"Shepp"
,
"Sheppard"
,
"Shepperd"
,
"Sher"
,
"Sherar"
,
"Sherard"
,
"Sherborn"
,
"Sherborne"
,
"Sherburn"
,
"Sherburne"
,
"Shere"
,
"Sheree"
,
"Sherer"
,
"Shererd"
,
"Sherfield"
,
"Sheri"
,
"Sheridan"
,
"Sherie"
,
"Sherill"
,
"Sherilyn"
,
"Sherj"
,
"Sherl"
,
"Sherline"
,
"Sherlock"
,
"Sherlocke"
,
"Sherm"
,
"Sherman"
,
"Shermie"
,
"Shermy"
,
"Sherourd"
,
"Sherr"
,
"Sherrard"
,
"Sherrer"
,
"Sherri"
,
"Sherrie"
,
"Sherrill"
,
"Sherris"
,
"Sherrod"
,
"Sherry"
,
"Sherurd"
,
"Sherwin"
,
"Sherwood"
,
"Sherwynd"
,
"Sherye"
,
"Sheryl"
,
"Sheryle"
,
"Shetrit"
,
"Shevlo"
,
"Shewchuk"
,
"Shewmaker"
,
"Sheya"
,
"Shiau"
,
"Shieh"
,
"Shiekh"
,
"Shields"
,
"Shien"
,
"Shiff"
,
"Shifra"
,
"Shifrah"
,
"Shig"
,
"Shih"
,
"Shiller"
,
"Shimberg"
,
"Shimkus"
,
"Shina"
,
"Shinberg"
,
"Shing"
,
"Shipley"
,
"Shipman"
,
"Shipp"
,
"Shippee"
,
"Shir"
,
"Shira"
,
"Shirah"
,
"Shirberg"
,
"Shiri"
,
"Shirk"
,
"Shirl"
,
"Shirlee"
,
"Shirleen"
,
"Shirlene"
,
"Shirley"
,
"Shirlie"
,
"Shirline"
,
"Shiroma"
,
"Shishko"
,
"Shiverick"
,
"Shivers"
,
"Shlomo"
,
"Shoemaker"
,
"Shoifet"
,
"Sholeen"
,
"Sholem"
,
"Sholes"
,
"Sholley"
,
"Sholom"
,
"Shore"
,
"Shornick"
,
"Short"
,
"Shorter"
,
"Shoshana"
,
"Shoshanna"
,
"Shotton"
,
"Showker"
,
"Shreeves"
,
"Shreve"
,
"Shrier"
,
"Shriner"
,
"Shriver"
,
"Shu"
,
"Shue"
,
"Shugart"
,
"Shulamith"
,
"Shulem"
,
"Shuler"
,
"Shulins"
,
"Shull"
,
"Shulman"
,
"Shulock"
,
"Shult"
,
"Shultz"
,
"Shum"
,
"Shuma"
,
"Shuman"
,
"Shumway"
,
"Shuping"
,
"Shurlock"
,
"Shurlocke"
,
"Shurwood"
,
"Shushan"
,
"Shute"
,
"Shutz"
,
"Shwalb"
,
"Shyamal"
,
"Si"
,
"Siana"
,
"Sianna"
,
"Sib"
,
"Sibbie"
,
"Sibby"
,
"Sibeal"
,
"Sibel"
,
"Sibell"
,
"Sibella"
,
"Sibelle"
,
"Siberson"
,
"Sibie"
,
"Sibilla"
,
"Sible"
,
"Siblee"
,
"Sibley"
,
"Sibyl"
,
"Sibylla"
,
"Sibylle"
,
"Sibyls"
,
"Sicard"
,
"Sices"
,
"Siclari"
,
"Sicular"
,
"Sid"
,
"Sida"
,
"Siddon"
,
"Siddra"
,
"Sidell"
,
"Sidhu"
,
"Sidky"
,
"Sidman"
,
"Sidnee"
,
"Sidney"
,
"Sidoma"
,
"Sidon"
,
"Sidoney"
,
"Sidonia"
,
"Sidonie"
,
"Sidonius"
,
"Sidonnie"
,
"Sidoon"
,
"Sidra"
,
"Sidran"
,
"Sidras"
,
"Sidwel"
,
"Sidwell"
,
"Sidwohl"
,
"Sieber"
,
"Siegel"
,
"Siegfried"
,
"Siegler"
,
"Sielen"
,
"Sieracki"
,
"Sierra"
,
"Siesser"
,
"Sievert"
,
"Siffre"
,
"Sig"
,
"Sigfrid"
,
"Sigfried"
,
"Sigismond"
,
"Sigismondo"
,
"Sigismund"
,
"Sigismundo"
,
"Sigler"
,
"Sigmund"
,
"Signe"
,
"Sigrid"
,
"Sigsmond"
,
"Sigvard"
,
"Sihon"
,
"Sihonn"
,
"Sihun"
,
"Sihunn"
,
"Sik"
,
"Sikata"
,
"Sikes"
,
"Sikko"
,
"Sikorski"
,
"Sil"
,
"Silas"
,
"Silber"
,
"Silberman"
,
"Silda"
,
"Silden"
,
"Sile"
,
"Sileas"
,
"Silin"
,
"Sill"
,
"Sillsby"
,
"Silma"
,
"Siloa"
,
"Siloam"
,
"Siloum"
,
"Silsby"
,
"Silsbye"
,
"Silva"
,
"Silvain"
,
"Silvan"
,
"Silvana"
,
"Silvano"
,
"Silvanus"
,
"Silver"
,
"Silverman"
,
"Silvers"
,
"Silverstein"
,
"Silverts"
,
"Silvester"
,
"Silvestro"
,
"Silvia"
,
"Silvie"
,
"Silvio"
,
"Sim"
,
"Sima"
,
"Simah"
,
"Simdars"
,
"Simeon"
,
"Simmie"
,
"Simmonds"
,
"Simmons"
,
"Simon"
,
"Simona"
,
"Simone"
,
"Simonetta"
,
"Simonette"
,
"Simonne"
,
"Simons"
,
"Simonsen"
,
"Simpkins"
,
"Simpson"
,
"Sims"
,
"Simsar"
,
"Simson"
,
"Sinai"
,
"Sinclair"
,
"Sinclare"
,
"Sindee"
,
"Sine"
,
"Sinegold"
,
"Singband"
,
"Singer"
,
"Singh"
,
"Singhal"
,
"Singleton"
,
"Sink"
,
"Sinnard"
,
"Siobhan"
,
"Sion"
,
"Sioux"
,
"Siouxie"
,
"Sipple"
,
"Sirkin"
,
"Sirmons"
,
"Sirois"
,
"Sirotek"
,
"Sisak"
,
"Sisco"
,
"Sisely"
,
"Sisile"
,
"Siskind"
,
"Sissel"
,
"Sissie"
,
"Sisson"
,
"Sissy"
,
"Sisto"
,
"Sitarski"
,
"Sitnik"
,
"Sitra"
,
"Siubhan"
,
"Siusan"
,
"Sivia"
,
"Sivie"
,
"Siward"
,
"Sjoberg"
,
"Skantze"
,
"Skardol"
,
"Skees"
,
"Skeie"
,
"Skell"
,
"Skelly"
,
"Skelton"
,
"Skerl"
,
"Skiba"
,
"Skier"
,
"Skiest"
,
"Skilken"
,
"Skill"
,
"Skillern"
,
"Skinner"
,
"Skip"
,
"Skipp"
,
"Skipper"
,
"Skippie"
,
"Skippy"
,
"Skipton"
,
"Sklar"
,
"Skolnik"
,
"Skricki"
,
"Skurnik"
,
"Skutchan"
,
"Skvorak"
,
"Sky"
,
"Skye"
,
"Skyla"
,
"Skylar"
,
"Skyler"
,
"Slaby"
,
"Slack"
,
"Slade"
,
"Sladen"
,
"Slater"
,
"Slaughter"
,
"Slavic"
,
"Slavin"
,
"Slayton"
,
"Sldney"
,
"Slemmer"
,
"Sletten"
,
"Slifka"
,
"Slinkman"
,
"Sliwa"
,
"Sloan"
,
"Sloane"
,
"Sloatman"
,
"Slocum"
,
"Slosberg"
,
"Slotnick"
,
"Sluiter"
,
"Sly"
,
"Slyke"
,
"Smail"
,
"Small"
,
"Smalley"
,
"Smallman"
,
"Smart"
,
"Smiga"
,
"Smiley"
,
"Smith"
,
"Smitt"
,
"Smitty"
,
"Smoot"
,
"Smukler"
,
"Snapp"
,
"Snashall"
,
"Sneed"
,
"Snell"
,
"Snider"
,
"Snoddy"
,
"Snodgrass"
,
"Snook"
,
"Snow"
,
"Snowber"
,
"Snowman"
,
"Snyder"
,
"So"
,
"Soane"
,
"Sobel"
,
"Soble"
,
"Socha"
,
"Socher"
,
"Sochor"
,
"Socrates"
,
"Soelch"
,
"Sofer"
,
"Sofia"
,
"Sofie"
,
"Sofko"
,
"Soinski"
,
"Sokil"
,
"Sokul"
,
"Sol"
,
"Sola"
,
"Solana"
,
"Solange"
,
"Solberg"
,
"Solenne"
,
"Solis"
,
"Solita"
,
"Solitta"
,
"Soll"
,
"Sollars"
,
"Solley"
,
"Sollie"
,
"Sollows"
,
"Solly"
,
"Solnit"
,
"Soloma"
,
"Soloman"
,
"Solomon"
,
"Solon"
,
"Soluk"
,
"Som"
,
"Somerset"
,
"Somerville"
,
"Sommer"
,
"Sommers"
,
"Son"
,
"Sondra"
,
"Soneson"
,
"Song"
,
"Soni"
,
"Sonia"
,
"Sonja"
,
"Sonni"
,
"Sonnie"
,
"Sonnnie"
,
"Sonny"
,
"Sonstrom"
,
"Sontag"
,
"Sontich"
,
"Sonya"
,
"Soo"
,
"Soph"
,
"Sopher"
,
"Sophey"
,
"Sophi"
,
"Sophia"
,
"Sophie"
,
"Sophronia"
,
"Sophy"
,
"Soracco"
,
"Soraya"
,
"Sorce"
,
"Sorcha"
,
"Sorci"
,
"Sorcim"
,
"Sorel"
,
"Soren"
,
"Sorensen"
,
"Sorenson"
,
"Sorilda"
,
"Sorkin"
,
"Sorrows"
,
"Sosanna"
,
"Sosna"
,
"Sosthena"
,
"Sosthenna"
,
"Sosthina"
,
"Sothena"
,
"Sotos"
,
"Sou"
,
"Soule"
,
"Soulier"
,
"Sousa"
,
"Southard"
,
"Southworth"
,
"Soutor"
,
"Souvaine"
,
"Souza"
,
"Sowell"
,
"Sower"
,
"Spada"
,
"Spain"
,
"Spalding"
,
"Spalla"
,
"Spancake"
,
"Spanjian"
,
"Spanos"
,
"Sparhawk"
,
"Spark"
,
"Sparke"
,
"Sparkie"
,
"Sparks"
,
"Sparky"
,
"Sparrow"
,
"Spatola"
,
"Spatz"
,
"Spaulding"
,
"Spear"
,
"Spearing"
,
"Spearman"
,
"Spears"
,
"Specht"
,
"Spector"
,
"Spence"
,
"Spencer"
,
"Spense"
,
"Spenser"
,
"Sperling"
,
"Speroni"
,
"Sperry"
,
"Spevek"
,
"Spiegel"
,
"Spiegelman"
,
"Spiegleman"
,
"Spieler"
,
"Spielman"
,
"Spiers"
,
"Spike"
,
"Spillar"
,
"Spindell"
,
"Spiro"
,
"Spiros"
,
"Spitzer"
,
"Spohr"
,
"Spooner"
,
"Spoor"
,
"Spracklen"
,
"Sprage"
,
"Spragens"
,
"Sprague"
,
"Spratt"
,
"Spring"
,
"Springer"
,
"Sproul"
,
"Sprung"
,
"Spurgeon"
,
"Squier"
,
"Squire"
,
"Squires"
,
"Srini"
,
"Staal"
,
"Stace"
,
"Stacee"
,
"Stacey"
,
"Staci"
,
"Stacia"
,
"Stacie"
,
"Stacy"
,
"Stafani"
,
"Staffan"
,
"Staffard"
,
"Stafford"
,
"Staford"
,
"Stag"
,
"Stagg"
,
"Stahl"
,
"Stalder"
,
"Staley"
,
"Stalk"
,
"Stalker"
,
"Stallworth"
,
"Stamata"
,
"Stambaugh"
,
"Stan"
,
"Stander"
,
"Standford"
,
"Standice"
,
"Standing"
,
"Standish"
,
"Standley"
,
"Standush"
,
"Stanfield"
,
"Stanfill"
,
"Stanford"
,
"Stanhope"
,
"Stanislas"
,
"Stanislaus"
,
"Stanislaw"
,
"Stanleigh"
,
"Stanley"
,
"Stanly"
,
"Stannfield"
,
"Stannwood"
,
"Stanton"
,
"Stanway"
,
"Stanwin"
,
"Stanwinn"
,
"Stanwood"
,
"Stanzel"
,
"Star"
,
"Starbuck"
,
"Stargell"
,
"Starinsky"
,
"Stark"
,
"Starkey"
,
"Starks"
,
"Starla"
,
"Starlene"
,
"Starlin"
,
"Starling"
,
"Starobin"
,
"Starr"
,
"Stasny"
,
"Staten"
,
"Statis"
,
"Stauder"
,
"Stauffer"
,
"Stav"
,
"Stavro"
,
"Stavros"
,
"Staw"
,
"Stclair"
,
"Stead"
,
"Steady"
,
"Stearn"
,
"Stearne"
,
"Stearns"
,
"Steck"
,
"Steddman"
,
"Stedman"
,
"Stedmann"
,
"Stedt"
,
"Steel"
,
"Steele"
,
"Steen"
,
"Steep"
,
"Steere"
,
"Stefa"
,
"Stefan"
,
"Stefanac"
,
"Stefania"
,
"Stefanie"
,
"Stefano"
,
"Steffane"
,
"Steffen"
,
"Steffi"
,
"Steffie"
,
"Steffin"
,
"Steffy"
,
"Stegman"
,
"Stein"
,
"Steinberg"
,
"Steiner"
,
"Steinke"
,
"Steinman"
,
"Steinway"
,
"Stella"
,
"Stelle"
,
"Stelmach"
,
"Stelu"
,
"Stempien"
,
"Stempson"
,
"Stenger"
,
"Stent"
,
"Stepha"
,
"Stephan"
,
"Stephana"
,
"Stephani"
,
"Stephania"
,
"Stephanie"
,
"Stephannie"
,
"Stephanus"
,
"Stephen"
,
"Stephenie"
,
"Stephens"
,
"Stephenson"
,
"Stephi"
,
"Stephie"
,
"Stephine"
,
"Sterling"
,
"Stern"
,
"Sternberg"
,
"Sterne"
,
"Sterner"
,
"Sternick"
,
"Sternlight"
,
"Sterrett"
,
"Stesha"
,
"Stets"
,
"Stetson"
,
"Stevana"
,
"Steve"
,
"Steven"
,
"Stevena"
,
"Stevens"
,
"Stevenson"
,
"Stevie"
,
"Stevy"
,
"Stew"
,
"Steward"
,
"Stewardson"
,
"Stewart"
,
"Stich"
,
"Stichter"
,
"Stickney"
,
"Stiegler"
,
"Stieglitz"
,
"Stier"
,
"Stig"
,
"Stila"
,
"Stiles"
,
"Still"
,
"Stilla"
,
"Stillas"
,
"Stillman"
,
"Stillmann"
,
"Stilu"
,
"Stilwell"
,
"Stimson"
,
"Stine"
,
"Stinky"
,
"Stinson"
,
"Stirling"
,
"Stoat"
,
"Stochmal"
,
"Stock"
,
"Stockmon"
,
"Stockton"
,
"Stockwell"
,
"Stoddard"
,
"Stoddart"
,
"Stodder"
,
"Stoeber"
,
"Stoecker"
,
"Stoffel"
,
"Stokes"
,
"Stoll"
,
"Stoller"
,
"Stolzer"
,
"Stone"
,
"Stoneham"
,
"Stoneman"
,
"Stonwin"
,
"Stoops"
,
"Storer"
,
"Storfer"
,
"Storm"
,
"Stormi"
,
"Stormie"
,
"Stormy"
,
"Stortz"
,
"Story"
,
"Storz"
,
"Stouffer"
,
"Stoughton"
,
"Stout"
,
"Stovall"
,
"Stover"
,
"Strade"
,
"Strader"
,
"Strage"
,
"Strain"
,
"Strait"
,
"Stralka"
,
"Strander"
,
"Strang"
,
"Stranger"
,
"Stratton"
,
"Straub"
,
"Straus"
,
"Strauss"
,
"Strawn"
,
"Streeter"
,
"Streetman"
,
"Streeto"
,
"Strenta"
,
"Strep"
,
"Strephon"
,
"Strephonn"
,
"Strepphon"
,
"Stretch"
,
"Stricklan"
,
"Strickland"
,
"Strickler"
,
"Strickman"
,
"Stringer"
,
"Strohbehn"
,
"Strohben"
,
"Strohl"
,
"Stromberg"
,
"Strong"
,
"Stronski"
,
"Stroud"
,
"Stroup"
,
"Struve"
,
"Stryker"
,
"Stu"
,
"Stuart"
,
"Stubbs"
,
"Stubstad"
,
"Stucker"
,
"Stuckey"
,
"Studdard"
,
"Studley"
,
"Studner"
,
"Studnia"
,
"Stulin"
,
"Stultz"
,
"Stuppy"
,
"Sturdivant"
,
"Sturges"
,
"Sturrock"
,
"Stutman"
,
"Stutsman"
,
"Stutzman"
,
"Styles"
,
"Su"
,
"Suanne"
,
"Subak"
,
"Subir"
,
"Sublett"
,
"Suchta"
,
"Suckow"
,
"Sucy"
,
"Sudbury"
,
"Sudderth"
,
"Sudhir"
,
"Sudnor"
,
"Sue"
,
"Suellen"
,
"Suelo"
,
"Sugar"
,
"Sugden"
,
"Sugihara"
,
"Suh"
,
"Suhail"
,
"Suilmann"
,
"Suk"
,
"Sukey"
,
"Sukhum"
,
"Suki"
,
"Sukin"
,
"Sula"
,
"Sulamith"
,
"Sullivan"
,
"Sully"
,
"Sum"
,
"Sumer"
,
"Sumerlin"
,
"Summer"
,
"Summers"
,
"Summons"
,
"Sumner"
,
"Sunda"
,
"Sunday"
,
"Sundberg"
,
"Sunderland"
,
"Sundin"
,
"Sundstrom"
,
"Suneya"
,
"Sung"
,
"Sunil"
,
"Sunny"
,
"Sunshine"
,
"Sup"
,
"Supat"
,
"Supen"
,
"Supple"
,
"Sura"
,
"Surbeck"
,
"Surovy"
,
"Survance"
,
"Susan"
,
"Susana"
,
"Susanetta"
,
"Susann"
,
"Susanna"
,
"Susannah"
,
"Susanne"
,
"Susette"
,
"Susi"
,
"Susie"
,
"Sussi"
,
"Sussman"
,
"Sussna"
,
"Susumu"
,
"Susy"
,
"Suter"
,
"Sutherlan"
,
"Sutherland"
,
"Sutphin"
,
"Sutton"
,
"Suu"
,
"Suzan"
,
"Suzann"
,
"Suzanna"
,
"Suzanne"
,
"Suzetta"
,
"Suzette"
,
"Suzi"
,
"Suzie"
,
"Suzy"
,
"Suzzy"
,
"Sven"
,
"Svend"
,
"Svensen"
,
"Sverre"
,
"Svetlana"
,
"Svoboda"
,
"Swagerty"
,
"Swain"
,
"Swaine"
,
"Swainson"
,
"Swamy"
,
"Swan"
,
"Swane"
,
"Swanhilda"
,
"Swanhildas"
,
"Swann"
,
"Swanson"
,
"Swart"
,
"Swarts"
,
"Swartz"
,
"Swayder"
,
"Swayne"
,
"Sweatt"
,
"Swec"
,
"Swee"
,
"Sweeney"
,
"Sweet"
,
"Swen"
,
"Swenson"
,
"Swetiana"
,
"Swetlana"
,
"Sweyn"
,
"Swiercz"
,
"Swift"
,
"Swigart"
,
"Swihart"
,
"Swinton"
,
"Swirsky"
,
"Swisher"
,
"Swithbart"
,
"Swithbert"
,
"Swithin"
,
"Switzer"
,
"Swope"
,
"Swor"
,
"Swords"
,
"Sy"
,
"Sybil"
,
"Sybila"
,
"Sybilla"
,
"Sybille"
,
"Sybley"
,
"Sybyl"
,
"Syck"
,
"Syd"
,
"Sydel"
,
"Sydelle"
,
"Sydney"
,
"Sykes"
,
"Syl"
,
"Sylas"
,
"Sylvan"
,
"Sylvanus"
,
"Sylvester"
,
"Sylvia"
,
"Sylvie"
,
"Syman"
,
"Symer"
,
"Symon"
,
"Symons"
,
"Synn"
,
"Syst"
,
"Syverson"
,
"TEirtza"
,
"Taam"
,
"Tab"
,
"Tabatha"
,
"Tabb"
,
"Tabbatha"
,
"Tabber"
,
"Tabbi"
,
"Tabbie"
,
"Tabbitha"
,
"Tabby"
,
"Taber"
,
"Tabib"
,
"Tabina"
,
"Tabitha"
,
"Tabor"
,
"Tabshey"
,
"Tace"
,
"Tacita"
,
"Tacklind"
,
"Tacy"
,
"Tacye"
,
"Tad"
,
"Tada"
,
"Tadashi"
,
"Tadd"
,
"Taddeo"
,
"Taddeusz"
,
"Tade"
,
"Tadeas"
,
"Tadeo"
,
"Tades"
,
"Tadich"
,
"Tadio"
,
"Taffy"
,
"Taft"
,
"Tager"
,
"Taggart"
,
"Tahmosh"
,
"Tai"
,
"Tailor"
,
"Taima"
,
"Taimi"
,
"Tait"
,
"Taite"
,
"Tak"
,
"Taka"
,
"Takakura"
,
"Takara"
,
"Takashi"
,
"Takeo"
,
"Takeshi"
,
"Takken"
,
"Tal"
,
"Tala"
,
"Talanian"
,
"Talanta"
,
"Talbert"
,
"Talbot"
,
"Talbott"
,
"Tali"
,
"Talia"
,
"Talich"
,
"Talie"
,
"Tallbot"
,
"Tallbott"
,
"Talley"
,
"Tallia"
,
"Tallie"
,
"Tallou"
,
"Tallu"
,
"Tallula"
,
"Tallulah"
,
"Tally"
,
"Talmud"
,
"Talya"
,
"Talyah"
,
"Tam"
,
"Tama"
,
"Tamah"
,
"Tamanaha"
,
"Tamar"
,
"Tamara"
,
"Tamarah"
,
"Tamarra"
,
"Tamaru"
,
"Tamas"
,
"Tamberg"
,
"Tamer"
,
"Tamera"
,
"Tami"
,
"Tamiko"
,
"Tamis"
,
"Tamma"
,
"Tammany"
,
"Tammara"
,
"Tammi"
,
"Tammie"
,
"Tammy"
,
"Tamqrah"
,
"Tamra"
,
"Tamsky"
,
"Tan"
,
"Tana"
,
"Tanah"
,
"Tanaka"
,
"Tanberg"
,
"Tandi"
,
"Tandie"
,
"Tandy"
,
"Tanhya"
,
"Tani"
,
"Tania"
,
"Tanitansy"
,
"Tankoos"
,
"Tann"
,
"Tannen"
,
"Tannenbaum"
,
"Tannenwald"
,
"Tanner"
,
"Tanney"
,
"Tannie"
,
"Tanny"
,
"Tansey"
,
"Tansy"
,
"Tanya"
,
"Tapes"
,
"Tara"
,
"Tarabar"
,
"Tarah"
,
"Taran"
,
"Tarazi"
,
"Tare"
,
"Tareyn"
,
"Targett"
,
"Tarkany"
,
"Taro"
,
"Tarr"
,
"Tarra"
,
"Tarrah"
,
"Tarrance"
,
"Tarrant"
,
"Tarrel"
,
"Tarrsus"
,
"Tarryn"
,
"Tarsus"
,
"Tarsuss"
,
"Tartaglia"
,
"Tartan"
,
"Tarton"
,
"Tarttan"
,
"Taryn"
,
"Taryne"
,
"Tasha"
,
"Tasia"
,
"Tasiana"
,
"Tat"
,
"Tate"
,
"Tati"
,
"Tatia"
,
"Tatiana"
,
"Tatianas"
,
"Tatiania"
,
"Tatianna"
,
"Tatman"
,
"Tattan"
,
"Tatum"
,
"Taub"
,
"Tav"
,
"Taveda"
,
"Tavey"
,
"Tavi"
,
"Tavia"
,
"Tavie"
,
"Tavis"
,
"Tavish"
,
"Tavy"
,
"Tawney"
,
"Tawnya"
,
"Tawsha"
,
"Tay"
,
"Tayib"
,
"Tayler"
,
"Taylor"
,
"Tayyebeb"
,
"Tchao"
,
"Teador"
,
"Teagan"
,
"Teage"
,
"Teague"
,
"Teahan"
,
"Teak"
,
"Tearle"
,
"Tecla"
,
"Tecu"
,
"Ted"
,
"Tedd"
,
"Tedda"
,
"Tedder"
,
"Teddi"
,
"Teddie"
,
"Teddman"
,
"Teddy"
,
"Tedi"
,
"Tedie"
,
"Tedman"
,
"Tedmann"
,
"Tedmund"
,
"Tedra"
,
"Tedric"
,
"Teece"
,
"Teena"
,
"Teerell"
,
"Teeter"
,
"Teevens"
,
"Teferi"
,
"Tega"
,
"Tegan"
,
"Teillo"
,
"Teilo"
,
"Tekla"
,
"Telfer"
,
"Telford"
,
"Telfore"
,
"Tella"
,
"Tellford"
,
"Tem"
,
"Tema"
,
"Temp"
,
"Tempa"
,
"Tempest"
,
"Templa"
,
"Templas"
,
"Temple"
,
"Templer"
,
"Templeton"
,
"Templia"
,
"Ten"
,
"Tena"
,
"Tench"
,
"Tenenbaum"
,
"Tengdin"
,
"Tengler"
,
"Tenn"
,
"Tenner"
,
"Tennes"
,
"Tenney"
,
"Tennies"
,
"Teodoor"
,
"Teodor"
,
"Teodora"
,
"Teodorico"
,
"Teodoro"
,
"Teplica"
,
"Teplitz"
,
"Tepper"
,
"Tera"
,
"Terbecki"
,
"Terchie"
,
"Terena"
,
"Terence"
,
"Terencio"
,
"Teresa"
,
"Terese"
,
"Teresina"
,
"Teresita"
,
"Teressa"
,
"Terhune"
,
"Teri"
,
"Teria"
,
"Teriann"
,
"Terina"
,
"Terle"
,
"Ternan"
,
"Terpstra"
,
"Terr"
,
"Terra"
,
"Terrance"
,
"Terrel"
,
"Terrell"
,
"Terrena"
,
"Terrence"
,
"Terrene"
,
"Terri"
,
"Terrie"
,
"Terrijo"
,
"Terrill"
,
"Terrilyn"
,
"Terris"
,
"Terriss"
,
"Territus"
,
"Terry"
,
"Terrye"
,
"Terryl"
,
"Terryn"
,
"Tersina"
,
"Terti"
,
"Tertia"
,
"Tertias"
,
"Tertius"
,
"Teryl"
,
"Teryn"
,
"Terza"
,
"Terzas"
,
"Tesler"
,
"Tess"
,
"Tessa"
,
"Tessi"
,
"Tessie"
,
"Tessler"
,
"Tessy"
,
"Teteak"
,
"Teufert"
,
"Teuton"
,
"Tevis"
,
"Tewell"
,
"Tewfik"
,
"Tews"
,
"Thacher"
,
"Thacker"
,
"Thackeray"
,
"Thad"
,
"Thaddaus"
,
"Thaddeus"
,
"Thaddus"
,
"Thadeus"
,
"Thagard"
,
"Thain"
,
"Thaine"
,
"Thais"
,
"Thalassa"
,
"Thalia"
,
"Tham"
,
"Thamora"
,
"Thamos"
,
"Thanasi"
,
"Thane"
,
"Thanh"
,
"Thanos"
,
"Thant"
,
"Thapa"
,
"Thar"
,
"Tharp"
,
"Thatch"
,
"Thatcher"
,
"Thaxter"
,
"Thay"
,
"Thayer"
,
"Thayne"
,
"The"
,
"Thea"
,
"Theadora"
,
"Theall"
,
"Thebault"
,
"Thecla"
,
"Theda"
,
"Thedric"
,
"Thedrick"
,
"Theis"
,
"Thekla"
,
"Thelma"
,
"Thema"
,
"Themis"
,
"Thenna"
,
"Theo"
,
"Theobald"
,
"Theodor"
,
"Theodora"
,
"Theodore"
,
"Theodoric"
,
"Theodosia"
,
"Theola"
,
"Theona"
,
"Theone"
,
"Thera"
,
"Theran"
,
"Theresa"
,
"Therese"
,
"Theresina"
,
"Theresita"
,
"Theressa"
,
"Therine"
,
"Theron"
,
"Therron"
,
"Thesda"
,
"Thessa"
,
"Theta"
,
"Thetes"
,
"Thetis"
,
"Thetisa"
,
"Thetos"
,
"Theurer"
,
"Theurich"
,
"Thevenot"
,
"Thia"
,
"Thibaud"
,
"Thibault"
,
"Thibaut"
,
"Thielen"
,
"Thier"
,
"Thierry"
,
"Thilda"
,
"Thilde"
,
"Thill"
,
"Thin"
,
"Thinia"
,
"Thirion"
,
"Thirza"
,
"Thirzi"
,
"Thirzia"
,
"Thisbe"
,
"Thisbee"
,
"Thissa"
,
"Thistle"
,
"Thoer"
,
"Thom"
,
"Thoma"
,
"Thomajan"
,
"Thomas"
,
"Thomasa"
,
"Thomasin"
,
"Thomasina"
,
"Thomasine"
,
"Thomey"
,
"Thompson"
,
"Thomsen"
,
"Thomson"
,
"Thor"
,
"Thora"
,
"Thorbert"
,
"Thordia"
,
"Thordis"
,
"Thorfinn"
,
"Thorin"
,
"Thorlay"
,
"Thorley"
,
"Thorlie"
,
"Thorma"
,
"Thorman"
,
"Thormora"
,
"Thorn"
,
"Thornburg"
,
"Thorncombe"
,
"Thorndike"
,
"Thorne"
,
"Thorner"
,
"Thornie"
,
"Thornton"
,
"Thorny"
,
"Thorpe"
,
"Thorr"
,
"Thorrlow"
,
"Thorstein"
,
"Thorsten"
,
"Thorvald"
,
"Thorwald"
,
"Thrasher"
,
"Three"
,
"Threlkeld"
,
"Thrift"
,
"Thun"
,
"Thunell"
,
"Thurber"
,
"Thurlough"
,
"Thurlow"
,
"Thurman"
,
"Thurmann"
,
"Thurmond"
,
"Thurnau"
,
"Thursby"
,
"Thurstan"
,
"Thurston"
,
"Thury"
,
"Thynne"
,
"Tia"
,
"Tiana"
,
"Tibbetts"
,
"Tibbitts"
,
"Tibbs"
,
"Tibold"
,
"Tica"
,
"Tice"
,
"Tichon"
,
"Tichonn"
,
"Ticknor"
,
"Ticon"
,
"Tidwell"
,
"Tiebold"
,
"Tiebout"
,
"Tiedeman"
,
"Tiemroth"
,
"Tien"
,
"Tiena"
,
"Tierell"
,
"Tiernan"
,
"Tierney"
,
"Tiersten"
,
"Tiertza"
,
"Tierza"
,
"Tifanie"
,
"Tiff"
,
"Tiffa"
,
"Tiffani"
,
"Tiffanie"
,
"Tiffanle"
,
"Tiffany"
,
"Tiffi"
,
"Tiffie"
,
"Tiffy"
,
"Tiga"
,
"Tigges"
,
"Tila"
,
"Tilda"
,
"Tilden"
,
"Tildi"
,
"Tildie"
,
"Tildy"
,
"Tiler"
,
"Tilford"
,
"Till"
,
"Tilla"
,
"Tillford"
,
"Tillfourd"
,
"Tillie"
,
"Tillinger"
,
"Tillio"
,
"Tillion"
,
"Tillman"
,
"Tillo"
,
"Tilly"
,
"Tilney"
,
"Tiloine"
,
"Tim"
,
"Tima"
,
"Timi"
,
"Timmi"
,
"Timmie"
,
"Timmons"
,
"Timms"
,
"Timmy"
,
"Timofei"
,
"Timon"
,
"Timoteo"
,
"Timothea"
,
"Timothee"
,
"Timotheus"
,
"Timothy"
,
"Tina"
,
"Tinaret"
,
"Tindall"
,
"Tine"
,
"Tingey"
,
"Tingley"
,
"Tini"
,
"Tiny"
,
"Tinya"
,
"Tiossem"
,
"Tiphane"
,
"Tiphani"
,
"Tiphanie"
,
"Tiphany"
,
"Tippets"
,
"Tips"
,
"Tipton"
,
"Tirrell"
,
"Tirza"
,
"Tirzah"
,
"Tisbe"
,
"Tisbee"
,
"Tisdale"
,
"Tish"
,
"Tisha"
,
"Tisman"
,
"Tita"
,
"Titania"
,
"Tito"
,
"Titos"
,
"Titus"
,
"Tizes"
,
"Tjaden"
,
"Tjader"
,
"Tjon"
,
"Tletski"
,
"Toback"
,
"Tobe"
,
"Tobey"
,
"Tobi"
,
"Tobiah"
,
"Tobias"
,
"Tobie"
,
"Tobin"
,
"Tobit"
,
"Toby"
,
"Tobye"
,
"Tocci"
,
"Tod"
,
"Todd"
,
"Toddie"
,
"Toddy"
,
"Todhunter"
,
"Toffey"
,
"Toffic"
,
"Toft"
,
"Toh"
,
"Toiboid"
,
"Toinette"
,
"Tol"
,
"Toland"
,
"Tolkan"
,
"Toll"
,
"Tolland"
,
"Tolley"
,
"Tolliver"
,
"Tollman"
,
"Tollmann"
,
"Tolmach"
,
"Tolman"
,
"Tolmann"
,
"Tom"
,
"Toma"
,
"Tomas"
,
"Tomasina"
,
"Tomasine"
,
"Tomaso"
,
"Tomasz"
,
"Tombaugh"
,
"Tomchay"
,
"Tome"
,
"Tomi"
,
"Tomkiel"
,
"Tomkin"
,
"Tomkins"
,
"Tomlin"
,
"Tomlinson"
,
"Tommi"
,
"Tommie"
,
"Tommy"
,
"Tompkins"
,
"Toms"
,
"Toney"
,
"Tongue"
,
"Toni"
,
"Tonia"
,
"Tonie"
,
"Tonina"
,
"Tonjes"
,
"Tonkin"
,
"Tonl"
,
"Tonneson"
,
"Tonnie"
,
"Tonry"
,
"Tony"
,
"Tonya"
,
"Tonye"
,
"Toogood"
,
"Toole"
,
"Tooley"
,
"Toolis"
,
"Toomay"
,
"Toombs"
,
"Toomin"
,
"Toor"
,
"Tootsie"
,
"Topliffe"
,
"Topper"
,
"Topping"
,
"Tor"
,
"Torbart"
,
"Torbert"
,
"Tore"
,
"Torey"
,
"Torhert"
,
"Tori"
,
"Torie"
,
"Torin"
,
"Tormoria"
,
"Torosian"
,
"Torp"
,
"Torr"
,
"Torrance"
,
"Torras"
,
"Torray"
,
"Torre"
,
"Torrell"
,
"Torrence"
,
"Torres"
,
"Torrey"
,
"Torrie"
,
"Torrin"
,
"Torrlow"
,
"Torruella"
,
"Torry"
,
"Torto"
,
"Tortosa"
,
"Tory"
,
"Toscano"
,
"Tosch"
,
"Toshiko"
,
"Toth"
,
"Touber"
,
"Toulon"
,
"Tound"
,
"Tova"
,
"Tove"
,
"Towbin"
,
"Tower"
,
"Towers"
,
"Towill"
,
"Towland"
,
"Town"
,
"Towne"
,
"Towney"
,
"Townie"
,
"Townsend"
,
"Townshend"
,
"Towny"
,
"Towrey"
,
"Towroy"
,
"Toy"
,
"Trabue"
,
"Tracay"
,
"Trace"
,
"Tracee"
,
"Tracey"
,
"Traci"
,
"Tracie"
,
"Tracy"
,
"Trager"
,
"Trahern"
,
"Trahurn"
,
"Trainer"
,
"Trainor"
,
"Trakas"
,
"Trammel"
,
"Tran"
,
"Tranquada"
,
"Trant"
,
"Trask"
,
"Tratner"
,
"Trauner"
,
"Trautman"
,
"Travax"
,
"Traver"
,
"Travers"
,
"Travis"
,
"Travus"
,
"Traweek"
,
"Tray"
,
"Treacy"
,
"Treat"
,
"Trefler"
,
"Trefor"
,
"Treharne"
,
"Treiber"
,
"Trela"
,
"Trella"
,
"Trellas"
,
"Trelu"
,
"Tremain"
,
"Tremaine"
,
"Tremann"
,
"Tremayne"
,
"Trembly"
,
"Tremml"
,
"Trenna"
,
"Trent"
,
"Trenton"
,
"Tresa"
,
"Trescha"
,
"Trescott"
,
"Tressa"
,
"Tressia"
,
"Treulich"
,
"Trev"
,
"Treva"
,
"Trevah"
,
"Trevar"
,
"Trever"
,
"Trevethick"
,
"Trevor"
,
"Trevorr"
,
"Trey"
,
"Tri"
,
"Trici"
,
"Tricia"
,
"Trilbee"
,
"Trilbi"
,
"Trilbie"
,
"Trilby"
,
"Triley"
,
"Trill"
,
"Trillbee"
,
"Trillby"
,
"Trilley"
,
"Trilly"
,
"Trimble"
,
"Trimmer"
,
"Trin"
,
"Trina"
,
"Trinatte"
,
"Trinee"
,
"Trinetta"
,
"Trinette"
,
"Trini"
,
"Trinia"
,
"Trinidad"
,
"Trinity"
,
"Trinl"
,
"Triny"
,
"Trip"
,
"Triplett"
,
"Tripp"
,
"Tris"
,
"Trisa"
,
"Trish"
,
"Trisha"
,
"Trista"
,
"Tristam"
,
"Tristan"
,
"Tristas"
,
"Tristis"
,
"Tristram"
,
"Trix"
,
"Trixi"
,
"Trixie"
,
"Trixy"
,
"Trocki"
,
"Trojan"
,
"Trometer"
,
"Tronna"
,
"Troth"
,
"Trotta"
,
"Trotter"
,
"Trout"
,
"Trovillion"
,
"Trow"
,
"Troxell"
,
"Troy"
,
"Troyes"
,
"Trstram"
,
"Trubow"
,
"Truc"
,
"Truda"
,
"Trude"
,
"Trudey"
,
"Trudi"
,
"Trudie"
,
"Trudnak"
,
"Trudy"
,
"True"
,
"Trueblood"
,
"Truelove"
,
"Trueman"
,
"Truitt"
,
"Trula"
,
"Trumaine"
,
"Truman"
,
"Trumann"
,
"Truscott"
,
"Trust"
,
"Trutko"
,
"Tryck"
,
"Trygve"
,
"Tsai"
,
"Tsan"
,
"Tse"
,
"Tseng"
,
"Tshombe"
,
"Tsuda"
,
"Tsui"
,
"Tu"
,
"Tubb"
,
"Tuchman"
,
"Tuck"
,
"Tucker"
,
"Tuckie"
,
"Tucky"
,
"Tuddor"
,
"Tudela"
,
"Tudor"
,
"Tuesday"
,
"Tufts"
,
"Tugman"
,
"Tuinenga"
,
"Tull"
,
"Tulley"
,
"Tullius"
,
"Tullus"
,
"Tullusus"
,
"Tully"
,
"Tumer"
,
"Tuneberg"
,
"Tung"
,
"Tunnell"
,
"Tupler"
,
"Tuppeny"
,
"Turino"
,
"Turk"
,
"Turley"
,
"Turmel"
,
"Turnbull"
,
"Turne"
,
"Turner"
,
"Turnheim"
,
"Turoff"
,
"Turpin"
,
"Turrell"
,
"Turro"
,
"Turtle"
,
"Tut"
,
"Tutankhamen"
,
"Tutt"
,
"Tuttle"
,
"Tutto"
,
"Twedy"
,
"Twelve"
,
"Twila"
,
"Twitt"
,
"Twum"
,
"Twyla"
,
"Ty"
,
"Tybald"
,
"Tybalt"
,
"Tybi"
,
"Tybie"
,
"Tychon"
,
"Tychonn"
,
"Tye"
,
"Tyika"
,
"Tyler"
,
"Tymes"
,
"Tymon"
,
"Tymothy"
,
"Tynan"
,
"Tyne"
,
"Tyra"
,
"Tyre"
,
"Tyree"
,
"Tyrone"
,
"Tyrrell"
,
"Tyrus"
,
"Tyson"
,
"Tzong"
,
"Ubald"
,
"Uball"
,
"Ubana"
,
"Ube"
,
"Uchida"
,
"Uchish"
,
"Uda"
,
"Udale"
,
"Udall"
,
"Udela"
,
"Udele"
,
"Udell"
,
"Udella"
,
"Udelle"
,
"Uel"
,
"Uela"
,
"Uella"
,
"Ugo"
,
"Uird"
,
"Uis"
,
"Uke"
,
"Ul"
,
"Ula"
,
"Ulah"
,
"Ulane"
,
"Ulani"
,
"Ulberto"
,
"Ulda"
,
"Ule"
,
"Ulick"
,
"Ulises"
,
"Ulita"
,
"Ulla"
,
"Ulland"
,
"Ullman"
,
"Ullund"
,
"Ullyot"
,
"Ulphi"
,
"Ulphia"
,
"Ulphiah"
,
"Ulric"
,
"Ulrica"
,
"Ulrich"
,
"Ulrick"
,
"Ulrika"
,
"Ulrikaumeko"
,
"Ulrike"
,
"Ultan"
,
"Ultann"
,
"Ultima"
,
"Ultun"
,
"Ulu"
,
"Ulund"
,
"Ulysses"
,
"Umberto"
,
"Ume"
,
"Umeh"
,
"Umeko"
,
"Ummersen"
,
"Umont"
,
"Un"
,
"Una"
,
"Unders"
,
"Underwood"
,
"Undine"
,
"Undis"
,
"Undry"
,
"Une"
,
"Ungley"
,
"Uni"
,
"Unity"
,
"Unni"
,
"Uno"
,
"Upali"
,
"Uphemia"
,
"Upshaw"
,
"Upton"
,
"Urana"
,
"Urania"
,
"Uranie"
,
"Urata"
,
"Urba"
,
"Urbai"
,
"Urbain"
,
"Urban"
,
"Urbana"
,
"Urbani"
,
"Urbanna"
,
"Urbannai"
,
"Urbannal"
,
"Urbano"
,
"Urbanus"
,
"Urbas"
,
"Uri"
,
"Uria"
,
"Uriah"
,
"Urial"
,
"Urian"
,
"Urias"
,
"Uriel"
,
"Urien"
,
"Uriia"
,
"Uriiah"
,
"Uriisa"
,
"Urina"
,
"Urion"
,
"Urissa"
,
"Urita"
,
"Urquhart"
,
"Ursa"
,
"Ursal"
,
"Ursala"
,
"Ursas"
,
"Ursel"
,
"Ursi"
,
"Ursola"
,
"Urson"
,
"Ursula"
,
"Ursulette"
,
"Ursulina"
,
"Ursuline"
,
"Ury"
,
"Usanis"
,
"Ushijima"
,
"Uta"
,
"Utas"
,
"Ute"
,
"Utham"
,
"Uthrop"
,
"Utica"
,
"Uticas"
,
"Utimer"
,
"Utley"
,
"Utta"
,
"Uttasta"
,
"Utter"
,
"Uttica"
,
"Uuge"
,
"Uund"
,
"Uwton"
,
"Uyekawa"
,
"Uzia"
,
"Uzial"
,
"Uziel"
,
"Uzzi"
,
"Uzzia"
,
"Uzzial"
,
"Uzziel"
,
"Va"
,
"Vaas"
,
"Vaasta"
,
"Vachel"
,
"Vachell"
,
"Vachil"
,
"Vachill"
,
"Vacla"
,
"Vaclav"
,
"Vaclava"
,
"Vacuva"
,
"Vada"
,
"Vaden"
,
"Vadim"
,
"Vadnee"
,
"Vaenfila"
,
"Vahe"
,
"Vaientina"
,
"Vail"
,
"Vaios"
,
"Vaish"
,
"Val"
,
"Vala"
,
"Valaree"
,
"Valaria"
,
"Valda"
,
"Valdas"
,
"Valdemar"
,
"Valdes"
,
"Valdis"
,
"Vale"
,
"Valeda"
,
"Valenba"
,
"Valencia"
,
"Valene"
,
"Valenka"
,
"Valenta"
,
"Valente"
,
"Valentia"
,
"Valentijn"
,
"Valentin"
,
"Valentina"
,
"Valentine"
,
"Valentino"
,
"Valenza"
,
"Valer"
,
"Valera"
,
"Valeria"
,
"Valerian"
,
"Valerie"
,
"Valerio"
,
"Valerlan"
,
"Valerle"
,
"Valery"
,
"Valerye"
,
"Valeta"
,
"Valiant"
,
"Valida"
,
"Valina"
,
"Valle"
,
"Valleau"
,
"Vallery"
,
"Valley"
,
"Valli"
,
"Vallie"
,
"Vallo"
,
"Vallonia"
,
"Vally"
,
"Valma"
,
"Valonia"
,
"Valoniah"
,
"Valora"
,
"Valorie"
,
"Valry"
,
"Valtin"
,
"Van"
,
"VanHook"
,
"Vance"
,
"Vanda"
,
"Vanden"
,
"Vander"
,
"Vanderhoek"
,
"Vandervelde"
,
"Vandyke"
,
"Vanessa"
,
"Vange"
,
"Vanhomrigh"
,
"Vani"
,
"Vania"
,
"Vanna"
,
"Vanni"
,
"Vannie"
,
"Vanny"
,
"Vano"
,
"Vanthe"
,
"Vanya"
,
"Vanzant"
,
"Varden"
,
"Vardon"
,
"Vareck"
,
"Vargas"
,
"Varhol"
,
"Varian"
,
"Varick"
,
"Varien"
,
"Varini"
,
"Varion"
,
"Varipapa"
,
"Varney"
,
"Varrian"
,
"Vary"
,
"Vas"
,
"Vashtee"
,
"Vashti"
,
"Vashtia"
,
"Vasileior"
,
"Vasilek"
,
"Vasili"
,
"Vasiliki"
,
"Vasilis"
,
"Vasiliu"
,
"Vasily"
,
"Vasos"
,
"Vasquez"
,
"Vassar"
,
"Vassaux"
,
"Vassell"
,
"Vassili"
,
"Vassily"
,
"Vasta"
,
"Vastah"
,
"Vastha"
,
"Vasti"
,
"Vasya"
,
"Vasyuta"
,
"Vaughan"
,
"Vaughn"
,
"Vaules"
,
"Veal"
,
"Veator"
,
"Veats"
,
"Veda"
,
"Vedetta"
,
"Vedette"
,
"Vedi"
,
"Vedis"
,
"Veedis"
,
"Velasco"
,
"Velda"
,
"Veleda"
,
"Velick"
,
"Veljkov"
,
"Velleman"
,
"Velma"
,
"Velvet"
,
"Vena"
,
"Venable"
,
"Venator"
,
"Venditti"
,
"Veneaux"
,
"Venetia"
,
"Venetis"
,
"Venezia"
,
"Venice"
,
"Venita"
,
"Venn"
,
"Veno"
,
"Venola"
,
"Venterea"
,
"Vento"
,
"Ventre"
,
"Ventura"
,
"Venu"
,
"Venus"
,
"Venuti"
,
"Ver"
,
"Vera"
,
"Verada"
,
"Veradi"
,
"Veradia"
,
"Veradis"
,
"Verbenia"
,
"Verda"
,
"Verdha"
,
"Verdi"
,
"Verdie"
,
"Vere"
,
"Verena"
,
"Verene"
,
"Verge"
,
"Verger"
,
"Vergil"
,
"Vergne"
,
"Vergos"
,
"Veriee"
,
"Verile"
,
"Verina"
,
"Verine"
,
"Verity"
,
"Verla"
,
"Verlee"
,
"Verlie"
,
"Vern"
,
"Verna"
,
"Verne"
,
"Vernen"
,
"Verner"
,
"Verneuil"
,
"Verney"
,
"Vernice"
,
"Vernier"
,
"Vernita"
,
"Vernon"
,
"Vernor"
,
"Veron"
,
"Veronica"
,
"Veronika"
,
"Veronike"
,
"Veronique"
,
"Verras"
,
"Vershen"
,
"Vescuso"
,
"Vesta"
,
"Veta"
,
"Vetter"
,
"Vevay"
,
"Vevina"
,
"Vevine"
,
"Vey"
,
"Vezza"
,
"Vharat"
,
"Vi"
,
"Viafore"
,
"Vial"
,
"Vic"
,
"Viccora"
,
"Vick"
,
"Vickey"
,
"Vicki"
,
"Vickie"
,
"Vicky"
,
"Victoir"
,
"Victor"
,
"Victoria"
,
"Victorie"
,
"Victorine"
,
"Victory"
,
"Vida"
,
"Vidal"
,
"Vidda"
,
"Viddah"
,
"Vidovic"
,
"Vidovik"
,
"Viehmann"
,
"Viens"
,
"Vierno"
,
"Vieva"
,
"Vig"
,
"Vigen"
,
"Viglione"
,
"Vigor"
,
"Viguerie"
,
"Viki"
,
"Viking"
,
"Vikki"
,
"Vikky"
,
"Vilberg"
,
"Vilhelmina"
,
"Villada"
,
"Villiers"
,
"Vilma"
,
"Vin"
,
"Vina"
,
"Vinaya"
,
"Vince"
,
"Vincelette"
,
"Vincent"
,
"Vincenta"
,
"Vincentia"
,
"Vincents"
,
"Vincenty"
,
"Vincenz"
,
"Vine"
,
"Vinia"
,
"Vinita"
,
"Vinn"
,
"Vinna"
,
"Vinni"
,
"Vinnie"
,
"Vinny"
,
"Vins"
,
"Vinson"
,
"Viola"
,
"Violante"
,
"Viole"
,
"Violet"
,
"Violeta"
,
"Violetta"
,
"Violette"
,
"Vipul"
,
"Viquelia"
,
"Viradis"
,
"Virendra"
,
"Virg"
,
"Virge"
,
"Virgel"
,
"Virgie"
,
"Virgil"
,
"Virgilia"
,
"Virgilio"
,
"Virgin"
,
"Virgina"
,
"Virginia"
,
"Virginie"
,
"Virgy"
,
"Viridi"
,
"Viridis"
,
"Viridissa"
,
"Virnelli"
,
"Viscardi"
,
"Vish"
,
"Vita"
,
"Vitale"
,
"Vitalis"
,
"Vite"
,
"Vitek"
,
"Vitia"
,
"Vitkun"
,
"Vito"
,
"Vitoria"
,
"Vittoria"
,
"Vittorio"
,
"Vitus"
,
"Viv"
,
"Viva"
,
"Viveca"
,
"Vivi"
,
"Vivia"
,
"Vivian"
,
"Viviana"
,
"Viviane"
,
"Vivianna"
,
"Vivianne"
,
"Vivica"
,
"Vivie"
,
"Vivien"
,
"Viviene"
,
"Vivienne"
,
"Viviyan"
,
"Vivl"
,
"Vivle"
,
"Vivyan"
,
"Vivyanne"
,
"Vizza"
,
"Vizzone"
,
"Vlad"
,
"Vlada"
,
"Vladamar"
,
"Vladamir"
,
"Vladi"
,
"Vladimar"
,
"Vladimir"
,
"Voccola"
,
"Voe"
,
"Vogel"
,
"Vogele"
,
"Vogeley"
,
"Vola"
,
"Volding"
,
"Voleta"
,
"Voletta"
,
"Volin"
,
"Volkan"
,
"Volnak"
,
"Volnay"
,
"Volney"
,
"Volny"
,
"Volotta"
,
"Volpe"
,
"Voltmer"
,
"Voltz"
,
"Von"
,
"Vona"
,
"Vonni"
,
"Vonnie"
,
"Vonny"
,
"Vookles"
,
"Voorhis"
,
"Vorfeld"
,
"Vories"
,
"Vorster"
,
"Voss"
,
"Votaw"
,
"Vowel"
,
"Vrablik"
,
"Vtarj"
,
"Vtehsta"
,
"Vudimir"
,
"Vullo"
,
"Vyky"
,
"Vyner"
,
"Vyse"
,
"Waal"
,
"Wachtel"
,
"Wachter"
,
"Wack"
,
"Waddell"
,
"Waddington"
,
"Waddle"
,
"Wade"
,
"Wadell"
,
"Wadesworth"
,
"Wadleigh"
,
"Wadlinger"
,
"Wadsworth"
,
"Waechter"
,
"Waers"
,
"Wager"
,
"Wagner"
,
"Wagoner"
,
"Wagshul"
,
"Wagstaff"
,
"Wahkuna"
,
"Wahl"
,
"Wahlstrom"
,
"Wailoo"
,
"Wain"
,
"Waine"
,
"Wainwright"
,
"Wait"
,
"Waite"
,
"Waiter"
,
"Wake"
,
"Wakeen"
,
"Wakefield"
,
"Wakerly"
,
"Waki"
,
"Walburga"
,
"Walcoff"
,
"Walcott"
,
"Walczak"
,
"Wald"
,
"Waldack"
,
"Waldemar"
,
"Walden"
,
"Waldman"
,
"Waldner"
,
"Waldo"
,
"Waldon"
,
"Waldos"
,
"Waldron"
,
"Wales"
,
"Walford"
,
"Waligore"
,
"Walke"
,
"Walker"
,
"Walkling"
,
"Wall"
,
"Wallace"
,
"Wallach"
,
"Wallache"
,
"Wallack"
,
"Wallas"
,
"Waller"
,
"Walley"
,
"Wallford"
,
"Walli"
,
"Wallie"
,
"Walling"
,
"Wallinga"
,
"Wallis"
,
"Walliw"
,
"Wallraff"
,
"Walls"
,
"Wally"
,
"Walrath"
,
"Walsh"
,
"Walston"
,
"Walt"
,
"Walter"
,
"Walters"
,
"Walther"
,
"Waltner"
,
"Walton"
,
"Walworth"
,
"Waly"
,
"Wampler"
,
"Wamsley"
,
"Wan"
,
"Wanda"
,
"Wandie"
,
"Wandis"
,
"Wandy"
,
"Wane"
,
"Waneta"
,
"Wanfried"
,
"Wang"
,
"Wanids"
,
"Wanonah"
,
"Wanyen"
,
"Wappes"
,
"Warchaw"
,
"Ward"
,
"Warde"
,
"Warden"
,
"Warder"
,
"Wardieu"
,
"Wardlaw"
,
"Wardle"
,
"Ware"
,
"Wareing"
,
"Warenne"
,
"Warfeld"
,
"Warfield"
,
"Warfold"
,
"Warford"
,
"Warfore"
,
"Warfourd"
,
"Warga"
,
"Warila"
,
"Waring"
,
"Warms"
,
"Warner"
,
"Warp"
,
"Warram"
,
"Warren"
,
"Warrenne"
,
"Warrick"
,
"Warrin"
,
"Warring"
,
"Warthman"
,
"Warton"
,
"Wartow"
,
"Warwick"
,
"Wash"
,
"Washburn"
,
"Washington"
,
"Washko"
,
"Wasserman"
,
"Wasson"
,
"Wassyngton"
,
"Wat"
,
"Watanabe"
,
"Waterer"
,
"Waterman"
,
"Waters"
,
"Watkin"
,
"Watkins"
,
"Watson"
,
"Watt"
,
"Wattenberg"
,
"Watters"
,
"Watts"
,
"Waugh"
,
"Wauters"
,
"Wavell"
,
"Waverley"
,
"Waverly"
,
"Wawro"
,
"Waxler"
,
"Waxman"
,
"Way"
,
"Waylan"
,
"Wayland"
,
"Waylen"
,
"Waylin"
,
"Waylon"
,
"Waynant"
,
"Wayne"
,
"Wayolle"
,
"Weaks"
,
"Wearing"
,
"Weasner"
,
"Weatherby"
,
"Weatherley"
,
"Weathers"
,
"Weaver"
,
"Web"
,
"Webb"
,
"Webber"
,
"Weber"
,
"Webster"
,
"Wedurn"
,
"Weed"
,
"Weeks"
,
"Wehner"
,
"Wehrle"
,
"Wei"
,
"Weibel"
,
"Weidar"
,
"Weide"
,
"Weider"
,
"Weidman"
,
"Weidner"
,
"Weig"
,
"Weight"
,
"Weigle"
,
"Weihs"
,
"Weikert"
,
"Weil"
,
"Weiler"
,
"Weiman"
,
"Wein"
,
"Weinberg"
,
"Weiner"
,
"Weinert"
,
"Weingarten"
,
"Weingartner"
,
"Weinhardt"
,
"Weinman"
,
"Weinreb"
,
"Weinrich"
,
"Weinshienk"
,
"Weinstein"
,
"Weinstock"
,
"Weintrob"
,
"Weir"
,
"Weirick"
,
"Weisbart"
,
"Weisberg"
,
"Weisbrodt"
,
"Weisburgh"
,
"Weiser"
,
"Weisler"
,
"Weisman"
,
"Weismann"
,
"Weiss"
,
"Weissberg"
,
"Weissman"
,
"Weissmann"
,
"Weitman"
,
"Weitzman"
,
"Weixel"
,
"Weksler"
,
"Welbie"
,
"Welby"
,
"Welch"
,
"Welcher"
,
"Welcome"
,
"Welcy"
,
"Weld"
,
"Weldon"
,
"Welford"
,
"Welker"
,
"Welles"
,
"Wellesley"
,
"Wellington"
,
"Wells"
,
"Welsh"
,
"Welton"
,
"Wenda"
,
"Wendall"
,
"Wendalyn"
,
"Wende"
,
"Wendel"
,
"Wendelin"
,
"Wendelina"
,
"Wendeline"
,
"Wendell"
,
"Wendi"
,
"Wendie"
,
"Wendin"
,
"Wendolyn"
,
"Wendt"
,
"Wendy"
,
"Wendye"
,
"Wenger"
,
"Wengert"
,
"Wenn"
,
"Wennerholn"
,
"Wenoa"
,
"Wenona"
,
"Wenonah"
,
"Wentworth"
,
"Wenz"
,
"Wera"
,
"Werbel"
,
"Werby"
,
"Werner"
,
"Wernher"
,
"Wernick"
,
"Wernsman"
,
"Werra"
,
"Wershba"
,
"Wertheimer"
,
"Wertz"
,
"Wes"
,
"Wesa"
,
"Wescott"
,
"Wesla"
,
"Wesle"
,
"Weslee"
,
"Wesley"
,
"Wessling"
,
"West"
,
"Westberg"
,
"Westbrook"
,
"Westbrooke"
,
"Wester"
,
"Westerfield"
,
"Westfahl"
,
"Westfall"
,
"Westhead"
,
"Westland"
,
"Westleigh"
,
"Westley"
,
"Westlund"
,
"Westmoreland"
,
"Westney"
,
"Weston"
,
"Westphal"
,
"Wetzel"
,
"Wetzell"
,
"Wexler"
,
"Wey"
,
"Weyermann"
,
"Weylin"
,
"Weywadt"
,
"Whale"
,
"Whalen"
,
"Whall"
,
"Whallon"
,
"Whang"
,
"Wharton"
,
"Whatley"
,
"Wheaton"
,
"Wheeler"
,
"Wheelwright"
,
"Whelan"
,
"Whetstone"
,
"Whiffen"
,
"Whiney"
,
"Whipple"
,
"Whit"
,
"Whitaker"
,
"Whitby"
,
"Whitcher"
,
"Whitcomb"
,
"White"
,
"Whitebook"
,
"Whitehouse"
,
"Whitehurst"
,
"Whitelaw"
,
"Whiteley"
,
"Whitford"
,
"Whiting"
,
"Whitman"
,
"Whitnell"
,
"Whitney"
,
"Whitson"
,
"Whittaker"
,
"Whittemore"
,
"Whitten"
,
"Whitver"
,
"Whorton"
,
"Whyte"
,
"Wiatt"
,
"Wiburg"
,
"Wichern"
,
"Wichman"
,
"Wickham"
,
"Wickman"
,
"Wickner"
,
"Wicks"
,
"Widera"
,
"Wie"
,
"Wiebmer"
,
"Wieche"
,
"Wiedmann"
,
"Wiencke"
,
"Wiener"
,
"Wier"
,
"Wieren"
,
"Wiersma"
,
"Wiese"
,
"Wiggins"
,
"Wight"
,
"Wightman"
,
"Wil"
,
"Wilber"
,
"Wilbert"
,
"Wilbur"
,
"Wilburn"
,
"Wilburt"
,
"Wilcox"
,
"Wilda"
,
"Wilde"
,
"Wildee"
,
"Wilden"
,
"Wilder"
,
"Wildermuth"
,
"Wildon"
,
"Wileen"
,
"Wilek"
,
"Wilen"
,
"Wiles"
,
"Wiley"
,
"Wilfred"
,
"Wilfreda"
,
"Wilfrid"
,
"Wilhelm"
,
"Wilhelmina"
,
"Wilhelmine"
,
"Wilhide"
,
"Wilie"
,
"Wilinski"
,
"Wilkens"
,
"Wilkey"
,
"Wilkie"
,
"Wilkins"
,
"Wilkinson"
,
"Wilkison"
,
"Will"
,
"Willa"
,
"Willabella"
,
"Willamina"
,
"Willard"
,
"Willcox"
,
"Willdon"
,
"Willem"
,
"Willet"
,
"Willett"
,
"Willetta"
,
"Willette"
,
"Willey"
,
"Willi"
,
"William"
,
"Williams"
,
"Williamsen"
,
"Williamson"
,
"Willie"
,
"Willin"
,
"Willing"
,
"Willis"
,
"Willman"
,
"Willmert"
,
"Willms"
,
"Willner"
,
"Willock"
,
"Willow"
,
"Wills"
,
"Willtrude"
,
"Willumsen"
,
"Willy"
,
"Willyt"
,
"Wilma"
,
"Wilmar"
,
"Wilmer"
,
"Wilmette"
,
"Wilmott"
,
"Wilona"
,
"Wilonah"
,
"Wilone"
,
"Wilow"
,
"Wilscam"
,
"Wilser"
,
"Wilsey"
,
"Wilson"
,
"Wilt"
,
"Wilterdink"
,
"Wilton"
,
"Wiltsey"
,
"Wiltshire"
,
"Wiltz"
,
"Wimsatt"
,
"Win"
,
"Wina"
,
"Wincer"
,
"Winchell"
,
"Winchester"
,
"Wind"
,
"Windham"
,
"Windsor"
,
"Windy"
,
"Windzer"
,
"Winebaum"
,
"Winer"
,
"Winfield"
,
"Winfred"
,
"Winfrid"
,
"Wing"
,
"Wini"
,
"Winifield"
,
"Winifred"
,
"Winikka"
,
"Winn"
,
"Winna"
,
"Winnah"
,
"Winne"
,
"Winni"
,
"Winnick"
,
"Winnie"
,
"Winnifred"
,
"Winny"
,
"Winograd"
,
"Winola"
,
"Winona"
,
"Winonah"
,
"Winou"
,
"Winser"
,
"Winshell"
,
"Winslow"
,
"Winson"
,
"Winsor"
,
"Winston"
,
"Winstonn"
,
"Winter"
,
"Winterbottom"
,
"Winters"
,
"Winther"
,
"Winthorpe"
,
"Winthrop"
,
"Winton"
,
"Winwaloe"
,
"Winzler"
,
"Wira"
,
"Wirth"
,
"Wise"
,
"Wiseman"
,
"Wiskind"
,
"Wisnicki"
,
"Wistrup"
,
"Wit"
,
"Witcher"
,
"Witha"
,
"Witherspoon"
,
"Witkin"
,
"Witt"
,
"Witte"
,
"Wittenburg"
,
"Wittie"
,
"Witty"
,
"Wivestad"
,
"Wivina"
,
"Wivinah"
,
"Wivinia"
,
"Wixted"
,
"Woehick"
,
"Woermer"
,
"Wohlen"
,
"Wohlert"
,
"Wojak"
,
"Wojcik"
,
"Wolbrom"
,
"Wolcott"
,
"Wolenik"
,
"Wolf"
,
"Wolfe"
,
"Wolff"
,
"Wolfgang"
,
"Wolfgram"
,
"Wolfie"
,
"Wolford"
,
"Wolfort"
,
"Wolfram"
,
"Wolfson"
,
"Wolfy"
,
"Wolgast"
,
"Wolk"
,
"Woll"
,
"Wollis"
,
"Wolpert"
,
"Wolsky"
,
"Womack"
,
"Won"
,
"Wonacott"
,
"Wong"
,
"Woo"
,
"Wood"
,
"Woodall"
,
"Woodberry"
,
"Woodcock"
,
"Woodford"
,
"Woodhead"
,
"Woodhouse"
,
"Woodie"
,
"Woodley"
,
"Woodman"
,
"Woodring"
,
"Woodrow"
,
"Woodruff"
,
"Woods"
,
"Woodson"
,
"Woodsum"
,
"Woodward"
,
"Woody"
,
"Woolcott"
,
"Wooldridge"
,
"Woolley"
,
"Woolson"
,
"Wooster"
,
"Wootan"
,
"Woothen"
,
"Wootten"
,
"Worden"
,
"Worl"
,
"Worlock"
,
"Worrell"
,
"Worsham"
,
"Worth"
,
"Worthington"
,
"Worthy"
,
"Wrand"
,
"Wren"
,
"Wrench"
,
"Wrennie"
,
"Wright"
,
"Wrightson"
,
"Wrigley"
,
"Wsan"
,
"Wu"
,
"Wulf"
,
"Wulfe"
,
"Wun"
,
"Wunder"
,
"Wurst"
,
"Wurster"
,
"Wurtz"
,
"Wyatan"
,
"Wyatt"
,
"Wyck"
,
"Wycoff"
,
"Wye"
,
"Wylde"
,
"Wylen"
,
"Wyler"
,
"Wylie"
,
"Wylma"
,
"Wyly"
,
"Wymore"
,
"Wyn"
,
"Wyndham"
,
"Wyne"
,
"Wynn"
,
"Wynne"
,
"Wynnie"
,
"Wynny"
,
"Wyon"
,
"Wystand"
,
"Xantha"
,
"Xanthe"
,
"Xanthus"
,
"Xavier"
,
"Xaviera"
,
"Xavler"
,
"Xena"
,
"Xenia"
,
"Xeno"
,
"Xenophon"
,
"Xenos"
,
"Xerxes"
,
"Xever"
,
"Ximena"
,
"Ximenes"
,
"Ximenez"
,
"Xylia"
,
"Xylina"
,
"Xylon"
,
"Xymenes"
,
"Yaakov"
,
"Yablon"
,
"Yacano"
,
"Yacov"
,
"Yaeger"
,
"Yael"
,
"Yager"
,
"Yahiya"
,
"Yaker"
,
"Yale"
,
"Yalonda"
,
"Yam"
,
"Yamauchi"
,
"Yanaton"
,
"Yance"
,
"Yancey"
,
"Yancy"
,
"Yand"
,
"Yank"
,
"Yankee"
,
"Yann"
,
"Yarak"
,
"Yard"
,
"Yardley"
,
"Yaron"
,
"Yarvis"
,
"Yasmeen"
,
"Yasmin"
,
"Yasmine"
,
"Yasu"
,
"Yasui"
,
"Yate"
,
"Yates"
,
"Yatzeck"
,
"Yaya"
,
"Yazbak"
,
"Yeargain"
,
"Yearwood"
,
"Yeaton"
,
"Yecies"
,
"Yee"
,
"Yeh"
,
"Yehudi"
,
"Yehudit"
,
"Yelena"
,
"Yelich"
,
"Yelmene"
,
"Yemane"
,
"Yeo"
,
"Yeorgi"
,
"Yerga"
,
"Yerkovich"
,
"Yerxa"
,
"Yesima"
,
"Yeta"
,
"Yetac"
,
"Yetah"
,
"Yetta"
,
"Yetti"
,
"Yettie"
,
"Yetty"
,
"Yeung"
,
"Yevette"
,
"Yi"
,
"Yila"
,
"Yim"
,
"Yirinec"
,
"Ylla"
,
"Ynes"
,
"Ynez"
,
"Yoho"
,
"Yoko"
,
"Yokoyama"
,
"Yokum"
,
"Yolanda"
,
"Yolande"
,
"Yolane"
,
"Yolanthe"
,
"Yona"
,
"Yonah"
,
"Yonatan"
,
"Yong"
,
"Yonina"
,
"Yonit"
,
"Yonita"
,
"Yoo"
,
"Yoong"
,
"Yordan"
,
"Yorgen"
,
"Yorgo"
,
"Yorgos"
,
"Yorick"
,
"York"
,
"Yorke"
,
"Yorker"
,
"Yoshi"
,
"Yoshiko"
,
"Yoshio"
,
"Youlton"
,
"Young"
,
"Younger"
,
"Younglove"
,
"Youngman"
,
"Youngran"
,
"Yousuf"
,
"Yovonnda"
,
"Ysabel"
,
"Yseult"
,
"Yseulta"
,
"Yseulte"
,
"Yuhas"
,
"Yuille"
,
"Yuji"
,
"Yuk"
,
"Yukio"
,
"Yul"
,
"Yule"
,
"Yulma"
,
"Yuma"
,
"Yumuk"
,
"Yun"
,
"Yunfei"
,
"Yung"
,
"Yunick"
,
"Yup"
,
"Yuri"
,
"Yuria"
,
"Yurik"
,
"Yursa"
,
"Yurt"
,
"Yusem"
,
"Yusuk"
,
"Yuu"
,
"Yuzik"
,
"Yves"
,
"Yvette"
,
"Yvon"
,
"Yvonne"
,
"Yvonner"
,
"Yvor"
,
"Zabrina"
,
"Zabrine"
,
"Zacarias"
,
"Zaccaria"
,
"Zacek"
,
"Zach"
,
"Zachar"
,
"Zacharia"
,
"Zachariah"
,
"Zacharias"
,
"Zacharie"
,
"Zachary"
,
"Zacherie"
,
"Zachery"
,
"Zack"
,
"Zackariah"
,
"Zacks"
,
"Zadack"
,
"Zadoc"
,
"Zahara"
,
"Zahavi"
,
"Zaid"
,
"Zailer"
,
"Zak"
,
"Zakaria"
,
"Zakarias"
,
"Zalea"
,
"Zales"
,
"Zaller"
,
"Zalucki"
,
"Zamir"
,
"Zamora"
,
"Zampardi"
,
"Zampino"
,
"Zandra"
,
"Zandt"
,
"Zane"
,
"Zaneski"
,
"Zaneta"
,
"Zannini"
,
"Zantos"
,
"Zanze"
,
"Zara"
,
"Zaragoza"
,
"Zarah"
,
"Zared"
,
"Zaremski"
,
"Zarger"
,
"Zaria"
,
"Zarla"
,
"Zashin"
,
"Zaslow"
,
"Zasuwa"
,
"Zavala"
,
"Zavras"
,
"Zawde"
,
"Zea"
,
"Zealand"
,
"Zeb"
,
"Zeba"
,
"Zebada"
,
"Zebadiah"
,
"Zebapda"
,
"Zebe"
,
"Zebedee"
,
"Zebulen"
,
"Zebulon"
,
"Zechariah"
,
"Zeculon"
,
"Zed"
,
"Zedekiah"
,
"Zeeba"
,
"Zeena"
,
"Zehe"
,
"Zeidman"
,
"Zeiger"
,
"Zeiler"
,
"Zeitler"
,
"Zeke"
,
"Zel"
,
"Zela"
,
"Zelazny"
,
"Zelda"
,
"Zelde"
,
"Zelig"
,
"Zelikow"
,
"Zelle"
,
"Zellner"
,
"Zelma"
,
"Zelten"
,
"Zena"
,
"Zenas"
,
"Zenda"
,
"Zendah"
,
"Zenger"
,
"Zenia"
,
"Zennas"
,
"Zennie"
,
"Zenobia"
,
"Zeph"
,
"Zephan"
,
"Zephaniah"
,
"Zeralda"
,
"Zerelda"
,
"Zerk"
,
"Zerla"
,
"Zerlina"
,
"Zerline"
,
"Zeta"
,
"Zetana"
,
"Zetes"
,
"Zetta"
,
"Zeus"
,
"Zhang"
,
"Zia"
,
"Ziagos"
,
"Zicarelli"
,
"Ziegler"
,
"Zielsdorf"
,
"Zigmund"
,
"Zigrang"
,
"Ziguard"
,
"Zilber"
,
"Zildjian"
,
"Zilla"
,
"Zillah"
,
"Zilvia"
,
"Zima"
,
"Zimmer"
,
"Zimmerman"
,
"Zimmermann"
,
"Zina"
,
"Zinah"
,
"Zinck"
,
"Zindman"
,
"Zingale"
,
"Zingg"
,
"Zink"
,
"Zinn"
,
"Zinnes"
,
"Zins"
,
"Zipah"
,
"Zipnick"
,
"Zippel"
,
"Zippora"
,
"Zipporah"
,
"Zirkle"
,
"Zischke"
,
"Zita"
,
"Zitah"
,
"Zitella"
,
"Zitvaa"
,
"Ziwot"
,
"Zoa"
,
"Zoara"
,
"Zoarah"
,
"Zoba"
,
"Zobe"
,
"Zobias"
,
"Zobkiw"
,
"Zoe"
,
"Zoeller"
,
"Zoellick"
,
"Zoes"
,
"Zoha"
,
"Zohar"
,
"Zohara"
,
"Zoi"
,
"Zoie"
,
"Zoila"
,
"Zoilla"
,
"Zola"
,
"Zoldi"
,
"Zoller"
,
"Zollie"
,
"Zolly"
,
"Zolnay"
,
"Zolner"
,
"Zoltai"
,
"Zonda"
,
"Zondra"
,
"Zonnya"
,
"Zora"
,
"Zorah"
,
"Zorana"
,
"Zorina"
,
"Zorine"
,
"Zosema"
,
"Zosi"
,
"Zosima"
,
"Zoubek"
,
"Zrike"
,
"Zsa"
,
"Zsa Zsa"
,
"Zsazsa"
,
"Zsolway"
,
"Zubkoff"
,
"Zucker"
,
"Zuckerman"
,
"Zug"
,
"Zulch"
,
"Zuleika"
,
"Zulema"
,
"Zullo"
,
"Zumstein"
,
"Zumwalt"
,
"Zurek"
,
"Zurheide"
,
"Zurkow"
,
"Zurn"
,
"Zusman"
,
"Zuzana"
,
"Zwart"
,
"Zweig"
,
"Zwick"
,
"Zwiebel"
,
"Zysk"
]

},{}],175:[function(require,module,exports){
module.exports=[
"Aaronsburg"
,
"Abbeville"
,
"Abbotsford"
,
"Abbottstown"
,
"Abbyville"
,
"Abell"
,
"Abercrombie"
,
"Abernant"
,
"Abilene"
,
"Abingdon"
,
"Abington"
,
"Abiquiu"
,
"Abrams"
,
"Absaraka"
,
"Absarokee"
,
"Absecon"
,
"Acampo"
,
"Accokeek"
,
"Accomac"
,
"Accoville"
,
"Achille"
,
"Ackerly"
,
"Ackermanville"
,
"Ackworth"
,
"Acosta"
,
"Acra"
,
"Acushnet"
,
"Acworth"
,
"Adah"
,
"Adairsville"
,
"Adairville"
,
"Adamsbasin"
,
"Adamsburg"
,
"Adamstown"
,
"Adamsville"
,
"Addieville"
,
"Addington"
,
"Addy"
,
"Addyston"
,
"Adel"
,
"Adelanto"
,
"Adell"
,
"Adelphi"
,
"Adelphia"
,
"Adena"
,
"Adger"
,
"Adin"
,
"Adjuntas"
,
"Adna"
,
"Adona"
,
"Aflex"
,
"Afton"
,
"Agana"
,
"Agar"
,
"Agawam"
,
"Agness"
,
"Agra"
,
"Aguada"
,
"Aguadilla"
,
"Aguadulce"
,
"Aguanga"
,
"Aguila"
,
"Aguilar"
,
"Aguirre"
,
"Ahgwahching"
,
"Ahmeek"
,
"Ahoskie"
,
"Ahsahka"
,
"Ahwahnee"
,
"Aibonito"
,
"Aiea"
,
"Ailey"
,
"Aimwell"
,
"Ainsworth"
,
"Airville"
,
"Aitkin"
,
"Ajo"
,
"Akaska"
,
"Akeley"
,
"Akiachak"
,
"Akiak"
,
"Akutan"
,
"Alachua"
,
"Aladdin"
,
"Alakanuk"
,
"Alamance"
,
"Alamogordo"
,
"Alamosa"
,
"Alamota"
,
"Alanreed"
,
"Alanson"
,
"Alapaha"
,
"Albee"
,
"Albemarle"
,
"Albers"
,
"Albertlea"
,
"Alberton"
,
"Albertson"
,
"Albertville"
,
"Albia"
,
"Albin"
,
"Albion"
,
"Alborn"
,
"Alburg"
,
"Alburnett"
,
"Alburtis"
,
"Alcalde"
,
"Alcester"
,
"Alco"
,
"Alcolu"
,
"Alcova"
,
"Alda"
,
"Aldenville"
,
"Alderson"
,
"Aldie"
,
"Aledo"
,
"Aleknagik"
,
"Aleppo"
,
"Alford"
,
"Algoma"
,
"Algona"
,
"Algonac"
,
"Aliceville"
,
"Alief"
,
"Aline"
,
"Aliquippa"
,
"Alix"
,
"Alkabo"
,
"Alkol"
,
"Allamuchy"
,
"Allardt"
,
"Alledonia"
,
"Alleene"
,
"Allegan"
,
"Allegany"
,
"Alleghany"
,
"Allegre"
,
"Alleman"
,
"Allendale"
,
"Allendorf"
,
"Allenhurst"
,
"Allenport"
,
"Allensville"
,
"Allenton"
,
"Allenwood"
,
"Allerton"
,
"Allgood"
,
"Allock"
,
"Allons"
,
"Allouez"
,
"Alloway"
,
"Allport"
,
"Allred"
,
"Almena"
,
"Almira"
,
"Almo"
,
"Almont"
,
"Almyra"
,
"Alna"
,
"Alpaugh"
,
"Alpena"
,
"Alpharetta"
,
"Alpoca"
,
"Alsea"
,
"Alsen"
,
"Alsey"
,
"Alstead"
,
"Alston"
,
"Alta"
,
"Altadena"
,
"Altaloma"
,
"Altamahaw"
,
"Altamont"
,
"Altenburg"
,
"Altha"
,
"Altheimer"
,
"Altmar"
,
"Altona"
,
"Altoona"
,
"Altro"
,
"Altura"
,
"Alturas"
,
"Altus"
,
"Alumbank"
,
"Alvada"
,
"Alvadore"
,
"Alvarado"
,
"Alvaton"
,
"Alverda"
,
"Alverton"
,
"Alviso"
,
"Alvo"
,
"Alvord"
,
"Alvordton"
,
"Alvy"
,
"Alzada"
,
"Amado"
,
"Amagansett"
,
"Amagon"
,
"Amalia"
,
"Amana"
,
"Amanda"
,
"Amasa"
,
"Amawalk"
,
"Amazonia"
,
"Amberg"
,
"Amberson"
,
"Ambia"
,
"Ambler"
,
"Amboy"
,
"Amburgey"
,
"Ameagle"
,
"Amenia"
,
"Americus"
,
"Amery"
,
"Amesbury"
,
"Amesville"
,
"Amherstdale"
,
"Amidon"
,
"Amiret"
,
"Amissville"
,
"Amistad"
,
"Amite"
,
"Amityville"
,
"Amlin"
,
"Amma"
,
"Amo"
,
"Amonate"
,
"Amoret"
,
"Amorita"
,
"Amory"
,
"Amsden"
,
"Amston"
,
"Anacoco"
,
"Anacortes"
,
"Anadarko"
,
"Anahola"
,
"Anahuac"
,
"Analomink"
,
"Anamoose"
,
"Anamosa"
,
"Anasco"
,
"Anatone"
,
"Anawalt"
,
"Anchorville"
,
"Anco"
,
"Ancona"
,
"Ancram"
,
"Ancramdale"
,
"Andale"
,
"Andalusia"
,
"Andersonville"
,
"Andreas"
,
"Aneta"
,
"Aneth"
,
"Angier"
,
"Angleinlet"
,
"Angleton"
,
"Anguilla"
,
"Angwin"
,
"Aniak"
,
"Animas"
,
"Aniwa"
,
"Ankeny"
,
"Anmoore"
,
"Annada"
,
"Annamaria"
,
"Annandale"
,
"Annarbor"
,
"Annawan"
,
"Annemanie"
,
"Anniston"
,
"Annona"
,
"Annville"
,
"Anoka"
,
"Ansley"
,
"Anson"
,
"Ansonia"
,
"Ansonville"
,
"Ansted"
,
"Antesfort"
,
"Anthon"
,
"Antigo"
,
"Antlers"
,
"Antonchico"
,
"Antonito"
,
"Antrim"
,
"Anvik"
,
"Anza"
,
"Apalachicola"
,
"Apalachin"
,
"Apison"
,
"Aplington"
,
"Apopka"
,
"Appling"
,
"Appomattox"
,
"Aptos"
,
"Aquasco"
,
"Aquashicola"
,
"Aquebogue"
,
"Aquilla"
,
"Aquone"
,
"Arabi"
,
"Aragon"
,
"Arapaho"
,
"Arapahoe"
,
"Ararat"
,
"Arbela"
,
"Arboles"
,
"Arbon"
,
"Arbovale"
,
"Arbuckle"
,
"Arbyrd"
,
"Arcanum"
,
"Arcata"
,
"Archbald"
,
"Archbold"
,
"Archcape"
,
"Archie"
,
"Arco"
,
"Arcola"
,
"Ardara"
,
"Ardenvoir"
,
"Ardmore"
,
"Ardoch"
,
"Ardsley"
,
"Arecibo"
,
"Aredale"
,
"Arendtsville"
,
"Arenzville"
,
"Argenta"
,
"Argillite"
,
"Argo"
,
"Argonia"
,
"Argos"
,
"Argusville"
,
"Argyle"
,
"Ariel"
,
"Arimo"
,
"Arion"
,
"Aripeka"
,
"Arispe"
,
"Aristes"
,
"Ariton"
,
"Arivaca"
,
"Arjay"
,
"Arkabutla"
,
"Arkadelphia"
,
"Arkansaw"
,
"Arkdale"
,
"Arkoma"
,
"Arkport"
,
"Arkville"
,
"Arlee"
,
"Arley"
,
"Arma"
,
"Armagh"
,
"Armbrust"
,
"Armington"
,
"Armona"
,
"Armorel"
,
"Armuchee"
,
"Arnaudville"
,
"Arnegard"
,
"Arnett"
,
"Arnoldsburg"
,
"Arnoldsville"
,
"Arnot"
,
"Arock"
,
"Aroda"
,
"Aromas"
,
"Arona"
,
"Arp"
,
"Arpin"
,
"Arrey"
,
"Arriba"
,
"Arrington"
,
"Arrowsmith"
,
"Artas"
,
"Artemas"
,
"Artemus"
,
"Artesia"
,
"Artesian"
,
"Arthurdale"
,
"Artois"
,
"Arvada"
,
"Arvilla"
,
"Arvin"
,
"Arvonia"
,
"Ary"
,
"Asbury"
,
"Asco"
,
"Ascutney"
,
"Ashaway"
,
"Ashburn"
,
"Ashburnham"
,
"Ashby"
,
"Ashdown"
,
"Asheboro"
,
"Asherton"
,
"Ashfield"
,
"Ashford"
,
"Ashippun"
,
"Ashkum"
,
"Ashmore"
,
"Ashtabula"
,
"Ashton"
,
"Ashuelot"
,
"Ashville"
,
"Ashwood"
,
"Askov"
,
"Asotin"
,
"Aspermont"
,
"Aspers"
,
"Assaria"
,
"Assawoman"
,
"Assonet"
,
"Astatula"
,
"Atalissa"
,
"Atascadero"
,
"Atascosa"
,
"Atco"
,
"Atglen"
,
"Athelstane"
,
"Athol"
,
"Atlasburg"
,
"Atmore"
,
"Atoka"
,
"Attalla"
,
"Attapulgus"
,
"Attleboro"
,
"Auberry"
,
"Auburndale"
,
"Auburntown"
,
"Augres"
,
"Aulander"
,
"Ault"
,
"Aultman"
,
"Aumsville"
,
"Aurelia"
,
"Austell"
,
"Austerlitz"
,
"Austinburg"
,
"Austinville"
,
"Austwell"
,
"Autaugaville"
,
"Autrain"
,
"Autryville"
,
"Auxier"
,
"Auxvasse"
,
"Ava"
,
"Avalon"
,
"Avant"
,
"Avawam"
,
"Avella"
,
"Avenal"
,
"Avenel"
,
"Avera"
,
"Avilla"
,
"Avinger"
,
"Aviston"
,
"Avoca"
,
"Avondale"
,
"Avonmore"
,
"Awendaw"
,
"Axson"
,
"Axtel"
,
"Axtell"
,
"Axton"
,
"Ayden"
,
"Aydlett"
,
"Ayer"
,
"Aylett"
,
"Aynor"
,
"Ayr"
,
"Ayrshire"
,
"Azalia"
,
"Azle"
,
"Azusa"
,
"Babb"
,
"Bache"
,
"Backus"
,
"Bacliff"
,
"Baconton"
,
"Bacova"
,
"Badaxe"
,
"Badger"
,
"Badin"
,
"Bagdad"
,
"Baggs"
,
"Bagwell"
,
"Baileyton"
,
"Baileyville"
,
"Bains"
,
"Bainville"
,
"Bairdford"
,
"Bairoil"
,
"Baisden"
,
"Bajadero"
,
"Baker"
,
"Bakerstown"
,
"Bakersville"
,
"Bakerton"
,
"Bakewell"
,
"Bala"
,
"Balaton"
,
"Balch"
,
"Baldwinsville"
,
"Baldwinville"
,
"Baldwyn"
,
"Balko"
,
"Ballantine"
,
"Ballengee"
,
"Ballentine"
,
"Ballico"
,
"Ballinger"
,
"Ballouville"
,
"Ballwin"
,
"Bally"
,
"Balmat"
,
"Balmorhea"
,
"Balta"
,
"Bamberg"
,
"Banco"
,
"Bancroft"
,
"Bandana"
,
"Bandera"
,
"Bandon"
,
"Bandytown"
,
"Bangall"
,
"Bangs"
,
"Bankston"
,
"Banner"
,
"Banning"
,
"Bannister"
,
"Bannock"
,
"Banquete"
,
"Bantry"
,
"Baptistown"
,
"Baraboo"
,
"Baraga"
,
"Barataria"
,
"Barbeau"
,
"Barberton"
,
"Barberville"
,
"Barboursville"
,
"Barbourville"
,
"Barceloneta"
,
"Barco"
,
"Bardolph"
,
"Bardstown"
,
"Bardwell"
,
"Bargersville"
,
"Barhamsville"
,
"Baring"
,
"Barker"
,
"Barksdale"
,
"Barling"
,
"Barnardsville"
,
"Barnegat"
,
"Barnesboro"
,
"Barneston"
,
"Barnesville"
,
"Barneveld"
,
"Barnhart"
,
"Barnsdall"
,
"Barnstable"
,
"Barnstead"
,
"Barnum"
,
"Barnwell"
,
"Baroda"
,
"Barrackville"
,
"Barranquitas"
,
"Barree"
,
"Barron"
,
"Barronett"
,
"Barryton"
,
"Barrytown"
,
"Barryville"
,
"Bartelso"
,
"Bartlesville"
,
"Bartley"
,
"Barto"
,
"Bartonsville"
,
"Bartow"
,
"Barwick"
,
"Basco"
,
"Bascom"
,
"Basehor"
,
"Basile"
,
"Baskerville"
,
"Baskett"
,
"Baskin"
,
"Basom"
,
"Bassfield"
,
"Bastian"
,
"Bastrop"
,
"Basye"
,
"Batchelor"
,
"Batchtown"
,
"Batesburg"
,
"Batesland"
,
"Batesville"
,
"Batson"
,
"Battiest"
,
"Battleboro"
,
"Battletown"
,
"Baudette"
,
"Bausman"
,
"Bavon"
,
"Baxley"
,
"Bayamon"
,
"Bayard"
,
"Bayboro"
,
"Bayfield"
,
"Baylis"
,
"Bayminette"
,
"Bayougoula"
,
"Baypines"
,
"Bays"
,
"Bayshore"
,
"Bayside"
,
"Baytown"
,
"Bayview"
,
"Bayville"
,
"Bazine"
,
"Beachwood"
,
"Beaconsfield"
,
"Bealeton"
,
"Beallsville"
,
"Beals"
,
"Beaman"
,
"Bearden"
,
"Beardstown"
,
"Bearsville"
,
"Beasley"
,
"Beason"
,
"Beattie"
,
"Beatty"
,
"Beattyville"
,
"Beaufort"
,
"Beaverdale"
,
"Beaverlett"
,
"Beaverton"
,
"Beavertown"
,
"Beaverville"
,
"Bebe"
,
"Beccaria"
,
"Bechtelsville"
,
"Beckemeyer"
,
"Beckley"
,
"Beckville"
,
"Beckwith"
,
"Bedias"
,
"Bedminster"
,
"Beechbottom"
,
"Beecher"
,
"Beechmont"
,
"Beedeville"
,
"Beehouse"
,
"Beeler"
,
"Beemer"
,
"Beeson"
,
"Beetown"
,
"Beeville"
,
"Beggs"
,
"Beirne"
,
"Bejou"
,
"Belair"
,
"Belalton"
,
"Belcher"
,
"Belchertown"
,
"Belcourt"
,
"Belden"
,
"Beldenville"
,
"Belding"
,
"Belen"
,
"Belfair"
,
"Belfield"
,
"Belford"
,
"Belington"
,
"Belk"
,
"Belknap"
,
"Bellaire"
,
"Bellarthur"
,
"Bellbrook"
,
"Bellbuckle"
,
"Bellechasse"
,
"Bellefonte"
,
"Bellemead"
,
"Bellemina"
,
"Belleplaine"
,
"Bellerive"
,
"Bellerose"
,
"Bellevernon"
,
"Belleview"
,
"Belleville"
,
"Bellevue"
,
"Bellmont"
,
"Bellmore"
,
"Bellona"
,
"Bellport"
,
"Bells"
,
"Bellvale"
,
"Bellville"
,
"Bellvue"
,
"Bellwood"
,
"Belmar"
,
"Belmond"
,
"Belpre"
,
"Belsano"
,
"Belton"
,
"Beltrami"
,
"Belva"
,
"Belvedere"
,
"Belview"
,
"Belvue"
,
"Belzoni"
,
"Bement"
,
"Bemidji"
,
"Bena"
,
"Benarnold"
,
"Benavides"
,
"Bendena"
,
"Bendersville"
,
"Benedicta"
,
"Benezett"
,
"Benge"
,
"Benham"
,
"Benhur"
,
"Benicia"
,
"Benkelman"
,
"Benld"
,
"Benlomond"
,
"Bennet"
,
"Bennettsville"
,
"Benoit"
,
"Bensalem"
,
"Bensenville"
,
"Bentleyville"
,
"Bentonia"
,
"Bentonville"
,
"Bentree"
,
"Benwood"
,
"Benzonia"
,
"Beowawe"
,
"Berclair"
,
"Bergenfield"
,
"Berger"
,
"Bergholz"
,
"Bergoo"
,
"Bergton"
,
"Berkey"
,
"Berkley"
,
"Bernalillo"
,
"Bernardston"
,
"Bernardsville"
,
"Bernville"
,
"Beroun"
,
"Berrysburg"
,
"Berryton"
,
"Berryville"
,
"Berthold"
,
"Berthoud"
,
"Berwind"
,
"Berwyn"
,
"Bethalto"
,
"Bethania"
,
"Bethanna"
,
"Bethany"
,
"Bethera"
,
"Bethpage"
,
"Bethune"
,
"Bettendorf"
,
"Betterton"
,
"Bettsville"
,
"Beulah"
,
"Beulaville"
,
"Bevier"
,
"Bevington"
,
"Bevinsville"
,
"Bexar"
,
"Beyer"
,
"Bickleton"
,
"Bickmore"
,
"Bicknell"
,
"Biddeford"
,
"Biddle"
,
"Bidwell"
,
"Bieber"
,
"Bienville"
,
"Billerica"
,
"Billingsley"
,
"Biloxi"
,
"Bim"
,
"Bimble"
,
"Binford"
,
"Bingen"
,
"Binger"
,
"Biola"
,
"Bippus"
,
"Birchdale"
,
"Birchleaf"
,
"Birchrunville"
,
"Birchtree"
,
"Birchwood"
,
"Birdeye"
,
"Birdinhand"
,
"Birds"
,
"Birdsboro"
,
"Birdseye"
,
"Birnamwood"
,
"Birney"
,
"Birome"
,
"Bisbee"
,
"Biscoe"
,
"Bishopville"
,
"Bitely"
,
"Bittinger"
,
"Bivins"
,
"Biwabik"
,
"Bixby"
,
"Blachly"
,
"Blackduck"
,
"Blackey"
,
"Blackfoot"
,
"Blackford"
,
"Blackhawk"
,
"Blacklick"
,
"Blacksburg"
,
"Blackshear"
,
"Blackstock"
,
"Blacksville"
,
"Blackville"
,
"Blackwater"
,
"Blackwood"
,
"Bladen"
,
"Bladenboro"
,
"Bladensburg"
,
"Blain"
,
"Blairs"
,
"Blairsburg"
,
"Blairsden"
,
"Blairstown"
,
"Blairsville"
,
"Blaisdell"
,
"Blakely"
,
"Blakesburg"
,
"Blakeslee"
,
"Blanca"
,
"Blanchester"
,
"Blanco"
,
"Blandburg"
,
"Blandford"
,
"Blandinsville"
,
"Blandon"
,
"Blandville"
,
"Blanford"
,
"Blanks"
,
"Blauvelt"
,
"Blawenburg"
,
"Bledsoe"
,
"Bleiblerville"
,
"Blencoe"
,
"Blenker"
,
"Blessing"
,
"Blevins"
,
"Blissfield"
,
"Blocker"
,
"Blocksburg"
,
"Blockton"
,
"Blodgett"
,
"Blomkest"
,
"Bloomburg"
,
"Bloomdale"
,
"Bloomer"
,
"Bloomery"
,
"Bloomingburg"
,
"Bloomingdale"
,
"Bloomingrose"
,
"Bloomsburg"
,
"Bloomsbury"
,
"Bloomsdale"
,
"Bloomville"
,
"Blossburg"
,
"Blossvale"
,
"Blount"
,
"Blountstown"
,
"Blountsville"
,
"Blountville"
,
"Bloxom"
,
"Blueball"
,
"Bluebell"
,
"Blueeye"
,
"Bluefield"
,
"Bluehole"
,
"Bluejay"
,
"Bluemont"
,
"Bluewater"
,
"Bluffdale"
,
"Bluffs"
,
"Bluffton"
,
"Bluford"
,
"Bly"
,
"Blythedale"
,
"Blytheville"
,
"Blythewood"
,
"Boalsburg"
,
"Boardman"
,
"Boaz"
,
"Bobtown"
,
"Bobwhite"
,
"Bodega"
,
"Bodfish"
,
"Boelus"
,
"Boerne"
,
"Bogalusa"
,
"Bogard"
,
"Bogart"
,
"Bogata"
,
"Boggs"
,
"Boggstown"
,
"Bogue"
,
"Boguechitto"
,
"Bohannon"
,
"Boiceville"
,
"Boisdarc"
,
"Boissevain"
,
"Bokchito"
,
"Bokeelia"
,
"Bokoshe"
,
"Bolckow"
,
"Boles"
,
"Boley"
,
"Boligee"
,
"Bolinas"
,
"Boling"
,
"Bolingbroke"
,
"Bolinger"
,
"Bomont"
,
"Bomoseen"
,
"Bonair"
,
"Bonaire"
,
"Bonaqua"
,
"Boncarbo"
,
"Bondsville"
,
"Bonduel"
,
"Bondurant"
,
"Bondville"
,
"Bonesteel"
,
"Boneville"
,
"Bonfield"
,
"Bonham"
,
"Bonifay"
,
"Bonita"
,
"Bonlee"
,
"Bonneau"
,
"Bonner"
,
"Bonnerdale"
,
"Bonneterre"
,
"Bonnieville"
,
"Bonnyman"
,
"Bono"
,
"Bonsall"
,
"Bonsecour"
,
"Bonwier"
,
"Boody"
,
"Booker"
,
"Boomer"
,
"Booneville"
,
"Boonsboro"
,
"Boonton"
,
"Boonville"
,
"Boothville"
,
"Boqueron"
,
"Bordelonville"
,
"Bordentown"
,
"Bordulac"
,
"Borger"
,
"Boring"
,
"Borup"
,
"Boscobel"
,
"Bosler"
,
"Bosque"
,
"Bostic"
,
"Bostwick"
,
"Bosworth"
,
"Bothell"
,
"Botkins"
,
"Botsford"
,
"Bottineau"
,
"Bouckville"
,
"Boundbrook"
,
"Bountiful"
,
"Bourbonnais"
,
"Bourg"
,
"Bourneville"
,
"Bouse"
,
"Bouton"
,
"Boutte"
,
"Bovard"
,
"Bovey"
,
"Bovill"
,
"Bovina"
,
"Bowbells"
,
"Bowden"
,
"Bowdle"
,
"Bowdoinham"
,
"Bowdon"
,
"Bowers"
,
"Bowerston"
,
"Bowersville"
,
"Bowlegs"
,
"Bowler"
,
"Bowlus"
,
"Bowmansdale"
,
"Bowmanstown"
,
"Bowmansville"
,
"Boxelder"
,
"Boxford"
,
"Boxholm"
,
"Boyceville"
,
"Boyden"
,
"Boyds"
,
"Boydton"
,
"Boyers"
,
"Boyertown"
,
"Boyes"
,
"Boykin"
,
"Boykins"
,
"Boynton"
,
"Boystown"
,
"Bozeman"
,
"Bozman"
,
"Bozoo"
,
"Bozrah"
,
"Braceville"
,
"Bracey"
,
"Brackettville"
,
"Brackney"
,
"Braddock"
,
"Braddyville"
,
"Braden"
,
"Bradenton"
,
"Bradenville"
,
"Bradleyville"
,
"Bradner"
,
"Bradyville"
,
"Braggadocio"
,
"Braggs"
,
"Braham"
,
"Braidwood"
,
"Brainerd"
,
"Braintree"
,
"Braithwaite"
,
"Braman"
,
"Bramwell"
,
"Branchdale"
,
"Branchland"
,
"Branchport"
,
"Branchton"
,
"Branchville"
,
"Brandamore"
,
"Brandonville"
,
"Brandsville"
,
"Branford"
,
"Branson"
,
"Brantingham"
,
"Brantley"
,
"Brantwood"
,
"Braselton"
,
"Brashear"
,
"Brasstown"
,
"Brattleboro"
,
"Brawley"
,
"Braxton"
,
"Braymer"
,
"Brayton"
,
"Brazeau"
,
"Brazoria"
,
"Brea"
,
"Breaks"
,
"Breda"
,
"Breeden"
,
"Breeding"
,
"Breedsville"
,
"Breese"
,
"Breesport"
,
"Breezewood"
,
"Breinigsville"
,
"Bremerton"
,
"Bremond"
,
"Brenham"
,
"Brentford"
,
"Brenton"
,
"Brentwood"
,
"Bretz"
,
"Brevard"
,
"Brewer"
,
"Brewerton"
,
"Brewton"
,
"Brianhead"
,
"Bricelyn"
,
"Briceville"
,
"Brickeys"
,
"Bridgehampton"
,
"Bridgeland"
,
"Bridger"
,
"Bridgeton"
,
"Bridgeville"
,
"Bridgman"
,
"Bridgton"
,
"Bridport"
,
"Brielle"
,
"Brierfield"
,
"Briggsdale"
,
"Briggsville"
,
"Brightwood"
,
"Brill"
,
"Brillion"
,
"Brimfield"
,
"Brimhall"
,
"Brimley"
,
"Brimson"
,
"Bringhurst"
,
"Brinkley"
,
"Brinklow"
,
"Brinktown"
,
"Brinnon"
,
"Brinsmade"
,
"Brinson"
,
"Brisbin"
,
"Briscoe"
,
"Bristolville"
,
"Bristow"
,
"Britt"
,
"Britton"
,
"Brixey"
,
"Broadalbin"
,
"Broadbent"
,
"Broadbrook"
,
"Broaddus"
,
"Broadford"
,
"Broadlands"
,
"Broadrun"
,
"Broadus"
,
"Broadview"
,
"Broadwater"
,
"Broadwell"
,
"Brocket"
,
"Brockport"
,
"Brockton"
,
"Brockway"
,
"Brockwell"
,
"Brocton"
,
"Broderick"
,
"Brodhead"
,
"Brodnax"
,
"Brogan"
,
"Brogue"
,
"Brohard"
,
"Brohman"
,
"Brokaw"
,
"Brokenbow"
,
"Bronaugh"
,
"Bronson"
,
"Bronston"
,
"Bronte"
,
"Bronwood"
,
"Brookdale"
,
"Brookeland"
,
"Brooker"
,
"Brookesmith"
,
"Brookeville"
,
"Brookfield"
,
"Brookings"
,
"Brookland"
,
"Brooklet"
,
"Brooklin"
,
"Brookneal"
,
"Brookport"
,
"Brooks"
,
"Brookshire"
,
"Brookston"
,
"Brooksville"
,
"Brookton"
,
"Brooktondale"
,
"Brookview"
,
"Brookville"
,
"Brookwood"
,
"Broomall"
,
"Broomfield"
,
"Brooten"
,
"Broseley"
,
"Brothers"
,
"Broughton"
,
"Broussard"
,
"Browder"
,
"Browerville"
,
"Brownfield"
,
"Browning"
,
"Brownlee"
,
"Browns"
,
"Brownsboro"
,
"Brownsburg"
,
"Brownsdale"
,
"Brownstown"
,
"Brownsville"
,
"Brownton"
,
"Browntown"
,
"Brownville"
,
"Brownwood"
,
"Broxton"
,
"Bruceton"
,
"Brucetown"
,
"Bruceville"
,
"Bruin"
,
"Bruington"
,
"Brule"
,
"Brumley"
,
"Brundidge"
,
"Bruneau"
,
"Bruner"
,
"Bruni"
,
"Bruning"
,
"Brunson"
,
"Brunsville"
,
"Brusett"
,
"Brushton"
,
"Brusly"
,
"Brutus"
,
"Bryantown"
,
"Bryantsville"
,
"Bryantville"
,
"Bryceland"
,
"Bryceville"
,
"Brynathyn"
,
"Brynmawr"
,
"Bryson"
,
"Buchtel"
,
"Buckatunna"
,
"Buckeystown"
,
"Buckfield"
,
"Buckhannon"
,
"Buckhead"
,
"Buckholts"
,
"Buckingham"
,
"Buckland"
,
"Bucklin"
,
"Buckman"
,
"Buckner"
,
"Bucks"
,
"Bucksport"
,
"Bucoda"
,
"Bucyrus"
,
"Buda"
,
"Bude"
,
"Bueche"
,
"Buellton"
,
"Bueyeros"
,
"Buford"
,
"Buhl"
,
"Buhler"
,
"Bula"
,
"Bulan"
,
"Bulger"
,
"Bullard"
,
"Bullshoals"
,
"Bullville"
,
"Bulpitt"
,
"Buna"
,
"Bunceton"
,
"Buncombe"
,
"Bunker"
,
"Bunkerville"
,
"Bunkie"
,
"Bunn"
,
"Bunnell"
,
"Bunola"
,
"Buras"
,
"Burchard"
,
"Burdett"
,
"Burdette"
,
"Burdick"
,
"Burdine"
,
"Burfordville"
,
"Burgaw"
,
"Burgettstown"
,
"Burgin"
,
"Burgoon"
,
"Burkburnett"
,
"Burkesville"
,
"Burket"
,
"Burkett"
,
"Burkettsville"
,
"Burkeville"
,
"Burkhart"
,
"Burkittsville"
,
"Burkville"
,
"Burleson"
,
"Burlingame"
,
"Burlingham"
,
"Burlison"
,
"Burna"
,
"Burnet"
,
"Burnettsville"
,
"Burney"
,
"Burneyville"
,
"Burnips"
,
"Burns"
,
"Burnsville"
,
"Burntcorn"
,
"Burnwell"
,
"Burrows"
,
"Burrton"
,
"Burson"
,
"Burtonsville"
,
"Burtrum"
,
"Burwell"
,
"Busby"
,
"Bushkill"
,
"Bushland"
,
"Bushton"
,
"Bushwood"
,
"Buskirk"
,
"Bussey"
,
"Butlerville"
,
"Butner"
,
"Butters"
,
"Buttonwillow"
,
"Buttzville"
,
"Byars"
,
"Bybee"
,
"Byesville"
,
"Byfield"
,
"Byhalia"
,
"Bylas"
,
"Bynum"
,
"Bypro"
,
"Byrdstown"
,
"Byrnedale"
,
"Byromville"
,
"Caballo"
,
"Cabazon"
,
"Cabery"
,
"Cabins"
,
"Cabool"
,
"Caborojo"
,
"Caddo"
,
"Cade"
,
"Cades"
,
"Cadiz"
,
"Cadmus"
,
"Cadogan"
,
"Cadott"
,
"Cadwell"
,
"Cadyville"
,
"Caguas"
,
"Cahokia"
,
"Cahone"
,
"Cainsville"
,
"Cairnbrook"
,
"Calabasas"
,
"Cale"
,
"Caledonia"
,
"Calera"
,
"Calexico"
,
"Calhan"
,
"Caliente"
,
"Califon"
,
"Calio"
,
"Calion"
,
"Calipatria"
,
"Calistoga"
,
"Callands"
,
"Callao"
,
"Callaway"
,
"Callender"
,
"Callensburg"
,
"Callery"
,
"Callicoon"
,
"Calliham"
,
"Calmar"
,
"Calverton"
,
"Camak"
,
"Camanche"
,
"Camargo"
,
"Camarillo"
,
"Camas"
,
"Cambra"
,
"Cambria"
,
"Cambridgeport"
,
"Camby"
,
"Camden"
,
"Camdenton"
,
"Camillus"
,
"Cammal"
,
"Campbellsburg"
,
"Campbellton"
,
"Campbelltown"
,
"Campo"
,
"Campobello"
,
"Campti"
,
"Campton"
,
"Camptonville"
,
"Camptown"
,
"Campwood"
,
"Camuy"
,
"Cana"
,
"Canadensis"
,
"Canadys"
,
"Canajoharie"
,
"Canalou"
,
"Canandaigua"
,
"Canaseraga"
,
"Canastota"
,
"Canby"
,
"Candia"
,
"Candler"
,
"Cando"
,
"Candor"
,
"Caneadea"
,
"Canebrake"
,
"Caney"
,
"Caneyville"
,
"Canisteo"
,
"Canistota"
,
"Canjilon"
,
"Canmer"
,
"Cannelburg"
,
"Cannelton"
,
"Cannonsburg"
,
"Cannonville"
,
"Canones"
,
"Canonsburg"
,
"Canova"
,
"Canovanas"
,
"Cantil"
,
"Cantonment"
,
"Cantrall"
,
"Cantril"
,
"Canute"
,
"Canutillo"
,
"Canyonville"
,
"Capac"
,
"Capefair"
,
"Capels"
,
"Capemay"
,
"Capeneddick"
,
"Capeville"
,
"Capitan"
,
"Capitola"
,
"Capron"
,
"Capshaw"
,
"Captaincook"
,
"Captiva"
,
"Capulin"
,
"Caputa"
,
"Caratunk"
,
"Carbonado"
,
"Carboncliff"
,
"Cardale"
,
"Cardin"
,
"Cardington"
,
"Cardville"
,
"Cardwell"
,
"Carencro"
,
"Caretta"
,
"Careywood"
,
"Carland"
,
"Carlile"
,
"Carlinville"
,
"Carlock"
,
"Carlos"
,
"Carlotta"
,
"Carlsbad"
,
"Carlsborg"
,
"Carman"
,
"Carmel"
,
"Carmi"
,
"Carmichaels"
,
"Carnarvon"
,
"Carnesville"
,
"Caro"
,
"Caroleen"
,
"Carona"
,
"Carpinteria"
,
"Carpio"
,
"Carrabelle"
,
"Carrboro"
,
"Carrier"
,
"Carriere"
,
"Carrington"
,
"Carrizozo"
,
"Carrolls"
,
"Carrollton"
,
"Carrolltown"
,
"Carrothers"
,
"Carrsville"
,
"Carsonville"
,
"Carter"
,
"Carteret"
,
"Cartersburg"
,
"Cartersville"
,
"Carterville"
,
"Cartwright"
,
"Caruthers"
,
"Carver"
,
"Carversville"
,
"Carville"
,
"Cary"
,
"Caryville"
,
"Casa"
,
"Casar"
,
"Cascadia"
,
"Cascilla"
,
"Casco"
,
"Caseville"
,
"Caseyville"
,
"Cashiers"
,
"Cashion"
,
"Cashton"
,
"Cashtown"
,
"Casmalia"
,
"Casnovia"
,
"Cason"
,
"Casper"
,
"Cass"
,
"Cassadaga"
,
"Cassatt"
,
"Casscoe"
,
"Cassel"
,
"Casselberry"
,
"Casselton"
,
"Cassoday"
,
"Cassopolis"
,
"Casstown"
,
"Cassville"
,
"Castalia"
,
"Castana"
,
"Castanea"
,
"Castell"
,
"Castella"
,
"Castile"
,
"Castine"
,
"Castleberry"
,
"Castledale"
,
"Castleford"
,
"Castleton"
,
"Castlewood"
,
"Castorland"
,
"Castroville"
,
"Cataldo"
,
"Catano"
,
"Catarina"
,
"Catasauqua"
,
"Cataula"
,
"Cataumet"
,
"Catawissa"
,
"Catharine"
,
"Catharpin"
,
"Cathay"
,
"Cathlamet"
,
"Catlett"
,
"Catlettsburg"
,
"Catlin"
,
"Cato"
,
"Catoosa"
,
"Catron"
,
"Cattaraugus"
,
"Caulfield"
,
"Causey"
,
"Cauthornville"
,
"Cavetown"
,
"Cavour"
,
"Cawood"
,
"Cayey"
,
"Cayucos"
,
"Cayuse"
,
"Cayuta"
,
"Cazadero"
,
"Cazenovia"
,
"Cebolla"
,
"Cecilton"
,
"Cedarbrook"
,
"Cedarburg"
,
"Cedarcrest"
,
"Cedaredge"
,
"Cedarhurst"
,
"Cedarkey"
,
"Cedarlane"
,
"Cedars"
,
"Cedartown"
,
"Cedarvale"
,
"Cedarville"
,
"Ceevee"
,
"Ceiba"
,
"Celestine"
,
"Celina"
,
"Celoron"
,
"Cementon"
,
"Centrahoma"
,
"Centralia"
,
"Centre"
,
"Centrehall"
,
"Centreville"
,
"Centuria"
,
"Ceredo"
,
"Ceresco"
,
"Cerrillos"
,
"Cerritos"
,
"Cerro"
,
"Cerrogordo"
,
"Chacon"
,
"Chadbourn"
,
"Chaddsford"
,
"Chadron"
,
"Chadwicks"
,
"Chaffee"
,
"Chalfont"
,
"Challis"
,
"Chalmette"
,
"Chama"
,
"Chamberino"
,
"Chambersburg"
,
"Chambersville"
,
"Chamisal"
,
"Champlin"
,
"Chana"
,
"Chandlerville"
,
"Changewater"
,
"Chanhassen"
,
"Channahon"
,
"Channing"
,
"Chanute"
,
"Chapin"
,
"Chapmansboro"
,
"Chapmanville"
,
"Chappaqua"
,
"Chappell"
,
"Chappells"
,
"Chaptico"
,
"Chardon"
,
"Charenton"
,
"Chariton"
,
"Charlemont"
,
"Charleroi"
,
"Charlestown"
,
"Charlevoix"
,
"Charlo"
,
"Charlton"
,
"Charmco"
,
"Chartley"
,
"Chaseburg"
,
"Chaseley"
,
"Chaska"
,
"Chassell"
,
"Chataignier"
,
"Chatawa"
,
"Chateaugay"
,
"Chatfield"
,
"Chatom"
,
"Chatsworth"
,
"Chattahoochee"
,
"Chattaroy"
,
"Chaumont"
,
"Chauvin"
,
"Chavies"
,
"Chazy"
,
"Cheapside"
,
"Chebanse"
,
"Cheboygan"
,
"Checotah"
,
"Chefornak"
,
"Chehalis"
,
"Chelan"
,
"Chelmsford"
,
"Chelsea"
,
"Cheltenham"
,
"Chemult"
,
"Chemung"
,
"Cheneyville"
,
"Chenoa"
,
"Chepachet"
,
"Cheraw"
,
"Cheriton"
,
"Cherryfield"
,
"Cherrylog"
,
"Cherrytree"
,
"Cherryville"
,
"Chesaning"
,
"Chesnee"
,
"Chesterfield"
,
"Chesterland"
,
"Chestertown"
,
"Chesterville"
,
"Cheswick"
,
"Cheswold"
,
"Chetek"
,
"Chetopa"
,
"Chevak"
,
"Chewalla"
,
"Chewelah"
,
"Chewsville"
,
"Cheyney"
,
"Chichester"
,
"Chickamauga"
,
"Chickasha"
,
"Chico"
,
"Chicopee"
,
"Chicora"
,
"Chicota"
,
"Chidester"
,
"Chiefland"
,
"Chignik"
,
"Chilcoot"
,
"Childersburg"
,
"Childress"
,
"Childs"
,
"Childwold"
,
"Chilhowee"
,
"Chilhowie"
,
"Chillicothe"
,
"Chilmark"
,
"Chilo"
,
"Chiloquin"
,
"Chilton"
,
"Chimacum"
,
"Chimayo"
,
"Chincoteague"
,
"Chinle"
,
"Chino"
,
"Chipley"
,
"Chireno"
,
"Chitina"
,
"Chittenango"
,
"Chittenden"
,
"Chivington"
,
"Chloe"
,
"Choccolocco"
,
"Chocorua"
,
"Chocowinity"
,
"Chokio"
,
"Chokoloskee"
,
"Cholame"
,
"Choteau"
,
"Choudrant"
,
"Chouteau"
,
"Chowchilla"
,
"Chriesman"
,
"Chrisman"
,
"Chrisney"
,
"Christiansted"
,
"Christoval"
,
"Chromo"
,
"Chualar"
,
"Chuckey"
,
"Chugiak"
,
"Chugwater"
,
"Chula"
,
"Chunchula"
,
"Churchton"
,
"Churchville"
,
"Churdan"
,
"Churubusco"
,
"Ciales"
,
"Cibolo"
,
"Cidra"
,
"Cima"
,
"Cimarron"
,
"Cincinnatus"
,
"Cinda"
,
"Cinebar"
,
"Circleville"
,
"Cisco"
,
"Cisne"
,
"Citra"
,
"Citronelle"
,
"Clackamas"
,
"Claflin"
,
"Clairfield"
,
"Clairton"
,
"Clancy"
,
"Clanton"
,
"Clarcona"
,
"Claremore"
,
"Clarinda"
,
"Clarington"
,
"Clarion"
,
"Clarissa"
,
"Clarita"
,
"Clarkdale"
,
"Clarkedale"
,
"Clarkesville"
,
"Clarkfield"
,
"Clarkia"
,
"Clarks"
,
"Clarksboro"
,
"Clarksburg"
,
"Clarksdale"
,
"Clarkson"
,
"Clarkston"
,
"Clarksville"
,
"Clarkton"
,
"Claryville"
,
"Clatonia"
,
"Clatskanie"
,
"Claudville"
,
"Claunch"
,
"Claverack"
,
"Clawson"
,
"Claxton"
,
"Clayhole"
,
"Claymont"
,
"Claypool"
,
"Claysburg"
,
"Claysville"
,
"Claytonville"
,
"Clayville"
,
"Clearbrook"
,
"Clearfield"
,
"Clearmont"
,
"Clearview"
,
"Clearville"
,
"Cleaton"
,
"Cleburne"
,
"Cleelum"
,
"Cleghorn"
,
"Clementon"
,
"Clements"
,
"Clemmons"
,
"Clemons"
,
"Clendenin"
,
"Clermont"
,
"Cleverdale"
,
"Cleves"
,
"Clewiston"
,
"Cliffwood"
,
"Clifty"
,
"Clinchco"
,
"Clinchfield"
,
"Clintondale"
,
"Clintonville"
,
"Clintwood"
,
"Clitherall"
,
"Clockville"
,
"Clontarf"
,
"Clopton"
,
"Cloquet"
,
"Closplint"
,
"Closter"
,
"Cloudcroft"
,
"Cloutierville"
,
"Clover"
,
"Cloverdale"
,
"Cloverport"
,
"Clovis"
,
"Clubb"
,
"Clune"
,
"Clute"
,
"Clutier"
,
"Clyman"
,
"Clymer"
,
"Clyo"
,
"Coachella"
,
"Coahoma"
,
"Coaldale"
,
"Coalfield"
,
"Coalgood"
,
"Coaling"
,
"Coalinga"
,
"Coalmont"
,
"Coalport"
,
"Coalton"
,
"Coalville"
,
"Coalwood"
,
"Coamo"
,
"Coarsegold"
,
"Coatesville"
,
"Coats"
,
"Coatsburg"
,
"Coatsville"
,
"Cobbtown"
,
"Cobden"
,
"Cobleskill"
,
"Coburn"
,
"Cochecton"
,
"Cochise"
,
"Cochranton"
,
"Cochranville"
,
"Cockeysville"
,
"Cocolalla"
,
"Cocolamus"
,
"Codell"
,
"Coden"
,
"Codorus"
,
"Coeburn"
,
"Coello"
,
"Coeymans"
,
"Coffeen"
,
"Coffeeville"
,
"Coffeyville"
,
"Cofield"
,
"Coggon"
,
"Cogswell"
,
"Cohagen"
,
"Cohasset"
,
"Cohoctah"
,
"Cohocton"
,
"Cohoes"
,
"Cohutta"
,
"Coila"
,
"Coinjock"
,
"Cokato"
,
"Cokeburg"
,
"Cokedale"
,
"Coker"
,
"Cokeville"
,
"Colbert"
,
"Colburn"
,
"Colchester"
,
"Colcord"
,
"Coldbrook"
,
"Colden"
,
"Coldwater"
,
"Colebrook"
,
"Colerain"
,
"Coleraine"
,
"Colesburg"
,
"Coleta"
,
"Coleville"
,
"Colfax"
,
"Collbran"
,
"Collettsville"
,
"Colleyville"
,
"Colliers"
,
"Colliersville"
,
"Collierville"
,
"Collingswood"
,
"Collinston"
,
"Collinsville"
,
"Collinwood"
,
"Collison"
,
"Collyer"
,
"Colman"
,
"Colmar"
,
"Colmesneil"
,
"Colo"
,
"Coloma"
,
"Colome"
,
"Colona"
,
"Colora"
,
"Colp"
,
"Colquitt"
,
"Colrain"
,
"Colstrip"
,
"Colton"
,
"Columbiana"
,
"Columbiaville"
,
"Colusa"
,
"Colver"
,
"Colville"
,
"Colwich"
,
"Combes"
,
"Combs"
,
"Comer"
,
"Comerio"
,
"Comfrey"
,
"Comins"
,
"Commack"
,
"Commiskey"
,
"Como"
,
"Comptche"
,
"Comstock"
,
"Conasauga"
,
"Conaway"
,
"Concan"
,
"Concepcion"
,
"Concho"
,
"Conconully"
,
"Concordia"
,
"Concordville"
,
"Conda"
,
"Conde"
,
"Condon"
,
"Conehatta"
,
"Conejos"
,
"Conestee"
,
"Conesus"
,
"Conesville"
,
"Conetoe"
,
"Confluence"
,
"Conger"
,
"Congers"
,
"Congerville"
,
"Conneaut"
,
"Conneautville"
,
"Connell"
,
"Connellsville"
,
"Connelly"
,
"Connersville"
,
"Connerville"
,
"Conover"
,
"Conowingo"
,
"Conran"
,
"Conrath"
,
"Conroe"
,
"Conroy"
,
"Conshohocken"
,
"Constable"
,
"Constantia"
,
"Contoocook"
,
"Conyers"
,
"Conyngham"
,
"Cookeville"
,
"Cooks"
,
"Cooksburg"
,
"Cookson"
,
"Cookstown"
,
"Cooksville"
,
"Cookville"
,
"Cooleemee"
,
"Coolin"
,
"Coolville"
,
"Cooper"
,
"Coopersburg"
,
"Cooperstown"
,
"Coopersville"
,
"Coosa"
,
"Coosada"
,
"Cooter"
,
"Copake"
,
"Copan"
,
"Copemish"
,
"Copeville"
,
"Copiague"
,
"Coplay"
,
"Coppell"
,
"Copperopolis"
,
"Coquille"
,
"Cora"
,
"Coralville"
,
"Coram"
,
"Coraopolis"
,
"Corapeake"
,
"Corbettsville"
,
"Corbin"
,
"Cordele"
,
"Cordell"
,
"Corder"
,
"Cordesville"
,
"Cordova"
,
"Corea"
,
"Corfu"
,
"Corinna"
,
"Corinne"
,
"Corley"
,
"Cornersville"
,
"Cornettsville"
,
"Corning"
,
"Cornland"
,
"Cornlea"
,
"Cornville"
,
"Cornwallville"
,
"Corolla"
,
"Corozal"
,
"Corrales"
,
"Correll"
,
"Corrigan"
,
"Corriganville"
,
"Corry"
,
"Corryton"
,
"Corsica"
,
"Corsicana"
,
"Corson"
,
"Cortaro"
,
"Cortemadera"
,
"Cortez"
,
"Corton"
,
"Corunna"
,
"Corwith"
,
"Cory"
,
"Corydon"
,
"Cosby"
,
"Coscob"
,
"Coshocton"
,
"Cosmopolis"
,
"Cossayuna"
,
"Costigan"
,
"Costilla"
,
"Cotati"
,
"Coteau"
,
"Cotesfield"
,
"Cotolaurel"
,
"Cotopaxi"
,
"Cottageville"
,
"Cottekill"
,
"Cotter"
,
"Cottle"
,
"Cottleville"
,
"Cottondale"
,
"Cottonport"
,
"Cottonton"
,
"Cottontown"
,
"Cotuit"
,
"Cotulla"
,
"Couderay"
,
"Coudersport"
,
"Coulters"
,
"Coulterville"
,
"Counce"
,
"Coupeville"
,
"Coupland"
,
"Courtenay"
,
"Courtland"
,
"Courtois"
,
"Coushatta"
,
"Covel"
,
"Covelo"
,
"Covena"
,
"Covesville"
,
"Covina"
,
"Covington"
,
"Cowanesque"
,
"Cowansville"
,
"Cowarts"
,
"Cowden"
,
"Cowdrey"
,
"Cowen"
,
"Coweta"
,
"Cowgill"
,
"Cowiche"
,
"Cowlesville"
,
"Cowley"
,
"Coxsackie"
,
"Coyanosa"
,
"Coyle"
,
"Coyville"
,
"Cozad"
,
"Craborchard"
,
"Crabtree"
,
"Craddockville"
,
"Craftsbury"
,
"Cragford"
,
"Cragsmoor"
,
"Craigmont"
,
"Craigsville"
,
"Craigville"
,
"Craley"
,
"Cramerton"
,
"Cranbury"
,
"Crandon"
,
"Cranesville"
,
"Cranks"
,
"Crapo"
,
"Crary"
,
"Craryville"
,
"Crawfordville"
,
"Crawley"
,
"Crayne"
,
"Craynor"
,
"Creede"
,
"Creedmoor"
,
"Creighton"
,
"Crenshaw"
,
"Creola"
,
"Cresbard"
,
"Cresco"
,
"Cressey"
,
"Cresskill"
,
"Cresson"
,
"Cressona"
,
"Crestline"
,
"Creston"
,
"Crestone"
,
"Crestwood"
,
"Creswell"
,
"Crewe"
,
"Crichton"
,
"Criders"
,
"Crimora"
,
"Crisfield"
,
"Crittenden"
,
"Critz"
,
"Crivitz"
,
"Crocheron"
,
"Crocker"
,
"Crocketville"
,
"Crofton"
,
"Croghan"
,
"Cromona"
,
"Crooks"
,
"Crookston"
,
"Crooksville"
,
"Cropsey"
,
"Cropseyville"
,
"Cropwell"
,
"Crosbyton"
,
"Crossett"
,
"Crossnore"
,
"Crossroads"
,
"Crossville"
,
"Crosswicks"
,
"Croswell"
,
"Crothersville"
,
"Croton"
,
"Crouse"
,
"Crouseville"
,
"Crowder"
,
"Crowell"
,
"Crowheart"
,
"Crownsville"
,
"Crowville"
,
"Crozet"
,
"Crozier"
,
"Cruger"
,
"Crum"
,
"Crumpler"
,
"Crumpton"
,
"Crumrod"
,
"Cubage"
,
"Cubero"
,
"Cubrun"
,
"Cuchillo"
,
"Cudahy"
,
"Cuddy"
,
"Cuero"
,
"Cuervo"
,
"Culberson"
,
"Culdesac"
,
"Culebra"
,
"Cullen"
,
"Culleoka"
,
"Cullman"
,
"Culloden"
,
"Cullom"
,
"Cullowhee"
,
"Culpeper"
,
"Cumbola"
,
"Cumby"
,
"Cummaquid"
,
"Cumming"
,
"Cummington"
,
"Cundiff"
,
"Cuney"
,
"Cupertino"
,
"Curdsville"
,
"Curllsville"
,
"Currie"
,
"Currituck"
,
"Curryville"
,
"Curtice"
,
"Curtin"
,
"Curtiss"
,
"Curtisville"
,
"Curwensville"
,
"Cusick"
,
"Cusseta"
,
"Custar"
,
"Cutbank"
,
"Cutchogue"
,
"Cuthbert"
,
"Cutshin"
,
"Cuttingsville"
,
"Cuttyhunk"
,
"Cutuno"
,
"Cuyama"
,
"Cuyler"
,
"Cuzzart"
,
"Cygnet"
,
"Cynthiana"
,
"Cynwyd"
,
"Cypressinn"
,
"Dabneys"
,
"Dabolt"
,
"Dacoma"
,
"Dacono"
,
"Dacula"
,
"Dadeville"
,
"Dafter"
,
"Daggett"
,
"Dagmar"
,
"Dagsboro"
,
"Dagusmines"
,
"Dahinda"
,
"Dahlgren"
,
"Dahlonega"
,
"Daingerfield"
,
"Daisetta"
,
"Daisy"
,
"Daisytown"
,
"Dalbo"
,
"Daleville"
,
"Dalhart"
,
"Dallardsville"
,
"Dalmatia"
,
"Damar"
,
"Damariscotta"
,
"Dameron"
,
"Danboro"
,
"Danby"
,
"Danciger"
,
"Danese"
,
"Danevang"
,
"Danforth"
,
"Dania"
,
"Daniels"
,
"Danielsville"
,
"Dannebrog"
,
"Dannemora"
,
"Dansville"
,
"Danvers"
,
"Danville"
,
"Darby"
,
"Dardanelle"
,
"Darden"
,
"Darfur"
,
"Darien"
,
"Darlington"
,
"Darragh"
,
"Darrington"
,
"Darrouzett"
,
"Darrow"
,
"Dassel"
,
"Datil"
,
"Datto"
,
"Davant"
,
"Davey"
,
"Davidsonville"
,
"Davidsville"
,
"Davilla"
,
"Davin"
,
"Davisboro"
,
"Davisburg"
,
"Daviston"
,
"Davisville"
,
"Dawes"
,
"Dawmont"
,
"Dawsonville"
,
"Dayhoit"
,
"Daykin"
,
"Dayville"
,
"Dazey"
,
"DeKalb"
,
"Deale"
,
"Deansboro"
,
"Deanville"
,
"Dearing"
,
"Dearmanville"
,
"Deary"
,
"Deatsville"
,
"Deaver"
,
"Debary"
,
"Debeque"
,
"Deberry"
,
"Debord"
,
"Decaturville"
,
"Decherd"
,
"Deckerville"
,
"Declo"
,
"Decorah"
,
"Dedham"
,
"Deedsville"
,
"Deepwater"
,
"Deerbrook"
,
"Deerfield"
,
"Deering"
,
"Deersville"
,
"Deerton"
,
"Deerwood"
,
"Deeth"
,
"Deferiet"
,
"Defiance"
,
"Defoe"
,
"Deford"
,
"Degraff"
,
"Dehue"
,
"Delafield"
,
"Delancey"
,
"Deland"
,
"Delanson"
,
"Delaplaine"
,
"Delaplane"
,
"Delavan"
,
"Delbarton"
,
"Delcambre"
,
"Delco"
,
"Deleon"
,
"Delevan"
,
"Dellroy"
,
"Dellslow"
,
"Delmar"
,
"Delmita"
,
"Delmont"
,
"Delnorte"
,
"Deloit"
,
"Delong"
,
"Delphia"
,
"Delphos"
,
"Delray"
,
"Delrey"
,
"Delrio"
,
"Deltaville"
,
"Delton"
,
"Delvalle"
,
"Dema"
,
"Demarest"
,
"Deming"
,
"Demopolis"
,
"Demorest"
,
"Demossville"
,
"Demotte"
,
"Dempster"
,
"Denair"
,
"Denbigh"
,
"Denbo"
,
"Dendron"
,
"Denham"
,
"Denhoff"
,
"Denio"
,
"Denison"
,
"Dennard"
,
"Dennison"
,
"Dennisport"
,
"Denniston"
,
"Dennisville"
,
"Dennysville"
,
"Densmore"
,
"Denville"
,
"Depauville"
,
"Depauw"
,
"Depere"
,
"Depew"
,
"Depeyster"
,
"Depoy"
,
"Depue"
,
"Dequeen"
,
"Derbyline"
,
"Derma"
,
"Dermott"
,
"Derry"
,
"Deruyter"
,
"Derwent"
,
"Desarc"
,
"Descanso"
,
"Desdemona"
,
"Desha"
,
"Deshler"
,
"Deslacs"
,
"Desmet"
,
"Desmoines"
,
"Desoto"
,
"Destin"
,
"Destrehan"
,
"Devault"
,
"Devers"
,
"Deville"
,
"Devine"
,
"Devol"
,
"Dewart"
,
"Deweese"
,
"Deweyville"
,
"Dewittville"
,
"Dewyrose"
,
"Deyoung"
,
"Dhanis"
,
"Diablo"
,
"Diamondville"
,
"Diaz"
,
"Diboll"
,
"Dickeyville"
,
"Dierks"
,
"Dieterich"
,
"Diggins"
,
"Diggs"
,
"Dighton"
,
"Digiorgio"
,
"Dike"
,
"Dillard"
,
"Dille"
,
"Diller"
,
"Dilley"
,
"Dilliner"
,
"Dillingham"
,
"Dillonvale"
,
"Dillsboro"
,
"Dillsburg"
,
"Dilltown"
,
"Dillwyn"
,
"Dilworth"
,
"Dimebox"
,
"Dimmitt"
,
"Dimock"
,
"Dimondale"
,
"Dingess"
,
"Dingle"
,
"Dingus"
,
"Dinuba"
,
"Dinwiddie"
,
"Disputanta"
,
"Dittmer"
,
"Divernon"
,
"Dix"
,
"Dixfield"
,
"Dixiana"
,
"Dixmont"
,
"Dixonville"
,
"Dizney"
,
"Dlo"
,
"Dobbins"
,
"Docena"
,
"Doddsville"
,
"Dodgeville"
,
"Doerun"
,
"Dogpatch"
,
"Dogue"
,
"Dola"
,
"Doland"
,
"Dolgeville"
,
"Dolliver"
,
"Dolph"
,
"Dolton"
,
"Donaana"
,
"Donalds"
,
"Donalsonville"
,
"Donegal"
,
"Dongola"
,
"Donie"
,
"Doniphan"
,
"Donnellson"
,
"Donnelsville"
,
"Donora"
,
"Doole"
,
"Doon"
,
"Doran"
,
"Dorena"
,
"Dorloo"
,
"Dornsife"
,
"Dorr"
,
"Dorrance"
,
"Dorris"
,
"Dorsey"
,
"Dorton"
,
"Dospalos"
,
"Doss"
,
"Doswell"
,
"Dothan"
,
"Doty"
,
"Doucette"
,
"Douds"
,
"Douglassville"
,
"Douglasville"
,
"Dousman"
,
"Dover"
,
"Dovray"
,
"Dowagiac"
,
"Dowell"
,
"Dowelltown"
,
"Downieville"
,
"Downingtown"
,
"Downsville"
,
"Dows"
,
"Doylestown"
,
"Doyline"
,
"Doyon"
,
"Dozier"
,
"Dracut"
,
"Draffin"
,
"Drakesboro"
,
"Drakesville"
,
"Draper"
,
"Drasco"
,
"Dravosburg"
,
"Drayden"
,
"Drayton"
,
"Drennen"
,
"Dresden"
,
"Dresser"
,
"Drewryville"
,
"Drewsey"
,
"Dreyfus"
,
"Drifting"
,
"Drifton"
,
"Driftwood"
,
"Driggs"
,
"Drummonds"
,
"Drumore"
,
"Drumright"
,
"Drums"
,
"Dryprong"
,
"Duanesburg"
,
"Duarte"
,
"Dubach"
,
"Dubberly"
,
"Dubois"
,
"Dubre"
,
"Dubuque"
,
"Duchesne"
,
"Ducktown"
,
"Duckwater"
,
"Ducor"
,
"Duenweg"
,
"Duewest"
,
"Duffau"
,
"Duffield"
,
"Dufur"
,
"Dugger"
,
"Dugspur"
,
"Dugway"
,
"Dulac"
,
"Dulce"
,
"Dulzura"
,
"Dumas"
,
"Dumfries"
,
"Dumont"
,
"Duncannon"
,
"Duncansville"
,
"Duncanville"
,
"Duncombe"
,
"Dundas"
,
"Dundee"
,
"Dunellen"
,
"Dunfermline"
,
"Dungannon"
,
"Dunkerton"
,
"Dunlevy"
,
"Dunlo"
,
"Dunlow"
,
"Dunmor"
,
"Dunmore"
,
"Dunnegan"
,
"Dunnell"
,
"Dunnellon"
,
"Dunnigan"
,
"Dunning"
,
"Dunnsville"
,
"Dunnville"
,
"Dunreith"
,
"Dunseith"
,
"Dunsmuir"
,
"Dunstable"
,
"Dunwoody"
,
"Duplessis"
,
"Dupo"
,
"Dupree"
,
"Dupuyer"
,
"Duquoin"
,
"Duran"
,
"Durand"
,
"Durant"
,
"Durbin"
,
"Durhamville"
,
"Dushore"
,
"Duson"
,
"Dustin"
,
"Dutchtown"
,
"Dutzow"
,
"Duvall"
,
"Duxbury"
,
"Dwale"
,
"Dycusburg"
,
"Dyersburg"
,
"Dyersville"
,
"Dyess"
,
"Dysart"
,
"Eads"
,
"Eagar"
,
"Eagarville"
,
"Eaglesmere"
,
"Eagletown"
,
"Eagleville"
,
"Eakly"
,
"Earle"
,
"Earleton"
,
"Earleville"
,
"Earlham"
,
"Earlimart"
,
"Earling"
,
"Earlington"
,
"Earlsboro"
,
"Earlton"
,
"Earlville"
,
"Early"
,
"Earlysville"
,
"Earp"
,
"Easley"
,
"Eatonton"
,
"Eatontown"
,
"Eatonville"
,
"Eauclaire"
,
"Eaugalle"
,
"Ebenezer"
,
"Ebensburg"
,
"Ebervale"
,
"Ebeye"
,
"Ebro"
,
"Echola"
,
"Echols"
,
"Eckelson"
,
"Eckerman"
,
"Eckert"
,
"Eckerty"
,
"Eckley"
,
"Eckman"
,
"Ecorse"
,
"Ecru"
,
"Ector"
,
"Edcouch"
,
"Eddyville"
,
"Edelstein"
,
"Edenton"
,
"Edenville"
,
"Edgard"
,
"Edgarton"
,
"Edgartown"
,
"Edgefield"
,
"Edgeley"
,
"Edgemont"
,
"Edgemoor"
,
"Edgewater"
,
"Edgewood"
,
"Edina"
,
"Edinboro"
,
"Edinburg"
,
"Edmeston"
,
"Edmon"
,
"Edmond"
,
"Edmonson"
,
"Edmore"
,
"Edneyville"
,
"Edon"
,
"Edroy"
,
"Edson"
,
"Edwall"
,
"Edwardsburg"
,
"Edwardsport"
,
"Edwardsville"
,
"Eek"
,
"Effingham"
,
"Efland"
,
"Egegik"
,
"Egeland"
,
"Eggleston"
,
"Eglon"
,
"Egnar"
,
"Ehrenberg"
,
"Ehrhardt"
,
"Eidson"
,
"Eitzen"
,
"Ekalaka"
,
"Ekron"
,
"Ekwok"
,
"Eland"
,
"Elbe"
,
"Elberfeld"
,
"Elberon"
,
"Elbert"
,
"Elberta"
,
"Elberton"
,
"Elbing"
,
"Elburn"
,
"Elcho"
,
"Elco"
,
"Eldena"
,
"Elderon"
,
"Eldersville"
,
"Elderton"
,
"Eldred"
,
"Eleele"
,
"Eleroy"
,
"Eleva"
,
"Elfers"
,
"Eliasville"
,
"Elida"
,
"Elizabethton"
,
"Elizabethtown"
,
"Elizaville"
,
"Elkader"
,
"Elkhorn"
,
"Elkin"
,
"Elkins"
,
"Elkland"
,
"Elkmont"
,
"Elkmound"
,
"Elko"
,
"Elkport"
,
"Elkton"
,
"Elkview"
,
"Elkville"
,
"Elkwood"
,
"Ellabell"
,
"Ellamore"
,
"Ellaville"
,
"Ellenboro"
,
"Ellenburg"
,
"Ellendale"
,
"Ellensburg"
,
"Ellenton"
,
"Ellenville"
,
"Ellenwood"
,
"Ellerbe"
,
"Ellerslie"
,
"Ellery"
,
"Ellettsville"
,
"Ellicottville"
,
"Ellijay"
,
"Ellinger"
,
"Ellington"
,
"Ellinwood"
,
"Elliottsburg"
,
"Elliottville"
,
"Ellisburg"
,
"Elliston"
,
"Ellisville"
,
"Elloree"
,
"Ellsinore"
,
"Ellston"
,
"Elma"
,
"Elmaton"
,
"Elmdale"
,
"Elmendorf"
,
"Elmhall"
,
"Elmmott"
,
"Elmo"
,
"Elmonte"
,
"Elmora"
,
"Elmore"
,
"Elmwood"
,
"Elnora"
,
"Elora"
,
"Eloy"
,
"Elrod"
,
"Elroy"
,
"Elsa"
,
"Elsah"
,
"Elsberry"
,
"Elsmere"
,
"Elsmore"
,
"Elvaston"
,
"Elverson"
,
"Elverta"
,
"Elwell"
,
"Elwin"
,
"Elwood"
,
"Elyria"
,
"Elysburg"
,
"Embudo"
,
"Emden"
,
"Emeigh"
,
"Emelle"
,
"Emerado"
,
"Emigsville"
,
"Eminence"
,
"Emington"
,
"Emison"
,
"Emlenton"
,
"Emlyn"
,
"Emmalena"
,
"Emmaus"
,
"Emmet"
,
"Emmetsburg"
,
"Emmitsburg"
,
"Emmonak"
,
"Emmons"
,
"Emporia"
,
"Encampment"
,
"Encinal"
,
"Encinitas"
,
"Encino"
,
"Endeavor"
,
"Enderlin"
,
"Enders"
,
"Engadine"
,
"Engelhard"
,
"Englishtown"
,
"Enka"
,
"Enloe"
,
"Ennice"
,
"Enning"
,
"Ennis"
,
"Enochs"
,
"Enola"
,
"Enon"
,
"Enoree"
,
"Ensenada"
,
"Ensign"
,
"Entiat"
,
"Entriken"
,
"Enumclaw"
,
"Enville"
,
"Eola"
,
"Eolia"
,
"Epes"
,
"Ephrata"
,
"Epping"
,
"Epps"
,
"Epworth"
,
"Equality"
,
"Equinunk"
,
"Erath"
,
"Erbacon"
,
"Erhard"
,
"Erick"
,
"Ericson"
,
"Erieville"
,
"Eriline"
,
"Erin"
,
"Ermine"
,
"Ernul"
,
"Erving"
,
"Erwinna"
,
"Erwinville"
,
"Esbon"
,
"Escalante"
,
"Escalon"
,
"Escanaba"
,
"Escatawpa"
,
"Escoheag"
,
"Escondido"
,
"Eskdale"
,
"Esko"
,
"Esmond"
,
"Esmont"
,
"Esopus"
,
"Espanola"
,
"Esparto"
,
"Esperance"
,
"Essexfells"
,
"Essexville"
,
"Essie"
,
"Essig"
,
"Essington"
,
"Estacada"
,
"Estancia"
,
"Estelline"
,
"Estero"
,
"Estherville"
,
"Estherwood"
,
"Estill"
,
"Ethelsville"
,
"Etiwanda"
,
"Etlan"
,
"Etna"
,
"Etoile"
,
"Eton"
,
"Etowah"
,
"Etta"
,
"Etters"
,
"Etterville"
,
"Ettrick"
,
"Etty"
,
"Eubank"
,
"Eucha"
,
"Eudora"
,
"Eufaula"
,
"Euless"
,
"Eupora"
,
"Eure"
,
"Eustace"
,
"Eustis"
,
"Eutaw"
,
"Eutawville"
,
"Evadale"
,
"Evan"
,
"Evansport"
,
"Evant"
,
"Evart"
,
"Evarts"
,
"Eveleth"
,
"Eveningshade"
,
"Evensville"
,
"Everest"
,
"Everetts"
,
"Everettville"
,
"Everly"
,
"Everson"
,
"Everton"
,
"Evington"
,
"Evinston"
,
"Ewan"
,
"Ewell"
,
"Ewen"
,
"Excello"
,
"Exeland"
,
"Exira"
,
"Exline"
,
"Exmore"
,
"Exton"
,
"Eyota"
,
"Ezel"
,
"Fabens"
,
"Fabius"
,
"Fabyan"
,
"Fackler"
,
"Factoryville"
,
"Fagus"
,
"Fairbank"
,
"Fairbanks"
,
"Fairborn"
,
"Fairburn"
,
"Fairbury"
,
"Fairchance"
,
"Fairchild"
,
"Fairdale"
,
"Fairhope"
,
"Fairland"
,
"Fairlawn"
,
"Fairlee"
,
"Fairmont"
,
"Fairoaks"
,
"Fairplay"
,
"Fairton"
,
"Fairview"
,
"Fairwater"
,
"Faison"
,
"Fajardo"
,
"Falconer"
,
"Falfurrias"
,
"Falkland"
,
"Falkner"
,
"Falkville"
,
"Fallbrook"
,
"Fallon"
,
"Falls"
,
"Fallsburg"
,
"Fallston"
,
"Falun"
,
"Fancher"
,
"Fannettsburg"
,
"Fannin"
,
"Fanshawe"
,
"Fanwood"
,
"Faribault"
,
"Farisita"
,
"Farler"
,
"Farlington"
,
"Farmdale"
,
"Farmer"
,
"Farmers"
,
"Farmersburg"
,
"Farmersville"
,
"Farmerville"
,
"Farmingdale"
,
"Farmingville"
,
"Farmville"
,
"Farnam"
,
"Farner"
,
"Farnham"
,
"Farnhamville"
,
"Farragut"
,
"Farrandsville"
,
"Farrar"
,
"Farson"
,
"Farwell"
,
"Fashing"
,
"Faubush"
,
"Faucett"
,
"Faulkton"
,
"Faunsdale"
,
"Fawnskin"
,
"Faxon"
,
"Faywood"
,
"Federalsburg"
,
"Feesburg"
,
"Felch"
,
"Felda"
,
"Fellows"
,
"Fellsmere"
,
"Felton"
,
"Fenelton"
,
"Fennimore"
,
"Fennville"
,
"Fentress"
,
"Fenwick"
,
"Ferndale"
,
"Ferney"
,
"Fernley"
,
"Fernwood"
,
"Ferrellsburg"
,
"Ferriday"
,
"Ferrisburg"
,
"Ferron"
,
"Ferrum"
,
"Ferrysburg"
,
"Ferryville"
,
"Fessenden"
,
"Festina"
,
"Festus"
,
"Feurabush"
,
"Fiatt"
,
"Fiddletown"
,
"Fieldale"
,
"Fielding"
,
"Fieldon"
,
"Fieldton"
,
"Fifield"
,
"Filer"
,
"Filion"
,
"Filley"
,
"Fillmore"
,
"Finchville"
,
"Findlay"
,
"Fineview"
,
"Fingal"
,
"Fingerville"
,
"Finksburg"
,
"Finlayson"
,
"Finleyville"
,
"Finly"
,
"Firebaugh"
,
"Firebrick"
,
"Firesteel"
,
"Firth"
,
"Fisher"
,
"Fishers"
,
"Fishersville"
,
"Fishertown"
,
"Fisherville"
,
"Fishkill"
,
"Fishtail"
,
"Fishtrap"
,
"Fiskdale"
,
"Fiskeville"
,
"Fisty"
,
"Fithian"
,
"Fittstown"
,
"Fitzhugh"
,
"Flagtown"
,
"Flandreau"
,
"Flasher"
,
"Flatlick"
,
"Flatonia"
,
"Flatwoods"
,
"Flaxton"
,
"Flaxville"
,
"Fleetville"
,
"Fleetwood"
,
"Fleischmanns"
,
"Flemingsburg"
,
"Flemington"
,
"Flensburg"
,
"Flicksville"
,
"Flinton"
,
"Flintstone"
,
"Flintville"
,
"Flippin"
,
"Flom"
,
"Flomaton"
,
"Flomot"
,
"Floodwood"
,
"Florala"
,
"Floresville"
,
"Florien"
,
"Floris"
,
"Florissant"
,
"Floriston"
,
"Flossmoor"
,
"Flourtown"
,
"Flovilla"
,
"Floydada"
,
"Floyddale"
,
"Fluker"
,
"Flushing"
,
"Fluvanna"
,
"Flyingh"
,
"Fogelsville"
,
"Fogertown"
,
"Fola"
,
"Folcroft"
,
"Folkston"
,
"Follansbee"
,
"Follett"
,
"Folsom"
,
"Folsomville"
,
"Fombell"
,
"Fonda"
,
"Fonddulac"
,
"Foneswood"
,
"Fontana"
,
"Fontanelle"
,
"Fontanet"
,
"Foosland"
,
"Footville"
,
"Foraker"
,
"Forbestown"
,
"Fordcliff"
,
"Fordland"
,
"Fordoche"
,
"Fords"
,
"Fordsville"
,
"Fordville"
,
"Fordyce"
,
"Foreman"
,
"Forestburg"
,
"Forestburgh"
,
"Forestdale"
,
"Foreston"
,
"Forestport"
,
"Forestville"
,
"Forgan"
,
"Foristell"
,
"Forkland"
,
"Forks"
,
"Forksville"
,
"Forkunion"
,
"Forkville"
,
"Forman"
,
"Formoso"
,
"Forney"
,
"Forreston"
,
"Forsan"
,
"Forsyth"
,
"Fosston"
,
"Fosters"
,
"Fosterville"
,
"Fostoria"
,
"Fouke"
,
"Fountaintown"
,
"Fountainville"
,
"Fourmile"
,
"Fouroaks"
,
"Fowler"
,
"Fowlerton"
,
"Fowlerville"
,
"Fowlkes"
,
"Fowlstown"
,
"Foxboro"
,
"Foxburg"
,
"Foxcroft"
,
"Foxholm"
,
"Foxton"
,
"Foxtown"
,
"Foxworth"
,
"Foyil"
,
"Frackville"
,
"Frakes"
,
"Frametown"
,
"Framingham"
,
"Francestown"
,
"Francesville"
,
"Francitas"
,
"Franconia"
,
"Frankclay"
,
"Frankenmuth"
,
"Frankewing"
,
"Frankford"
,
"Franklinton"
,
"Franklintown"
,
"Franklinville"
,
"Frankston"
,
"Franksville"
,
"Frankton"
,
"Franktown"
,
"Frankville"
,
"Frannie"
,
"Frazee"
,
"Frazer"
,
"Frazeysburg"
,
"Frederica"
,
"Fredericktown"
,
"Frederika"
,
"Frederiksted"
,
"Fredonia"
,
"Fredville"
,
"Freeborn"
,
"Freeburg"
,
"Freeburn"
,
"Freeland"
,
"Freelandville"
,
"Freemanspur"
,
"Freesoil"
,
"Freeunion"
,
"Freeville"
,
"Freewater"
,
"Freistatt"
,
"Fremont"
,
"Frenchboro"
,
"Frenchburg"
,
"Frenchlick"
,
"Frenchtown"
,
"Frenchville"
,
"Frewsburg"
,
"Friant"
,
"Friedens"
,
"Friedensburg"
,
"Friedheim"
,
"Friendly"
,
"Friendship"
,
"Friendsville"
,
"Friendswood"
,
"Frierson"
,
"Fries"
,
"Friesland"
,
"Friona"
,
"Frisco"
,
"Fritch"
,
"Frogmore"
,
"Frohna"
,
"Froid"
,
"Fromberg"
,
"Frontenac"
,
"Frontroyal"
,
"Frostburg"
,
"Fruita"
,
"Fruitdale"
,
"Fruithurst"
,
"Fruitland"
,
"Fruitport"
,
"Fruitvale"
,
"Fryburg"
,
"Fryeburg"
,
"Fuget"
,
"Fulda"
,
"Fulshear"
,
"Fultondale"
,
"Fultonham"
,
"Fultonville"
,
"Fults"
,
"Funkstown"
,
"Funston"
,
"Fuquay"
,
"Fyffe"
,
"Gaastra"
,
"Gabbs"
,
"Gabriels"
,
"Gackle"
,
"Gadsden"
,
"Gaffney"
,
"Gagetown"
,
"Gainesboro"
,
"Gainestown"
,
"Gaither"
,
"Gakona"
,
"Galata"
,
"Galax"
,
"Galesburg"
,
"Galesville"
,
"Galeton"
,
"Galien"
,
"Galion"
,
"Gallatin"
,
"Gallaway"
,
"Galliano"
,
"Gallina"
,
"Gallion"
,
"Gallipolis"
,
"Gallitzin"
,
"Gallman"
,
"Gallupville"
,
"Galva"
,
"Galvin"
,
"Gamaliel"
,
"Gambier"
,
"Gambrills"
,
"Ganado"
,
"Gandeeville"
,
"Gans"
,
"Gansevoort"
,
"Gantt"
,
"Gapland"
,
"Gapville"
,
"Garardsfort"
,
"Garber"
,
"Garberville"
,
"Garciasville"
,
"Gardena"
,
"Gardendale"
,
"Gardenville"
,
"Gardiner"
,
"Gardners"
,
"Gardnerville"
,
"Garita"
,
"Garnavillo"
,
"Garnerville"
,
"Garnett"
,
"Garrard"
,
"Garrattsville"
,
"Garretson"
,
"Garrettsville"
,
"Garrisonville"
,
"Garvin"
,
"Garwin"
,
"Garwood"
,
"Garysburg"
,
"Garyville"
,
"Gasburg"
,
"Gasconade"
,
"Gasport"
,
"Gasquet"
,
"Gassaway"
,
"Gassville"
,
"Gastonia"
,
"Gastonville"
,
"Gatesville"
,
"Gatewood"
,
"Gattman"
,
"Gatzke"
,
"Gause"
,
"Gautier"
,
"Gaylesville"
,
"Gaylordsville"
,
"Gays"
,
"Gaysville"
,
"Gayville"
,
"Geary"
,
"Geddes"
,
"Geff"
,
"Geigertown"
,
"Geismar"
,
"Geneautry"
,
"Genesee"
,
"Geneseo"
,
"Gentryville"
,
"Georgiana"
,
"Gepp"
,
"Gering"
,
"Gerlach"
,
"Gerlaw"
,
"Germansville"
,
"Germanton"
,
"Geronimo"
,
"Gerrardstown"
,
"Gerton"
,
"Gervais"
,
"Getzville"
,
"Geyserville"
,
"Gheen"
,
"Gheens"
,
"Gibbonsville"
,
"Gibbsboro"
,
"Gibbstown"
,
"Gibsland"
,
"Gibsonburg"
,
"Gibsonia"
,
"Gibsonton"
,
"Gibsonville"
,
"Giddings"
,
"Gilberton"
,
"Gilbertown"
,
"Gilberts"
,
"Gilbertsville"
,
"Gilbertville"
,
"Gilboa"
,
"Gilby"
,
"Gilcrest"
,
"Gildford"
,
"Gile"
,
"Gilford"
,
"Gillett"
,
"Gilley"
,
"Gillham"
,
"Gilliam"
,
"Gillmore"
,
"Gillsville"
,
"Gilman"
,
"Gilmanton"
,
"Gilmer"
,
"Gilroy"
,
"Gilson"
,
"Gilsum"
,
"Giltner"
,
"Gipsy"
,
"Girard"
,
"Girdler"
,
"Girdletree"
,
"Girdwood"
,
"Girvin"
,
"Glace"
,
"Gladbrook"
,
"Gladeville"
,
"Gladewater"
,
"Gladwin"
,
"Gladwyne"
,
"Glady"
,
"Glandorf"
,
"Glasco"
,
"Glasford"
,
"Glasgo"
,
"Glassboro"
,
"Glasser"
,
"Glassport"
,
"Glasston"
,
"Glastonbury"
,
"Glenallan"
,
"Glenallen"
,
"Glenarbor"
,
"Glenarm"
,
"Glenaubrey"
,
"Glenbeulah"
,
"Glenbrook"
,
"Glenburn"
,
"Glenburnie"
,
"Glencarbon"
,
"Glencliff"
,
"Glencoe"
,
"Glencross"
,
"Glendaniel"
,
"Glendean"
,
"Glendive"
,
"Glendo"
,
"Glendon"
,
"Glendora"
,
"Gleneaston"
,
"Glenecho"
,
"Glenelder"
,
"Glenellen"
,
"Glenellyn"
,
"Glenferris"
,
"Glenfield"
,
"Glenflora"
,
"Glenford"
,
"Glengary"
,
"Glenham"
,
"Glenhayes"
,
"Glenhead"
,
"Glenjean"
,
"Glenlyn"
,
"Glenmont"
,
"Glenmoore"
,
"Glenmora"
,
"Glenmorgan"
,
"Glennallen"
,
"Glenndale"
,
"Glennie"
,
"Glennville"
,
"Glenolden"
,
"Glenoma"
,
"Glenpool"
,
"Glenrio"
,
"Glenrose"
,
"Glenshaw"
,
"Glenside"
,
"Glenspey"
,
"Glentana"
,
"Glenullin"
,
"Glenview"
,
"Glenvil"
,
"Glenville"
,
"Glenwhite"
,
"Glenwild"
,
"Glenwillard"
,
"Glenwilton"
,
"Glenwood"
,
"Glorieta"
,
"Gloster"
,
"Glouster"
,
"Glover"
,
"Gloversville"
,
"Gloverville"
,
"Glyndon"
,
"Glynn"
,
"Gober"
,
"Gobler"
,
"Gobles"
,
"Godeffroy"
,
"Godley"
,
"Goehner"
,
"Goessel"
,
"Goetzville"
,
"Goffstown"
,
"Golconda"
,
"Goldbar"
,
"Goldbond"
,
"Goldendale"
,
"Goldfield"
,
"Goldonna"
,
"Goldrun"
,
"Goldsboro"
,
"Goldston"
,
"Goldthwaite"
,
"Goldvein"
,
"Goliad"
,
"Goltry"
,
"Golts"
,
"Golva"
,
"Gonvick"
,
"Goochland"
,
"Goodell"
,
"Goodfield"
,
"Goodhope"
,
"Goodhue"
,
"Gooding"
,
"Goodland"
,
"Goodson"
,
"Goodview"
,
"Goodville"
,
"Goodwater"
,
"Goodway"
,
"Goodwell"
,
"Goodwine"
,
"Goodyear"
,
"Gordo"
,
"Gordonsville"
,
"Gordonville"
,
"Goree"
,
"Goreville"
,
"Gorin"
,
"Gorman"
,
"Gormania"
,
"Gorum"
,
"Goshen"
,
"Gosport"
,
"Gotebo"
,
"Gotha"
,
"Gothenburg"
,
"Goudeau"
,
"Gough"
,
"Gouldbusk"
,
"Gouldsboro"
,
"Gouverneur"
,
"Gove"
,
"Gowanda"
,
"Gowen"
,
"Gower"
,
"Gowrie"
,
"Grabill"
,
"Gracemont"
,
"Graceville"
,
"Gracewood"
,
"Gracey"
,
"Gradyville"
,
"Graettinger"
,
"Graford"
,
"Grafton"
,
"Grahamsville"
,
"Grahn"
,
"Grainfield"
,
"Grambling"
,
"Gramercy"
,
"Gramling"
,
"Grampian"
,
"Granada"
,
"Granbury"
,
"Granby"
,
"Granger"
,
"Grangeville"
,
"Graniteville"
,
"Grannis"
,
"Grantham"
,
"Granton"
,
"Grants"
,
"Grantsboro"
,
"Grantsburg"
,
"Grantsdale"
,
"Grantsville"
,
"Granttown"
,
"Grantville"
,
"Grapeland"
,
"Grapeview"
,
"Grapeville"
,
"Grasonville"
,
"Grasston"
,
"Gratiot"
,
"Graton"
,
"Gratz"
,
"Gravelly"
,
"Gravette"
,
"Gravity"
,
"Grawn"
,
"Graycourt"
,
"Grayland"
,
"Grayling"
,
"Graymont"
,
"Graysville"
,
"Graytown"
,
"Grayville"
,
"Greeley"
,
"Greeleyville"
,
"Greenback"
,
"Greenbank"
,
"Greenbrier"
,
"Greenbush"
,
"Greendale"
,
"Greendell"
,
"Greeneville"
,
"Greenford"
,
"Greenhall"
,
"Greenhurst"
,
"Greenlane"
,
"Greenlawn"
,
"Greenleaf"
,
"Greenock"
,
"Greenport"
,
"Greensburg"
,
"Greensea"
,
"Greentown"
,
"Greenup"
,
"Greenvale"
,
"Greenview"
,
"Greenville"
,
"Greenwald"
,
"Greenway"
,
"Greig"
,
"Grenada"
,
"Grenloch"
,
"Grenola"
,
"Grenora"
,
"Grenville"
,
"Grethel"
,
"Gretna"
,
"Greybull"
,
"Greycliff"
,
"Gridley"
,
"Griffithville"
,
"Grifton"
,
"Griggsville"
,
"Grimesland"
,
"Grimsley"
,
"Grimstead"
,
"Grinnell"
,
"Grissom"
,
"Groesbeck"
,
"Grosseile"
,
"Grossetete"
,
"Grosvenordale"
,
"Grottoes"
,
"Groveland"
,
"Grovertown"
,
"Groves"
,
"Groveton"
,
"Grovetown"
,
"Grubbs"
,
"Grubville"
,
"Gruetli"
,
"Grulla"
,
"Grundy"
,
"Gruver"
,
"Grygla"
,
"Guadalupe"
,
"Guadalupita"
,
"Guage"
,
"Gualala"
,
"Guanica"
,
"Guasti"
,
"Guayama"
,
"Guayanilla"
,
"Guaynabo"
,
"Guerneville"
,
"Guerra"
,
"Guerrant"
,
"Gueydan"
,
"Guffey"
,
"Guiderock"
,
"Guilderland"
,
"Guin"
,
"Guinda"
,
"Guion"
,
"Gulfhammock"
,
"Gulfport"
,
"Gulliver"
,
"Gulston"
,
"Gumberry"
,
"Gunlock"
,
"Gunnison"
,
"Gunter"
,
"Guntersville"
,
"Guntown"
,
"Gurabo"
,
"Gurdon"
,
"Gurley"
,
"Gurnee"
,
"Gurney"
,
"Gusher"
,
"Gustine"
,
"Guston"
,
"Guttenberg"
,
"Guymon"
,
"Guys"
,
"Guysville"
,
"Guyton"
,
"Gwinn"
,
"Gwinner"
,
"Gwynedd"
,
"Gwynn"
,
"Gwynneville"
,
"Hachita"
,
"Hackensack"
,
"Hackettstown"
,
"Hackleburg"
,
"Haddam"
,
"Haddix"
,
"Haddonfield"
,
"Hadensville"
,
"Hadlock"
,
"Hadlyme"
,
"Hagaman"
,
"Hagan"
,
"Hagarstown"
,
"Hagarville"
,
"Hagerman"
,
"Hagerstown"
,
"Hahira"
,
"Hahnville"
,
"Haigler"
,
"Hailesboro"
,
"Hailey"
,
"Haileyville"
,
"Hainesport"
,
"Hakalau"
,
"Halbur"
,
"Halcottsville"
,
"Haldeman"
,
"Haledon"
,
"Haleiwa"
,
"Haleyville"
,
"Hallam"
,
"Hallandale"
,
"Halleck"
,
"Hallett"
,
"Hallettsville"
,
"Halliday"
,
"Hallie"
,
"Hallieford"
,
"Hallock"
,
"Hallowell"
,
"Halls"
,
"Hallsboro"
,
"Hallstead"
,
"Hallsville"
,
"Halltown"
,
"Hallwood"
,
"Halstad"
,
"Hamberg"
,
"Hambleton"
,
"Hamden"
,
"Hamel"
,
"Hamer"
,
"Hamersville"
,
"Hamler"
,
"Hamletsburg"
,
"Hammett"
,
"Hammon"
,
"Hammondsport"
,
"Hammondsville"
,
"Hammonton"
,
"Hampden"
,
"Hampstead"
,
"Hamptonville"
,
"Hamshire"
,
"Hana"
,
"Hanalei"
,
"Hanapepe"
,
"Hanceville"
,
"Handley"
,
"Handsom"
,
"Hankamer"
,
"Hankins"
,
"Hankinson"
,
"Hanksville"
,
"Hanlontown"
,
"Hannacroix"
,
"Hannaford"
,
"Hannastown"
,
"Hanoverton"
,
"Hansboro"
,
"Hansell"
,
"Hansford"
,
"Hanska"
,
"Hanston"
,
"Hansville"
,
"Haralson"
,
"Harbert"
,
"Harbeson"
,
"Harborside"
,
"Harborton"
,
"Harco"
,
"Hardaway"
,
"Hardburly"
,
"Hardeeville"
,
"Hardenville"
,
"Hardesty"
,
"Hardinsburg"
,
"Hardtner"
,
"Hardwick"
,
"Hardyville"
,
"Harford"
,
"Hargill"
,
"Harleigh"
,
"Harleton"
,
"Harleysville"
,
"Harleyville"
,
"Harlingen"
,
"Harlowton"
,
"Harman"
,
"Harmans"
,
"Harmonsburg"
,
"Harned"
,
"Harper"
,
"Harpersfield"
,
"Harpersville"
,
"Harperville"
,
"Harpster"
,
"Harpursville"
,
"Harrah"
,
"Harrell"
,
"Harrells"
,
"Harrellsville"
,
"Harrietta"
,
"Harrisonburg"
,
"Harrisonville"
,
"Harriston"
,
"Harristown"
,
"Harrisville"
,
"Harrod"
,
"Harrodsburg"
,
"Harrold"
,
"Harshaw"
,
"Hartfield"
,
"Hartington"
,
"Hartland"
,
"Hartleton"
,
"Hartline"
,
"Hartly"
,
"Harts"
,
"Hartsburg"
,
"Hartsdale"
,
"Hartsel"
,
"Hartselle"
,
"Hartsfield"
,
"Hartshorn"
,
"Hartshorne"
,
"Hartstown"
,
"Hartsville"
,
"Hartville"
,
"Hartwell"
,
"Hartwick"
,
"Hartwood"
,
"Harvel"
,
"Harveysburg"
,
"Harveyville"
,
"Harviell"
,
"Harwich"
,
"Harwichport"
,
"Harwick"
,
"Harwood"
,
"Haskell"
,
"Haskins"
,
"Haslet"
,
"Haslett"
,
"Hasse"
,
"Hassell"
,
"Haswell"
,
"Hatboro"
,
"Hatchechubbee"
,
"Hathorne"
,
"Hatillo"
,
"Hatley"
,
"Hattieville"
,
"Hatton"
,
"Haubstadt"
,
"Haughton"
,
"Hauppauge"
,
"Hauula"
,
"Havaco"
,
"Havelock"
,
"Havensville"
,
"Haverford"
,
"Haverstraw"
,
"Haviland"
,
"Havre"
,
"Hawarden"
,
"Hawesville"
,
"Hawi"
,
"Hawick"
,
"Hawkeye"
,
"Hawkinsville"
,
"Hawks"
,
"Hawleyville"
,
"Haworth"
,
"Haxtun"
,
"Haydenville"
,
"Hayesville"
,
"Haymarket"
,
"Haynesville"
,
"Hayneville"
,
"Haysi"
,
"Haysville"
,
"Hayti"
,
"Haywood"
,
"Hazelcrest"
,
"Hazelhurst"
,
"Hazelton"
,
"Hazelwood"
,
"Hazen"
,
"Hazlehurst"
,
"Hazlet"
,
"Hazleton"
,
"Headrick"
,
"Healdsburg"
,
"Healdton"
,
"Hearne"
,
"Heartwell"
,
"Heaters"
,
"Heathsville"
,
"Heaton"
,
"Heavener"
,
"Hebbronville"
,
"Heber"
,
"Hebert"
,
"Hebo"
,
"Hebron"
,
"Hecker"
,
"Hecla"
,
"Hedgesville"
,
"Hedley"
,
"Hedrick"
,
"Heflin"
,
"Hegins"
,
"Heidenheimer"
,
"Heidrick"
,
"Heilwood"
,
"Heimdal"
,
"Heiskell"
,
"Heislerville"
,
"Heisson"
,
"Helechawa"
,
"Helendale"
,
"Helenville"
,
"Helenwood"
,
"Helfenstein"
,
"Hellertown"
,
"Hellier"
,
"Helmer"
,
"Helmetta"
,
"Helmsburg"
,
"Helmuth"
,
"Helmville"
,
"Helotes"
,
"Helper"
,
"Heltonville"
,
"Hemet"
,
"Hemingford"
,
"Henagar"
,
"Hendley"
,
"Hendrix"
,
"Hendrum"
,
"Henefer"
,
"Henlawson"
,
"Hennepin"
,
"Hennessey"
,
"Henniker"
,
"Henning"
,
"Henrico"
,
"Henrieville"
,
"Henryetta"
,
"Henryton"
,
"Henryville"
,
"Hensel"
,
"Hensler"
,
"Hensley"
,
"Hensonville"
,
"Hephzibah"
,
"Hepler"
,
"Heppner"
,
"Hepzibah"
,
"Herbster"
,
"Herculaneum"
,
"Herington"
,
"Herlong"
,
"Hermansville"
,
"Hermanville"
,
"Herminie"
,
"Hermiston"
,
"Hermitage"
,
"Hermleigh"
,
"Hermon"
,
"Hernando"
,
"Herndon"
,
"Hernshaw"
,
"Herod"
,
"Herreid"
,
"Herrick"
,
"Herrin"
,
"Herrings"
,
"Herron"
,
"Herscher"
,
"Hersey"
,
"Hertel"
,
"Hertford"
,
"Hesperia"
,
"Hessel"
,
"Hessmer"
,
"Hesston"
,
"Hestand"
,
"Heth"
,
"Hetland"
,
"Hettick"
,
"Hettinger"
,
"Heuvelton"
,
"Hext"
,
"Heyburn"
,
"Heyworth"
,
"Hialeah"
,
"Hiawassee"
,
"Hibbing"
,
"Hibbs"
,
"Hickorywithe"
,
"Hicksville"
,
"Hico"
,
"Hiddenite"
,
"Higbee"
,
"Higden"
,
"Higdon"
,
"Higganum"
,
"Higginson"
,
"Higginsport"
,
"Higginsville"
,
"Highlands"
,
"Highlandville"
,
"Highmore"
,
"Highshoals"
,
"Highspire"
,
"Hightown"
,
"Hightstown"
,
"Highview"
,
"Highwood"
,
"Higley"
,
"Hihat"
,
"Hiko"
,
"Hiland"
,
"Hilda"
,
"Hildebran"
,
"Hildreth"
,
"Hilger"
,
"Hilham"
,
"Hill"
,
"Hillburn"
,
"Hiller"
,
"Hilliard"
,
"Hilliards"
,
"Hillisburg"
,
"Hillister"
,
"Hillrose"
,
"Hills"
,
"Hillsboro"
,
"Hillsborough"
,
"Hillsdale"
,
"Hillsville"
,
"Hilltown"
,
"Hillview"
,
"Hilmar"
,
"Hilo"
,
"Hiltons"
,
"Hima"
,
"Himrod"
,
"Hinckley"
,
"Hindman"
,
"Hindsboro"
,
"Hindsville"
,
"Hinesburg"
,
"Hineston"
,
"Hinesville"
,
"Hingham"
,
"Hinkle"
,
"Hinkley"
,
"Hinsdale"
,
"Hinton"
,
"Hiseville"
,
"Hissop"
,
"Hitchins"
,
"Hitchita"
,
"Hitterdal"
,
"Hiwasse"
,
"Hiwassee"
,
"Hixson"
,
"Hixton"
,
"Hobbsville"
,
"Hobgood"
,
"Hobson"
,
"Hobucken"
,
"Hochheim"
,
"Hockessin"
,
"Hockingport"
,
"Hockley"
,
"Hode"
,
"Hodgen"
,
"Hodgenville"
,
"Hoehne"
,
"Hoffmeister"
,
"Hogansburg"
,
"Hogansville"
,
"Hogeland"
,
"Hohenwald"
,
"Hohokus"
,
"Hoisington"
,
"Hokah"
,
"Holabird"
,
"Holcombe"
,
"Holdenville"
,
"Holder"
,
"Holderness"
,
"Holdingford"
,
"Holdrege"
,
"Holicong"
,
"Holladay"
,
"Hollandale"
,
"Hollansburg"
,
"Hollenberg"
,
"Holley"
,
"Holliday"
,
"Hollidaysburg"
,
"Hollins"
,
"Hollis"
,
"Holliston"
,
"Holloman"
,
"Hollowville"
,
"Hollsopple"
,
"Hollybush"
,
"Hollytree"
,
"Holmen"
,
"Holmesville"
,
"Holmsville"
,
"Holton"
,
"Holtsville"
,
"Holtville"
,
"Holtwood"
,
"Holyrood"
,
"Homedale"
,
"Homer"
,
"Homerville"
,
"Hometown"
,
"Homewood"
,
"Homeworth"
,
"Hominy"
,
"Homosassa"
,
"Honaker"
,
"Honaunau"
,
"Honeapath"
,
"Honeoye"
,
"Honesdale"
,
"Honeybrook"
,
"Honeyville"
,
"Honobia"
,
"Honokaa"
,
"Honomu"
,
"Honor"
,
"Honoraville"
,
"Hoodsport"
,
"Hooker"
,
"Hookerton"
,
"Hooks"
,
"Hookstown"
,
"Hoolehua"
,
"Hoopa"
,
"Hooper"
,
"Hoopeston"
,
"Hoople"
,
"Hooppole"
,
"Hoosick"
,
"Hooven"
,
"Hooversville"
,
"Hopatcong"
,
"Hopbottom"
,
"Hopedale"
,
"Hopehull"
,
"Hopeland"
,
"Hopeton"
,
"Hopewell"
,
"Hopkinsville"
,
"Hopkinton"
,
"Hopland"
,
"Hopwood"
,
"Hoquiam"
,
"Hordville"
,
"Horicon"
,
"Hormigueros"
,
"Hornbeak"
,
"Hornbeck"
,
"Hornbrook"
,
"Hornell"
,
"Horner"
,
"Hornersville"
,
"Hornick"
,
"Hornitos"
,
"Hornsby"
,
"Horntown"
,
"Horseheads"
,
"Horsepen"
,
"Horsham"
,
"Hortense"
,
"Hortonville"
,
"Hoschton"
,
"Hosford"
,
"Hoskins"
,
"Hoskinston"
,
"Hosmer"
,
"Hospers"
,
"Hosston"
,
"Hostetter"
,
"Hotchkiss"
,
"Hotevilla"
,
"Houck"
,
"Houlka"
,
"Houlton"
,
"Houma"
,
"Housatonic"
,
"Houstonia"
,
"Houtzdale"
,
"Hoven"
,
"Hovland"
,
"Howardstown"
,
"Howells"
,
"Howertons"
,
"Howes"
,
"Howland"
,
"Hoxeyville"
,
"Hoxie"
,
"Hoyleton"
,
"Hoytville"
,
"Hubbardston"
,
"Hubbardsville"
,
"Hubertus"
,
"Huddleston"
,
"Huddy"
,
"Hudgins"
,
"Hudsonville"
,
"Huey"
,
"Hueysville"
,
"Huger"
,
"Hugheston"
,
"Hughesville"
,
"Hughson"
,
"Hughsonville"
,
"Hugoton"
,
"Huguenot"
,
"Hulbert"
,
"Hulen"
,
"Hulett"
,
"Humacao"
,
"Humansville"
,
"Humarock"
,
"Humbird"
,
"Hume"
,
"Humeston"
,
"Hummelstown"
,
"Humnoke"
,
"Humphreys"
,
"Humptulips"
,
"Hungerford"
,
"Hunker"
,
"Hunnewell"
,
"Hunters"
,
"Huntersville"
,
"Huntertown"
,
"Huntingburg"
,
"Huntingdon"
,
"Huntingtown"
,
"Huntland"
,
"Huntly"
,
"Huntsburg"
,
"Hurdland"
,
"Hurdsfield"
,
"Hurleyville"
,
"Hurlock"
,
"Hurtsboro"
,
"Husk"
,
"Husser"
,
"Hustisford"
,
"Hustontown"
,
"Hustonville"
,
"Husum"
,
"Hutsonville"
,
"Huttig"
,
"Hutto"
,
"Huttonsville"
,
"Huxford"
,
"Hyampom"
,
"Hyannisport"
,
"Hyattsville"
,
"Hyattville"
,
"Hyden"
,
"Hydes"
,
"Hydesville"
,
"Hydetown"
,
"Hydeville"
,
"Hye"
,
"Hymera"
,
"Hyndman"
,
"Hyrum"
,
"Hysham"
,
"Iaeger"
,
"Ibapah"
,
"Icard"
,
"Ickesburg"
,
"Idabel"
,
"Idalia"
,
"Idalou"
,
"Idamay"
,
"Idanha"
,
"Idaville"
,
"Ider"
,
"Idledale"
,
"Idlewild"
,
"Idyllwild"
,
"Ignacio"
,
"Igo"
,
"Ihlen"
,
"Ijamsville"
,
"Ila"
,
"Iliamna"
,
"Iliff"
,
"Ilion"
,
"Illiopolis"
,
"Ilwaco"
,
"Imbler"
,
"Imboden"
,
"Imlay"
,
"Imlaystown"
,
"Imler"
,
"Immaculata"
,
"Immokalee"
,
"Imnaha"
,
"Imogene"
,
"Ina"
,
"Inavale"
,
"Inchelium"
,
"Independence"
,
"Indiahoma"
,
"Indianhead"
,
"Indianola"
,
"Indiantown"
,
"Indio"
,
"Indore"
,
"Inez"
,
"Ingalls"
,
"Ingle"
,
"Inglefield"
,
"Ingleside"
,
"Inglewood"
,
"Inglis"
,
"Ingold"
,
"Ingomar"
,
"Ingraham"
,
"Inkom"
,
"Inkster"
,
"Innis"
,
"Inola"
,
"Insko"
,
"Intercourse"
,
"Interlachen"
,
"Interlaken"
,
"Interlochen"
,
"Intervale"
,
"Inwood"
,
"Inyokern"
,
"Iola"
,
"Iona"
,
"Ione"
,
"Ionia"
,
"Ipava"
,
"Ipswich"
,
"Iraan"
,
"Irasburg"
,
"Iredell"
,
"Ireton"
,
"Irmo"
,
"Ironbelt"
,
"Irondale"
,
"Ironia"
,
"Irons"
,
"Ironsides"
,
"Ironton"
,
"Irrigon"
,
"Irvington"
,
"Irvona"
,
"Irwinville"
,
"Isaban"
,
"Isabela"
,
"Isanti"
,
"Iselin"
,
"Ishpeming"
,
"Islandton"
,
"Islesboro"
,
"Islesford"
,
"Isleta"
,
"Isleton"
,
"Islip"
,
"Ismay"
,
"Isola"
,
"Isom"
,
"Isonville"
,
"Issaquah"
,
"Istachatta"
,
"Itasca"
,
"Itmann"
,
"Ittabena"
,
"Iuka"
,
"Iva"
,
"Ivel"
,
"Ivesdale"
,
"Ivins"
,
"Ivor"
,
"Ivoryton"
,
"Ivydale"
,
"Ivyton"
,
"Ixonia"
,
"Jachin"
,
"Jackhorn"
,
"Jacksboro"
,
"Jacksonboro"
,
"Jacksonburg"
,
"Jacksonport"
,
"Jacksontown"
,
"Jacobsburg"
,
"Jacumba"
,
"Jadwin"
,
"Jaffrey"
,
"Jakin"
,
"Jal"
,
"Jamesburg"
,
"Jameson"
,
"Jamesport"
,
"Jamesstore"
,
"Jamesville"
,
"Jamieson"
,
"Jamison"
,
"Jamul"
,
"Janelew"
,
"Janesville"
,
"Jansen"
,
"Jarales"
,
"Jarbidge"
,
"Jaroso"
,
"Jarratt"
,
"Jarreau"
,
"Jarrell"
,
"Jarrettsville"
,
"Jarvisburg"
,
"Jasonville"
,
"Jayem"
,
"Jayess"
,
"Jayton"
,
"Jayuya"
,
"Jeanerette"
,
"Jeannette"
,
"Jeddo"
,
"Jeffers"
,
"Jeffersonton"
,
"Jellico"
,
"Jelm"
,
"Jemison"
,
"Jena"
,
"Jenison"
,
"Jenkinsburg"
,
"Jenkinsville"
,
"Jenkintown"
,
"Jenks"
,
"Jenner"
,
"Jennerstown"
,
"Jermyn"
,
"Jeromesville"
,
"Jerseyville"
,
"Jessieville"
,
"Jessup"
,
"Jesup"
,
"Jetersville"
,
"Jetmore"
,
"Jetson"
,
"Jigger"
,
"Jobstown"
,
"Jodie"
,
"Joelton"
,
"Joes"
,
"Joffre"
,
"Johnday"
,
"Johnsburg"
,
"Johnsonburg"
,
"Johnsonville"
,
"Joice"
,
"Joiner"
,
"Joinerville"
,
"Joliette"
,
"Jolley"
,
"Jolo"
,
"Jolon"
,
"Jonancy"
,
"Jonben"
,
"Jonesboro"
,
"Jonesborough"
,
"Jonesburg"
,
"Jonesport"
,
"Jonestown"
,
"Jonesville"
,
"Joplin"
,
"Joppa"
,
"Jordanville"
,
"Jourdanton"
,
"Juanadiaz"
,
"Jud"
,
"Juda"
,
"Judsonia"
,
"Julesburg"
,
"Juliaetta"
,
"Julian"
,
"Juliette"
,
"Juliustown"
,
"Juncos"
,
"Junedale"
,
"Juniata"
,
"Juntura"
,
"Justiceburg"
,
"Justin"
,
"Kaaawa"
,
"Kadoka"
,
"Kahlotus"
,
"Kahoka"
,
"Kahuku"
,
"Kahului"
,
"Kailua"
,
"Kailuakona"
,
"Kalaheo"
,
"Kalama"
,
"Kalaupapa"
,
"Kaleva"
,
"Kalida"
,
"Kalispell"
,
"Kalkaska"
,
"Kalona"
,
"Kalskag"
,
"Kalvesta"
,
"Kamas"
,
"Kamay"
,
"Kamiah"
,
"Kampsville"
,
"Kamrar"
,
"Kamuela"
,
"Kanab"
,
"Kanaranzi"
,
"Kanarraville"
,
"Kanawha"
,
"Kandiyohi"
,
"Kaneohe"
,
"Kaneville"
,
"Kannapolis"
,
"Kanona"
,
"Kanopolis"
,
"Kanorado"
,
"Kanosh"
,
"Kansasville"
,
"Kantner"
,
"Kapaa"
,
"Kapaau"
,
"Kapowsin"
,
"Karlin"
,
"Karlsruhe"
,
"Karlstad"
,
"Karluk"
,
"Karnack"
,
"Karnak"
,
"Karthaus"
,
"Karval"
,
"Kasbeer"
,
"Kasigluk"
,
"Kasilof"
,
"Kasota"
,
"Kasson"
,
"Katemcy"
,
"Kathryn"
,
"Katonah"
,
"Katy"
,
"Kaukauna"
,
"Kaumakani"
,
"Kaunakakai"
,
"Kaweah"
,
"Kawkawlin"
,
"Kaycee"
,
"Kayenta"
,
"Kaylor"
,
"Kaysville"
,
"Keaau"
,
"Kealakekua"
,
"Kealia"
,
"Keansburg"
,
"Kearney"
,
"Kearneysville"
,
"Kearny"
,
"Kearsarge"
,
"Keasbey"
,
"Keatchie"
,
"Keavy"
,
"Kechi"
,
"Keddie"
,
"Keedysville"
,
"Keeler"
,
"Keeline"
,
"Keene"
,
"Keenes"
,
"Keenesburg"
,
"Keensburg"
,
"Keeseville"
,
"Keewatin"
,
"Keezletown"
,
"Kegley"
,
"Keiser"
,
"Keisterville"
,
"Keithsburg"
,
"Keithville"
,
"Keizer"
,
"Kekaha"
,
"Kelayres"
,
"Keldron"
,
"Kelford"
,
"Kell"
,
"Kellerman"
,
"Kellerton"
,
"Kelliher"
,
"Kellnersville"
,
"Kellysville"
,
"Kellyton"
,
"Kellyville"
,
"Kelseyville"
,
"Kelso"
,
"Kelton"
,
"Kemah"
,
"Kemblesville"
,
"Kemmerer"
,
"Kempner"
,
"Kempster"
,
"Kempton"
,
"Kenai"
,
"Kenansville"
,
"Kendalia"
,
"Kendallville"
,
"Kendleton"
,
"Kendrick"
,
"Kenduskeag"
,
"Kenedy"
,
"Kenefic"
,
"Kenesaw"
,
"Kenilworth"
,
"Kenly"
,
"Kenmare"
,
"Kenna"
,
"Kennard"
,
"Kennebec"
,
"Kennebunk"
,
"Kennebunkport"
,
"Kennedale"
,
"Kennedyville"
,
"Kenner"
,
"Kennerdell"
,
"Kennesaw"
,
"Kennett"
,
"Kennewick"
,
"Kenosha"
,
"Kenova"
,
"Kensal"
,
"Kensett"
,
"Kentland"
,
"Kentuck"
,
"Kentwood"
,
"Kenvil"
,
"Kenvir"
,
"Kenwood"
,
"Keo"
,
"Keokee"
,
"Keokuk"
,
"Keosauqua"
,
"Keota"
,
"Kerens"
,
"Kerhonkson"
,
"Kerkhoven"
,
"Kerman"
,
"Kernersville"
,
"Kernville"
,
"Kerrick"
,
"Kerrville"
,
"Kersey"
,
"Kershaw"
,
"Keshena"
,
"Kesley"
,
"Keswick"
,
"Ketchum"
,
"Kettlersville"
,
"Kevil"
,
"Kewadin"
,
"Kewanee"
,
"Kewanna"
,
"Kewaskum"
,
"Kewaunee"
,
"Keyapaha"
,
"Keyesport"
,
"Keylargo"
,
"Keymar"
,
"Keyport"
,
"Keyser"
,
"Keysville"
,
"Keytesville"
,
"Kiahsville"
,
"Kidder"
,
"Kidron"
,
"Kief"
,
"Kiefer"
,
"Kiel"
,
"Kieler"
,
"Kiester"
,
"Kihei"
,
"Kila"
,
"Kilauea"
,
"Kilbourne"
,
"Kildare"
,
"Kilkenny"
,
"Killarney"
,
"Killawog"
,
"Killbuck"
,
"Killduff"
,
"Killeen"
,
"Killen"
,
"Killington"
,
"Killona"
,
"Kilmarnock"
,
"Kilmichael"
,
"Kiln"
,
"Kilsyth"
,
"Kimballton"
,
"Kimberton"
,
"Kimbolton"
,
"Kimmell"
,
"Kimmswick"
,
"Kimper"
,
"Kinards"
,
"Kincaid"
,
"Kincheloe"
,
"Kinde"
,
"Kinder"
,
"Kinderhook"
,
"Kingfield"
,
"Kingman"
,
"Kingmont"
,
"Kings"
,
"Kingsburg"
,
"Kingsdown"
,
"Kingsland"
,
"Kingsport"
,
"Kingstree"
,
"Kingsville"
,
"Kingwood"
,
"Kinmundy"
,
"Kinnear"
,
"Kinross"
,
"Kinsale"
,
"Kinsey"
,
"Kinsley"
,
"Kinsman"
,
"Kinston"
,
"Kinta"
,
"Kintnersville"
,
"Kintyre"
,
"Kinzers"
,
"Kipnuk"
,
"Kipton"
,
"Kirbyville"
,
"Kirkersville"
,
"Kirklin"
,
"Kirkman"
,
"Kirksey"
,
"Kirksville"
,
"Kirkville"
,
"Kirkwood"
,
"Kiron"
,
"Kirtland"
,
"Kirvin"
,
"Kirwin"
,
"Kismet"
,
"Kissimmee"
,
"Kistler"
,
"Kittanning"
,
"Kittery"
,
"Kittitas"
,
"Kittredge"
,
"Kittrell"
,
"Kitzmiller"
,
"Klamath"
,
"Klemme"
,
"Klickitat"
,
"Klingerstown"
,
"Klondike"
,
"Klossner"
,
"Kneeland"
,
"Knierim"
,
"Knifley"
,
"Knightdale"
,
"Knightsen"
,
"Knightstown"
,
"Knightsville"
,
"Knippa"
,
"Knobel"
,
"Knoblick"
,
"Knobnoster"
,
"Knoke"
,
"Knowlesville"
,
"Knoxboro"
,
"Knoxdale"
,
"Koeltztown"
,
"Kohler"
,
"Kokomo"
,
"Koleen"
,
"Koloa"
,
"Kona"
,
"Konawa"
,
"Koosharem"
,
"Kooskia"
,
"Koppel"
,
"Kopperl"
,
"Kopperston"
,
"Korbel"
,
"Koror"
,
"Kosciusko"
,
"Koshkonong"
,
"Kosrae"
,
"Kosse"
,
"Kossuth"
,
"Kotlik"
,
"Kountze"
,
"Kouts"
,
"Kraemer"
,
"Kranzburg"
,
"Kreamer"
,
"Kremmling"
,
"Kresgeville"
,
"Kress"
,
"Krum"
,
"Kualapuu"
,
"Kula"
,
"Kulm"
,
"Kulpmont"
,
"Kulpsville"
,
"Kuna"
,
"Kunia"
,
"Kunkle"
,
"Kunkletown"
,
"Kurten"
,
"Kurthwood"
,
"Kurtistown"
,
"Kurtz"
,
"Kuttawa"
,
"Kutztown"
,
"Kwethluk"
,
"Kwigillingok"
,
"Kyburz"
,
"Kylertown"
,
"Laager"
,
"Labadie"
,
"Labadieville"
,
"Labarge"
,
"LaBarre"
,
"LaBelle"
,
"Labolt"
,
"Lacamp"
,
"Lacarne"
,
"Lacassine"
,
"Laceyville"
,
"Lachine"
,
"Lackawaxen"
,
"Laclede"
,
"Lacombe"
,
"Lacon"
,
"Lacona"
,
"Laconia"
,
"Lacoochee"
,
"Lacoste"
,
"Lacota"
,
"Lacrescent"
,
"Lacygne"
,
"Ladd"
,
"Laddonia"
,
"Ladiesburg"
,
"Ladonia"
,
"Ladora"
,
"Ladson"
,
"Ladysmith"
,
"Lafarge"
,
"Lafargeville"
,
"Laferia"
,
"Lafferty"
,
"Lafitte"
,
"Lafollette"
,
"Lafontaine"
,
"Lafox"
,
"Lafrance"
,
"Lagrangeville"
,
"Lagro"
,
"Laguna"
,
"Lagunitas"
,
"Lahabra"
,
"Lahaina"
,
"Laharpe"
,
"Lahaska"
,
"Lahmansville"
,
"Lahoma"
,
"Laie"
,
"Laings"
,
"Laingsburg"
,
"Laird"
,
"Lairdsville"
,
"Lajas"
,
"Lajose"
,
"Lakin"
,
"Lakota"
,
"Laloma"
,
"Laluz"
,
"Lamadera"
,
"Lamarque"
,
"Lamartine"
,
"Lamberton"
,
"Lambertville"
,
"Lambric"
,
"Lambrook"
,
"Lambsburg"
,
"Lamero"
,
"Lamesa"
,
"Lamison"
,
"Lamoille"
,
"Lamoni"
,
"Lamont"
,
"Lamonte"
,
"Lamotte"
,
"Lamoure"
,
"Lampasas"
,
"Lampe"
,
"Lampeter"
,
"Lanagan"
,
"Lanark"
,
"Lancing"
,
"Landa"
,
"Landenberg"
,
"Lander"
,
"Landess"
,
"Landing"
,
"Landingville"
,
"Landisburg"
,
"Landisville"
,
"Lando"
,
"Landrum"
,
"Landville"
,
"Laneburg"
,
"Lanesboro"
,
"Lanesville"
,
"Lanett"
,
"Laneview"
,
"Laneville"
,
"Lanexa"
,
"Langdon"
,
"Langeloth"
,
"Langford"
,
"Langhorne"
,
"Langlois"
,
"Langston"
,
"Langsville"
,
"Langtry"
,
"Langworthy"
,
"Lanham"
,
"Lankin"
,
"Lannon"
,
"Lansdale"
,
"Lansdowne"
,
"Lanse"
,
"Lansford"
,
"Lantry"
,
"Laona"
,
"Laotto"
,
"Lapaz"
,
"Lapeer"
,
"Lapine"
,
"Lapryor"
,
"Lapwai"
,
"Laquey"
,
"Larchmont"
,
"Larchwood"
,
"Largo"
,
"Larimer"
,
"Larimore"
,
"Larned"
,
"Larose"
,
"Larrabee"
,
"Larslan"
,
"Larto"
,
"Larue"
,
"Larussell"
,
"Larwill"
,
"Lasal"
,
"Lasalle"
,
"Lascassas"
,
"Lashmeet"
,
"Lasker"
,
"Lasmarias"
,
"Lastrup"
,
"Latah"
,
"Latexo"
,
"Latham"
,
"Latimer"
,
"Laton"
,
"Latour"
,
"Latta"
,
"Lattimore"
,
"Latty"
,
"Laughlintown"
,
"Laupahoehoe"
,
"Laurelton"
,
"Laurelville"
,
"Laurens"
,
"Laurier"
,
"Laurinburg"
,
"Lavalette"
,
"Lavalle"
,
"Lavallette"
,
"Laveen"
,
"Lavelle"
,
"Lavergne"
,
"Laverkin"
,
"Laverne"
,
"Lavernia"
,
"Laveta"
,
"Lavilla"
,
"Lavina"
,
"Lavinia"
,
"Lavon"
,
"Lavonia"
,
"Lawai"
,
"Laward"
,
"Lawen"
,
"Lawler"
,
"Lawley"
,
"Lawndale"
,
"Lawnside"
,
"Lawrenceburg"
,
"Lawrenceville"
,
"Lawsonville"
,
"Lawtell"
,
"Lawtey"
,
"Lawton"
,
"Lawtons"
,
"Lawyersville"
,
"Layland"
,
"Laytonville"
,
"Lazbuddie"
,
"Lazear"
,
"Leachville"
,
"Leaday"
,
"Leadore"
,
"Leadville"
,
"Leadwood"
,
"Leakesville"
,
"Leakey"
,
"Leamington"
,
"Leary"
,
"Leasburg"
,
"Leatherwood"
,
"Leavittsburg"
,
"Lebam"
,
"Lebeau"
,
"Lebec"
,
"Lebo"
,
"Leburn"
,
"Lecanto"
,
"Leckie"
,
"Leckkill"
,
"Leckrone"
,
"Leclaire"
,
"Lecoma"
,
"Lecompton"
,
"Ledbetter"
,
"Lederach"
,
"Ledger"
,
"Ledgewood"
,
"Ledoux"
,
"Ledyard"
,
"Leechburg"
,
"Leeco"
,
"Leedey"
,
"Leemont"
,
"Leeper"
,
"Leesburg"
,
"Leesport"
,
"Leesville"
,
"Leet"
,
"Leeton"
,
"Leetonia"
,
"Leetsdale"
,
"Leevining"
,
"Leewood"
,
"Lefor"
,
"Lefors"
,
"Leggett"
,
"Legrand"
,
"Lehi"
,
"Lehighton"
,
"Lehr"
,
"Leicester"
,
"Leipsic"
,
"Leisenring"
,
"Leitchfield"
,
"Leiter"
,
"Leitersford"
,
"Leith"
,
"Leivasy"
,
"Lemars"
,
"Lemasters"
,
"Lemhi"
,
"Leming"
,
"Lemitar"
,
"Lemmon"
,
"Lemont"
,
"Lemoore"
,
"Lemoyen"
,
"Lemoyne"
,
"Lempster"
,
"Lenapah"
,
"Lengby"
,
"Lenhartsville"
,
"Lenni"
,
"Lennon"
,
"Lenoir"
,
"Lenora"
,
"Lenorah"
,
"Lenox"
,
"Lenoxdale"
,
"Lenoxville"
,
"Lentner"
,
"Lenzburg"
,
"Leola"
,
"Leoma"
,
"Leominster"
,
"Leonardsville"
,
"Leonardtown"
,
"Leonardville"
,
"Leonidas"
,
"Leonore"
,
"Leonville"
,
"Leopolis"
,
"Leota"
,
"Leoti"
,
"Lepanto"
,
"Lequire"
,
"Leraysville"
,
"Lerna"
,
"Lerona"
,
"Lerose"
,
"Lesage"
,
"Lesterville"
,
"Lesueur"
,
"Letart"
,
"Letcher"
,
"Letha"
,
"Letohatchee"
,
"Letona"
,
"Letts"
,
"Lettsworth"
,
"Leupp"
,
"Levan"
,
"Levant"
,
"Levasy"
,
"Levelland"
,
"Levelock"
,
"Leverett"
,
"Levering"
,
"Levittown"
,
"Lewellen"
,
"Lewes"
,
"Lewisberry"
,
"Lewisburg"
,
"Lewisetta"
,
"Lewisport"
,
"Lewiston"
,
"Lewistown"
,
"Lewisville"
,
"Lexa"
,
"Libby"
,
"Libertytown"
,
"Libertyville"
,
"Libuse"
,
"Licking"
,
"Lickingville"
,
"Lidderdale"
,
"Lidgerwood"
,
"Liebenthal"
,
"Lightfoot"
,
"Ligon"
,
"Ligonier"
,
"Liguori"
,
"Lihue"
,
"Likely"
,
"Lilbourn"
,
"Lilburn"
,
"Lilesville"
,
"Lille"
,
"Lillie"
,
"Lillington"
,
"Lilliwaup"
,
"Lilydale"
,
"Limaville"
,
"Limeport"
,
"Limington"
,
"Limon"
,
"Linch"
,
"Lincolndale"
,
"Lincolnton"
,
"Lincolnville"
,
"Lincroft"
,
"Lindale"
,
"Lindenhurst"
,
"Lindenwood"
,
"Lindley"
,
"Lindon"
,
"Lindrith"
,
"Lindsborg"
,
"Lindseyville"
,
"Lindside"
,
"Linesville"
,
"Lineville"
,
"Lingle"
,
"Lingleville"
,
"Linkwood"
,
"Linn"
,
"Linneus"
,
"Linton"
,
"Linville"
,
"Linwood"
,
"Lipan"
,
"Lisco"
,
"Liscomb"
,
"Lisman"
,
"Lismore"
,
"Lissie"
,
"Listie"
,
"Litchfield"
,
"Litchville"
,
"Literberry"
,
"Lithia"
,
"Lithonia"
,
"Lithopolis"
,
"Lititz"
,
"Littcarr"
,
"Littlefield"
,
"Littleport"
,
"Littlestown"
,
"Lively"
,
"Livonia"
,
"Lizella"
,
"Lizemores"
,
"Lizton"
,
"Llano"
,
"Llewellyn"
,
"Loa"
,
"Loachapoka"
,
"Loami"
,
"Lobata"
,
"Lobeco"
,
"Lobelville"
,
"Lochgelly"
,
"Lochloosa"
,
"Lochmere"
,
"Lockbourne"
,
"Lockeford"
,
"Lockesburg"
,
"Lockney"
,
"Lockport"
,
"Loco"
,
"Locustdale"
,
"Locustville"
,
"Loda"
,
"Lodgegrass"
,
"Lodi"
,
"Logandale"
,
"Logansport"
,
"Loganton"
,
"Loganville"
,
"Lohman"
,
"Lohn"
,
"Lohrville"
,
"Loiza"
,
"Loleta"
,
"Lolita"
,
"Lolo"
,
"Loma"
,
"Lomalinda"
,
"Lomamar"
,
"Loman"
,
"Lomax"
,
"Lometa"
,
"Lomira"
,
"Lomita"
,
"Lompoc"
,
"Lonaconing"
,
"Londonderry"
,
"Lonedell"
,
"Lonejack"
,
"Lonestar"
,
"Lonetree"
,
"Longbottom"
,
"Longdale"
,
"Longford"
,
"Longkey"
,
"Longlane"
,
"Longleaf"
,
"Longmeadow"
,
"Longmont"
,
"Longport"
,
"Longs"
,
"Longton"
,
"Longview"
,
"Longville"
,
"Longwood"
,
"Lonoke"
,
"Lonsdale"
,
"Loogootee"
,
"Lookeba"
,
"Looneyville"
,
"Lopeno"
,
"Lorado"
,
"Lorain"
,
"Loraine"
,
"Lorane"
,
"Loranger"
,
"Lordsburg"
,
"Loreauville"
,
"Lorena"
,
"Lorentz"
,
"Lorenzo"
,
"Loretto"
,
"Lorida"
,
"Lorimor"
,
"Loring"
,
"Loris"
,
"Lorman"
,
"Lorton"
,
"Lostant"
,
"Lostine"
,
"Lothair"
,
"Lothian"
,
"Lott"
,
"Lottsburg"
,
"Louann"
,
"Loudon"
,
"Loudonville"
,
"Louellen"
,
"Loughman"
,
"Louin"
,
"Louisburg"
,
"Louvale"
,
"Louviers"
,
"Lovejoy"
,
"Lovelaceville"
,
"Lovelady"
,
"Lovell"
,
"Lovelock"
,
"Lovely"
,
"Lovettsville"
,
"Loveville"
,
"Lovilia"
,
"Loving"
,
"Lovingston"
,
"Lovington"
,
"Lowake"
,
"Lowber"
,
"Lowden"
,
"Lowder"
,
"Lowellville"
,
"Lowes"
,
"Lowesville"
,
"Lowman"
,
"Lowmansville"
,
"Lowmoor"
,
"Lowndes"
,
"Lowndesboro"
,
"Lowndesville"
,
"Lowville"
,
"Loxahatchee"
,
"Loxley"
,
"Loyall"
,
"Loyalton"
,
"Loysburg"
,
"Loysville"
,
"Lozano"
,
"Luana"
,
"Lubec"
,
"Lublin"
,
"Lucama"
,
"Lucan"
,
"Lucasville"
,
"Lucedale"
,
"Lucien"
,
"Lucile"
,
"Lucinda"
,
"Luckey"
,
"Ludell"
,
"Ludington"
,
"Ludowici"
,
"Luebbering"
,
"Lueders"
,
"Lufkin"
,
"Lugoff"
,
"Lukeville"
,
"Lula"
,
"Luling"
,
"Lumberport"
,
"Lumberton"
,
"Lumpkin"
,
"Luna"
,
"Lundale"
,
"Lunenburg"
,
"Luning"
,
"Lupton"
,
"Luquillo"
,
"Luray"
,
"Lurgan"
,
"Lusby"
,
"Lusk"
,
"Lutcher"
,
"Lutesville"
,
"Luthersburg"
,
"Luthersville"
,
"Lutherville"
,
"Lutsen"
,
"Luttrell"
,
"Lutts"
,
"Luverne"
,
"Luxemburg"
,
"Luxor"
,
"Luxora"
,
"Luzerne"
,
"Lyburn"
,
"Lycoming"
,
"Lyerly"
,
"Lyford"
,
"Lykens"
,
"Lyles"
,
"Lyme"
,
"Lynbrook"
,
"Lynco"
,
"Lynd"
,
"Lyndeborough"
,
"Lyndell"
,
"Lynden"
,
"Lyndhurst"
,
"Lyndon"
,
"Lyndonville"
,
"Lyndora"
,
"Lynndyl"
,
"Lynnfield"
,
"Lynnville"
,
"Lynnwood"
,
"Lynwood"
,
"Lysander"
,
"Lysite"
,
"Lytle"
,
"Lytten"
,
"Lytton"
,
"Mabank"
,
"Mabelvale"
,
"Maben"
,
"Mabie"
,
"Mableton"
,
"Mabscott"
,
"Mabton"
,
"MacClenny"
,
"MacClesfield"
,
"MacDoel"
,
"MacDona"
,
"MacFarlan"
,
"MacKay"
,
"MacKeyville"
,
"Macatawa"
,
"Maceo"
,
"Machias"
,
"Machiasport"
,
"Machipongo"
,
"Macksburg"
,
"Macksinn"
,
"Macksville"
,
"Mackville"
,
"Macomb"
,
"Macungie"
,
"Macy"
,
"Madawaska"
,
"Maddock"
,
"Madelia"
,
"Madera"
,
"Madill"
,
"Madisonburg"
,
"Madisonville"
,
"Maeystown"
,
"Magalia"
,
"Magdalena"
,
"Magee"
,
"Magness"
,
"Mahaffey"
,
"Mahan"
,
"Mahaska"
,
"Maher"
,
"Mahnomen"
,
"Mahomet"
,
"Mahopac"
,
"Mahto"
,
"Mahtowa"
,
"Mahwah"
,
"Maida"
,
"Maidens"
,
"Maidsville"
,
"Mainesburg"
,
"Maineville"
,
"Maitland"
,
"Maize"
,
"Majuro"
,
"Makanda"
,
"Makawao"
,
"Makaweli"
,
"Makinen"
,
"Makoti"
,
"Malaga"
,
"Malakoff"
,
"Malcom"
,
"Malibu"
,
"Malin"
,
"Malinta"
,
"Maljamar"
,
"Mallie"
,
"Malmo"
,
"Malo"
,
"Maloneton"
,
"Malott"
,
"Maloy"
,
"Malvern"
,
"Malverne"
,
"Mamers"
,
"Mamou"
,
"Manahawkin"
,
"Manakinsabot"
,
"Manasquan"
,
"Manassa"
,
"Manassas"
,
"Manati"
,
"Manawa"
,
"Mancelona"
,
"Manchaca"
,
"Manchaug"
,
"Mancos"
,
"Mandan"
,
"Mandaree"
,
"Manderson"
,
"Mandeville"
,
"Mangham"
,
"Mango"
,
"Mangohick"
,
"Mangum"
,
"Manhasset"
,
"Manheim"
,
"Manilla"
,
"Manistee"
,
"Manistique"
,
"Manito"
,
"Manitou"
,
"Manitowoc"
,
"Mankato"
,
"Manlius"
,
"Manly"
,
"Mannboro"
,
"Mannford"
,
"Manning"
,
"Mannington"
,
"Mannschoice"
,
"Mannsville"
,
"Manokin"
,
"Manokotak"
,
"Manomet"
,
"Manorville"
,
"Manquin"
,
"Mansfield"
,
"Manson"
,
"Mansura"
,
"Mantachie"
,
"Mantador"
,
"Manteca"
,
"Mantee"
,
"Manteno"
,
"Manteo"
,
"Manter"
,
"Manti"
,
"Mantoloking"
,
"Manton"
,
"Mantorville"
,
"Mantua"
,
"Manvel"
,
"Manzanola"
,
"Mapaville"
,
"Maplecrest"
,
"Mapleshade"
,
"Maplesville"
,
"Mapleton"
,
"Mapleview"
,
"Mapleville"
,
"Maplewood"
,
"Mappsville"
,
"Maquoketa"
,
"Maquon"
,
"Maramec"
,
"Marana"
,
"Marblehead"
,
"Marbury"
,
"Marceline"
,
"Marcell"
,
"Marcella"
,
"Marcellus"
,
"Marchand"
,
"Marcola"
,
"Marcushook"
,
"Marengo"
,
"Marenisco"
,
"Marfa"
,
"Marfrance"
,
"Margaretville"
,
"Marianna"
,
"Mariastein"
,
"Mariba"
,
"Maribel"
,
"Maricao"
,
"Maricopa"
,
"Marienthal"
,
"Marienville"
,
"Marilla"
,
"Marinette"
,
"Maringouin"
,
"Marionville"
,
"Mariposa"
,
"Marissa"
,
"Markesan"
,
"Markle"
,
"Markleeville"
,
"Markleton"
,
"Markleville"
,
"Markleysburg"
,
"Marksville"
,
"Markville"
,
"Marland"
,
"Marlette"
,
"Marlinton"
,
"Marlow"
,
"Marlton"
,
"Marmaduke"
,
"Marmarth"
,
"Marmora"
,
"Marne"
,
"Maroa"
,
"Marquand"
,
"Marquez"
,
"Marrero"
,
"Marshallberg"
,
"Marshalltown"
,
"Marshallville"
,
"Marshessiding"
,
"Marshfield"
,
"Marshville"
,
"Marsing"
,
"Marsland"
,
"Marsteller"
,
"Marston"
,
"Martel"
,
"Martell"
,
"Martelle"
,
"Martensdale"
,
"Marthasville"
,
"Marthaville"
,
"Martindale"
,
"Martinsburg"
,
"Martinsdale"
,
"Martinsville"
,
"Martinton"
,
"Martville"
,
"Marvell"
,
"Maryalice"
,
"Maryd"
,
"Marydel"
,
"Marydell"
,
"Maryknoll"
,
"Marylhurst"
,
"Maryneal"
,
"Marysvale"
,
"Marysville"
,
"Maryus"
,
"Maryville"
,
"Mascot"
,
"Mascotte"
,
"Mascoutah"
,
"Mashpee"
,
"Maskell"
,
"Masontown"
,
"Masonville"
,
"Massapequa"
,
"Massena"
,
"Massillon"
,
"Masury"
,
"Matador"
,
"Matagorda"
,
"Matamoras"
,
"Matawan"
,
"Matewan"
,
"Matheny"
,
"Mather"
,
"Matherville"
,
"Matheson"
,
"Mathis"
,
"Mathiston"
,
"Matinicus"
,
"Matlock"
,
"Matoaka"
,
"Mattapoisett"
,
"Mattaponi"
,
"Mattawamkeag"
,
"Mattawan"
,
"Mattawana"
,
"Matteson"
,
"Mattituck"
,
"Mattoon"
,
"Mauckport"
,
"Maud"
,
"Maugansville"
,
"Mauk"
,
"Mauldin"
,
"Maumee"
,
"Maunabo"
,
"Maunie"
,
"Maupin"
,
"Maurepas"
,
"Maurertown"
,
"Mauricetown"
,
"Mauriceville"
,
"Maury"
,
"Mauston"
,
"Mavisdale"
,
"Maxatawny"
,
"Maxbass"
,
"Maxie"
,
"Maximo"
,
"Maxton"
,
"Maxwelton"
,
"Mayaguez"
,
"Maybee"
,
"Maybell"
,
"Maybeury"
,
"Maybrook"
,
"Maydelle"
,
"Mayersville"
,
"Mayesville"
,
"Mayetta"
,
"Mayfield"
,
"Mayhew"
,
"Mayking"
,
"Maylene"
,
"Maynardville"
,
"Mayodan"
,
"Maypearl"
,
"Mayport"
,
"Mays"
,
"Maysel"
,
"Maysfield"
,
"Mayslick"
,
"Maysville"
,
"Maytown"
,
"Mayview"
,
"Mayville"
,
"Maywood"
,
"Mazeppa"
,
"Mazie"
,
"Mazomanie"
,
"Mazon"
,
"McAdenville"
,
"McAdoo"
,
"McAfee"
,
"McAlester"
,
"McAlister"
,
"McAllen"
,
"McAlpin"
,
"McAndrews"
,
"McArthur"
,
"McBain"
,
"McBee"
,
"McBrides"
,
"McCalla"
,
"McCallsburg"
,
"McCamey"
,
"McCammon"
,
"McCanna"
,
"McCarley"
,
"McCarr"
,
"McCaskill"
,
"McCaulley"
,
"McCausland"
,
"McCaysville"
,
"McClave"
,
"McCleary"
,
"McClelland"
,
"McCloud"
,
"McClurg"
,
"McClusky"
,
"McColl"
,
"McComas"
,
"McComb"
,
"McCombs"
,
"McCondy"
,
"McConnells"
,
"McCook"
,
"McCool"
,
"McCordsville"
,
"McCrory"
,
"McCune"
,
"McCurtain"
,
"McDade"
,
"McDaniels"
,
"McDavid"
,
"McDermitt"
,
"McDonough"
,
"McDougal"
,
"McElhattan"
,
"McEwen"
,
"McEwensville"
,
"McFaddin"
,
"McFall"
,
"McFarlan"
,
"McGaheysville"
,
"McGehee"
,
"McGirk"
,
"McGrady"
,
"McGrann"
,
"McGraws"
,
"McGrew"
,
"McGuffey"
,
"McHenry"
,
"McIntire"
,
"McKean"
,
"McKenney"
,
"McKinnon"
,
"McKittrick"
,
"McKnightstown"
,
"McLain"
,
"McLeansboro"
,
"McLeansville"
,
"McLouth"
,
"McMechen"
,
"McMillin"
,
"McMinnville"
,
"McNabb"
,
"McNary"
,
"McNeal"
,
"McNeill"
,
"McQuady"
,
"McQueeney"
,
"McRae"
,
"McRoberts"
,
"McShan"
,
"McSherrystown"
,
"McVeigh"
,
"McVeytown"
,
"McVille"
,
"McWhorter"
,
"McWilliams"
,
"McKeesport"
,
"Meade"
,
"Meador"
,
"Meadowbrook"
,
"Meadows"
,
"Meadville"
,
"Meally"
,
"Means"
,
"Meansville"
,
"Mears"
,
"Mebane"
,
"Mechanicsburg"
,
"Mechanicstown"
,
"Mechanicville"
,
"Mecklenburg"
,
"Meckling"
,
"Mecosta"
,
"Medanales"
,
"Medaryville"
,
"Medfield"
,
"Mediapolis"
,
"Medina"
,
"Medinah"
,
"Medomak"
,
"Medon"
,
"Medora"
,
"Medway"
,
"Meeker"
,
"Meers"
,
"Meeteetse"
,
"Megargel"
,
"Meherrin"
,
"Mehoopany"
,
"Meigs"
,
"Mekinock"
,
"Mekoryuk"
,
"Melba"
,
"Melber"
,
"Melbeta"
,
"Melcroft"
,
"Melder"
,
"Meldrim"
,
"Melfa"
,
"Mellen"
,
"Mellenville"
,
"Mellette"
,
"Mellott"
,
"Mellwood"
,
"Melmore"
,
"Melrose"
,
"Melstone"
,
"Melvern"
,
"Melvindale"
,
"Mena"
,
"Menahga"
,
"Menan"
,
"Menard"
,
"Menasha"
,
"Mendenhall"
,
"Mendham"
,
"Mendocino"
,
"Mendon"
,
"Mendota"
,
"Menemsha"
,
"Menfro"
,
"Menifee"
,
"Menno"
,
"Meno"
,
"Menoken"
,
"Menominee"
,
"Menomonie"
,
"Mentcle"
,
"Mentmore"
,
"Mentone"
,
"Meppen"
,
"Meraux"
,
"Merced"
,
"Mercedita"
,
"Mercersburg"
,
"Merchantville"
,
"Meredithville"
,
"Meredosia"
,
"Mereta"
,
"Meridale"
,
"Meriden"
,
"Meridianville"
,
"Merigold"
,
"Merino"
,
"Merkel"
,
"Mermentau"
,
"Merna"
,
"Merom"
,
"Merrick"
,
"Merricourt"
,
"Merrifield"
,
"Merrillan"
,
"Merrimac"
,
"Merriman"
,
"Merrittstown"
,
"Merrouge"
,
"Merryville"
,
"Mershon"
,
"Mertens"
,
"Merton"
,
"Mertzon"
,
"Mertztown"
,
"Mesaverde"
,
"Mescalero"
,
"Mesena"
,
"Meservey"
,
"Meshoppen"
,
"Mesick"
,
"Mesilla"
,
"Mesita"
,
"Meta"
,
"Metairie"
,
"Metaline"
,
"Metamora"
,
"Metcalfe"
,
"Methow"
,
"Metter"
,
"Metuchen"
,
"Metz"
,
"Mexia"
,
"Meyersdale"
,
"Meyersville"
,
"Miamisburg"
,
"Miamitown"
,
"Miamiville"
,
"Micanopy"
,
"Micaville"
,
"Miccosukee"
,
"Michie"
,
"Michigamme"
,
"Mickleton"
,
"Middlebass"
,
"Middleboro"
,
"Middlebourne"
,
"Middlebrook"
,
"Middleburg"
,
"Middleburgh"
,
"Middlefield"
,
"Middleport"
,
"Middlesboro"
,
"Middleville"
,
"Midfield"
,
"Midkiff"
,
"Midlothian"
,
"Midpines"
,
"Midvale"
,
"Midville"
,
"Mifflin"
,
"Mifflinburg"
,
"Mifflintown"
,
"Mifflinville"
,
"Mikado"
,
"Mikana"
,
"Milaca"
,
"Milam"
,
"Milano"
,
"Milanville"
,
"Milbank"
,
"Milburn"
,
"Milesburg"
,
"Milesville"
,
"Miley"
,
"Milfay"
,
"Milford"
,
"Milladore"
,
"Millboro"
,
"Millbrae"
,
"Millbrook"
,
"Millburn"
,
"Millbury"
,
"Milldale"
,
"Milledgeville"
,
"Millen"
,
"Millers"
,
"Millersburg"
,
"Millersport"
,
"Millerstown"
,
"Millersville"
,
"Millerton"
,
"Millerville"
,
"Millfield"
,
"Millhall"
,
"Millheim"
,
"Millhousen"
,
"Millican"
,
"Milligan"
,
"Milliken"
,
"Millington"
,
"Millinocket"
,
"Millis"
,
"Millmont"
,
"Millport"
,
"Millrift"
,
"Millry"
,
"Millsap"
,
"Millsboro"
,
"Millshoals"
,
"Millstadt"
,
"Millston"
,
"Milltown"
,
"Millville"
,
"Millwood"
,
"Milmay"
,
"Milmine"
,
"Milner"
,
"Milnesand"
,
"Milnesville"
,
"Milnor"
,
"Milo"
,
"Milpitas"
,
"Milroy"
,
"Milton"
,
"Miltona"
,
"Miltonvale"
,
"Mima"
,
"Mimbres"
,
"Mims"
,
"Mina"
,
"Minatare"
,
"Minburn"
,
"Minco"
,
"Minden"
,
"Mindoro"
,
"Minelamotte"
,
"Mineola"
,
"Minersville"
,
"Minetto"
,
"Mineville"
,
"Minford"
,
"Mingo"
,
"Mingoville"
,
"Mingus"
,
"Minier"
,
"Minneola"
,
"Minneota"
,
"Minnetonka"
,
"Minnewaukan"
,
"Minoa"
,
"Minocqua"
,
"Minong"
,
"Minonk"
,
"Minooka"
,
"Minotola"
,
"Minster"
,
"Minter"
,
"Minto"
,
"Minturn"
,
"Mio"
,
"Miquon"
,
"Miraloma"
,
"Miramonte"
,
"Misenheimer"
,
"Mishawaka"
,
"Mishicot"
,
"Miston"
,
"Mitchells"
,
"Mitchellsburg"
,
"Mitchellville"
,
"Mittie"
,
"Mize"
,
"Mizpah"
,
"Moab"
,
"Moapa"
,
"Moatsville"
,
"Mobeetie"
,
"Moberly"
,
"Mobjack"
,
"Moca"
,
"Mocksville"
,
"Moclips"
,
"Modale"
,
"Modena"
,
"Modeste"
,
"Modesttown"
,
"Modoc"
,
"Moffat"
,
"Moffett"
,
"Moffit"
,
"Mogadore"
,
"Mohall"
,
"Mohnton"
,
"Mohrsville"
,
"Moira"
,
"Mojave"
,
"Mokane"
,
"Mokena"
,
"Moko"
,
"Molalla"
,
"Molena"
,
"Molina"
,
"Molino"
,
"Momence"
,
"Monaca"
,
"Monahans"
,
"Monango"
,
"Monaville"
,
"Monclova"
,
"Moncure"
,
"Mondamin"
,
"Mondovi"
,
"Monee"
,
"Monessen"
,
"Moneta"
,
"Monett"
,
"Monetta"
,
"Monette"
,
"Mongo"
,
"Monhegan"
,
"Monico"
,
"Monkton"
,
"Monon"
,
"Monona"
,
"Monongah"
,
"Monoville"
,
"Monponsett"
,
"Monroeton"
,
"Monroeville"
,
"Monsey"
,
"Monson"
,
"Moodus"
,
"Moodys"
,
"Mooers"
,
"Moorcroft"
,
"Moorefield"
,
"Mooreland"
,
"Mooresboro"
,
"Mooresburg"
,
"Moorestown"
,
"Mooresville"
,
"Mooreton"
,
"Mooreville"
,
"Moorhead"
,
"Moorland"
,
"Moorman"
,
"Mooseheart"
,
"Moosup"
,
"Mora"
,
"Moraga"
,
"Morann"
,
"Morattico"
,
"Moreauville"
,
"Morehead"
,
"Morehouse"
,
"Morenci"
,
"Moretown"
,
"Morganfield"
,
"Morganton"
,
"Morgantown"
,
"Morganville"
,
"Morganza"
,
"Moriah"
,
"Moriches"
,
"Morland"
,
"Moro"
,
"Moroni"
,
"Morovis"
,
"Morral"
,
"Morrice"
,
"Morrilton"
,
"Morrisdale"
,
"Morrisonville"
,
"Morriston"
,
"Morrisville"
,
"Morrowville"
,
"Morven"
,
"Morvin"
,
"Mosby"
,
"Mosca"
,
"Moseley"
,
"Moselle"
,
"Moshannon"
,
"Mosheim"
,
"Mosherville"
,
"Mosier"
,
"Mosinee"
,
"Mosquero"
,
"Mossville"
,
"Mossyrock"
,
"Mott"
,
"Mottville"
,
"Moultonboro"
,
"Moultrie"
,
"Mounds"
,
"Moundsville"
,
"Moundville"
,
"Mousie"
,
"Mouthcard"
,
"Moville"
,
"Moweaqua"
,
"Mowrystown"
,
"Moxahala"
,
"Moxee"
,
"Moyers"
,
"Moyock"
,
"Mozelle"
,
"Mozier"
,
"Mtbaldy"
,
"Muenster"
,
"Mukilteo"
,
"Mukwonago"
,
"Muldoon"
,
"Muldraugh"
,
"Muldrow"
,
"Muleshoe"
,
"Mulga"
,
"Mulhall"
,
"Mulino"
,
"Mulkeytown"
,
"Mullan"
,
"Mullens"
,
"Mulliken"
,
"Mullin"
,
"Mullins"
,
"Mullinville"
,
"Mulvane"
,
"Muncy"
,
"Munday"
,
"Mundelein"
,
"Munden"
,
"Munford"
,
"Munfordville"
,
"Munger"
,
"Munising"
,
"Munith"
,
"Munnsville"
,
"Munsonville"
,
"Murchison"
,
"Murdo"
,
"Murdock"
,
"Murfreesboro"
,
"Murphys"
,
"Murphysboro"
,
"Murraysville"
,
"Murrayville"
,
"Murrieta"
,
"Murrysville"
,
"Murtaugh"
,
"Muscadine"
,
"Muscatine"
,
"Muscoda"
,
"Muscotah"
,
"Musella"
,
"Muskego"
,
"Muskogee"
,
"Mustoe"
,
"Myerstown"
,
"Myersville"
,
"Mylo"
,
"Myrtlewood"
,
"Myton"
,
"Naalehu"
,
"Nabb"
,
"Naches"
,
"Nachusa"
,
"Naco"
,
"Nacoochee"
,
"Nada"
,
"Nadeau"
,
"Nageezi"
,
"Nagshead"
,
"Naguabo"
,
"Nahant"
,
"Nahma"
,
"Nahunta"
,
"Nakina"
,
"Naknek"
,
"Nallen"
,
"Nampa"
,
"Nanafalia"
,
"Nanjemoy"
,
"Nankin"
,
"Nanticoke"
,
"Nantyglo"
,
"Nanuet"
,
"Naoma"
,
"Napa"
,
"Napakiak"
,
"Napanoch"
,
"Napavine"
,
"Naper"
,
"Naperville"
,
"Napier"
,
"Napoleonville"
,
"Naponee"
,
"Nappanee"
,
"Naranjito"
,
"Naravisa"
,
"Narberth"
,
"Nardin"
,
"Narka"
,
"Narrows"
,
"Narrowsburg"
,
"Naruna"
,
"Narvon"
,
"Naselle"
,
"Nashoba"
,
"Nashotah"
,
"Nashport"
,
"Nashwauk"
,
"Nason"
,
"Nassawadox"
,
"Natalbany"
,
"Natalia"
,
"Nathalie"
,
"Nathrop"
,
"Natick"
,
"Natoma"
,
"Naturita"
,
"Naubinway"
,
"Naugatuck"
,
"Nauvoo"
,
"Navarre"
,
"Navasota"
,
"Navesink"
,
"Naxera"
,
"Naylor"
,
"Naytahwaush"
,
"Nazlini"
,
"Neafus"
,
"Neapolis"
,
"Neavitt"
,
"Nebo"
,
"Necedah"
,
"Neche"
,
"Neches"
,
"Nederland"
,
"Nedrow"
,
"Needles"
,
"Needmore"
,
"Needville"
,
"Neely"
,
"Neelyton"
,
"Neelyville"
,
"Neenah"
,
"Neeses"
,
"Neffs"
,
"Negaunee"
,
"Negley"
,
"Negreet"
,
"Nehalem"
,
"Nehawka"
,
"Neihart"
,
"Neillsville"
,
"Neilton"
,
"Nekoma"
,
"Nekoosa"
,
"Neligh"
,
"Nellis"
,
"Nelliston"
,
"Nellysford"
,
"Nelse"
,
"Nelsonia"
,
"Nelsonville"
,
"Nemacolin"
,
"Nemaha"
,
"Nemo"
,
"Nemours"
,
"Nenzel"
,
"Neodesha"
,
"Neoga"
,
"Neola"
,
"Neopit"
,
"Neosho"
,
"Neotsu"
,
"Nephi"
,
"Neponset"
,
"Nerinx"
,
"Nerstrand"
,
"Nesbit"
,
"Nesconset"
,
"Nescopeck"
,
"Neshkoro"
,
"Nesmith"
,
"Nespelem"
,
"Nesquehoning"
,
"Netawaka"
,
"Netcong"
,
"Nettie"
,
"Nettleton"
,
"Neversink"
,
"Neville"
,
"Nevis"
,
"Nevisdale"
,
"Ney"
,
"Niangua"
,
"Niantic"
,
"Niarada"
,
"Nicasio"
,
"Niceville"
,
"Nicholasville"
,
"Nicholville"
,
"Nickelsville"
,
"Nickerson"
,
"Nicktown"
,
"Nicolaus"
,
"Nicollet"
,
"Nicut"
,
"Nielsville"
,
"Nikep"
,
"Nikiski"
,
"Nikolski"
,
"Niland"
,
"Niles"
,
"Nilwood"
,
"Nimitz"
,
"Ninde"
,
"Ninilchik"
,
"Ninnekah"
,
"Niobrara"
,
"Niota"
,
"Niotaze"
,
"Nipomo"
,
"Nisbet"
,
"Nisswa"
,
"Nisula"
,
"Nitro"
,
"Nittayuma"
,
"Niverville"
,
"Niwot"
,
"Nixa"
,
"Nobleboro"
,
"Noblesville"
,
"Nobleton"
,
"Nocatee"
,
"Nocona"
,
"Noctor"
,
"Nodaway"
,
"Nogal"
,
"Nogales"
,
"Nokesville"
,
"Nokomis"
,
"Nolanville"
,
"Nolensville"
,
"Noma"
,
"Nome"
,
"Nonantum"
,
"Nondalton"
,
"Nooksack"
,
"Noonan"
,
"Norborne"
,
"Norcatur"
,
"Norco"
,
"Norcross"
,
"Norden"
,
"Nordheim"
,
"Nordland"
,
"Nordman"
,
"Norene"
,
"Norge"
,
"Norlina"
,
"Normalville"
,
"Normangee"
,
"Normanna"
,
"Normantown"
,
"Norphlet"
,
"Norridgewock"
,
"Norristown"
,
"Nortonville"
,
"Norvell"
,
"Norvelt"
,
"Norwell"
,
"Norwood"
,
"Notasulga"
,
"Noti"
,
"Notrees"
,
"Nottawa"
,
"Nottoway"
,
"Notus"
,
"Novato"
,
"Novi"
,
"Novinger"
,
"Nowata"
,
"Noxapater"
,
"Noxen"
,
"Noxon"
,
"Noyes"
,
"Nuangola"
,
"Nubieber"
,
"Nucla"
,
"Nuevo"
,
"Numa"
,
"Numidia"
,
"Numine"
,
"Nunapitchuk"
,
"Nunda"
,
"Nunez"
,
"Nunica"
,
"Nunn"
,
"Nunnelly"
,
"Nuremberg"
,
"Nutrioso"
,
"Nuttsville"
,
"Nyac"
,
"Nyack"
,
"Nyssa"
,
"Oacoma"
,
"Oakbluffs"
,
"Oakboro"
,
"Oakdale"
,
"Oakes"
,
"Oakesdale"
,
"Oakfield"
,
"Oakford"
,
"Oakhall"
,
"Oakham"
,
"Oakhurst"
,
"Oaklawn"
,
"Oaklyn"
,
"Oakman"
,
"Oakmont"
,
"Oaks"
,
"Oakton"
,
"Oaktown"
,
"Oakvale"
,
"Oakview"
,
"Oakville"
,
"Oark"
,
"Oatman"
,
"Obernburg"
,
"Oberon"
,
"Obert"
,
"Obion"
,
"Obrien"
,
"Ocala"
,
"Ocate"
,
"Occoquan"
,
"Oceana"
,
"Oceano"
,
"Oceanport"
,
"Oceanview"
,
"Oceanville"
,
"Oceola"
,
"Ochelata"
,
"Ocheyedan"
,
"Ochopee"
,
"Ocilla"
,
"Ocoee"
,
"Oconee"
,
"Oconomowoc"
,
"Oconto"
,
"Ocotillo"
,
"Ocracoke"
,
"Odanah"
,
"Odebolt"
,
"Odell"
,
"Odem"
,
"Oden"
,
"Odenton"
,
"Odenville"
,
"Odon"
,
"Odonnell"
,
"Odum"
,
"Oelrichs"
,
"Oelwein"
,
"Ofallon"
,
"Offerle"
,
"Offerman"
,
"Offutt"
,
"Ogallah"
,
"Ogallala"
,
"Ogdensburg"
,
"Ogema"
,
"Ogilvie"
,
"Oglala"
,
"Oglesby"
,
"Oglethorpe"
,
"Ogunquit"
,
"Ohatchee"
,
"Ohiopyle"
,
"Ohiowa"
,
"Ohley"
,
"Ohlman"
,
"Oilmont"
,
"Oilton"
,
"Oiltrough"
,
"Oilville"
,
"Ojai"
,
"Okabena"
,
"Okahumpka"
,
"Okanogan"
,
"Okarche"
,
"Okaton"
,
"Okauchee"
,
"Okawville"
,
"Okean"
,
"Okeana"
,
"Okeechobee"
,
"Okeene"
,
"Okemah"
,
"Okemos"
,
"Oketo"
,
"Oklaunion"
,
"Oklawaha"
,
"Oklee"
,
"Okmulgee"
,
"Okoboji"
,
"Okolona"
,
"Okreek"
,
"Oktaha"
,
"Ola"
,
"Olalla"
,
"Olamon"
,
"Olancha"
,
"Olanta"
,
"Olar"
,
"Olathe"
,
"Olaton"
,
"Olcott"
,
"Oldham"
,
"Olds"
,
"Olean"
,
"Olema"
,
"Oley"
,
"Oliveburg"
,
"Olivehurst"
,
"Oliverea"
,
"Olivet"
,
"Olla"
,
"Ollie"
,
"Olmito"
,
"Olmitz"
,
"Olmstead"
,
"Olmsted"
,
"Olmstedville"
,
"Olney"
,
"Olpe"
,
"Olsburg"
,
"Olton"
,
"Olustee"
,
"Olyphant"
,
"Omak"
,
"Omar"
,
"Omena"
,
"Omer"
,
"Omro"
,
"Ona"
,
"Onaga"
,
"Onaka"
,
"Onalaska"
,
"Onamia"
,
"Onancock"
,
"Onarga"
,
"Onawa"
,
"Onaway"
,
"Onchiota"
,
"Oneals"
,
"Oneco"
,
"Onego"
,
"Oneill"
,
"Onekama"
,
"Onemo"
,
"Oneonta"
,
"Ong"
,
"Onia"
,
"Onida"
,
"Onley"
,
"Ono"
,
"Onslow"
,
"Onsted"
,
"Ontonagon"
,
"Ookala"
,
"Oolitic"
,
"Oologah"
,
"Ooltewah"
,
"Oostburg"
,
"Opalocka"
,
"Opdyke"
,
"Opelika"
,
"Opelousas"
,
"Opheim"
,
"Ophelia"
,
"Ophir"
,
"Opolis"
,
"Opp"
,
"Oquawka"
,
"Oquossoc"
,
"Ora"
,
"Oradell"
,
"Oran"
,
"Orangeburg"
,
"Orangefield"
,
"Orangevale"
,
"Orangeville"
,
"Oraville"
,
"Orbisonia"
,
"Orcas"
,
"Ord"
,
"Orderville"
,
"Ordway"
,
"Oreana"
,
"Orefield"
,
"Oregonia"
,
"Oreland"
,
"Orem"
,
"Orford"
,
"Orfordville"
,
"Orgas"
,
"Orick"
,
"Orinda"
,
"Oriska"
,
"Oriskany"
,
"Orla"
,
"Orland"
,
"Orlean"
,
"Orlinda"
,
"Orma"
,
"Ormsby"
,
"Orocovis"
,
"Orondo"
,
"Oronoco"
,
"Oronogo"
,
"Orosi"
,
"Orovada"
,
"Oroville"
,
"Orrick"
,
"Orrin"
,
"Orrington"
,
"Orrstown"
,
"Orrtanna"
,
"Orrum"
,
"Orrville"
,
"Orson"
,
"Orting"
,
"Ortley"
,
"Ortonville"
,
"Orwigsburg"
,
"Osage"
,
"Osakis"
,
"Osawatomie"
,
"Osburn"
,
"Osceola"
,
"Osco"
,
"Oscoda"
,
"Oshoto"
,
"Oshtemo"
,
"Oskaloosa"
,
"Osmond"
,
"Osnabrock"
,
"Osseo"
,
"Ossian"
,
"Ossineke"
,
"Ossining"
,
"Ossipee"
,
"Osteen"
,
"Osterburg"
,
"Osterville"
,
"Oswegatchie"
,
"Oswego"
,
"Osyka"
,
"Otego"
,
"Otho"
,
"Otisco"
,
"Otisville"
,
"Otley"
,
"Oto"
,
"Otoe"
,
"Otsego"
,
"Otterbein"
,
"Ottertail"
,
"Otterville"
,
"Ottine"
,
"Ottosen"
,
"Ottoville"
,
"Ottsville"
,
"Ottumwa"
,
"Otway"
,
"Otwell"
,
"Ouaquaga"
,
"Ouray"
,
"Outing"
,
"Outlook"
,
"Ouzinkie"
,
"Ovalo"
,
"Ovando"
,
"Ovapa"
,
"Overbrook"
,
"Overgaard"
,
"Overly"
,
"Overpeck"
,
"Overton"
,
"Ovett"
,
"Oviedo"
,
"Owaneco"
,
"Owanka"
,
"Owasco"
,
"Owasso"
,
"Owatonna"
,
"Owego"
,
"Owen"
,
"Owendale"
,
"Owensboro"
,
"Owensburg"
,
"Owensville"
,
"Owenton"
,
"Owings"
,
"Owingsville"
,
"Owlshead"
,
"Owosso"
,
"Owyhee"
,
"Oxbow"
,
"Oxly"
,
"Oyens"
,
"Oysterville"
,
"Ozan"
,
"Ozawkie"
,
"Ozona"
,
"Paauhau"
,
"Paauilo"
,
"Pachuta"
,
"Pacifica"
,
"Packwaukee"
,
"Packwood"
,
"Pacoima"
,
"Pacolet"
,
"Paden"
,
"Padroni"
,
"Paducah"
,
"Pageland"
,
"Pageton"
,
"Paguate"
,
"Pahala"
,
"Pahoa"
,
"Pahokee"
,
"Pahrump"
,
"Paia"
,
"Paicines"
,
"Paige"
,
"Painesdale"
,
"Painesville"
,
"Paintbank"
,
"Painter"
,
"Paintlick"
,
"Painton"
,
"Paintsville"
,
"Paisley"
,
"Pala"
,
"Palacios"
,
"Palatka"
,
"Palco"
,
"Palenville"
,
"Palisades"
,
"Pallmall"
,
"Palmcoast"
,
"Palmdale"
,
"Palmdesert"
,
"Palmer"
,
"Palmerdale"
,
"Palmersville"
,
"Palmerton"
,
"Paloalto"
,
"Palocedro"
,
"Paloma"
,
"Palopinto"
,
"Palouse"
,
"Paloverde"
,
"Paluxy"
,
"Pamplico"
,
"Pamplin"
,
"Pana"
,
"Panaca"
,
"Pangburn"
,
"Panguitch"
,
"Pannamaria"
,
"Panola"
,
"Panora"
,
"Pansey"
,
"Pantego"
,
"Paola"
,
"Paonia"
,
"Papaikou"
,
"Papineau"
,
"Paradis"
,
"Paragonah"
,
"Paragould"
,
"Parcoal"
,
"Pardeesville"
,
"Pardeeville"
,
"Parishville"
,
"Parkdale"
,
"Parker"
,
"Parkerford"
,
"Parkersburg"
,
"Parkesburg"
,
"Parkhall"
,
"Parkin"
,
"Parkman"
,
"Parksley"
,
"Parkston"
,
"Parksville"
,
"Parkton"
,
"Parkville"
,
"Parlier"
,
"Parlin"
,
"Parma"
,
"Parmele"
,
"Parmelee"
,
"Parnell"
,
"Paron"
,
"Parowan"
,
"Parrott"
,
"Parrottsville"
,
"Parryville"
,
"Parshall"
,
"Parsippany"
,
"Parsonsburg"
,
"Partlow"
,
"Pascagoula"
,
"Pasco"
,
"Pascoag"
,
"Pascola"
,
"Paskenta"
,
"Passadumkeag"
,
"Passumpsic"
,
"Pataskala"
,
"Patchogue"
,
"Pateros"
,
"Patillas"
,
"Patoka"
,
"Paton"
,
"Patricksburg"
,
"Patten"
,
"Pattison"
,
"Pattonsburg"
,
"Pattonville"
,
"Paulden"
,
"Paulding"
,
"Paulina"
,
"Paullina"
,
"Paulsboro"
,
"Paupack"
,
"Pavillion"
,
"Pavo"
,
"Pawhuska"
,
"Pawlet"
,
"Pawling"
,
"Pawnee"
,
"Pawneerock"
,
"Pawpaw"
,
"Paxico"
,
"Paxinos"
,
"Paxton"
,
"Paxtonville"
,
"Payette"
,
"Paynesville"
,
"Payneville"
,
"Payson"
,
"Peacham"
,
"Peachbottom"
,
"Peachland"
,
"Peapack"
,
"Pearblossom"
,
"Pearcy"
,
"Pearisburg"
,
"Pearland"
,
"Pearlington"
,
"Pearsall"
,
"Peaster"
,
"Pebworth"
,
"Pecatonica"
,
"Peckville"
,
"Peconic"
,
"Pedricktown"
,
"Peebles"
,
"Peedee"
,
"Peekskill"
,
"Peell"
,
"Peerless"
,
"Peetz"
,
"Peever"
,
"Peggs"
,
"Pegram"
,
"Pejepscot"
,
"Pekin"
,
"Pelahatchie"
,
"Pelion"
,
"Pelkie"
,
"Pella"
,
"Pellston"
,
"Pellville"
,
"Pelsor"
,
"Pelzer"
,
"Pemaquid"
,
"Pemberton"
,
"Pemberville"
,
"Pembina"
,
"Pembine"
,
"Penalosa"
,
"Penargyl"
,
"Penasco"
,
"Pender"
,
"Pendergrass"
,
"Pendleton"
,
"Pendroy"
,
"Penfield"
,
"Pengilly"
,
"Penhook"
,
"Penitas"
,
"Penland"
,
"Pennellville"
,
"Pennington"
,
"Pennlaird"
,
"Pennock"
,
"Pennsauken"
,
"Pennsboro"
,
"Pennsburg"
,
"Pennsville"
,
"Pennville"
,
"Pennyan"
,
"Penobscot"
,
"Penokee"
,
"Penrod"
,
"Penryn"
,
"Pentress"
,
"Pentwater"
,
"Penuelas"
,
"Penwell"
,
"Peoples"
,
"Peosta"
,
"Peotone"
,
"Pepeekeo"
,
"Pepin"
,
"Pepperell"
,
"Pequabuck"
,
"Pequannock"
,
"Pequea"
,
"Peralta"
,
"Perdido"
,
"Perham"
,
"Peridot"
,
"Perkasie"
,
"Perkinston"
,
"Perkinsville"
,
"Perks"
,
"Perley"
,
"Pernell"
,
"Perrin"
,
"Perrineville"
,
"Perrinton"
,
"Perris"
,
"Perronville"
,
"Perryhall"
,
"Perryman"
,
"Perryopolis"
,
"Perrysburg"
,
"Perrysville"
,
"Perryton"
,
"Perryville"
,
"Pescadero"
,
"Peshastin"
,
"Peshtigo"
,
"Pesotum"
,
"Petaca"
,
"Petaluma"
,
"Peterboro"
,
"Peterborough"
,
"Peterman"
,
"Petersham"
,
"Peterstown"
,
"Petoskey"
,
"Petrey"
,
"Petrolia"
,
"Petros"
,
"Pettibone"
,
"Pettigrew"
,
"Pettisville"
,
"Pettit"
,
"Pettus"
,
"Pevely"
,
"Pewamo"
,
"Pewaukee"
,
"Peyton"
,
"Peytona"
,
"Peytonsburg"
,
"Pfafftown"
,
"Pfeifer"
,
"Pflugerville"
,
"Pharoah"
,
"Pharr"
,
"Pheba"
,
"Phelan"
,
"Phenix"
,
"Philadelphia"
,
"Philipp"
,
"Philippi"
,
"Philipsburg"
,
"Phillipsburg"
,
"Phillipsville"
,
"Philmont"
,
"Philo"
,
"Philomath"
,
"Philomont"
,
"Philpot"
,
"Phippsburg"
,
"Phoenixville"
,
"Piasa"
,
"Picacho"
,
"Picher"
,
"Pickens"
,
"Pickerington"
,
"Pickrell"
,
"Pickstown"
,
"Pickton"
,
"Picorivera"
,
"Piedra"
,
"Piercefield"
,
"Pierceton"
,
"Pierceville"
,
"Piercy"
,
"Piermont"
,
"Pierpont"
,
"Pierron"
,
"Pierz"
,
"Pietown"
,
"Piffard"
,
"Piggott"
,
"Piketon"
,
"Pikeville"
,
"Pilger"
,
"Pillager"
,
"Pilottown"
,
"Pima"
,
"Pimento"
,
"Pinckard"
,
"Pinckney"
,
"Pinckneyville"
,
"Pinconning"
,
"Pindall"
,
"Pinebank"
,
"Pinebluffs"
,
"Pinebrook"
,
"Pinebush"
,
"Pinecliffe"
,
"Pinecrest"
,
"Pinedale"
,
"Pinehall"
,
"Pineknot"
,
"Pineland"
,
"Pineola"
,
"Pinetops"
,
"Pinetown"
,
"Pinetta"
,
"Pineview"
,
"Pineville"
,
"Pinewood"
,
"Pineywoods"
,
"Pingree"
,
"Pinola"
,
"Pinole"
,
"Pinon"
,
"Pinopolis"
,
"Pinson"
,
"Pioche"
,
"Pioneertown"
,
"Pipersville"
,
"Pipestem"
,
"Pipestone"
,
"Pippapasses"
,
"Piqua"
,
"Pirtleville"
,
"Piru"
,
"Piseco"
,
"Pisek"
,
"Pisgah"
,
"Pitcher"
,
"Pitkin"
,
"Pitsburg"
,
"Pitts"
,
"Pittsboro"
,
"Pittsburg"
,
"Pittsford"
,
"Pittstown"
,
"Pittsview"
,
"Pittsville"
,
"Pixley"
,
"Placedo"
,
"Placentia"
,
"Placerville"
,
"Placida"
,
"Placitas"
,
"Plains"
,
"Plainsboro"
,
"Plainview"
,
"Plainville"
,
"Plainwell"
,
"Plaisted"
,
"Plaistow"
,
"Planada"
,
"Plankinton"
,
"Plano"
,
"Plantersville"
,
"Plantsville"
,
"Platina"
,
"Plattekill"
,
"Plattenville"
,
"Platter"
,
"Platteville"
,
"Plattsburg"
,
"Plattsburgh"
,
"Plattsmouth"
,
"Plaucheville"
,
"Pleasantdale"
,
"Pleasanton"
,
"Pleasantville"
,
"Pleasureville"
,
"Pledger"
,
"Plentywood"
,
"Plessis"
,
"Plevna"
,
"Pluckemin"
,
"Plumerville"
,
"Plummer"
,
"Plumtree"
,
"Plumville"
,
"Plympton"
,
"Poca"
,
"Pocahontas"
,
"Pocasset"
,
"Pocatello"
,
"Pocola"
,
"Pocopson"
,
"Poestenkill"
,
"Polacca"
,
"Polkton"
,
"Polkville"
,
"Pollocksville"
,
"Pollok"
,
"Polson"
,
"Polvadera"
,
"Pomaria"
,
"Pomerene"
,
"Pomeroy"
,
"Pomeroyton"
,
"Pomfret"
,
"Ponape"
,
"Ponca"
,
"Ponchatoula"
,
"Ponderay"
,
"Ponderosa"
,
"Ponemah"
,
"Poneto"
,
"Ponsford"
,
"Pontotoc"
,
"Pooler"
,
"Poolesville"
,
"Poolville"
,
"Popejoy"
,
"Poplarville"
,
"Poquonock"
,
"Porum"
,
"Posen"
,
"Poseyville"
,
"Poskin"
,
"Postelle"
,
"Poston"
,
"Postville"
,
"Poteau"
,
"Potecasi"
,
"Poteet"
,
"Poth"
,
"Potosi"
,
"Potrero"
,
"Potsdam"
,
"Potter"
,
"Pottersville"
,
"Potterville"
,
"Pottsboro"
,
"Pottstown"
,
"Pottsville"
,
"Potwin"
,
"Poughquag"
,
"Poulan"
,
"Poulsbo"
,
"Poultney"
,
"Poway"
,
"Powderhorn"
,
"Powderly"
,
"Powellsville"
,
"Powellton"
,
"Powellville"
,
"Powersite"
,
"Powersville"
,
"Powhatan"
,
"Powhattan"
,
"Pownal"
,
"Poyen"
,
"Poynette"
,
"Poynor"
,
"Poyntelle"
,
"Poysippi"
,
"Prather"
,
"Pratts"
,
"Prattsburg"
,
"Prattshollow"
,
"Prattsville"
,
"Prattville"
,
"Preble"
,
"Premont"
,
"Prenter"
,
"Prentiss"
,
"Presho"
,
"Presidio"
,
"Prestonsburg"
,
"Prewitt"
,
"Pricedale"
,
"Prichard"
,
"Priddy"
,
"Primghar"
,
"Princeville"
,
"Princewick"
,
"Prineville"
,
"Pringle"
,
"Prinsburg"
,
"Printer"
,
"Pritchett"
,
"Proberta"
,
"Procious"
,
"Proctorsville"
,
"Proctorville"
,
"Progreso"
,
"Prole"
,
"Prompton"
,
"Prophetstown"
,
"Prosperity"
,
"Prosser"
,
"Protection"
,
"Protem"
,
"Protivin"
,
"Provencal"
,
"Providence"
,
"Provo"
,
"Pruden"
,
"Prudenville"
,
"Prue"
,
"Pryor"
,
"Pryse"
,
"Puckett"
,
"Puertoreal"
,
"Pukwana"
,
"Pulcifer"
,
"Pulteney"
,
"Pultneyville"
,
"Puncheon"
,
"Pungoteague"
,
"Punxsutawney"
,
"Puposky"
,
"Purcellville"
,
"Purdin"
,
"Purdon"
,
"Purdum"
,
"Purdy"
,
"Purdys"
,
"Purgitsville"
,
"Purlear"
,
"Purling"
,
"Purmela"
,
"Pursglove"
,
"Purvis"
,
"Puryear"
,
"Putnamville"
,
"Putney"
,
"Puunene"
,
"Puxico"
,
"Puyallup"
,
"Pyatt"
,
"Pylesville"
,
"Pyote"
,
"Pyrites"
,
"Quakake"
,
"Quakerstreet"
,
"Quakertown"
,
"Quanah"
,
"Quapaw"
,
"Quarryville"
,
"Quartzsite"
,
"Quasqueton"
,
"Quebeck"
,
"Quebradillas"
,
"Quechee"
,
"Queenanne"
,
"Queenstown"
,
"Quemado"
,
"Quenemo"
,
"Questa"
,
"Quicksburg"
,
"Quilcene"
,
"Quimby"
,
"Quinault"
,
"Quinby"
,
"Quincy"
,
"Quinebaug"
,
"Quinlan"
,
"Quinnesec"
,
"Quinnimont"
,
"Quinque"
,
"Quinter"
,
"Quinton"
,
"Quinwood"
,
"Quitaque"
,
"Quitman"
,
"Qulin"
,
"Quogue"
,
"Raceland"
,
"Racine"
,
"Rackerby"
,
"Radcliff"
,
"Radford"
,
"Radisson"
,
"Radnor"
,
"Radom"
,
"Raeford"
,
"Ragland"
,
"Ragley"
,
"Rago"
,
"Ragsdale"
,
"Rahway"
,
"Raiford"
,
"Rainelle"
,
"Rainier"
,
"Rains"
,
"Rainsville"
,
"Ralls"
,
"Ramage"
,
"Ramah"
,
"Ramer"
,
"Ramey"
,
"Ramona"
,
"Ramsay"
,
"Ramseur"
,
"Ranburne"
,
"Ranchester"
,
"Rancocas"
,
"Randalia"
,
"Randallstown"
,
"Randle"
,
"Randleman"
,
"Randlett"
,
"Randsburg"
,
"Rangeley"
,
"Rangely"
,
"Ranger"
,
"Ransomville"
,
"Ranson"
,
"Rantoul"
,
"Rapelje"
,
"Raphine"
,
"Rapidan"
,
"Rarden"
,
"Ratcliff"
,
"Rathdrum"
,
"Raton"
,
"Rattan"
,
"Ravena"
,
"Ravencliff"
,
"Ravendale"
,
"Ravenden"
,
"Ravenel"
,
"Ravenna"
,
"Ravensdale"
,
"Ravenswood"
,
"Ravenwood"
,
"Ravia"
,
"Ravinia"
,
"Rawl"
,
"Rawlings"
,
"Rawlins"
,
"Rawson"
,
"Raybrook"
,
"Rayland"
,
"Rayle"
,
"Raymondville"
,
"Raymore"
,
"Rayne"
,
"Raynesford"
,
"Raynham"
,
"Raysal"
,
"Rayville"
,
"Raywick"
,
"Raywood"
,
"Rea"
,
"Reader"
,
"Readfield"
,
"Reading"
,
"Readington"
,
"Readlyn"
,
"Readsboro"
,
"Readstown"
,
"Readyville"
,
"Realitos"
,
"Reamstown"
,
"Reardan"
,
"Reasnor"
,
"Rebersburg"
,
"Rebuck"
,
"Rectortown"
,
"Redan"
,
"Redart"
,
"Redash"
,
"Redbank"
,
"Redbanks"
,
"Redby"
,
"Redcliff"
,
"Redcrest"
,
"Reddell"
,
"Reddick"
,
"Redding"
,
"Redfield"
,
"Redford"
,
"Redfox"
,
"Redhook"
,
"Redig"
,
"Redkey"
,
"Redlands"
,
"Redlion"
,
"Redmon"
,
"Redondo"
,
"Redowl"
,
"Redrock"
,
"Redstar"
,
"Redvale"
,
"Redwater"
,
"Redway"
,
"Redwing"
,
"Reeder"
,
"Reeders"
,
"Reedley"
,
"Reeds"
,
"Reedsburg"
,
"Reedsport"
,
"Reedsville"
,
"Reedville"
,
"Reelsville"
,
"Reeseville"
,
"Reesville"
,
"Reevesville"
,
"Reform"
,
"Refton"
,
"Refugio"
,
"Regan"
,
"Register"
,
"Rehobeth"
,
"Rehoboth"
,
"Rehrersburg"
,
"Reidsville"
,
"Reidville"
,
"Reinbeck"
,
"Reinholds"
,
"Reisterstown"
,
"Reklaw"
,
"Reliance"
,
"Rembert"
,
"Remer"
,
"Remlap"
,
"Remsen"
,
"Remsenburg"
,
"Renalara"
,
"Renfrew"
,
"Renick"
,
"Renner"
,
"Reno"
,
"Renovo"
,
"Rentiesville"
,
"Renton"
,
"Rentz"
,
"Renville"
,
"Renwick"
,
"Repton"
,
"Resaca"
,
"Reseda"
,
"Retsof"
,
"Reva"
,
"Revelo"
,
"Revillo"
,
"Revloc"
,
"Rew"
,
"Rewey"
,
"Rexburg"
,
"Rexford"
,
"Rexmont"
,
"Rexville"
,
"Reydell"
,
"Reydon"
,
"Reyno"
,
"Reynoldsburg"
,
"Reynoldsville"
,
"Rhame"
,
"Rheems"
,
"Rhinebeck"
,
"Rhinecliff"
,
"Rhinehart"
,
"Rhineland"
,
"Rhinelander"
,
"Rhoadesville"
,
"Rhodelia"
,
"Rhodell"
,
"Rhodesdale"
,
"Rhodhiss"
,
"Rialto"
,
"Ribera"
,
"Riceboro"
,
"Ricetown"
,
"Riceville"
,
"Richardsville"
,
"Richardton"
,
"Richburg"
,
"Richey"
,
"Richeyville"
,
"Richford"
,
"Richland"
,
"Richlands"
,
"Richmonddale"
,
"Richmondville"
,
"Richton"
,
"Richvale"
,
"Richview"
,
"Richville"
,
"Richwood"
,
"Richwoods"
,
"Ricketts"
,
"Rickman"
,
"Rickreall"
,
"Riddlesburg"
,
"Riddleton"
,
"Riderwood"
,
"Ridgecrest"
,
"Ridgedale"
,
"Ridgefield"
,
"Ridgeland"
,
"Ridgeley"
,
"Ridgely"
,
"Ridgeview"
,
"Ridgeville"
,
"Ridgeway"
,
"Ridgewood"
,
"Ridott"
,
"Riegelsville"
,
"Riegelwood"
,
"Rienzi"
,
"Riesel"
,
"Rifton"
,
"Rigby"
,
"Riggins"
,
"Rileyville"
,
"Rillito"
,
"Rillton"
,
"Rimersburg"
,
"Rimini"
,
"Rinard"
,
"Rincon"
,
"Rindge"
,
"Riner"
,
"Rineyville"
,
"Ringgold"
,
"Ringle"
,
"Ringling"
,
"Ringoes"
,
"Ringold"
,
"Ringsted"
,
"Ringtown"
,
"Ringwood"
,
"Rion"
,
"Riparius"
,
"Ripon"
,
"Rippey"
,
"Ripplemead"
,
"Rippon"
,
"Ririe"
,
"Risco"
,
"Rison"
,
"Ritner"
,
"Rittman"
,
"Ritzville"
,
"Riva"
,
"Riverdale"
,
"Riveredge"
,
"Riverhead"
,
"Riverton"
,
"Rivervale"
,
"Riverview"
,
"Rives"
,
"Rivesville"
,
"Rixeyville"
,
"Rixford"
,
"Roachdale"
,
"Roann"
,
"Roanoke"
,
"Roark"
,
"Robards"
,
"Robbinston"
,
"Robbinsville"
,
"Robeline"
,
"Robersonville"
,
"Robertlee"
,
"Robertsburg"
,
"Robertsdale"
,
"Robertsville"
,
"Robesonia"
,
"Robinette"
,
"Robins"
,
"Robinsonville"
,
"Robson"
,
"Robstown"
,
"Roby"
,
"Roca"
,
"Rochdale"
,
"Rochelle"
,
"Rocheport"
,
"Rochert"
,
"Rochford"
,
"Rociada"
,
"Rockdale"
,
"Rockfall"
,
"Rockfield"
,
"Rockhall"
,
"Rockham"
,
"Rockholds"
,
"Rockhouse"
,
"Rockingham"
,
"Rocklin"
,
"Rockmart"
,
"Rockport"
,
"Rockton"
,
"Rockvale"
,
"Rockview"
,
"Rockville"
,
"Rockwall"
,
"Rockwood"
,
"Rodanthe"
,
"Roderfield"
,
"Rodessa"
,
"Rodman"
,
"Roduco"
,
"Roebling"
,
"Roff"
,
"Rogerson"
,
"Rogersville"
,
"Roggen"
,
"Rohrersville"
,
"Rolesville"
,
"Rolette"
,
"Rolfe"
,
"Rolla"
,
"Rollin"
,
"Rollingstone"
,
"Rollinsford"
,
"Rollinsville"
,
"Roma"
,
"Romayor"
,
"Rombauer"
,
"Romney"
,
"Ronan"
,
"Ronceverte"
,
"Ronco"
,
"Ronda"
,
"Ronkonkoma"
,
"Ronks"
,
"Roopville"
,
"Rootstown"
,
"Roper"
,
"Ropesville"
,
"Rosalia"
,
"Rosamond"
,
"Rosanky"
,
"Rosario"
,
"Rosburg"
,
"Roscoe"
,
"Roscommon"
,
"Roseau"
,
"Roseboom"
,
"Roseboro"
,
"Roseburg"
,
"Rosedale"
,
"Roselawn"
,
"Roselle"
,
"Rosemead"
,
"Rosemont"
,
"Rosendale"
,
"Rosenhayn"
,
"Roseville"
,
"Rosewood"
,
"Rosharon"
,
"Rosholt"
,
"Rosiclare"
,
"Rosie"
,
"Rosine"
,
"Roslyn"
,
"Rosman"
,
"Rossburg"
,
"Rosser"
,
"Rossiter"
,
"Rosslyn"
,
"Rossmore"
,
"Rosston"
,
"Rossville"
,
"Roswell"
,
"Rota"
,
"Rotan"
,
"Rothbury"
,
"Rothsay"
,
"Rothville"
,
"Rougemont"
,
"Rougon"
,
"Roundo"
,
"Roundrock"
,
"Rouseville"
,
"Rouzerville"
,
"Rover"
,
"Rowan"
,
"Rowesville"
,
"Rowlesburg"
,
"Rowlett"
,
"Rowletts"
,
"Roxana"
,
"Roxboro"
,
"Roxie"
,
"Roxobel"
,
"Roxton"
,
"Royalton"
,
"Royersford"
,
"Royston"
,
"Rozel"
,
"Rozet"
,
"Rubicon"
,
"Ruckersville"
,
"Rudd"
,
"Rueter"
,
"Rufe"
,
"Ruffin"
,
"Ruffsdale"
,
"Rugby"
,
"Ruidoso"
,
"Ruleville"
,
"Rulo"
,
"Rumely"
,
"Rumney"
,
"Rumsey"
,
"Rumson"
,
"Runa"
,
"Runnells"
,
"Runnemede"
,
"Rupert"
,
"Ruralhall"
,
"Rushford"
,
"Rushland"
,
"Rushsylvania"
,
"Rushville"
,
"Ruskin"
,
"Ruso"
,
"Russellton"
,
"Russellville"
,
"Russiaville"
,
"Rustburg"
,
"Ruston"
,
"Rutherfordton"
,
"Rutheron"
,
"Ruthton"
,
"Ruthven"
,
"Ruthville"
,
"Rydal"
,
"Ryde"
,
"Ryderwood"
,
"Ryland"
,
"Sabael"
,
"Sabanahoyos"
,
"Sabanaseca"
,
"Sabattus"
,
"Sabetha"
,
"Sabillasville"
,
"Sabin"
,
"Sabinal"
,
"Sabinsville"
,
"Sabula"
,
"Sacaton"
,
"Saco"
,
"Sacul"
,
"Sadieville"
,
"Sadorus"
,
"Sadsburyville"
,
"Saegertown"
,
"Saffell"
,
"Safford"
,
"Sagamore"
,
"Sagaponack"
,
"Sagle"
,
"Sagola"
,
"Saguache"
,
"Sahuarita"
,
"Saipan"
,
"Salado"
,
"Salamanca"
,
"Saldee"
,
"Salem"
,
"Salemburg"
,
"Salesville"
,
"Salford"
,
"Salfordville"
,
"Salida"
,
"Salinas"
,
"Salineno"
,
"Salineville"
,
"Salitpa"
,
"Salix"
,
"Salkum"
,
"Salley"
,
"Sallis"
,
"Sallisaw"
,
"Salol"
,
"Salome"
,
"Salterpath"
,
"Salters"
,
"Saltgum"
,
"Saltillo"
,
"Saltlick"
,
"Saltsburg"
,
"Saltville"
,
"Saluda"
,
"Salvisa"
,
"Salyer"
,
"Salyersville"
,
"Samantha"
,
"Samaria"
,
"Samburg"
,
"Samnorwood"
,
"Sapulpa"
,
"Saragosa"
,
"Sarahann"
,
"Sarahsville"
,
"Saraland"
,
"Saranac"
,
"Sarcoxie"
,
"Sardinia"
,
"Sardis"
,
"Sarepta"
,
"Sargeant"
,
"Sargents"
,
"Sargentville"
,
"Sarita"
,
"Sarles"
,
"Sarona"
,
"Saronville"
,
"Sartell"
,
"Sarton"
,
"Sarver"
,
"Sasabe"
,
"Sasakwa"
,
"Saspamco"
,
"Sasser"
,
"Satanta"
,
"Satartia"
,
"Satsop"
,
"Satsuma"
,
"Sattley"
,
"Saucier"
,
"Saugatuck"
,
"Saugerties"
,
"Saugus"
,
"Saukville"
,
"Saulsbury"
,
"Saum"
,
"Saunderstown"
,
"Saunemin"
,
"Sauquoit"
,
"Sausalito"
,
"Sautee"
,
"Savanna"
,
"Saverton"
,
"Savery"
,
"Savona"
,
"Savonburg"
,
"Sawyerville"
,
"Saxapahaw"
,
"Saxe"
,
"Saxeville"
,
"Saxis"
,
"Saxonburg"
,
"Saxton"
,
"Saybrook"
,
"Saylorsburg"
,
"Sayner"
,
"Sayre"
,
"Sayreville"
,
"Sayville"
,
"Scalf"
,
"Scammon"
,
"Scandia"
,
"Scappoose"
,
"Scarbro"
,
"Scarville"
,
"Schaghticoke"
,
"Schaller"
,
"Schaumburg"
,
"Scheller"
,
"Schellsburg"
,
"Schenevus"
,
"Schenley"
,
"Schererville"
,
"Schertz"
,
"Schlater"
,
"Schleswig"
,
"Schley"
,
"Schnecksville"
,
"Schoharie"
,
"Schriever"
,
"Schulenburg"
,
"Schulter"
,
"Schurz"
,
"Schuylerville"
,
"Schwertner"
,
"Scio"
,
"Sciota"
,
"Scipio"
,
"Scituate"
,
"Scobey"
,
"Scooba"
,
"Scottdale"
,
"Scottown"
,
"Scotts"
,
"Scottsboro"
,
"Scottsburg"
,
"Scottsmoor"
,
"Scottsville"
,
"Scottville"
,
"Screven"
,
"Scribner"
,
"Scroggins"
,
"Scuddy"
,
"Seabeck"
,
"Seabrook"
,
"Seacliff"
,
"Seadrift"
,
"Seaford"
,
"Seaforth"
,
"Seagirt"
,
"Seagoville"
,
"Seahurst"
,
"Seale"
,
"Sealston"
,
"Sealy"
,
"Seanor"
,
"Searcy"
,
"Searles"
,
"Searsboro"
,
"Searsmont"
,
"Searsport"
,
"Seaton"
,
"Seatonville"
,
"Seaview"
,
"Sebastopol"
,
"Sebec"
,
"Sebeka"
,
"Sebewaing"
,
"Seboeis"
,
"Seboyeta"
,
"Sebree"
,
"Sebring"
,
"Secaucus"
,
"Seco"
,
"Secor"
,
"Sedalia"
,
"Sedgwick"
,
"Sedley"
,
"Sedona"
,
"Seekonk"
,
"Seeley"
,
"Seelyville"
,
"Seffner"
,
"Seguin"
,
"Seibert"
,
"Seiling"
,
"Seitz"
,
"Sekiu"
,
"Selah"
,
"Selby"
,
"Selbyville"
,
"Selden"
,
"Seligman"
,
"Sellers"
,
"Sellersburg"
,
"Sellersville"
,
"Sells"
,
"Selmer"
,
"Selz"
,
"Semmes"
,
"Semora"
,
"Sena"
,
"Senath"
,
"Senatobia"
,
"Senecaville"
,
"Seney"
,
"Sennett"
,
"Senoia"
,
"Sepulveda"
,
"Sequatchie"
,
"Sequim"
,
"Serafina"
,
"Seree"
,
"Serena"
,
"Servia"
,
"Sesser"
,
"Sevenmile"
,
"Severance"
,
"Severy"
,
"Sevierville"
,
"Sewanee"
,
"Sewaren"
,
"Sewell"
,
"Sewickley"
,
"Sextonville"
,
"Shabbona"
,
"Shacklefords"
,
"Shadydale"
,
"Shadyside"
,
"Shafter"
,
"Shaftsburg"
,
"Shaftsbury"
,
"Shakopee"
,
"Shalimar"
,
"Shallotte"
,
"Shallowater"
,
"Shambaugh"
,
"Shamokin"
,
"Shandaken"
,
"Shandon"
,
"Shaniko"
,
"Shanks"
,
"Shanksville"
,
"Shannock"
,
"Shapleigh"
,
"Sharpes"
,
"Sharples"
,
"Sharps"
,
"Sharpsburg"
,
"Sharpsville"
,
"Sharptown"
,
"Shartlesville"
,
"Shattuc"
,
"Shattuckville"
,
"Shauck"
,
"Shawanee"
,
"Shawanese"
,
"Shawano"
,
"Shawboro"
,
"Shawmut"
,
"Shawneetown"
,
"Shawsville"
,
"Shawville"
,
"Sheakleyville"
,
"Sheboygan"
,
"Shedd"
,
"Sheds"
,
"Shelbiana"
,
"Shelbina"
,
"Shelburn"
,
"Shelburne"
,
"Shelbyville"
,
"Sheldahl"
,
"Sheldonville"
,
"Shellman"
,
"Shellsburg"
,
"Shelly"
,
"Shelocta"
,
"Shepardsville"
,
"Shepherdstown"
,
"Sheppton"
,
"Sherard"
,
"Sherborn"
,
"Sherburn"
,
"Sherburne"
,
"Sherrard"
,
"Sherrodsville"
,
"Shevlin"
,
"Sheyenne"
,
"Shickley"
,
"Shickshinny"
,
"Shidler"
,
"Shiner"
,
"Shingleton"
,
"Shingletown"
,
"Shinhopple"
,
"Shinnston"
,
"Shiocton"
,
"Shippensburg"
,
"Shippenville"
,
"Shipshewana"
,
"Shirland"
,
"Shirleysburg"
,
"Shiro"
,
"Shoals"
,
"Shobonier"
,
"Shohola"
,
"Shokan"
,
"Shongaloo"
,
"Shopville"
,
"Shoreham"
,
"Shorter"
,
"Shorterville"
,
"Shortsville"
,
"Shoshone"
,
"Shoshoni"
,
"Showell"
,
"Showlow"
,
"Shreve"
,
"Shrewsbury"
,
"Shubert"
,
"Shubuta"
,
"Shulerville"
,
"Shullsburg"
,
"Shumway"
,
"Shunk"
,
"Shuqualak"
,
"Shushan"
,
"Shutesbury"
,
"Sias"
,
"Sicklerville"
,
"Sidell"
,
"Sidman"
,
"Sidnaw"
,
"Sidon"
,
"Sieper"
,
"Sierraville"
,
"Sigel"
,
"Sigourney"
,
"Sigurd"
,
"Sikes"
,
"Sikeston"
,
"Siler"
,
"Silerton"
,
"Siletz"
,
"Silex"
,
"Siloam"
,
"Silsbee"
,
"Siluria"
,
"Silva"
,
"Silvana"
,
"Silverado"
,
"Silvercliff"
,
"Silverdale"
,
"Silverpeak"
,
"Silverplume"
,
"Silverstar"
,
"Silverstreet"
,
"Silverton"
,
"Silverwood"
,
"Silvis"
,
"Simla"
,
"Simmesport"
,
"Simms"
,
"Simonton"
,
"Simpsonville"
,
"Simsboro"
,
"Simsbury"
,
"Sinclairville"
,
"Singer"
,
"Sinnamahoning"
,
"Sinsinawa"
,
"Sinton"
,
"Sipesville"
,
"Sipsey"
,
"Sisseton"
,
"Sisters"
,
"Sistersville"
,
"Sitka"
,
"Sixes"
,
"Sixmile"
,
"Skamokawa"
,
"Skandia"
,
"Skanee"
,
"Skellytown"
,
"Skelton"
,
"Skene"
,
"Skiatook"
,
"Skidmore"
,
"Skillman"
,
"Skippack"
,
"Skippers"
,
"Skipperville"
,
"Skipwith"
,
"Skokie"
,
"Skowhegan"
,
"Skykomish"
,
"Skyland"
,
"Slade"
,
"Slagle"
,
"Slanesville"
,
"Slatedale"
,
"Slatersville"
,
"Slatington"
,
"Slaton"
,
"Slaughters"
,
"Slayden"
,
"Slayton"
,
"Sleepyeye"
,
"Slemp"
,
"Slickville"
,
"Slidell"
,
"Sligo"
,
"Slinger"
,
"Sloansville"
,
"Sloatsburg"
,
"Slocomb"
,
"Sloughhouse"
,
"Slovan"
,
"Smackover"
,
"Smallwood"
,
"Smarr"
,
"Smartt"
,
"Smartville"
,
"Smelterville"
,
"Smethport"
,
"Smicksburg"
,
"Smilax"
,
"Smiley"
,
"Smithboro"
,
"Smithburg"
,
"Smithdale"
,
"Smithers"
,
"Smithland"
,
"Smiths"
,
"Smithsburg"
,
"Smithshire"
,
"Smithton"
,
"Smithtown"
,
"Smithville"
,
"Smithwick"
,
"Smoaks"
,
"Smock"
,
"Smoketown"
,
"Smolan"
,
"Smoot"
,
"Smyer"
,
"Sneads"
,
"Sneedville"
,
"Snelling"
,
"Snellville"
,
"Snohomish"
,
"Snoqualmie"
,
"Snover"
,
"Snowmass"
,
"Snowville"
,
"Snydersburg"
,
"Socorro"
,
"Soddy"
,
"Sodus"
,
"Solano"
,
"Solebury"
,
"Soledad"
,
"Solen"
,
"Solgohachia"
,
"Solomons"
,
"Solsberry"
,
"Solsville"
,
"Solvang"
,
"Solway"
,
"Somerdale"
,
"Somersville"
,
"Somersworth"
,
"Somerton"
,
"Somis"
,
"Somonauk"
,
"Sondheimer"
,
"Sonoita"
,
"Sontag"
,
"Sonyea"
,
"Sopchoppy"
,
"Soper"
,
"Soperton"
,
"Soquel"
,
"Sorento"
,
"Sorrento"
,
"Soso"
,
"Soudan"
,
"Souder"
,
"Soudersburg"
,
"Souderton"
,
"Soulsbyville"
,
"Souris"
,
"Spanaway"
,
"Spangler"
,
"Spanishburg"
,
"Sparkill"
,
"Sparks"
,
"Sparland"
,
"Sparr"
,
"Sparrowbush"
,
"Spartanburg"
,
"Spartansburg"
,
"Spavinaw"
,
"Speaks"
,
"Spearfish"
,
"Spearman"
,
"Spearsville"
,
"Spearville"
,
"Speculator"
,
"Speer"
,
"Speight"
,
"Spelter"
,
"Spencerport"
,
"Spencertown"
,
"Spencerville"
,
"Speonk"
,
"Sperryville"
,
"Spiceland"
,
"Spicer"
,
"Spicewood"
,
"Spickard"
,
"Spillville"
,
"Spindale"
,
"Spinnerstown"
,
"Spiritwood"
,
"Spivey"
,
"Splendora"
,
"Spofford"
,
"Spooner"
,
"Spotswood"
,
"Spotsylvania"
,
"Spottsville"
,
"Spottswood"
,
"Spraggs"
,
"Spragueville"
,
"Sprakers"
,
"Sprigg"
,
"Springboro"
,
"Springbrook"
,
"Springdale"
,
"Springer"
,
"Springerton"
,
"Springerville"
,
"Springhope"
,
"Springhouse"
,
"Springlick"
,
"Springport"
,
"Springs"
,
"Springtown"
,
"Springvale"
,
"Springville"
,
"Springwater"
,
"Sprott"
,
"Spurgeon"
,
"Spurger"
,
"Spurlock"
,
"Spurlockville"
,
"Squires"
,
"Staatsburg"
,
"Stacyville"
,
"Staffordville"
,
"Stahlstown"
,
"Stambaugh"
,
"Stamps"
,
"Stanaford"
,
"Stanardsville"
,
"Stanberry"
,
"Stanchfield"
,
"Stanfield"
,
"Stanfordville"
,
"Stanleytown"
,
"Stantonsburg"
,
"Stantonville"
,
"Stanville"
,
"Stanwood"
,
"Staplehurst"
,
"Staples"
,
"Starbuck"
,
"Starford"
,
"Starke"
,
"Starks"
,
"Starksboro"
,
"Starkville"
,
"Starkweather"
,
"Starrucca"
,
"Startex"
,
"Statenville"
,
"Statesboro"
,
"Statesville"
,
"Statham"
,
"Stayton"
,
"Steamburg"
,
"Stedman"
,
"Steedman"
,
"Steeleville"
,
"Steelville"
,
"Steens"
,
"Steff"
,
"Steffenville"
,
"Steger"
,
"Stehekin"
,
"Steinauer"
,
"Steinhatchee"
,
"Stendal"
,
"Stephan"
,
"Stephensburg"
,
"Stephentown"
,
"Stephenville"
,
"Steptoe"
,
"Sterlington"
,
"Sterrett"
,
"Stetsonville"
,
"Steubenville"
,
"Stevensburg"
,
"Stevensville"
,
"Stevinson"
,
"Stewardson"
,
"Stewartstown"
,
"Stewartsville"
,
"Stewartville"
,
"Sthelena"
,
"Stickney"
,
"Stidham"
,
"Stigler"
,
"Stilesville"
,
"Stillmore"
,
"Stillwell"
,
"Stilwell"
,
"Stinesville"
,
"Stinnett"
,
"Stirrat"
,
"Stites"
,
"Stittville"
,
"Stitzer"
,
"Stockdale"
,
"Stockertown"
,
"Stockett"
,
"Stockland"
,
"Stockport"
,
"Stockville"
,
"Stockwell"
,
"Stoddard"
,
"Stokesdale"
,
"Stollings"
,
"Stoneboro"
,
"Stonefort"
,
"Stonega"
,
"Stoneham"
,
"Stoneville"
,
"Stonington"
,
"Stonybottom"
,
"Stonybrook"
,
"Stonyford"
,
"Storden"
,
"Stormville"
,
"Storrie"
,
"Storrs"
,
"Stottville"
,
"Stoughton"
,
"Stoutland"
,
"Stoutsville"
,
"Stovall"
,
"Stover"
,
"Stowe"
,
"Stowell"
,
"Stoy"
,
"Stoystown"
,
"Strabane"
,
"Strafford"
,
"Strandburg"
,
"Strandquist"
,
"Strang"
,
"Strasburg"
,
"Stratham"
,
"Strathcona"
,
"Strathmere"
,
"Strathmore"
,
"Strattanville"
,
"Straughn"
,
"Strausstown"
,
"Strawn"
,
"Streamwood"
,
"Streator"
,
"Streeter"
,
"Streetman"
,
"Streetsboro"
,
"Stringer"
,
"Stringtown"
,
"Stroh"
,
"Stromsburg"
,
"Stronghurst"
,
"Stroud"
,
"Stroudsburg"
,
"Strunk"
,
"Struthers"
,
"Stryker"
,
"Strykersville"
,
"Studley"
,
"Stumptown"
,
"Sturdivant"
,
"Sturgis"
,
"Sturkie"
,
"Sturtevant"
,
"Suamico"
,
"Subiaco"
,
"Sublette"
,
"Sublime"
,
"Sublimity"
,
"Succasunna"
,
"Suches"
,
"Sudbury"
,
"Sudith"
,
"Sudlersville"
,
"Suffern"
,
"Suffield"
,
"Sugarland"
,
"Sugarloaf"
,
"Sugartown"
,
"Sugartree"
,
"Sula"
,
"Sulligent"
,
"Sultana"
,
"Sumas"
,
"Sumerco"
,
"Sumerduck"
,
"Sumiton"
,
"Summerdale"
,
"Summerfield"
,
"Summerland"
,
"Summerlee"
,
"Summershade"
,
"Summersville"
,
"Summerton"
,
"Summertown"
,
"Summerville"
,
"Summit"
,
"Summitville"
,
"Sumneytown"
,
"Sumpter"
,
"Sumrall"
,
"Sumterville"
,
"Sunapee"
,
"Sunbright"
,
"Sunburg"
,
"Sunburst"
,
"Sunbury"
,
"Suncook"
,
"Sundance"
,
"Sunderland"
,
"Sunfield"
,
"Sunland"
,
"Sunman"
,
"Sunnyside"
,
"Sunnysouth"
,
"Sunol"
,
"Sunray"
,
"Supai"
,
"Suplee"
,
"Suquamish"
,
"Surgoinsville"
,
"Suring"
,
"Surrency"
,
"Surry"
,
"Susank"
,
"Susanville"
,
"Susquehanna"
,
"Sutersville"
,
"Sutherlin"
,
"Sutter"
,
"Suwanee"
,
"Suwannee"
,
"Svea"
,
"Swainsboro"
,
"Swaledale"
,
"Swampscott"
,
"Swannanoa"
,
"Swansboro"
,
"Swansea"
,
"Swanton"
,
"Swanville"
,
"Swanwick"
,
"Swartswood"
,
"Swartz"
,
"Swayzee"
,
"Swedeborg"
,
"Swedesboro"
,
"Swedesburg"
,
"Sweeden"
,
"Sweeny"
,
"Sweetbriar"
,
"Sweetgrass"
,
"Sweetland"
,
"Sweetser"
,
"Sweetwater"
,
"Swengel"
,
"Swepsonville"
,
"Swifton"
,
"Swiftown"
,
"Swiftwater"
,
"Swink"
,
"Swisher"
,
"Switchback"
,
"Swoope"
,
"Sybertsville"
,
"Sykeston"
,
"Sykesville"
,
"Sylacauga"
,
"Sylmar"
,
"Sylva"
,
"Symsonia"
,
"Syosset"
,
"Taberg"
,
"Tabernash"
,
"Tabiona"
,
"Tabor"
,
"Tacna"
,
"Tacoma"
,
"Taconic"
,
"Taconite"
,
"Tafton"
,
"Taftsville"
,
"Taftville"
,
"Tahlequah"
,
"Tahoka"
,
"Taholah"
,
"Tahuya"
,
"Taiban"
,
"Taintor"
,
"Talala"
,
"Talbert"
,
"Talbot"
,
"Talbott"
,
"Talbotton"
,
"Talco"
,
"Talcott"
,
"Talihina"
,
"Talisheek"
,
"Talladega"
,
"Tallapoosa"
,
"Tallassee"
,
"Tallega"
,
"Tallevast"
,
"Tallmadge"
,
"Tallman"
,
"Tallmansville"
,
"Tallula"
,
"Tallulah"
,
"Talmage"
,
"Talmo"
,
"Taloga"
,
"Talpa"
,
"Tama"
,
"Tamaqua"
,
"Tamaroa"
,
"Tamassee"
,
"Tamiment"
,
"Tamms"
,
"Tampico"
,
"Tams"
,
"Tamworth"
,
"Taneytown"
,
"Taneyville"
,
"Tangier"
,
"Tangipahoa"
,
"Tanner"
,
"Tannersville"
,
"Taopi"
,
"Taplin"
,
"Tapoco"
,
"Tappahannock"
,
"Tappan"
,
"Tappen"
,
"Tarboro"
,
"Tarentum"
,
"Tarheel"
,
"Tariffville"
,
"Tarkio"
,
"Tarpley"
,
"Tarrs"
,
"Tarzana"
,
"Tasley"
,
"Taswell"
,
"Tatamy"
,
"Tateville"
,
"Tatum"
,
"Tatums"
,
"Taunton"
,
"Tavares"
,
"Tavernier"
,
"Taylors"
,
"Taylorstown"
,
"Taylorsville"
,
"Taylorville"
,
"Tazewell"
,
"Tchula"
,
"Teaberry"
,
"Teachey"
,
"Teague"
,
"Teaneck"
,
"Teasdale"
,
"Teays"
,
"Tebbetts"
,
"Tecate"
,
"Techny"
,
"Tecopa"
,
"Tecumseh"
,
"Tefft"
,
"Tehachapi"
,
"Tehama"
,
"Tehuacana"
,
"Tekamah"
,
"Tekoa"
,
"Tekonsha"
,
"Telferner"
,
"Telford"
,
"Telluride"
,
"Telogia"
,
"Temecula"
,
"Tempe"
,
"Templeville"
,
"Tenafly"
,
"Tenaha"
,
"Tendoy"
,
"Tenino"
,
"Tenmile"
,
"Tennant"
,
"Tennent"
,
"Tennga"
,
"Tennille"
,
"Tensed"
,
"Tenstrike"
,
"Tererro"
,
"Teresita"
,
"Terlingua"
,
"Terlton"
,
"Termo"
,
"Terraalta"
,
"Terraceia"
,
"Terral"
,
"Terrebonne"
,
"Terrell"
,
"Terreton"
,
"Terril"
,
"Terryville"
,
"Tescott"
,
"Tesla"
,
"Tesuque"
,
"Teton"
,
"Tetonia"
,
"Teutopolis"
,
"Tewksbury"
,
"Texarkana"
,
"Texhoma"
,
"Texico"
,
"Texline"
,
"Texola"
,
"Texon"
,
"Thacker"
,
"Thackerville"
,
"Thatcher"
,
"Thawville"
,
"Thaxton"
,
"Thayne"
,
"Thedford"
,
"Theilman"
,
"Thendara"
,
"Theodosia"
,
"Theriot"
,
"Thermopolis"
,
"Therock"
,
"Thetford"
,
"Thibodaux"
,
"Thida"
,
"Thiells"
,
"Thiensville"
,
"Thomasboro"
,
"Thomaston"
,
"Thomastown"
,
"Thomasville"
,
"Thompsons"
,
"Thompsontown"
,
"Thompsonville"
,
"Thonotosassa"
,
"Thornburg"
,
"Thorndale"
,
"Thorndike"
,
"Thornfield"
,
"Thorntown"
,
"Thornville"
,
"Thornwood"
,
"Thorp"
,
"Thorsby"
,
"Throckmorton"
,
"Thurmond"
,
"Thurmont"
,
"Thurston"
,
"Tibbie"
,
"Tiburon"
,
"Tichnor"
,
"Tickfaw"
,
"Ticonderoga"
,
"Tidioute"
,
"Tiesiding"
,
"Tieton"
,
"Tiff"
,
"Tiffin"
,
"Tifton"
,
"Tigerton"
,
"Tigerville"
,
"Tignall"
,
"Tigrett"
,
"Tijeras"
,
"Tilden"
,
"Tilghman"
,
"Tiline"
,
"Tillamook"
,
"Tillar"
,
"Tillatoba"
,
"Tilleda"
,
"Tiller"
,
"Tillery"
,
"Tillman"
,
"Tillson"
,
"Tilly"
,
"Tilton"
,
"Tiltonsville"
,
"Timberville"
,
"Timblin"
,
"Timbo"
,
"Timewell"
,
"Timken"
,
"Timmonsville"
,
"Timnath"
,
"Timonium"
,
"Timpson"
,
"Tingley"
,
"Tinnie"
,
"Tinsley"
,
"Tintah"
,
"Tiona"
,
"Tionesta"
,
"Tiplersville"
,
"Tippecanoe"
,
"Tippo"
,
"Tipton"
,
"Tiptonville"
,
"Tiro"
,
"Tishomingo"
,
"Tiskilwa"
,
"Titonka"
,
"Titusville"
,
"Tiverton"
,
"Tivoli"
,
"Toaalta"
,
"Toabaja"
,
"Toano"
,
"Tobaccoville"
,
"Tobias"
,
"Tobinsport"
,
"Tobyhanna"
,
"Toccoa"
,
"Toccopola"
,
"Tocsin"
,
"Toddville"
,
"Tofte"
,
"Tohatchi"
,
"Toivola"
,
"Tokeland"
,
"Tokio"
,
"Tolar"
,
"Toler"
,
"Tolland"
,
"Tollesboro"
,
"Tolleson"
,
"Tolley"
,
"Tolna"
,
"Tolono"
,
"Tolu"
,
"Toluca"
,
"Tomah"
,
"Tomahawk"
,
"Tomales"
,
"Tomball"
,
"Tombean"
,
"Tompkinsville"
,
"Tomsbrook"
,
"Tonalea"
,
"Tonasket"
,
"Tonawanda"
,
"Toney"
,
"Tonganoxie"
,
"Tonica"
,
"Tonkawa"
,
"Tonopah"
,
"Tontitown"
,
"Tontobasin"
,
"Tontogany"
,
"Tooele"
,
"Toomsboro"
,
"Toomsuba"
,
"Toone"
,
"Topanga"
,
"Topawa"
,
"Topinabee"
,
"Topock"
,
"Toponas"
,
"Toppenish"
,
"Topping"
,
"Topsfield"
,
"Topsham"
,
"Topton"
,
"Toquerville"
,
"Torbert"
,
"Tornillo"
,
"Torreon"
,
"Torrey"
,
"Torrington"
,
"Toston"
,
"Totowa"
,
"Totz"
,
"Touchet"
,
"Tougaloo"
,
"Toughkenamon"
,
"Toulon"
,
"Toutle"
,
"Tovey"
,
"Towaco"
,
"Towanda"
,
"Towaoc"
,
"Towner"
,
"Townley"
,
"Townshend"
,
"Townsville"
,
"Townville"
,
"Toxey"
,
"Toyah"
,
"Toyahvale"
,
"Tracyton"
,
"Traer"
,
"Trafalgar"
,
"Trafford"
,
"Trampas"
,
"Tranquility"
,
"Trappe"
,
"Traskwood"
,
"Traunik"
,
"Traver"
,
"Treadway"
,
"Treadwell"
,
"Trebloc"
,
"Treece"
,
"Trego"
,
"Treichlers"
,
"Treloar"
,
"Trementina"
,
"Tremont"
,
"Tremonton"
,
"Trempealeau"
,
"Trenary"
,
"Trent"
,
"Tresckow"
,
"Trespiedras"
,
"Trespinos"
,
"Trevett"
,
"Trevor"
,
"Trevorton"
,
"Trexlertown"
,
"Treynor"
,
"Trezevant"
,
"Triadelphia"
,
"Tribbett"
,
"Tridell"
,
"Trilby"
,
"Trilla"
,
"Trimble"
,
"Trimont"
,
"Trinchera"
,
"Trinway"
,
"Trion"
,
"Tripp"
,
"Trivoli"
,
"Trona"
,
"Trosky"
,
"Trosper"
,
"Trotters"
,
"Troup"
,
"Troupsburg"
,
"Troutdale"
,
"Troutville"
,
"Troxelville"
,
"Truckee"
,
"Truesdale"
,
"Trufant"
,
"Truk"
,
"Trumann"
,
"Trumansburg"
,
"Truro"
,
"Truscott"
,
"Trussville"
,
"Truxton"
,
"Tryon"
,
"Tualatin"
,
"Tubac"
,
"Tuckahoe"
,
"Tuckasegee"
,
"Tuckerman"
,
"Tuckerton"
,
"Tucumcari"
,
"Tujunga"
,
"Tula"
,
"Tulare"
,
"Tularosa"
,
"Tuleta"
,
"Tulia"
,
"Tullahassee"
,
"Tullahoma"
,
"Tullos"
,
"Tully"
,
"Tumacacori"
,
"Tunas"
,
"Tunica"
,
"Tunkhannock"
,
"Tunnelton"
,
"Tuolumne"
,
"Tupman"
,
"Turbeville"
,
"Turbotville"
,
"Turlock"
,
"Turner"
,
"Turners"
,
"Turnersburg"
,
"Turnersville"
,
"Turnerville"
,
"Turney"
,
"Turon"
,
"Turpin"
,
"Turrell"
,
"Turtletown"
,
"Turton"
,
"Tuscarawas"
,
"Tuscola"
,
"Tuscumbia"
,
"Tuskahoma"
,
"Tussy"
,
"Tustin"
,
"Tutorkey"
,
"Tutwiler"
,
"Twinbrooks"
,
"Twining"
,
"Twinoaks"
,
"Twinsburg"
,
"Twisp"
,
"Tyaskin"
,
"Tye"
,
"Tylersburg"
,
"Tylersport"
,
"Tylersville"
,
"Tylerton"
,
"Tylertown"
,
"Tynan"
,
"Tyner"
,
"Tyngsboro"
,
"Tyro"
,
"Tyrone"
,
"Tyronza"
,
"Tyty"
,
"Ubly"
,
"Ucon"
,
"Udall"
,
"Udell"
,
"Uehling"
,
"Uhrichsville"
,
"Ukiah"
,
"Uledi"
,
"Ulen"
,
"Ullin"
,
"Ulm"
,
"Ulman"
,
"Ulmer"
,
"Umatilla"
,
"Umbarger"
,
"Umpqua"
,
"Una"
,
"Unadilla"
,
"Uncasville"
,
"Underwood"
,
"Uneeda"
,
"Unicoi"
,
"Uniondale"
,
"Unionhall"
,
"Unionport"
,
"Uniontown"
,
"Unionville"
,
"Uniopolis"
,
"United"
,
"Unityhouse"
,
"Unityville"
,
"University"
,
"Upham"
,
"Upperco"
,
"Upperville"
,
"Upsala"
,
"Upson"
,
"Uravan"
,
"Urbanna"
,
"Uriah"
,
"Urich"
,
"Ursina"
,
"Ute"
,
"Utuado"
,
"Uvalda"
,
"Uvalde"
,
"Uwchland"
,
"Vacaville"
,
"Vacherie"
,
"Vada"
,
"Vader"
,
"Vadis"
,
"Vadito"
,
"Vaiden"
,
"Valatie"
,
"Valders"
,
"Valdese"
,
"Valdez"
,
"Valdosta"
,
"Valencia"
,
"Valentines"
,
"Valera"
,
"Valier"
,
"Vallecito"
,
"Vallecitos"
,
"Vallejo"
,
"Valliant"
,
"Vallonia"
,
"Valmeyer"
,
"Valmy"
,
"Valona"
,
"Valrico"
,
"Valyermo"
,
"Vanalstyne"
,
"Vanceboro"
,
"Vanceburg"
,
"Vancourt"
,
"Vandalia"
,
"Vandemere"
,
"Vandergrift"
,
"Vanderpool"
,
"Vandervoort"
,
"Vandiver"
,
"Vanduser"
,
"Vandyne"
,
"Vanetten"
,
"Vanhorn"
,
"Vanna"
,
"Vanndale"
,
"Vannuys"
,
"Vanorin"
,
"Vansant"
,
"Vantassell"
,
"Vanvleck"
,
"Vanwert"
,
"Vanwyck"
,
"Vanzant"
,
"Vardaman"
,
"Varina"
,
"Varna"
,
"Varnell"
,
"Varney"
,
"Varnville"
,
"Varysburg"
,
"Vashon"
,
"Vass"
,
"Vassalboro"
,
"Vaucluse"
,
"Vaughnsville"
,
"Vauxhall"
,
"Veblen"
,
"Veedersburg"
,
"Vegabaja"
,
"Veguita"
,
"Velarde"
,
"Velma"
,
"Velpen"
,
"Velva"
,
"Venango"
,
"Venedocia"
,
"Venedy"
,
"Veneta"
,
"Venetia"
,
"Ventress"
,
"Ventura"
,
"Venturia"
,
"Veradale"
,
"Verbank"
,
"Verda"
,
"Verdel"
,
"Verden"
,
"Verdigre"
,
"Verdon"
,
"Verdunville"
,
"Vergas"
,
"Vergennes"
,
"Veribest"
,
"Vermillion"
,
"Vermontville"
,
"Verndale"
,
"Verner"
,
"Vernon"
,
"Vernonia"
,
"Verplanck"
,
"Vershire"
,
"Vertrees"
,
"Vesta"
,
"Vestaburg"
,
"Vesuvius"
,
"Vevay"
,
"Vian"
,
"Viborg"
,
"Vicco"
,
"Vici"
,
"Vick"
,
"Vickery"
,
"Victorville"
,
"Vidalia"
,
"Vidor"
,
"Vieques"
,
"Viewtown"
,
"Vilas"
,
"Villalba"
,
"Villamaria"
,
"Villamont"
,
"Villanova"
,
"Villanueva"
,
"Villard"
,
"Villarica"
,
"Villas"
,
"Villisca"
,
"Vilonia"
,
"Vina"
,
"Vincennes"
,
"Vincentown"
,
"Vineburg"
,
"Vineland"
,
"Vinemont"
,
"Vining"
,
"Vinita"
,
"Vinton"
,
"Vintondale"
,
"Viper"
,
"Virden"
,
"Virgie"
,
"Virgilina"
,
"Virginville"
,
"Viroqua"
,
"Visalia"
,
"Vliets"
,
"Voca"
,
"Volant"
,
"Volborg"
,
"Volga"
,
"Volin"
,
"Volney"
,
"Voluntown"
,
"Vona"
,
"Vonore"
,
"Vonormy"
,
"Voorheesville"
,
"Vossburg"
,
"Votaw"
,
"Vowinckel"
,
"Vredenburgh"
,
"Waban"
,
"Wabasha"
,
"Wabasso"
,
"Wabbaseka"
,
"Wabeno"
,
"Waccabuc"
,
"Wachapreague"
,
"Wacissa"
,
"Waconia"
,
"Waddell"
,
"Waddington"
,
"Waddy"
,
"Wadena"
,
"Wadesboro"
,
"Wadestown"
,
"Wadesville"
,
"Wadhams"
,
"Wadley"
,
"Waelder"
,
"Wagarville"
,
"Wagener"
,
"Waggoner"
,
"Wagoner"
,
"Wagontown"
,
"Wagram"
,
"Wahiawa"
,
"Wahkiacus"
,
"Wahkon"
,
"Wahoo"
,
"Wahpeton"
,
"Waialua"
,
"Waianae"
,
"Wailuku"
,
"Waimanalo"
,
"Waimea"
,
"Wainscott"
,
"Waipahu"
,
"Waiteville"
,
"Waitsburg"
,
"Waitsfield"
,
"Waka"
,
"Wakarusa"
,
"Wakeeney"
,
"Wakeman"
,
"Wakenda"
,
"Wakita"
,
"Wakonda"
,
"Wakpala"
,
"Wakulla"
,
"Walburg"
,
"Waldenburg"
,
"Waldoboro"
,
"Waldport"
,
"Waldwick"
,
"Wales"
,
"Waleska"
,
"Walford"
,
"Walhalla"
,
"Walhonding"
,
"Walker"
,
"Walkersville"
,
"Walkerton"
,
"Walkertown"
,
"Walkerville"
,
"Wallaceton"
,
"Walland"
,
"Wallback"
,
"Wallburg"
,
"Walling"
,
"Wallingford"
,
"Wallisville"
,
"Wallkill"
,
"Wallowa"
,
"Wallsburg"
,
"Wallula"
,
"Walnutshade"
,
"Walsenburg"
,
"Walshville"
,
"Walston"
,
"Walstonburg"
,
"Walterboro"
,
"Waltersburg"
,
"Walterville"
,
"Walthall"
,
"Walthourville"
,
"Waltonville"
,
"Walworth"
,
"Wamego"
,
"Wampsville"
,
"Wampum"
,
"Wamsutter"
,
"Wana"
,
"Wanakena"
,
"Wanamingo"
,
"Wanaque"
,
"Wanatah"
,
"Wanblee"
,
"Wanchese"
,
"Wanda"
,
"Wando"
,
"Waneta"
,
"Wanette"
,
"Wann"
,
"Wannaska"
,
"Wantagh"
,
"Wapakoneta"
,
"Wapanucka"
,
"Wapella"
,
"Wapello"
,
"Wappapello"
,
"Wapwallopen"
,
"Warba"
,
"Warda"
,
"Wardell"
,
"Wardensville"
,
"Wardsboro"
,
"Wardtown"
,
"Wardville"
,
"Wareham"
,
"Waresboro"
,
"Wareshoals"
,
"Waretown"
,
"Warfield"
,
"Warfordsburg"
,
"Warminster"
,
"Warne"
,
"Warner"
,
"Warners"
,
"Warnerville"
,
"Warnock"
,
"Warrendale"
,
"Warrens"
,
"Warrensburg"
,
"Warrensville"
,
"Warrenton"
,
"Warrenville"
,
"Warrington"
,
"Wartburg"
,
"Warthen"
,
"Wartrace"
,
"Wasco"
,
"Wascott"
,
"Waseca"
,
"Washita"
,
"Washougal"
,
"Washta"
,
"Washtucna"
,
"Waskish"
,
"Waskom"
,
"Wasola"
,
"Wassaic"
,
"Wasta"
,
"Wataga"
,
"Watauga"
,
"Waterboro"
,
"Waterflow"
,
"Waterford"
,
"Waterport"
,
"Watersmeet"
,
"Waterview"
,
"Waterville"
,
"Watervliet"
,
"Watha"
,
"Wathena"
,
"Watkinsville"
,
"Watonga"
,
"Watrous"
,
"Watseka"
,
"Watsontown"
,
"Watsonville"
,
"Watton"
,
"Wattsburg"
,
"Wattsville"
,
"Waubun"
,
"Wauchula"
,
"Waucoma"
,
"Wauconda"
,
"Waukau"
,
"Waukee"
,
"Waukegan"
,
"Waukesha"
,
"Waukomis"
,
"Waukon"
,
"Wauna"
,
"Waunakee"
,
"Wauneta"
,
"Waupaca"
,
"Waupun"
,
"Wauregan"
,
"Waurika"
,
"Wausa"
,
"Wausau"
,
"Wausaukee"
,
"Wauseon"
,
"Wautoma"
,
"Wauzeka"
,
"Waveland"
,
"Waverley"
,
"Waverly"
,
"Waves"
,
"Wawaka"
,
"Wawarsing"
,
"Wawina"
,
"Waxahachie"
,
"Waxhaw"
,
"Wayan"
,
"Waycross"
,
"Wayland"
,
"Waymart"
,
"Waynesboro"
,
"Waynesburg"
,
"Waynesfield"
,
"Waynesville"
,
"Waynetown"
,
"Waynoka"
,
"Wayzata"
,
"Weare"
,
"Weatherby"
,
"Weatherford"
,
"Weatherly"
,
"Weatogue"
,
"Weaubleau"
,
"Weaver"
,
"Weaverville"
,
"Webber"
,
"Webberville"
,
"Webbville"
,
"Websterville"
,
"Wedderburn"
,
"Wedgefield"
,
"Wedowee"
,
"Wedron"
,
"Weedsport"
,
"Weedville"
,
"Weeksbury"
,
"Weems"
,
"Weepingwater"
,
"Weesatche"
,
"Weidman"
,
"Weikert"
,
"Weimar"
,
"Weiner"
,
"Weinert"
,
"Weippe"
,
"Weirsdale"
,
"Weirton"
,
"Weirwood"
,
"Weiser"
,
"Weissert"
,
"Welaka"
,
"Welches"
,
"Welda"
,
"Weldona"
,
"Weleetka"
,
"Wellborn"
,
"Wellford"
,
"Welling"
,
"Wellman"
,
"Wellpinit"
,
"Wellsboro"
,
"Wellsburg"
,
"Wellston"
,
"Wellsville"
,
"Wellton"
,
"Welton"
,
"Welty"
,
"Wenatchee"
,
"Wendel"
,
"Wenden"
,
"Wendover"
,
"Wenham"
,
"Wenona"
,
"Wenonah"
,
"Wentworth"
,
"Wentzville"
,
"Weogufka"
,
"Weott"
,
"Wernersville"
,
"Wesco"
,
"Weskan"
,
"Weslaco"
,
"Wessington"
,
"Wesson"
,
"Westby"
,
"Wethersfield"
,
"Wetmore"
,
"Wetumka"
,
"Wetumpka"
,
"Wever"
,
"Wevertown"
,
"Wewahitchka"
,
"Wewela"
,
"Wewoka"
,
"Wexford"
,
"Weyanoke"
,
"Weyauwega"
,
"Weyerhaeuser"
,
"Weymouth"
,
"Whalan"
,
"Whaleysville"
,
"Whallonsburg"
,
"Wharncliffe"
,
"Whately"
,
"Wheatcroft"
,
"Wheatfield"
,
"Wheatland"
,
"Wheatley"
,
"Wheaton"
,
"Wheeler"
,
"Wheelersburg"
,
"Wheeling"
,
"Wheelock"
,
"Wheelwright"
,
"Whick"
,
"Whigham"
,
"Whipholt"
,
"Whippleville"
,
"Whiskeytown"
,
"Whitakers"
,
"Whitby"
,
"Whitebird"
,
"Whiteclay"
,
"Whitefield"
,
"Whitefish"
,
"Whiteford"
,
"Whiteheath"
,
"Whitehouse"
,
"Whiteland"
,
"Whitelaw"
,
"Whiteowl"
,
"Whitepost"
,
"Whitesboro"
,
"Whitesburg"
,
"Whiteside"
,
"Whitestone"
,
"Whitestown"
,
"Whitesville"
,
"Whitethorn"
,
"Whiteville"
,
"Whitewater"
,
"Whitewood"
,
"Whitewright"
,
"Whitfield"
,
"Whitharral"
,
"Whiting"
,
"Whitingham"
,
"Whitinsville"
,
"Whitlash"
,
"Whitleyville"
,
"Whitmer"
,
"Whitmire"
,
"Whitmore"
,
"Whitneyville"
,
"Whitsett"
,
"Whitt"
,
"Whittemore"
,
"Whitten"
,
"Whittington"
,
"Whitwell"
,
"Whon"
,
"Wibaux"
,
"Wiborg"
,
"Wickatunk"
,
"Wickenburg"
,
"Wickes"
,
"Wickett"
,
"Wickliffe"
,
"Wicomico"
,
"Wiconisco"
,
"Wideman"
,
"Widener"
,
"Widnoon"
,
"Wikieup"
,
"Wilbar"
,
"Wilber"
,
"Wilberforce"
,
"Wilbraham"
,
"Wilburn"
,
"Wilburton"
,
"Wilcoe"
,
"Wilder"
,
"Wildersville"
,
"Wildhorse"
,
"Wildie"
,
"Wildomar"
,
"Wildorado"
,
"Wildrose"
,
"Wildsville"
,
"Wildwood"
,
"Wileyville"
,
"Wilkesbarre"
,
"Wilkesboro"
,
"Wilkeson"
,
"Wilkesville"
,
"Willacoochee"
,
"Willamina"
,
"Willards"
,
"Willcox"
,
"Willernie"
,
"Willet"
,
"Williamsfield"
,
"Williamsport"
,
"Williamston"
,
"Williamstown"
,
"Williamsville"
,
"Williford"
,
"Willimantic"
,
"Willingboro"
,
"Willisburg"
,
"Williston"
,
"Willisville"
,
"Willits"
,
"Willmar"
,
"Willows"
,
"Willowshade"
,
"Willowstreet"
,
"Willowwood"
,
"Willsboro"
,
"Willseyville"
,
"Willshire"
,
"Wilmar"
,
"Wilmer"
,
"Wilmerding"
,
"Wilmette"
,
"Wilmont"
,
"Wilmore"
,
"Wilmot"
,
"Wilsall"
,
"Wilsey"
,
"Wilseyville"
,
"Wilsie"
,
"Wilsonburg"
,
"Wilsondale"
,
"Wilsons"
,
"Wilsonville"
,
"Wilton"
,
"Wimauma"
,
"Wimberley"
,
"Wimbledon"
,
"Winamac"
,
"Winburne"
,
"Winchendon"
,
"Windber"
,
"Winder"
,
"Windermere"
,
"Windham"
,
"Windom"
,
"Windthorst"
,
"Windyville"
,
"Winesburg"
,
"Winfall"
,
"Winfred"
,
"Wingdale"
,
"Winger"
,
"Wingina"
,
"Wingo"
,
"Winifrede"
,
"Winigan"
,
"Winkelman"
,
"Winlock"
,
"Winn"
,
"Winnabow"
,
"Winnebago"
,
"Winneconne"
,
"Winnemucca"
,
"Winner"
,
"Winnetoon"
,
"Winnett"
,
"Winnfield"
,
"Winnisquam"
,
"Winnsboro"
,
"Winona"
,
"Winside"
,
"Winsted"
,
"Winston"
,
"Winstonville"
,
"Winterport"
,
"Winterset"
,
"Winterthur"
,
"Winterville"
,
"Winton"
,
"Wiota"
,
"Wirtz"
,
"Wisacky"
,
"Wiscasset"
,
"Wiseman"
,
"Wishek"
,
"Wishram"
,
"Wisner"
,
"Wister"
,
"Withams"
,
"Withee"
,
"Witherbee"
,
"Witmer"
,
"Witten"
,
"Wittenberg"
,
"Wittensville"
,
"Witter"
,
"Wittman"
,
"Wittmann"
,
"Wixom"
,
"Woburn"
,
"Woden"
,
"Wolbach"
,
"Wolcottville"
,
"Wolfcoal"
,
"Wolfeboro"
,
"Wolfforth"
,
"Wolford"
,
"Wolfpen"
,
"Wolftown"
,
"Wollaston"
,
"Wolsey"
,
"Wolverine"
,
"Wolverton"
,
"Womelsdorf"
,
"Wonalancet"
,
"Wonewoc"
,
"Wonnie"
,
"Woodacre"
,
"Woodbine"
,
"Woodbourne"
,
"Woodburn"
,
"Wooddale"
,
"Woodfield"
,
"Woodford"
,
"Woodhull"
,
"Woodinville"
,
"Woodleaf"
,
"Woodlyn"
,
"Woodman"
,
"Woodmere"
,
"Woodsboro"
,
"Woodscross"
,
"Woodsfield"
,
"Woodshole"
,
"Woodson"
,
"Woodstock"
,
"Woodston"
,
"Woodstown"
,
"Woodsville"
,
"Woodville"
,
"Woodworth"
,
"Woolford"
,
"Woollum"
,
"Woolrich"
,
"Woolstock"
,
"Woolwich"
,
"Woolwine"
,
"Woonsocket"
,
"Woosung"
,
"Wooton"
,
"Worden"
,
"Worland"
,
"Worley"
,
"Woronoco"
,
"Wortham"
,
"Worthing"
,
"Worthville"
,
"Worton"
,
"Woxall"
,
"Wray"
,
"Wren"
,
"Wrens"
,
"Wrenshall"
,
"Wrentham"
,
"Wrights"
,
"Wrightsboro"
,
"Wrightstown"
,
"Wrightsville"
,
"Wrightwood"
,
"Wurtsboro"
,
"Wyaconda"
,
"Wyalusing"
,
"Wyanet"
,
"Wyano"
,
"Wyarno"
,
"Wyckoff"
,
"Wyco"
,
"Wycombe"
,
"Wyeville"
,
"Wykoff"
,
"Wylliesburg"
,
"Wymer"
,
"Wymore"
,
"Wynantskill"
,
"Wyncote"
,
"Wyndmere"
,
"Wynnburg"
,
"Wynne"
,
"Wynnewood"
,
"Wynona"
,
"Wynot"
,
"Wyocena"
,
"Wyola"
,
"Wyoming"
,
"Wysox"
,
"Wytheville"
,
"Wytopitlock"
,
"Xenia"
,
"Yabucoa"
,
"Yachats"
,
"Yacolt"
,
"Yadkinville"
,
"Yalaha"
,
"Yampa"
,
"Yancey"
,
"Yanceyville"
,
"Yankeetown"
,
"Yantic"
,
"Yantis"
,
"Yaphank"
,
"Yards"
,
"Yarnell"
,
"Yatesboro"
,
"Yatesville"
,
"Yauco"
,
"Yawkey"
,
"Yeaddiss"
,
"Yeagertown"
,
"Yellowstone"
,
"Yellville"
,
"Yelm"
,
"Yemassee"
,
"Yerington"
,
"Yermo"
,
"Yeso"
,
"Yettem"
,
"Yoakum"
,
"Yolo"
,
"Yolyn"
,
"Yoncalla"
,
"York"
,
"Yorklyn"
,
"Yorkshire"
,
"Yorkville"
,
"Yosemite"
,
"Youngsville"
,
"Youngtown"
,
"Youngwood"
,
"Yountville"
,
"Yreka"
,
"Yucaipa"
,
"Yulan"
,
"Yulee"
,
"Yuma"
,
"Yutan"
,
"Zacata"
,
"Zachariah"
,
"Zachow"
,
"Zahl"
,
"Zaleski"
,
"Zalma"
,
"Zamora"
,
"Zanesfield"
,
"Zanesville"
,
"Zanoni"
,
"Zapata"
,
"Zavalla"
,
"Zearing"
,
"Zebulon"
,
"Zeeland"
,
"Zeigler"
,
"Zelienople"
,
"Zell"
,
"Zellwood"
,
"Zenda"
,
"Zenia"
,
"Zeona"
,
"Zephyr"
,
"Zieglerville"
,
"Zillah"
,
"Zim"
,
"Zionsville"
,
"Zionville"
,
"Zirconia"
,
"Zoar"
,
"Zortman"
,
"Zullinger"
,
"Zumbrota"
,
"Zuni"
,
"Zwingle"
,
"Zwolle"
]

},{}],176:[function(require,module,exports){
(function (global){
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    __extends = function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function (m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    };

    __values = function (o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator];
        return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],177:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;

},{}],178:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],179:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":177,"./lib/rng":178}],180:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
